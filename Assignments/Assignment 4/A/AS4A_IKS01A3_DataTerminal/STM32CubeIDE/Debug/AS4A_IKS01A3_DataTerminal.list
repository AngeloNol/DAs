
AS4A_IKS01A3_DataTerminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800fb88  0800fb88  0001fb88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010088  08010088  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010088  08010088  00020088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010090  08010090  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010090  08010090  00020090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010094  08010094  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010098  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000200  08010298  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08010298  00030678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_line   00025613  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00037ec4  00000000  00000000  00055843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004731  00000000  00000000  0008d707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cb8  00000000  00000000  00091e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ffb6e  00000000  00000000  00094af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002ae8  00000000  00000000  00194660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa27  00000000  00000000  00197148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c1b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cdf4  00000000  00000000  001c1bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb6c 	.word	0x0800fb6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800fb6c 	.word	0x0800fb6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b974 	b.w	8000f38 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	468e      	mov	lr, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4694      	mov	ip, r2
 8000c7a:	d969      	bls.n	8000d50 <__udivmoddi4+0xe8>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b152      	cbz	r2, 8000c98 <__udivmoddi4+0x30>
 8000c82:	fa01 f302 	lsl.w	r3, r1, r2
 8000c86:	f1c2 0120 	rsb	r1, r2, #32
 8000c8a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c8e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c92:	ea41 0e03 	orr.w	lr, r1, r3
 8000c96:	4094      	lsls	r4, r2
 8000c98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c9c:	0c21      	lsrs	r1, r4, #16
 8000c9e:	fbbe f6f8 	udiv	r6, lr, r8
 8000ca2:	fa1f f78c 	uxth.w	r7, ip
 8000ca6:	fb08 e316 	mls	r3, r8, r6, lr
 8000caa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cae:	fb06 f107 	mul.w	r1, r6, r7
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cbe:	f080 811f 	bcs.w	8000f00 <__udivmoddi4+0x298>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 811c 	bls.w	8000f00 <__udivmoddi4+0x298>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a5b      	subs	r3, r3, r1
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cdc:	fb00 f707 	mul.w	r7, r0, r7
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	d90a      	bls.n	8000cfa <__udivmoddi4+0x92>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	f080 810a 	bcs.w	8000f04 <__udivmoddi4+0x29c>
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	f240 8107 	bls.w	8000f04 <__udivmoddi4+0x29c>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfe:	1be4      	subs	r4, r4, r7
 8000d00:	2600      	movs	r6, #0
 8000d02:	b11d      	cbz	r5, 8000d0c <__udivmoddi4+0xa4>
 8000d04:	40d4      	lsrs	r4, r2
 8000d06:	2300      	movs	r3, #0
 8000d08:	e9c5 4300 	strd	r4, r3, [r5]
 8000d0c:	4631      	mov	r1, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0xc2>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80ef 	beq.w	8000efa <__udivmoddi4+0x292>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x160>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0xd4>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80f9 	bhi.w	8000f2e <__udivmoddi4+0x2c6>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	469e      	mov	lr, r3
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0e0      	beq.n	8000d0c <__udivmoddi4+0xa4>
 8000d4a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d4e:	e7dd      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000d50:	b902      	cbnz	r2, 8000d54 <__udivmoddi4+0xec>
 8000d52:	deff      	udf	#255	; 0xff
 8000d54:	fab2 f282 	clz	r2, r2
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f040 8092 	bne.w	8000e82 <__udivmoddi4+0x21a>
 8000d5e:	eba1 010c 	sub.w	r1, r1, ip
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	0c20      	lsrs	r0, r4, #16
 8000d6e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d72:	fb07 1113 	mls	r1, r7, r3, r1
 8000d76:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7a:	fb0e f003 	mul.w	r0, lr, r3
 8000d7e:	4288      	cmp	r0, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x12c>
 8000d82:	eb1c 0101 	adds.w	r1, ip, r1
 8000d86:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x12a>
 8000d8c:	4288      	cmp	r0, r1
 8000d8e:	f200 80cb 	bhi.w	8000f28 <__udivmoddi4+0x2c0>
 8000d92:	4643      	mov	r3, r8
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d9c:	fb07 1110 	mls	r1, r7, r0, r1
 8000da0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000da4:	fb0e fe00 	mul.w	lr, lr, r0
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x156>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d202      	bcs.n	8000dbc <__udivmoddi4+0x154>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f200 80bb 	bhi.w	8000f32 <__udivmoddi4+0x2ca>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dc6:	e79c      	b.n	8000d02 <__udivmoddi4+0x9a>
 8000dc8:	f1c6 0720 	rsb	r7, r6, #32
 8000dcc:	40b3      	lsls	r3, r6
 8000dce:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	431c      	orrs	r4, r3
 8000de0:	40f9      	lsrs	r1, r7
 8000de2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000de6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dea:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fb09 1118 	mls	r1, r9, r8, r1
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	fb08 f00e 	mul.w	r0, r8, lr
 8000e00:	4288      	cmp	r0, r1
 8000e02:	fa02 f206 	lsl.w	r2, r2, r6
 8000e06:	d90b      	bls.n	8000e20 <__udivmoddi4+0x1b8>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e10:	f080 8088 	bcs.w	8000f24 <__udivmoddi4+0x2bc>
 8000e14:	4288      	cmp	r0, r1
 8000e16:	f240 8085 	bls.w	8000f24 <__udivmoddi4+0x2bc>
 8000e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	b2a4      	uxth	r4, r4
 8000e24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e28:	fb09 1110 	mls	r1, r9, r0, r1
 8000e2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e34:	458e      	cmp	lr, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1e2>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e40:	d26c      	bcs.n	8000f1c <__udivmoddi4+0x2b4>
 8000e42:	458e      	cmp	lr, r1
 8000e44:	d96a      	bls.n	8000f1c <__udivmoddi4+0x2b4>
 8000e46:	3802      	subs	r0, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e52:	eba1 010e 	sub.w	r1, r1, lr
 8000e56:	42a1      	cmp	r1, r4
 8000e58:	46c8      	mov	r8, r9
 8000e5a:	46a6      	mov	lr, r4
 8000e5c:	d356      	bcc.n	8000f0c <__udivmoddi4+0x2a4>
 8000e5e:	d053      	beq.n	8000f08 <__udivmoddi4+0x2a0>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x212>
 8000e62:	ebb3 0208 	subs.w	r2, r3, r8
 8000e66:	eb61 010e 	sbc.w	r1, r1, lr
 8000e6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e72:	40f1      	lsrs	r1, r6
 8000e74:	431f      	orrs	r7, r3
 8000e76:	e9c5 7100 	strd	r7, r1, [r5]
 8000e7a:	2600      	movs	r6, #0
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	40d8      	lsrs	r0, r3
 8000e88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e90:	4091      	lsls	r1, r2
 8000e92:	4301      	orrs	r1, r0
 8000e94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e98:	fa1f fe8c 	uxth.w	lr, ip
 8000e9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ea0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ea4:	0c0b      	lsrs	r3, r1, #16
 8000ea6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000eae:	429e      	cmp	r6, r3
 8000eb0:	fa04 f402 	lsl.w	r4, r4, r2
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x260>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebe:	d22f      	bcs.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec0:	429e      	cmp	r6, r3
 8000ec2:	d92d      	bls.n	8000f20 <__udivmoddi4+0x2b8>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	1b9b      	subs	r3, r3, r6
 8000eca:	b289      	uxth	r1, r1
 8000ecc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ed0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ed4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed8:	fb06 f30e 	mul.w	r3, r6, lr
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x28a>
 8000ee0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ee8:	d216      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d914      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000eee:	3e02      	subs	r6, #2
 8000ef0:	4461      	add	r1, ip
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ef8:	e738      	b.n	8000d6c <__udivmoddi4+0x104>
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e705      	b.n	8000d0c <__udivmoddi4+0xa4>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e3      	b.n	8000ccc <__udivmoddi4+0x64>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6f8      	b.n	8000cfa <__udivmoddi4+0x92>
 8000f08:	454b      	cmp	r3, r9
 8000f0a:	d2a9      	bcs.n	8000e60 <__udivmoddi4+0x1f8>
 8000f0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7a3      	b.n	8000e60 <__udivmoddi4+0x1f8>
 8000f18:	4646      	mov	r6, r8
 8000f1a:	e7ea      	b.n	8000ef2 <__udivmoddi4+0x28a>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	e794      	b.n	8000e4a <__udivmoddi4+0x1e2>
 8000f20:	4640      	mov	r0, r8
 8000f22:	e7d1      	b.n	8000ec8 <__udivmoddi4+0x260>
 8000f24:	46d0      	mov	r8, sl
 8000f26:	e77b      	b.n	8000e20 <__udivmoddi4+0x1b8>
 8000f28:	3b02      	subs	r3, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	e732      	b.n	8000d94 <__udivmoddi4+0x12c>
 8000f2e:	4630      	mov	r0, r6
 8000f30:	e709      	b.n	8000d46 <__udivmoddi4+0xde>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	e742      	b.n	8000dbe <__udivmoddi4+0x156>

08000f38 <__aeabi_idiv0>:
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop

08000f3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f40:	f009 f936 	bl	800a1b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopForever+0xe>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopForever+0x16>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f00c fd07 	bl	800d97c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f6e:	f000 fed1 	bl	8001d14 <main>

08000f72 <LoopForever>:

LoopForever:
    b LoopForever
 8000f72:	e7fe      	b.n	8000f72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8000f80:	08010098 	.word	0x08010098
  ldr r2, =_sbss
 8000f84:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000f88:	20000678 	.word	0x20000678

08000f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC1_2_IRQHandler>

08000f8e <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS01A3_DataLogTerminal_Init(void);
static void MX_IKS01A3_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Init_PreTreatment */

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */
  MX_IKS01A3_DataLogTerminal_Init();
 8000f92:	f000 f809 	bl	8000fa8 <MX_IKS01A3_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS01A3_DataLogTerminal_Process();
 8000f9e:	f000 f9c7 	bl	8001330 <MX_IKS01A3_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_IKS01A3_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Init(void)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f008 ff10 	bl	8009dd4 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f008 ff5c 	bl	8009e74 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f008 ffad 	bl	8009f1c <BSP_PB_GetState>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf0c      	ite	eq
 8000fc8:	2301      	moveq	r3, #1
 8000fca:	2300      	movne	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b75      	ldr	r3, [pc, #468]	; (80011a8 <MX_IKS01A3_DataLogTerminal_Init+0x200>)
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f008 ffff 	bl	8009fd8 <BSP_COM_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8000fda:	2103      	movs	r1, #3
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f008 facd 	bl	800957c <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2DW12_0, MOTION_ACCELERO);
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f008 fac9 	bl	800957c <IKS01A3_MOTION_SENSOR_Init>

  IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 8000fea:	2104      	movs	r1, #4
 8000fec:	2002      	movs	r0, #2
 8000fee:	f008 fac5 	bl	800957c <IKS01A3_MOTION_SENSOR_Init>

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	e0c3      	b.n	8001180 <MX_IKS01A3_DataLogTerminal_Init+0x1d8>
  {
    IKS01A3_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	1a9b      	subs	r3, r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4a69      	ldr	r2, [pc, #420]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001006:	4413      	add	r3, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f008 fbb3 	bl	8009774 <IKS01A3_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800100e:	4967      	ldr	r1, [pc, #412]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4613      	mov	r3, r2
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	1a9b      	subs	r3, r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	440b      	add	r3, r1
 800101c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800101e:	4618      	mov	r0, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001020:	4962      	ldr	r1, [pc, #392]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3301      	adds	r3, #1
 8001030:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001032:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001034:	495d      	ldr	r1, [pc, #372]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3302      	adds	r3, #2
 8001044:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001046:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8001048:	4958      	ldr	r1, [pc, #352]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3303      	adds	r3, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800105a:	9303      	str	r3, [sp, #12]
 800105c:	9502      	str	r5, [sp, #8]
 800105e:	9401      	str	r4, [sp, #4]
 8001060:	9000      	str	r0, [sp, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <MX_IKS01A3_DataLogTerminal_Init+0x208>)
 8001066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106a:	4852      	ldr	r0, [pc, #328]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800106c:	f00c fcca 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 8001070:	4950      	ldr	r1, [pc, #320]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 8001072:	4851      	ldr	r0, [pc, #324]	; (80011b8 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 8001074:	f00c fcae 	bl	800d9d4 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8001078:	494c      	ldr	r1, [pc, #304]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3314      	adds	r3, #20
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	463b      	mov	r3, r7
 800108e:	2103      	movs	r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	f000 f9d7 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800109e:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010a0:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80010a2:	4942      	ldr	r1, [pc, #264]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	3308      	adds	r3, #8
 80010b2:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	9000      	str	r0, [sp, #0]
 80010b8:	4623      	mov	r3, r4
 80010ba:	4a40      	ldr	r2, [pc, #256]	; (80011bc <MX_IKS01A3_DataLogTerminal_Init+0x214>)
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	483c      	ldr	r0, [pc, #240]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 80010c2:	f00c fc9f 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 80010c6:	493b      	ldr	r1, [pc, #236]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 80010c8:	483b      	ldr	r0, [pc, #236]	; (80011b8 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 80010ca:	f00c fc83 	bl	800d9d4 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 80010ce:	4937      	ldr	r1, [pc, #220]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3310      	adds	r3, #16
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	463b      	mov	r3, r7
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	f000 f9ac 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80010f4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80010f6:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 80010f8:	492c      	ldr	r1, [pc, #176]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	9000      	str	r0, [sp, #0]
 800110e:	4623      	mov	r3, r4
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <MX_IKS01A3_DataLogTerminal_Init+0x218>)
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	4827      	ldr	r0, [pc, #156]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 8001118:	f00c fc74 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 800111c:	4925      	ldr	r1, [pc, #148]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800111e:	4826      	ldr	r0, [pc, #152]	; (80011b8 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 8001120:	f00c fc58 	bl	800d9d4 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8001124:	4921      	ldr	r1, [pc, #132]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	1a9b      	subs	r3, r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	3318      	adds	r3, #24
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	463b      	mov	r3, r7
 800113a:	2103      	movs	r1, #3
 800113c:	4618      	mov	r0, r3
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	f000 f981 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800114a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800114c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800114e:	4917      	ldr	r1, [pc, #92]	; (80011ac <MX_IKS01A3_DataLogTerminal_Init+0x204>)
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	330c      	adds	r3, #12
 800115e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	9000      	str	r0, [sp, #0]
 8001164:	4623      	mov	r3, r4
 8001166:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <MX_IKS01A3_DataLogTerminal_Init+0x21c>)
 8001168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 800116e:	f00c fc49 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 8001172:	4910      	ldr	r1, [pc, #64]	; (80011b4 <MX_IKS01A3_DataLogTerminal_Init+0x20c>)
 8001174:	4810      	ldr	r0, [pc, #64]	; (80011b8 <MX_IKS01A3_DataLogTerminal_Init+0x210>)
 8001176:	f00c fc2d 	bl	800d9d4 <iprintf>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b02      	cmp	r3, #2
 8001184:	f67f af38 	bls.w	8000ff8 <MX_IKS01A3_DataLogTerminal_Init+0x50>
  }

  IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8001188:	2105      	movs	r1, #5
 800118a:	2000      	movs	r0, #0
 800118c:	f007 fe04 	bl	8008d98 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8001190:	2103      	movs	r1, #3
 8001192:	2001      	movs	r0, #1
 8001194:	f007 fe00 	bl	8008d98 <IKS01A3_ENV_SENSOR_Init>

  IKS01A3_ENV_SENSOR_Init(IKS01A3_STTS751_0, ENV_TEMPERATURE);
 8001198:	2101      	movs	r1, #1
 800119a:	2002      	movs	r0, #2
 800119c:	f007 fdfc 	bl	8008d98 <IKS01A3_ENV_SENSOR_Init>

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e09c      	b.n	80012e0 <MX_IKS01A3_DataLogTerminal_Init+0x338>
 80011a6:	bf00      	nop
 80011a8:	200003a4 	.word	0x200003a4
 80011ac:	20000220 	.word	0x20000220
 80011b0:	0800fb88 	.word	0x0800fb88
 80011b4:	200002a4 	.word	0x200002a4
 80011b8:	0800fbfc 	.word	0x0800fbfc
 80011bc:	0800fc00 	.word	0x0800fc00
 80011c0:	0800fc2c 	.word	0x0800fc2c
 80011c4:	0800fc5c 	.word	0x0800fc5c
  {
    IKS01A3_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4949      	ldr	r1, [pc, #292]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 80011d0:	440b      	add	r3, r1
 80011d2:	4619      	mov	r1, r3
 80011d4:	4610      	mov	r0, r2
 80011d6:	f007 fedb 	bl	8008f90 <IKS01A3_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80011da:	4a46      	ldr	r2, [pc, #280]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80011e4:	4619      	mov	r1, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80011e6:	4a43      	ldr	r2, [pc, #268]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	3301      	adds	r3, #1
 80011f0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80011f2:	4618      	mov	r0, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80011f4:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	3302      	adds	r3, #2
 80011fe:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8001200:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8001202:	4a3c      	ldr	r2, [pc, #240]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	3303      	adds	r3, #3
 800120c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	9402      	str	r4, [sp, #8]
 8001212:	9001      	str	r0, [sp, #4]
 8001214:	9100      	str	r1, [sp, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a37      	ldr	r2, [pc, #220]	; (80012f8 <MX_IKS01A3_DataLogTerminal_Init+0x350>)
 800121a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121e:	4837      	ldr	r0, [pc, #220]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 8001220:	f00c fbf0 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 8001226:	4836      	ldr	r0, [pc, #216]	; (8001300 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 8001228:	f00c fbd4 	bl	800d9d4 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800122c:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	3308      	adds	r3, #8
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	463b      	mov	r3, r7
 800123c:	2103      	movs	r1, #3
 800123e:	4618      	mov	r0, r3
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	f000 f900 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800124c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	4613      	mov	r3, r2
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <MX_IKS01A3_DataLogTerminal_Init+0x35c>)
 8001254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001258:	4828      	ldr	r0, [pc, #160]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800125a:	f00c fbd3 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 800125e:	4927      	ldr	r1, [pc, #156]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 8001260:	4827      	ldr	r0, [pc, #156]	; (8001300 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 8001262:	f00c fbb7 	bl	800d9d4 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	330c      	adds	r3, #12
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	463b      	mov	r3, r7
 8001276:	2103      	movs	r1, #3
 8001278:	4618      	mov	r0, r3
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	f000 f8e3 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8001286:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	4613      	mov	r3, r2
 800128c:	4a1e      	ldr	r2, [pc, #120]	; (8001308 <MX_IKS01A3_DataLogTerminal_Init+0x360>)
 800128e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001292:	481a      	ldr	r0, [pc, #104]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 8001294:	f00c fbb6 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 8001298:	4918      	ldr	r1, [pc, #96]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 800129a:	4819      	ldr	r0, [pc, #100]	; (8001300 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 800129c:	f00c fb9a 	bl	800d9d4 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <MX_IKS01A3_DataLogTerminal_Init+0x34c>)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	4413      	add	r3, r2
 80012a8:	3304      	adds	r3, #4
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	463b      	mov	r3, r7
 80012b0:	2103      	movs	r1, #3
 80012b2:	4618      	mov	r0, r3
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	f000 f8c6 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	461a      	mov	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <MX_IKS01A3_DataLogTerminal_Init+0x364>)
 80012c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012cc:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 80012ce:	f00c fb99 	bl	800da04 <sniprintf>
    printf("%s", dataOut);
 80012d2:	490a      	ldr	r1, [pc, #40]	; (80012fc <MX_IKS01A3_DataLogTerminal_Init+0x354>)
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <MX_IKS01A3_DataLogTerminal_Init+0x358>)
 80012d6:	f00c fb7d 	bl	800d9d4 <iprintf>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	f67f af70 	bls.w	80011c8 <MX_IKS01A3_DataLogTerminal_Init+0x220>
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000274 	.word	0x20000274
 80012f8:	0800fc88 	.word	0x0800fc88
 80012fc:	200002a4 	.word	0x200002a4
 8001300:	0800fbfc 	.word	0x0800fbfc
 8001304:	0800fcfc 	.word	0x0800fcfc
 8001308:	0800fd18 	.word	0x0800fd18
 800130c:	0800fd38 	.word	0x0800fd38

08001310 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <BSP_PB_Callback+0x1c>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	2000021c 	.word	0x2000021c

08001330 <MX_IKS01A3_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS01A3_DataLogTerminal_Process(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  int i;

  if (PushButtonDetected != 0U)
 8001336:	4b40      	ldr	r3, [pc, #256]	; (8001438 <MX_IKS01A3_DataLogTerminal_Process+0x108>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	d011      	beq.n	8001364 <MX_IKS01A3_DataLogTerminal_Process+0x34>
  {
    /* Debouncing */
    HAL_Delay(50);
 8001340:	2032      	movs	r0, #50	; 0x32
 8001342:	f008 ffc3 	bl	800a2cc <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 8001346:	bf00      	nop
 8001348:	2000      	movs	r0, #0
 800134a:	f008 fde7 	bl	8009f1c <BSP_PB_GetState>
 800134e:	4602      	mov	r2, r0
 8001350:	4b3a      	ldr	r3, [pc, #232]	; (800143c <MX_IKS01A3_DataLogTerminal_Process+0x10c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d0f7      	beq.n	8001348 <MX_IKS01A3_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8001358:	2032      	movs	r0, #50	; 0x32
 800135a:	f008 ffb7 	bl	800a2cc <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <MX_IKS01A3_DataLogTerminal_Process+0x108>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]

    /* Do nothing */
  }

  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	e02e      	b.n	80013c8 <MX_IKS01A3_DataLogTerminal_Process+0x98>
  {
    if(MotionCapabilities[i].Acc)
 800136a:	4935      	ldr	r1, [pc, #212]	; (8001440 <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	1a9b      	subs	r3, r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <MX_IKS01A3_DataLogTerminal_Process+0x56>
    {
      Accelero_Sensor_Handler(i);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f8eb 	bl	800155c <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 8001386:	492e      	ldr	r1, [pc, #184]	; (8001440 <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	3301      	adds	r3, #1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <MX_IKS01A3_DataLogTerminal_Process+0x74>
    {
      Gyro_Sensor_Handler(i);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f990 	bl	80016c4 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 80013a4:	4926      	ldr	r1, [pc, #152]	; (8001440 <MX_IKS01A3_DataLogTerminal_Process+0x110>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3302      	adds	r3, #2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <MX_IKS01A3_DataLogTerminal_Process+0x92>
    {
      Magneto_Sensor_Handler(i);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fa35 	bl	800182c <Magneto_Sensor_Handler>
  for(i = 0; i < IKS01A3_MOTION_INSTANCES_NBR; i++)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3301      	adds	r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d9cd      	bls.n	800136a <MX_IKS01A3_DataLogTerminal_Process+0x3a>
    }
  }

  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	e025      	b.n	8001420 <MX_IKS01A3_DataLogTerminal_Process+0xf0>
  {
    if(EnvCapabilities[i].Humidity)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	3302      	adds	r3, #2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <MX_IKS01A3_DataLogTerminal_Process+0xbc>
    {
      Hum_Sensor_Handler(i);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fc02 	bl	8001bf0 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4413      	add	r3, r2
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <MX_IKS01A3_DataLogTerminal_Process+0xd2>
    {
      Temp_Sensor_Handler(i);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fac9 	bl	8001994 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <MX_IKS01A3_DataLogTerminal_Process+0x114>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	4413      	add	r3, r2
 800140a:	3301      	adds	r3, #1
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <MX_IKS01A3_DataLogTerminal_Process+0xea>
    {
      Press_Sensor_Handler(i);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fb59 	bl	8001acc <Press_Sensor_Handler>
  for(i = 0; i < IKS01A3_ENV_INSTANCES_NBR; i++)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3301      	adds	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d9d6      	bls.n	80013d4 <MX_IKS01A3_DataLogTerminal_Process+0xa4>
    }
  }

  HAL_Delay( 1000 );
 8001426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142a:	f008 ff4f 	bl	800a2cc <HAL_Delay>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000021c 	.word	0x2000021c
 800143c:	200003a4 	.word	0x200003a4
 8001440:	20000220 	.word	0x20000220
 8001444:	20000274 	.word	0x20000274

08001448 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001452:	60b8      	str	r0, [r7, #8]
 8001454:	6079      	str	r1, [r7, #4]
  if(in >= 0.0f)
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	db03      	blt.n	800146c <floatToInt+0x24>
  {
    out_value->sign = 0;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
 800146a:	e008      	b.n	800147e <floatToInt+0x36>
  }else
  {
    out_value->sign = 1;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
    in = -in;
 8001472:	edd7 7a03 	vldr	s15, [r7, #12]
 8001476:	eef1 7a67 	vneg.f32	s15, s15
 800147a:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / pow(10, dec_prec));
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff f85a 	bl	8000538 <__aeabi_f2d>
 8001484:	4604      	mov	r4, r0
 8001486:	460d      	mov	r5, r1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff f843 	bl	8000514 <__aeabi_i2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	ec43 2b11 	vmov	d1, r2, r3
 8001496:	ed9f 0b2e 	vldr	d0, [pc, #184]	; 8001550 <floatToInt+0x108>
 800149a:	f00d fc4b 	bl	800ed34 <pow>
 800149e:	ec53 2b10 	vmov	r2, r3, d0
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	492c      	ldr	r1, [pc, #176]	; (8001558 <floatToInt+0x110>)
 80014a8:	f7ff f9c8 	bl	800083c <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe fee2 	bl	800027c <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb6a 	bl	8000b98 <__aeabi_d2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	60fb      	str	r3, [r7, #12]
  out_value->out_int = (int32_t)in;
 80014c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d0:	ee17 2a90 	vmov	r2, s15
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ec:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc(in * pow(10, dec_prec));
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7ff f821 	bl	8000538 <__aeabi_f2d>
 80014f6:	4604      	mov	r4, r0
 80014f8:	460d      	mov	r5, r1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f80a 	bl	8000514 <__aeabi_i2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ec43 2b11 	vmov	d1, r2, r3
 8001508:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8001550 <floatToInt+0x108>
 800150c:	f00d fc12 	bl	800ed34 <pow>
 8001510:	ec53 2b10 	vmov	r2, r3, d0
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7ff f866 	bl	80005e8 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ec43 2b17 	vmov	d7, r2, r3
 8001524:	eeb0 0a47 	vmov.f32	s0, s14
 8001528:	eef0 0a67 	vmov.f32	s1, s15
 800152c:	f00d fbd0 	bl	800ecd0 <trunc>
 8001530:	ec53 2b10 	vmov	r2, r3, d0
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb06 	bl	8000b48 <__aeabi_d2iz>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	609a      	str	r2, [r3, #8]
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	f3af 8000 	nop.w
 8001550:	00000000 	.word	0x00000000
 8001554:	40240000 	.word	0x40240000
 8001558:	3fe00000 	.word	0x3fe00000

0800155c <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b092      	sub	sp, #72	; 0x48
 8001560:	af06      	add	r7, sp, #24
 8001562:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	461a      	mov	r2, r3
 800156a:	2102      	movs	r1, #2
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f008 f955 	bl	800981c <IKS01A3_MOTION_SENSOR_GetAxes>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <Accelero_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a47      	ldr	r2, [pc, #284]	; (8001698 <Accelero_Sensor_Handler+0x13c>)
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	4846      	ldr	r0, [pc, #280]	; (800169c <Accelero_Sensor_Handler+0x140>)
 8001582:	f00c fa3f 	bl	800da04 <sniprintf>
 8001586:	e011      	b.n	80015ac <Accelero_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8001588:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800158a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800158c:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800158e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8001590:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8001592:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8001594:	9404      	str	r4, [sp, #16]
 8001596:	9003      	str	r0, [sp, #12]
 8001598:	9102      	str	r1, [sp, #8]
 800159a:	9201      	str	r2, [sp, #4]
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	462b      	mov	r3, r5
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <Accelero_Sensor_Handler+0x144>)
 80015a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a6:	483d      	ldr	r0, [pc, #244]	; (800169c <Accelero_Sensor_Handler+0x140>)
 80015a8:	f00c fa2c 	bl	800da04 <sniprintf>
  }

  printf("%s", dataOut);
 80015ac:	493b      	ldr	r1, [pc, #236]	; (800169c <Accelero_Sensor_Handler+0x140>)
 80015ae:	483d      	ldr	r0, [pc, #244]	; (80016a4 <Accelero_Sensor_Handler+0x148>)
 80015b0:	f00c fa10 	bl	800d9d4 <iprintf>

  if (verbose == 1)
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <Accelero_Sensor_Handler+0x14c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d168      	bne.n	800168e <Accelero_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 80015bc:	f107 030f 	add.w	r3, r7, #15
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f008 f900 	bl	80097c8 <IKS01A3_MOTION_SENSOR_ReadID>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <Accelero_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a36      	ldr	r2, [pc, #216]	; (80016ac <Accelero_Sensor_Handler+0x150>)
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	4831      	ldr	r0, [pc, #196]	; (800169c <Accelero_Sensor_Handler+0x140>)
 80015d8:	f00c fa14 	bl	800da04 <sniprintf>
 80015dc:	e008      	b.n	80015f0 <Accelero_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	9200      	str	r2, [sp, #0]
 80015e4:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <Accelero_Sensor_Handler+0x154>)
 80015e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ea:	482c      	ldr	r0, [pc, #176]	; (800169c <Accelero_Sensor_Handler+0x140>)
 80015ec:	f00c fa0a 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 80015f0:	492a      	ldr	r1, [pc, #168]	; (800169c <Accelero_Sensor_Handler+0x140>)
 80015f2:	482c      	ldr	r0, [pc, #176]	; (80016a4 <Accelero_Sensor_Handler+0x148>)
 80015f4:	f00c f9ee 	bl	800d9d4 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 80015f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fc:	461a      	mov	r2, r3
 80015fe:	2102      	movs	r1, #2
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f008 f94f 	bl	80098a4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d007      	beq.n	800161c <Accelero_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a29      	ldr	r2, [pc, #164]	; (80016b4 <Accelero_Sensor_Handler+0x158>)
 8001610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001614:	4821      	ldr	r0, [pc, #132]	; (800169c <Accelero_Sensor_Handler+0x140>)
 8001616:	f00c f9f5 	bl	800da04 <sniprintf>
 800161a:	e014      	b.n	8001646 <Accelero_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800161c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	2103      	movs	r1, #3
 8001626:	4618      	mov	r0, r3
 8001628:	eeb0 0a67 	vmov.f32	s0, s15
 800162c:	f7ff ff0c 	bl	8001448 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8001634:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001636:	9101      	str	r1, [sp, #4]
 8001638:	9200      	str	r2, [sp, #0]
 800163a:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <Accelero_Sensor_Handler+0x15c>)
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <Accelero_Sensor_Handler+0x140>)
 8001642:	f00c f9df 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001646:	4915      	ldr	r1, [pc, #84]	; (800169c <Accelero_Sensor_Handler+0x140>)
 8001648:	4816      	ldr	r0, [pc, #88]	; (80016a4 <Accelero_Sensor_Handler+0x148>)
 800164a:	f00c f9c3 	bl	800d9d4 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800164e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001652:	461a      	mov	r2, r3
 8001654:	2102      	movs	r1, #2
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f008 f968 	bl	800992c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <Accelero_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a15      	ldr	r2, [pc, #84]	; (80016bc <Accelero_Sensor_Handler+0x160>)
 8001666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <Accelero_Sensor_Handler+0x140>)
 800166c:	f00c f9ca 	bl	800da04 <sniprintf>
 8001670:	e009      	b.n	8001686 <Accelero_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <Accelero_Sensor_Handler+0x164>)
 800167c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <Accelero_Sensor_Handler+0x140>)
 8001682:	f00c f9bf 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001686:	4905      	ldr	r1, [pc, #20]	; (800169c <Accelero_Sensor_Handler+0x140>)
 8001688:	4806      	ldr	r0, [pc, #24]	; (80016a4 <Accelero_Sensor_Handler+0x148>)
 800168a:	f00c f9a3 	bl	800d9d4 <iprintf>
  }
}
 800168e:	bf00      	nop
 8001690:	3730      	adds	r7, #48	; 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bdb0      	pop	{r4, r5, r7, pc}
 8001696:	bf00      	nop
 8001698:	0800fd54 	.word	0x0800fd54
 800169c:	200002a4 	.word	0x200002a4
 80016a0:	0800fd68 	.word	0x0800fd68
 80016a4:	0800fbfc 	.word	0x0800fbfc
 80016a8:	20000000 	.word	0x20000000
 80016ac:	0800fd98 	.word	0x0800fd98
 80016b0:	0800fdac 	.word	0x0800fdac
 80016b4:	0800fdc0 	.word	0x0800fdc0
 80016b8:	0800fdd4 	.word	0x0800fdd4
 80016bc:	0800fdec 	.word	0x0800fdec
 80016c0:	0800fdfc 	.word	0x0800fdfc

080016c4 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b092      	sub	sp, #72	; 0x48
 80016c8:	af06      	add	r7, sp, #24
 80016ca:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	461a      	mov	r2, r3
 80016d2:	2101      	movs	r1, #1
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f008 f8a1 	bl	800981c <IKS01A3_MOTION_SENSOR_GetAxes>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <Gyro_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a47      	ldr	r2, [pc, #284]	; (8001800 <Gyro_Sensor_Handler+0x13c>)
 80016e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e8:	4846      	ldr	r0, [pc, #280]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 80016ea:	f00c f98b 	bl	800da04 <sniprintf>
 80016ee:	e011      	b.n	8001714 <Gyro_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80016f0:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 80016f2:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80016f4:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 80016f6:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80016f8:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 80016fa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 80016fc:	9404      	str	r4, [sp, #16]
 80016fe:	9003      	str	r0, [sp, #12]
 8001700:	9102      	str	r1, [sp, #8]
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	462b      	mov	r3, r5
 8001708:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <Gyro_Sensor_Handler+0x144>)
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	483d      	ldr	r0, [pc, #244]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 8001710:	f00c f978 	bl	800da04 <sniprintf>
  }

  printf("%s", dataOut);
 8001714:	493b      	ldr	r1, [pc, #236]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 8001716:	483d      	ldr	r0, [pc, #244]	; (800180c <Gyro_Sensor_Handler+0x148>)
 8001718:	f00c f95c 	bl	800d9d4 <iprintf>

  if (verbose == 1)
 800171c:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <Gyro_Sensor_Handler+0x14c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d168      	bne.n	80017f6 <Gyro_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 8001724:	f107 030f 	add.w	r3, r7, #15
 8001728:	4619      	mov	r1, r3
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f008 f84c 	bl	80097c8 <IKS01A3_MOTION_SENSOR_ReadID>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <Gyro_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a36      	ldr	r2, [pc, #216]	; (8001814 <Gyro_Sensor_Handler+0x150>)
 800173a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 8001740:	f00c f960 	bl	800da04 <sniprintf>
 8001744:	e008      	b.n	8001758 <Gyro_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7bfa      	ldrb	r2, [r7, #15]
 800174a:	9200      	str	r2, [sp, #0]
 800174c:	4a32      	ldr	r2, [pc, #200]	; (8001818 <Gyro_Sensor_Handler+0x154>)
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	482c      	ldr	r0, [pc, #176]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 8001754:	f00c f956 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001758:	492a      	ldr	r1, [pc, #168]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 800175a:	482c      	ldr	r0, [pc, #176]	; (800180c <Gyro_Sensor_Handler+0x148>)
 800175c:	f00c f93a 	bl	800d9d4 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8001760:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001764:	461a      	mov	r2, r3
 8001766:	2101      	movs	r1, #1
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f008 f89b 	bl	80098a4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <Gyro_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a29      	ldr	r2, [pc, #164]	; (800181c <Gyro_Sensor_Handler+0x158>)
 8001778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177c:	4821      	ldr	r0, [pc, #132]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 800177e:	f00c f941 	bl	800da04 <sniprintf>
 8001782:	e014      	b.n	80017ae <Gyro_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001784:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2103      	movs	r1, #3
 800178e:	4618      	mov	r0, r3
 8001790:	eeb0 0a67 	vmov.f32	s0, s15
 8001794:	f7ff fe58 	bl	8001448 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800179c:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800179e:	9101      	str	r1, [sp, #4]
 80017a0:	9200      	str	r2, [sp, #0]
 80017a2:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <Gyro_Sensor_Handler+0x15c>)
 80017a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a8:	4816      	ldr	r0, [pc, #88]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 80017aa:	f00c f92b 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 80017ae:	4915      	ldr	r1, [pc, #84]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 80017b0:	4816      	ldr	r0, [pc, #88]	; (800180c <Gyro_Sensor_Handler+0x148>)
 80017b2:	f00c f90f 	bl	800d9d4 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 80017b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ba:	461a      	mov	r2, r3
 80017bc:	2101      	movs	r1, #1
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f008 f8b4 	bl	800992c <IKS01A3_MOTION_SENSOR_GetFullScale>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <Gyro_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a15      	ldr	r2, [pc, #84]	; (8001824 <Gyro_Sensor_Handler+0x160>)
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	480c      	ldr	r0, [pc, #48]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 80017d4:	f00c f916 	bl	800da04 <sniprintf>
 80017d8:	e009      	b.n	80017ee <Gyro_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	4a11      	ldr	r2, [pc, #68]	; (8001828 <Gyro_Sensor_Handler+0x164>)
 80017e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e8:	4806      	ldr	r0, [pc, #24]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 80017ea:	f00c f90b 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 80017ee:	4905      	ldr	r1, [pc, #20]	; (8001804 <Gyro_Sensor_Handler+0x140>)
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <Gyro_Sensor_Handler+0x148>)
 80017f2:	f00c f8ef 	bl	800d9d4 <iprintf>
  }
}
 80017f6:	bf00      	nop
 80017f8:	3730      	adds	r7, #48	; 0x30
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bdb0      	pop	{r4, r5, r7, pc}
 80017fe:	bf00      	nop
 8001800:	0800fe0c 	.word	0x0800fe0c
 8001804:	200002a4 	.word	0x200002a4
 8001808:	0800fe20 	.word	0x0800fe20
 800180c:	0800fbfc 	.word	0x0800fbfc
 8001810:	20000000 	.word	0x20000000
 8001814:	0800fd98 	.word	0x0800fd98
 8001818:	0800fdac 	.word	0x0800fdac
 800181c:	0800fdc0 	.word	0x0800fdc0
 8001820:	0800fdd4 	.word	0x0800fdd4
 8001824:	0800fdec 	.word	0x0800fdec
 8001828:	0800fe50 	.word	0x0800fe50

0800182c <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b092      	sub	sp, #72	; 0x48
 8001830:	af06      	add	r7, sp, #24
 8001832:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS01A3_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8001834:	f107 031c 	add.w	r3, r7, #28
 8001838:	461a      	mov	r2, r3
 800183a:	2104      	movs	r1, #4
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f007 ffed 	bl	800981c <IKS01A3_MOTION_SENSOR_GetAxes>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <Magneto_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a47      	ldr	r2, [pc, #284]	; (8001968 <Magneto_Sensor_Handler+0x13c>)
 800184c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001850:	4846      	ldr	r0, [pc, #280]	; (800196c <Magneto_Sensor_Handler+0x140>)
 8001852:	f00c f8d7 	bl	800da04 <sniprintf>
 8001856:	e011      	b.n	800187c <Magneto_Sensor_Handler+0x50>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8001858:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800185a:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800185c:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800185e:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8001860:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8001862:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8001864:	9404      	str	r4, [sp, #16]
 8001866:	9003      	str	r0, [sp, #12]
 8001868:	9102      	str	r1, [sp, #8]
 800186a:	9201      	str	r2, [sp, #4]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	462b      	mov	r3, r5
 8001870:	4a3f      	ldr	r2, [pc, #252]	; (8001970 <Magneto_Sensor_Handler+0x144>)
 8001872:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001876:	483d      	ldr	r0, [pc, #244]	; (800196c <Magneto_Sensor_Handler+0x140>)
 8001878:	f00c f8c4 	bl	800da04 <sniprintf>
  }

  printf("%s", dataOut);
 800187c:	493b      	ldr	r1, [pc, #236]	; (800196c <Magneto_Sensor_Handler+0x140>)
 800187e:	483d      	ldr	r0, [pc, #244]	; (8001974 <Magneto_Sensor_Handler+0x148>)
 8001880:	f00c f8a8 	bl	800d9d4 <iprintf>

  if (verbose == 1)
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <Magneto_Sensor_Handler+0x14c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d168      	bne.n	800195e <Magneto_Sensor_Handler+0x132>
  {
    if (IKS01A3_MOTION_SENSOR_ReadID(Instance, &whoami))
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f007 ff98 	bl	80097c8 <IKS01A3_MOTION_SENSOR_ReadID>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d007      	beq.n	80018ae <Magneto_Sensor_Handler+0x82>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a36      	ldr	r2, [pc, #216]	; (800197c <Magneto_Sensor_Handler+0x150>)
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4831      	ldr	r0, [pc, #196]	; (800196c <Magneto_Sensor_Handler+0x140>)
 80018a8:	f00c f8ac 	bl	800da04 <sniprintf>
 80018ac:	e008      	b.n	80018c0 <Magneto_Sensor_Handler+0x94>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	4a32      	ldr	r2, [pc, #200]	; (8001980 <Magneto_Sensor_Handler+0x154>)
 80018b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ba:	482c      	ldr	r0, [pc, #176]	; (800196c <Magneto_Sensor_Handler+0x140>)
 80018bc:	f00c f8a2 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 80018c0:	492a      	ldr	r1, [pc, #168]	; (800196c <Magneto_Sensor_Handler+0x140>)
 80018c2:	482c      	ldr	r0, [pc, #176]	; (8001974 <Magneto_Sensor_Handler+0x148>)
 80018c4:	f00c f886 	bl	800d9d4 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 80018c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018cc:	461a      	mov	r2, r3
 80018ce:	2104      	movs	r1, #4
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f007 ffe7 	bl	80098a4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d007      	beq.n	80018ec <Magneto_Sensor_Handler+0xc0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <Magneto_Sensor_Handler+0x158>)
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	4821      	ldr	r0, [pc, #132]	; (800196c <Magneto_Sensor_Handler+0x140>)
 80018e6:	f00c f88d 	bl	800da04 <sniprintf>
 80018ea:	e014      	b.n	8001916 <Magneto_Sensor_Handler+0xea>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80018ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2103      	movs	r1, #3
 80018f6:	4618      	mov	r0, r3
 80018f8:	eeb0 0a67 	vmov.f32	s0, s15
 80018fc:	f7ff fda4 	bl	8001448 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8001904:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001906:	9101      	str	r1, [sp, #4]
 8001908:	9200      	str	r2, [sp, #0]
 800190a:	4a1f      	ldr	r2, [pc, #124]	; (8001988 <Magneto_Sensor_Handler+0x15c>)
 800190c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001910:	4816      	ldr	r0, [pc, #88]	; (800196c <Magneto_Sensor_Handler+0x140>)
 8001912:	f00c f877 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001916:	4915      	ldr	r1, [pc, #84]	; (800196c <Magneto_Sensor_Handler+0x140>)
 8001918:	4816      	ldr	r0, [pc, #88]	; (8001974 <Magneto_Sensor_Handler+0x148>)
 800191a:	f00c f85b 	bl	800d9d4 <iprintf>

    if (IKS01A3_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	461a      	mov	r2, r3
 8001924:	2104      	movs	r1, #4
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f008 f800 	bl	800992c <IKS01A3_MOTION_SENSOR_GetFullScale>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d007      	beq.n	8001942 <Magneto_Sensor_Handler+0x116>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <Magneto_Sensor_Handler+0x160>)
 8001936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193a:	480c      	ldr	r0, [pc, #48]	; (800196c <Magneto_Sensor_Handler+0x140>)
 800193c:	f00c f862 	bl	800da04 <sniprintf>
 8001940:	e009      	b.n	8001956 <Magneto_Sensor_Handler+0x12a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <Magneto_Sensor_Handler+0x164>)
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <Magneto_Sensor_Handler+0x140>)
 8001952:	f00c f857 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001956:	4905      	ldr	r1, [pc, #20]	; (800196c <Magneto_Sensor_Handler+0x140>)
 8001958:	4806      	ldr	r0, [pc, #24]	; (8001974 <Magneto_Sensor_Handler+0x148>)
 800195a:	f00c f83b 	bl	800d9d4 <iprintf>
  }
}
 800195e:	bf00      	nop
 8001960:	3730      	adds	r7, #48	; 0x30
 8001962:	46bd      	mov	sp, r7
 8001964:	bdb0      	pop	{r4, r5, r7, pc}
 8001966:	bf00      	nop
 8001968:	0800fe64 	.word	0x0800fe64
 800196c:	200002a4 	.word	0x200002a4
 8001970:	0800fe78 	.word	0x0800fe78
 8001974:	0800fbfc 	.word	0x0800fbfc
 8001978:	20000000 	.word	0x20000000
 800197c:	0800fd98 	.word	0x0800fd98
 8001980:	0800fdac 	.word	0x0800fdac
 8001984:	0800fdc0 	.word	0x0800fdc0
 8001988:	0800fdd4 	.word	0x0800fdd4
 800198c:	0800fdec 	.word	0x0800fdec
 8001990:	0800fea8 	.word	0x0800fea8

08001994 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800199c:	f107 0318 	add.w	r3, r7, #24
 80019a0:	461a      	mov	r2, r3
 80019a2:	2101      	movs	r1, #1
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f007 fb8b 	bl	80090c0 <IKS01A3_ENV_SENSOR_GetValue>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d007      	beq.n	80019c0 <Temp_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3d      	ldr	r2, [pc, #244]	; (8001aa8 <Temp_Sensor_Handler+0x114>)
 80019b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b8:	483c      	ldr	r0, [pc, #240]	; (8001aac <Temp_Sensor_Handler+0x118>)
 80019ba:	f00c f823 	bl	800da04 <sniprintf>
 80019be:	e01d      	b.n	80019fc <Temp_Sensor_Handler+0x68>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 80019c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	eeb0 0a67 	vmov.f32	s0, s15
 80019d0:	f7ff fd3a 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <Temp_Sensor_Handler+0x4e>
 80019de:	232d      	movs	r3, #45	; 0x2d
 80019e0:	e000      	b.n	80019e4 <Temp_Sensor_Handler+0x50>
 80019e2:	232b      	movs	r3, #43	; 0x2b
 80019e4:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 80019e6:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 80019e8:	9002      	str	r0, [sp, #8]
 80019ea:	9101      	str	r1, [sp, #4]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	4a2f      	ldr	r2, [pc, #188]	; (8001ab0 <Temp_Sensor_Handler+0x11c>)
 80019f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019f6:	482d      	ldr	r0, [pc, #180]	; (8001aac <Temp_Sensor_Handler+0x118>)
 80019f8:	f00c f804 	bl	800da04 <sniprintf>
  }

  printf("%s", dataOut);
 80019fc:	492b      	ldr	r1, [pc, #172]	; (8001aac <Temp_Sensor_Handler+0x118>)
 80019fe:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <Temp_Sensor_Handler+0x120>)
 8001a00:	f00b ffe8 	bl	800d9d4 <iprintf>

  if (verbose == 1)
 8001a04:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <Temp_Sensor_Handler+0x124>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d148      	bne.n	8001a9e <Temp_Sensor_Handler+0x10a>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 8001a0c:	f107 030b 	add.w	r3, r7, #11
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f007 fae6 	bl	8008fe4 <IKS01A3_ENV_SENSOR_ReadID>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <Temp_Sensor_Handler+0x9a>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a26      	ldr	r2, [pc, #152]	; (8001abc <Temp_Sensor_Handler+0x128>)
 8001a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a26:	4821      	ldr	r0, [pc, #132]	; (8001aac <Temp_Sensor_Handler+0x118>)
 8001a28:	f00b ffec 	bl	800da04 <sniprintf>
 8001a2c:	e008      	b.n	8001a40 <Temp_Sensor_Handler+0xac>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7afa      	ldrb	r2, [r7, #11]
 8001a32:	9200      	str	r2, [sp, #0]
 8001a34:	4a22      	ldr	r2, [pc, #136]	; (8001ac0 <Temp_Sensor_Handler+0x12c>)
 8001a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3a:	481c      	ldr	r0, [pc, #112]	; (8001aac <Temp_Sensor_Handler+0x118>)
 8001a3c:	f00b ffe2 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001a40:	491a      	ldr	r1, [pc, #104]	; (8001aac <Temp_Sensor_Handler+0x118>)
 8001a42:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <Temp_Sensor_Handler+0x120>)
 8001a44:	f00b ffc6 	bl	800d9d4 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2101      	movs	r1, #1
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f007 faf1 	bl	8009038 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <Temp_Sensor_Handler+0xd8>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <Temp_Sensor_Handler+0x130>)
 8001a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a64:	4811      	ldr	r0, [pc, #68]	; (8001aac <Temp_Sensor_Handler+0x118>)
 8001a66:	f00b ffcd 	bl	800da04 <sniprintf>
 8001a6a:	e014      	b.n	8001a96 <Temp_Sensor_Handler+0x102>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001a6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2103      	movs	r1, #3
 8001a76:	4618      	mov	r0, r3
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	f7ff fce4 	bl	8001448 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8001a84:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001a86:	9101      	str	r1, [sp, #4]
 8001a88:	9200      	str	r2, [sp, #0]
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <Temp_Sensor_Handler+0x134>)
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <Temp_Sensor_Handler+0x118>)
 8001a92:	f00b ffb7 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001a96:	4905      	ldr	r1, [pc, #20]	; (8001aac <Temp_Sensor_Handler+0x118>)
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <Temp_Sensor_Handler+0x120>)
 8001a9a:	f00b ff9b 	bl	800d9d4 <iprintf>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	0800febc 	.word	0x0800febc
 8001aac:	200002a4 	.word	0x200002a4
 8001ab0:	0800fed0 	.word	0x0800fed0
 8001ab4:	0800fbfc 	.word	0x0800fbfc
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	0800fd98 	.word	0x0800fd98
 8001ac0:	0800fdac 	.word	0x0800fdac
 8001ac4:	0800fef0 	.word	0x0800fef0
 8001ac8:	0800fdd4 	.word	0x0800fdd4

08001acc <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2102      	movs	r1, #2
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f007 faef 	bl	80090c0 <IKS01A3_ENV_SENSOR_GetValue>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <Press_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a38      	ldr	r2, [pc, #224]	; (8001bcc <Press_Sensor_Handler+0x100>)
 8001aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af0:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001af2:	f00b ff87 	bl	800da04 <sniprintf>
 8001af6:	e014      	b.n	8001b22 <Press_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 8001af8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2102      	movs	r1, #2
 8001b02:	4618      	mov	r0, r3
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	f7ff fc9e 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8001b10:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8001b12:	9101      	str	r1, [sp, #4]
 8001b14:	9200      	str	r2, [sp, #0]
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <Press_Sensor_Handler+0x108>)
 8001b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1c:	482c      	ldr	r0, [pc, #176]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001b1e:	f00b ff71 	bl	800da04 <sniprintf>
  }

  printf("%s", dataOut);
 8001b22:	492b      	ldr	r1, [pc, #172]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001b24:	482c      	ldr	r0, [pc, #176]	; (8001bd8 <Press_Sensor_Handler+0x10c>)
 8001b26:	f00b ff55 	bl	800d9d4 <iprintf>

  if (verbose == 1)
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <Press_Sensor_Handler+0x110>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d148      	bne.n	8001bc4 <Press_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 8001b32:	f107 030b 	add.w	r3, r7, #11
 8001b36:	4619      	mov	r1, r3
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f007 fa53 	bl	8008fe4 <IKS01A3_ENV_SENSOR_ReadID>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <Press_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <Press_Sensor_Handler+0x114>)
 8001b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001b4e:	f00b ff59 	bl	800da04 <sniprintf>
 8001b52:	e008      	b.n	8001b66 <Press_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7afa      	ldrb	r2, [r7, #11]
 8001b58:	9200      	str	r2, [sp, #0]
 8001b5a:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <Press_Sensor_Handler+0x118>)
 8001b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b60:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001b62:	f00b ff4f 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001b66:	491a      	ldr	r1, [pc, #104]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001b68:	481b      	ldr	r0, [pc, #108]	; (8001bd8 <Press_Sensor_Handler+0x10c>)
 8001b6a:	f00b ff33 	bl	800d9d4 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	461a      	mov	r2, r3
 8001b74:	2102      	movs	r1, #2
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f007 fa5e 	bl	8009038 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <Press_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <Press_Sensor_Handler+0x11c>)
 8001b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b8a:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001b8c:	f00b ff3a 	bl	800da04 <sniprintf>
 8001b90:	e014      	b.n	8001bbc <Press_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001b92:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	f7ff fc51 	bl	8001448 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8001baa:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001bac:	9101      	str	r1, [sp, #4]
 8001bae:	9200      	str	r2, [sp, #0]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <Press_Sensor_Handler+0x120>)
 8001bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001bb8:	f00b ff24 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <Press_Sensor_Handler+0x104>)
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <Press_Sensor_Handler+0x10c>)
 8001bc0:	f00b ff08 	bl	800d9d4 <iprintf>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	0800ff04 	.word	0x0800ff04
 8001bd0:	200002a4 	.word	0x200002a4
 8001bd4:	0800ff1c 	.word	0x0800ff1c
 8001bd8:	0800fbfc 	.word	0x0800fbfc
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	0800fd98 	.word	0x0800fd98
 8001be4:	0800fdac 	.word	0x0800fdac
 8001be8:	0800fef0 	.word	0x0800fef0
 8001bec:	0800fdd4 	.word	0x0800fdd4

08001bf0 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  if (IKS01A3_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	2104      	movs	r1, #4
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f007 fa5d 	bl	80090c0 <IKS01A3_ENV_SENSOR_GetValue>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <Hum_Sensor_Handler+0x2c>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a38      	ldr	r2, [pc, #224]	; (8001cf0 <Hum_Sensor_Handler+0x100>)
 8001c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c14:	4837      	ldr	r0, [pc, #220]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001c16:	f00b fef5 	bl	800da04 <sniprintf>
 8001c1a:	e014      	b.n	8001c46 <Hum_Sensor_Handler+0x56>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 8001c1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2102      	movs	r1, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2c:	f7ff fc0c 	bl	8001448 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 8001c34:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8001c36:	9101      	str	r1, [sp, #4]
 8001c38:	9200      	str	r2, [sp, #0]
 8001c3a:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <Hum_Sensor_Handler+0x108>)
 8001c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c40:	482c      	ldr	r0, [pc, #176]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001c42:	f00b fedf 	bl	800da04 <sniprintf>
  }

  printf("%s", dataOut);
 8001c46:	492b      	ldr	r1, [pc, #172]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001c48:	482c      	ldr	r0, [pc, #176]	; (8001cfc <Hum_Sensor_Handler+0x10c>)
 8001c4a:	f00b fec3 	bl	800d9d4 <iprintf>

  if (verbose == 1)
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <Hum_Sensor_Handler+0x110>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d148      	bne.n	8001ce8 <Hum_Sensor_Handler+0xf8>
  {
    if (IKS01A3_ENV_SENSOR_ReadID(Instance, &whoami))
 8001c56:	f107 030b 	add.w	r3, r7, #11
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f007 f9c1 	bl	8008fe4 <IKS01A3_ENV_SENSOR_ReadID>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <Hum_Sensor_Handler+0x88>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <Hum_Sensor_Handler+0x114>)
 8001c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c70:	4820      	ldr	r0, [pc, #128]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001c72:	f00b fec7 	bl	800da04 <sniprintf>
 8001c76:	e008      	b.n	8001c8a <Hum_Sensor_Handler+0x9a>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7afa      	ldrb	r2, [r7, #11]
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	4a22      	ldr	r2, [pc, #136]	; (8001d08 <Hum_Sensor_Handler+0x118>)
 8001c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c84:	481b      	ldr	r0, [pc, #108]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001c86:	f00b febd 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001c8a:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001c8c:	481b      	ldr	r0, [pc, #108]	; (8001cfc <Hum_Sensor_Handler+0x10c>)
 8001c8e:	f00b fea1 	bl	800d9d4 <iprintf>

    if (IKS01A3_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	461a      	mov	r2, r3
 8001c98:	2104      	movs	r1, #4
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f007 f9cc 	bl	8009038 <IKS01A3_ENV_SENSOR_GetOutputDataRate>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <Hum_Sensor_Handler+0xc6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <Hum_Sensor_Handler+0x11c>)
 8001caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001cb0:	f00b fea8 	bl	800da04 <sniprintf>
 8001cb4:	e014      	b.n	8001ce0 <Hum_Sensor_Handler+0xf0>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8001cb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	2103      	movs	r1, #3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc6:	f7ff fbbf 	bl	8001448 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8001cce:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8001cd0:	9101      	str	r1, [sp, #4]
 8001cd2:	9200      	str	r2, [sp, #0]
 8001cd4:	4a0e      	ldr	r2, [pc, #56]	; (8001d10 <Hum_Sensor_Handler+0x120>)
 8001cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001cdc:	f00b fe92 	bl	800da04 <sniprintf>
    }

    printf("%s", dataOut);
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <Hum_Sensor_Handler+0x104>)
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <Hum_Sensor_Handler+0x10c>)
 8001ce4:	f00b fe76 	bl	800d9d4 <iprintf>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3720      	adds	r7, #32
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	0800ff38 	.word	0x0800ff38
 8001cf4:	200002a4 	.word	0x200002a4
 8001cf8:	0800ff4c 	.word	0x0800ff4c
 8001cfc:	0800fbfc 	.word	0x0800fbfc
 8001d00:	20000000 	.word	0x20000000
 8001d04:	0800fd98 	.word	0x0800fd98
 8001d08:	0800fdac 	.word	0x0800fdac
 8001d0c:	0800fef0 	.word	0x0800fef0
 8001d10:	0800fdd4 	.word	0x0800fdd4

08001d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d18:	f008 fa5c 	bl	800a1d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1c:	f000 f807 	bl	8001d2e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d20:	f000 f856 	bl	8001dd0 <MX_GPIO_Init>
  MX_MEMS_Init();
 8001d24:	f7ff f933 	bl	8000f8e <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8001d28:	f7ff f937 	bl	8000f9a <MX_MEMS_Process>
 8001d2c:	e7fc      	b.n	8001d28 <main+0x14>

08001d2e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b096      	sub	sp, #88	; 0x58
 8001d32:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2244      	movs	r2, #68	; 0x44
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00b fe41 	bl	800d9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d54:	f009 fda6 	bl	800b8a4 <HAL_PWREx_ControlVoltageScaling>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d5e:	f000 f8bf 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d62:	2302      	movs	r3, #2
 8001d64:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d74:	2302      	movs	r3, #2
 8001d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d80:	2307      	movs	r3, #7
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4618      	mov	r0, r3
 8001d92:	f009 fddd 	bl	800b950 <HAL_RCC_OscConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d9c:	f000 f8a0 	bl	8001ee0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da0:	230f      	movs	r3, #15
 8001da2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da4:	2303      	movs	r3, #3
 8001da6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	2104      	movs	r1, #4
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00a f9a5 	bl	800c108 <HAL_RCC_ClockConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001dc4:	f000 f88c 	bl	8001ee0 <Error_Handler>
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3758      	adds	r7, #88	; 0x58
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08a      	sub	sp, #40	; 0x28
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <MX_GPIO_Init+0x104>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e46:	2302      	movs	r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481f      	ldr	r0, [pc, #124]	; (8001ed8 <MX_GPIO_Init+0x108>)
 8001e5c:	f008 fbca 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8001e60:	f240 4331 	movw	r3, #1073	; 0x431
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e66:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4819      	ldr	r0, [pc, #100]	; (8001edc <MX_GPIO_Init+0x10c>)
 8001e78:	f008 fbbc 	bl	800a5f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2006      	movs	r0, #6
 8001e82:	f008 fb22 	bl	800a4ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e86:	2006      	movs	r0, #6
 8001e88:	f008 fb3b 	bl	800a502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2007      	movs	r0, #7
 8001e92:	f008 fb1a 	bl	800a4ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001e96:	2007      	movs	r0, #7
 8001e98:	f008 fb33 	bl	800a502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f008 fb12 	bl	800a4ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f008 fb2b 	bl	800a502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2017      	movs	r0, #23
 8001eb2:	f008 fb0a 	bl	800a4ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eb6:	2017      	movs	r0, #23
 8001eb8:	f008 fb23 	bl	800a502 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2028      	movs	r0, #40	; 0x28
 8001ec2:	f008 fb02 	bl	800a4ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ec6:	2028      	movs	r0, #40	; 0x28
 8001ec8:	f008 fb1b 	bl	800a502 <HAL_NVIC_EnableIRQ>

}
 8001ecc:	bf00      	nop
 8001ece:	3728      	adds	r7, #40	; 0x28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	48000800 	.word	0x48000800
 8001edc:	48000400 	.word	0x48000400

08001ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee4:	b672      	cpsid	i
}
 8001ee6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <Error_Handler+0x8>
	...

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_MspInit+0x44>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_MspInit+0x44>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6613      	str	r3, [r2, #96]	; 0x60
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_MspInit+0x44>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_MspInit+0x44>)
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_MspInit+0x44>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6593      	str	r3, [r2, #88]	; 0x58
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_MspInit+0x44>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f008 f984 	bl	800a28c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	f008 fdff 	bl	800ab90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f008 fdf8 	bl	800ab90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001fa8:	2010      	movs	r0, #16
 8001faa:	f008 fdf1 	bl	800ab90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001fb6:	2020      	movs	r0, #32
 8001fb8:	f008 fdea 	bl	800ab90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001fc4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001fc8:	f008 fde2 	bl	800ab90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <EXTI15_10_IRQHandler+0x18>)
 8001fce:	f008 fae1 	bl	800a594 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000184 	.word	0x20000184

08001fdc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <BSP_I2C1_Init+0x70>)
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <BSP_I2C1_Init+0x74>)
 8001fea:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <BSP_I2C1_Init+0x78>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	4918      	ldr	r1, [pc, #96]	; (8002054 <BSP_I2C1_Init+0x78>)
 8001ff4:	600a      	str	r2, [r1, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d122      	bne.n	8002040 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <BSP_I2C1_Init+0x70>)
 8001ffc:	f009 f8ec 	bl	800b1d8 <HAL_I2C_GetState>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11c      	bne.n	8002040 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002006:	4811      	ldr	r0, [pc, #68]	; (800204c <BSP_I2C1_Init+0x70>)
 8002008:	f000 f8fe 	bl	8002208 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d116      	bne.n	8002040 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002012:	480e      	ldr	r0, [pc, #56]	; (800204c <BSP_I2C1_Init+0x70>)
 8002014:	f000 f8b4 	bl	8002180 <MX_I2C1_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800201e:	f06f 0307 	mvn.w	r3, #7
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	e00c      	b.n	8002040 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002026:	2100      	movs	r1, #0
 8002028:	4808      	ldr	r0, [pc, #32]	; (800204c <BSP_I2C1_Init+0x70>)
 800202a:	f009 fb95 	bl	800b758 <HAL_I2CEx_ConfigAnalogFilter>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002034:	f06f 0307 	mvn.w	r3, #7
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	e001      	b.n	8002040 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200003a8 	.word	0x200003a8
 8002050:	40005400 	.word	0x40005400
 8002054:	200003fc 	.word	0x200003fc

08002058 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <BSP_I2C1_DeInit+0x48>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <BSP_I2C1_DeInit+0x48>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3b01      	subs	r3, #1
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <BSP_I2C1_DeInit+0x48>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <BSP_I2C1_DeInit+0x48>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800207c:	4809      	ldr	r0, [pc, #36]	; (80020a4 <BSP_I2C1_DeInit+0x4c>)
 800207e:	f000 f923 	bl	80022c8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002082:	4808      	ldr	r0, [pc, #32]	; (80020a4 <BSP_I2C1_DeInit+0x4c>)
 8002084:	f008 fe36 	bl	800acf4 <HAL_I2C_DeInit>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800208e:	f06f 0307 	mvn.w	r3, #7
 8002092:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200003fc 	.word	0x200003fc
 80020a4:	200003a8 	.word	0x200003a8

080020a8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af04      	add	r7, sp, #16
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	81fb      	strh	r3, [r7, #14]
 80020b6:	460b      	mov	r3, r1
 80020b8:	81bb      	strh	r3, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020c2:	89ba      	ldrh	r2, [r7, #12]
 80020c4:	89f9      	ldrh	r1, [r7, #14]
 80020c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ca:	9302      	str	r3, [sp, #8]
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2301      	movs	r3, #1
 80020d6:	480c      	ldr	r0, [pc, #48]	; (8002108 <BSP_I2C1_WriteReg+0x60>)
 80020d8:	f008 fe50 	bl	800ad7c <HAL_I2C_Mem_Write>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80020e2:	4809      	ldr	r0, [pc, #36]	; (8002108 <BSP_I2C1_WriteReg+0x60>)
 80020e4:	f009 f886 	bl	800b1f4 <HAL_I2C_GetError>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d103      	bne.n	80020f6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	e002      	b.n	80020fc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80020f6:	f06f 0303 	mvn.w	r3, #3
 80020fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80020fc:	697b      	ldr	r3, [r7, #20]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200003a8 	.word	0x200003a8

0800210c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af04      	add	r7, sp, #16
 8002112:	60ba      	str	r2, [r7, #8]
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	81fb      	strh	r3, [r7, #14]
 800211a:	460b      	mov	r3, r1
 800211c:	81bb      	strh	r3, [r7, #12]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002126:	89ba      	ldrh	r2, [r7, #12]
 8002128:	89f9      	ldrh	r1, [r7, #14]
 800212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212e:	9302      	str	r3, [sp, #8]
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	480c      	ldr	r0, [pc, #48]	; (800216c <BSP_I2C1_ReadReg+0x60>)
 800213c:	f008 ff32 	bl	800afa4 <HAL_I2C_Mem_Read>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002146:	4809      	ldr	r0, [pc, #36]	; (800216c <BSP_I2C1_ReadReg+0x60>)
 8002148:	f009 f854 	bl	800b1f4 <HAL_I2C_GetError>
 800214c:	4603      	mov	r3, r0
 800214e:	2b04      	cmp	r3, #4
 8002150:	d103      	bne.n	800215a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002152:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e002      	b.n	8002160 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800215a:	f06f 0303 	mvn.w	r3, #3
 800215e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002160:	697b      	ldr	r3, [r7, #20]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200003a8 	.word	0x200003a8

08002170 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002174:	f008 f89e 	bl	800a2b4 <HAL_GetTick>
 8002178:	4603      	mov	r3, r0
}
 800217a:	4618      	mov	r0, r3
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <MX_I2C1_Init+0x80>)
 8002190:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <MX_I2C1_Init+0x84>)
 8002196:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f008 fd07 	bl	800abd6 <HAL_I2C_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021d2:	2100      	movs	r1, #0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f009 fabf 	bl	800b758 <HAL_I2CEx_ConfigAnalogFilter>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f009 fb01 	bl	800b7ee <HAL_I2CEx_ConfigDigitalFilter>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40005400 	.word	0x40005400
 8002204:	00702991 	.word	0x00702991

08002208 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0ac      	sub	sp, #176	; 0xb0
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2288      	movs	r2, #136	; 0x88
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f00b fbd3 	bl	800d9c4 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002222:	2300      	movs	r3, #0
 8002224:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4618      	mov	r0, r3
 800222c:	f00a f990 	bl	800c550 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <I2C1_MspInit+0xb8>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <I2C1_MspInit+0xb8>)
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <I2C1_MspInit+0xb8>)
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800224c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002250:	2312      	movs	r3, #18
 8002252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002262:	2304      	movs	r3, #4
 8002264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002268:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800226c:	4619      	mov	r1, r3
 800226e:	4815      	ldr	r0, [pc, #84]	; (80022c4 <I2C1_MspInit+0xbc>)
 8002270:	f008 f9c0 	bl	800a5f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800227c:	2312      	movs	r3, #18
 800227e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002288:	2303      	movs	r3, #3
 800228a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800228e:	2304      	movs	r3, #4
 8002290:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002298:	4619      	mov	r1, r3
 800229a:	480a      	ldr	r0, [pc, #40]	; (80022c4 <I2C1_MspInit+0xbc>)
 800229c:	f008 f9aa 	bl	800a5f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <I2C1_MspInit+0xb8>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <I2C1_MspInit+0xb8>)
 80022a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022aa:	6593      	str	r3, [r2, #88]	; 0x58
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <I2C1_MspInit+0xb8>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80022b8:	bf00      	nop
 80022ba:	37b0      	adds	r7, #176	; 0xb0
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000400 	.word	0x48000400

080022c8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <I2C1_MspDeInit+0x30>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <I2C1_MspDeInit+0x30>)
 80022d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022da:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80022dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <I2C1_MspDeInit+0x34>)
 80022e2:	f008 fb31 	bl	800a948 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80022e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <I2C1_MspDeInit+0x34>)
 80022ec:	f008 fb2c 	bl	800a948 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400

08002300 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
  }

  return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f007 feb1 	bl	800a0bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
  }
  return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_close>:

int _close(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239a:	605a      	str	r2, [r3, #4]
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_isatty>:

int _isatty(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f00b fab0 	bl	800d970 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20018000 	.word	0x20018000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000400 	.word	0x20000400
 8002444:	20000678 	.word	0x20000678

08002448 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	e034      	b.n	80024ca <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	7b1a      	ldrb	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <HTS221_RegisterBusIO+0x8c>)
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HTS221_RegisterBusIO+0x90>)
 80024a2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d004      	beq.n	80024c4 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4798      	blx	r3
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	e002      	b.n	80024ca <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	08002b07 	.word	0x08002b07
 80024d8:	08002b69 	.word	0x08002b69

080024dc <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 faa4 	bl	8002a3c <HTS221_Initialize>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d002      	beq.n	8002500 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	e004      	b.n	800250a <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002520:	2b01      	cmp	r3, #1
 8002522:	d111      	bne.n	8002548 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f878 	bl	800261a <HTS221_HUM_Disable>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	e00d      	b.n	8002552 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f95f 	bl	80027fa <HTS221_TEMP_Disable>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
 8002546:	e004      	b.n	8002552 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3320      	adds	r3, #32
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fc28 	bl	8002dc0 <hts221_device_id_get>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e000      	b.n	800257e <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2201      	movs	r2, #1
 8002596:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2200      	movs	r2, #0
 800259c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HTS221_GetCapabilities+0x44>)
 80025ae:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <HTS221_GetCapabilities+0x44>)
 80025b4:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	41480000 	.word	0x41480000

080025d0 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e015      	b.n	8002612 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3320      	adds	r3, #32
 80025f4:	2101      	movs	r1, #1
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fbf3 	bl	8002de2 <hts221_power_on_set>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e004      	b.n	8002612 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e015      	b.n	800265c <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3320      	adds	r3, #32
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fbce 	bl	8002de2 <hts221_power_on_set>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
 8002650:	e004      	b.n	800265c <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800266e:	6839      	ldr	r1, [r7, #0]
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f96f 	bl	8002954 <HTS221_GetOutputDataRate>
 8002676:	4603      	mov	r3, r0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800268c:	ed97 0a00 	vldr	s0, [r7]
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f9a3 	bl	80029dc <HTS221_SetOutputDataRate>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3320      	adds	r3, #32
 80026ae:	f107 020c 	add.w	r2, r7, #12
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fc58 	bl	8002f6a <hts221_hum_adc_point_0_get>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295
 80026c4:	e06b      	b.n	800279e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f103 0220 	add.w	r2, r3, #32
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f000 fbaa 	bl	8002e2e <hts221_hum_rh_point_0_get>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	e05b      	b.n	800279e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f103 0220 	add.w	r2, r3, #32
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	3308      	adds	r3, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f000 fc5c 	bl	8002fb2 <hts221_hum_adc_point_1_get>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
 8002704:	e04b      	b.n	800279e <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f103 0220 	add.w	r2, r3, #32
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	330c      	adds	r3, #12
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f000 fba8 	bl	8002e6a <hts221_hum_rh_point_1_get>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
 8002724:	e03b      	b.n	800279e <HTS221_HUM_GetHumidity+0xfe>
 8002726:	2300      	movs	r3, #0
 8002728:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3320      	adds	r3, #32
 800272e:	f107 021c 	add.w	r2, r7, #28
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fafd 	bl	8002d34 <hts221_humidity_raw_get>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e02b      	b.n	800279e <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002746:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f99a 	bl	8002a94 <Linear_Interpolation>
 8002760:	eef0 7a40 	vmov.f32	s15, s0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	d503      	bpl.n	8002782 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027a8 <HTS221_HUM_GetHumidity+0x108>
 800278c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	dd02      	ble.n	800279c <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HTS221_HUM_GetHumidity+0x10c>)
 800279a:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	42c80000 	.word	0x42c80000
 80027ac:	42c80000 	.word	0x42c80000

080027b0 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e015      	b.n	80027f2 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3320      	adds	r3, #32
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fb03 	bl	8002de2 <hts221_power_on_set>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	e004      	b.n	80027f2 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	e015      	b.n	800283c <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10b      	bne.n	8002832 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3320      	adds	r3, #32
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fade 	bl	8002de2 <hts221_power_on_set>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e004      	b.n	800283c <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f87f 	bl	8002954 <HTS221_GetOutputDataRate>
 8002856:	4603      	mov	r3, r0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800286c:	ed97 0a00 	vldr	s0, [r7]
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8b3 	bl	80029dc <HTS221_SetOutputDataRate>
 8002876:	4603      	mov	r3, r0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3320      	adds	r3, #32
 800288e:	f107 020c 	add.w	r2, r7, #12
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fbb0 	bl	8002ffa <hts221_temp_adc_point_0_get>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
 80028a4:	e052      	b.n	800294c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f103 0220 	add.w	r2, r3, #32
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 faf6 	bl	8002ea6 <hts221_temp_deg_point_0_get>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	e042      	b.n	800294c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f103 0220 	add.w	r2, r3, #32
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	3308      	adds	r3, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f000 fbb4 	bl	8003042 <hts221_temp_adc_point_1_get>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	e032      	b.n	800294c <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f103 0220 	add.w	r2, r3, #32
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	330c      	adds	r3, #12
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f000 fb07 	bl	8002f08 <hts221_temp_deg_point_1_get>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295
 8002904:	e022      	b.n	800294c <HTS221_TEMP_GetTemperature+0xcc>
 8002906:	2300      	movs	r3, #0
 8002908:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3320      	adds	r3, #32
 800290e:	f107 021c 	add.w	r2, r7, #28
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa30 	bl	8002d7a <hts221_temperature_raw_get>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	e012      	b.n	800294c <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002926:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f8aa 	bl	8002a94 <Linear_Interpolation>
 8002940:	eef0 7a40 	vmov.f32	s15, s0
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3320      	adds	r3, #32
 8002966:	f107 020b 	add.w	r2, r7, #11
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f983 	bl	8002c78 <hts221_data_rate_get>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	e025      	b.n	80029ca <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d81d      	bhi.n	80029c0 <HTS221_GetOutputDataRate+0x6c>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <HTS221_GetOutputDataRate+0x38>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029a7 	.word	0x080029a7
 8002994:	080029b1 	.word	0x080029b1
 8002998:	080029b9 	.word	0x080029b9
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
      break;
 80029a4:	e010      	b.n	80029c8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029ac:	601a      	str	r2, [r3, #0]
      break;
 80029ae:	e00b      	b.n	80029c8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <HTS221_GetOutputDataRate+0x80>)
 80029b4:	601a      	str	r2, [r3, #0]
      break;
 80029b6:	e007      	b.n	80029c8 <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HTS221_GetOutputDataRate+0x84>)
 80029bc:	601a      	str	r2, [r3, #0]
      break;
 80029be:	e003      	b.n	80029c8 <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	60fb      	str	r3, [r7, #12]
      break;
 80029c6:	bf00      	nop
  }

  return ret;
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40e00000 	.word	0x40e00000
 80029d8:	41480000 	.word	0x41480000

080029dc <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80029e8:	edd7 7a00 	vldr	s15, [r7]
 80029ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	d801      	bhi.n	80029fe <HTS221_SetOutputDataRate+0x22>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00b      	b.n	8002a16 <HTS221_SetOutputDataRate+0x3a>
 80029fe:	edd7 7a00 	vldr	s15, [r7]
 8002a02:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	d801      	bhi.n	8002a14 <HTS221_SetOutputDataRate+0x38>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e000      	b.n	8002a16 <HTS221_SetOutputDataRate+0x3a>
 8002a14:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002a16:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3320      	adds	r3, #32
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f902 	bl	8002c2a <hts221_data_rate_set>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	e000      	b.n	8002a34 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3320      	adds	r3, #32
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f9c9 	bl	8002de2 <hts221_power_on_set>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	e017      	b.n	8002a8c <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3320      	adds	r3, #32
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f940 	bl	8002ce8 <hts221_block_data_update_set>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a72:	e00b      	b.n	8002a8c <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002a74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ffaf 	bl	80029dc <HTS221_SetOutputDataRate>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8002a84:	f04f 33ff 	mov.w	r3, #4294967295
 8002a88:	e000      	b.n	8002a8c <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab0:	edd7 7a00 	vldr	s15, [r7]
 8002ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	edd3 6a02 	vldr	s13, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ac4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	ed93 6a00 	vldr	s12, [r3]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ad4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ad8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	edd3 6a02 	vldr	s13, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002af0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002af4:	eef0 7a66 	vmov.f32	s15, s13
}
 8002af8:	eeb0 0a67 	vmov.f32	s0, s15
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b06:	b590      	push	{r4, r7, lr}
 8002b08:	b087      	sub	sp, #28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	461a      	mov	r2, r3
 8002b12:	460b      	mov	r3, r1
 8002b14:	72fb      	strb	r3, [r7, #11]
 8002b16:	4613      	mov	r3, r2
 8002b18:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	695c      	ldr	r4, [r3, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	7b1b      	ldrb	r3, [r3, #12]
 8002b2e:	b298      	uxth	r0, r3
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	893b      	ldrh	r3, [r7, #8]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	47a0      	blx	r4
 8002b40:	4603      	mov	r3, r0
 8002b42:	e00d      	b.n	8002b60 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	695c      	ldr	r4, [r3, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	7b1b      	ldrb	r3, [r3, #12]
 8002b4c:	b298      	uxth	r0, r3
 8002b4e:	7afb      	ldrb	r3, [r7, #11]
 8002b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	b299      	uxth	r1, r3
 8002b58:	893b      	ldrh	r3, [r7, #8]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	47a0      	blx	r4
 8002b5e:	4603      	mov	r3, r0
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}

08002b68 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	460b      	mov	r3, r1
 8002b76:	72fb      	strb	r3, [r7, #11]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10e      	bne.n	8002ba6 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	691c      	ldr	r4, [r3, #16]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	7b1b      	ldrb	r3, [r3, #12]
 8002b90:	b298      	uxth	r0, r3
 8002b92:	7afb      	ldrb	r3, [r7, #11]
 8002b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	893b      	ldrh	r3, [r7, #8]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	47a0      	blx	r4
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	e00d      	b.n	8002bc2 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	691c      	ldr	r4, [r3, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	7b1b      	ldrb	r3, [r3, #12]
 8002bae:	b298      	uxth	r0, r3
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	b299      	uxth	r1, r3
 8002bba:	893b      	ldrh	r3, [r7, #8]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	47a0      	blx	r4
 8002bc0:	4603      	mov	r3, r0
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}

08002bca <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8002bca:	b590      	push	{r4, r7, lr}
 8002bcc:	b087      	sub	sp, #28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	72fb      	strb	r3, [r7, #11]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685c      	ldr	r4, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	68d8      	ldr	r0, [r3, #12]
 8002be6:	893b      	ldrh	r3, [r7, #8]
 8002be8:	7af9      	ldrb	r1, [r7, #11]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	47a0      	blx	r4
 8002bee:	6178      	str	r0, [r7, #20]

  return ret;
 8002bf0:	697b      	ldr	r3, [r7, #20]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}

08002bfa <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002bfa:	b590      	push	{r4, r7, lr}
 8002bfc:	b087      	sub	sp, #28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	461a      	mov	r2, r3
 8002c06:	460b      	mov	r3, r1
 8002c08:	72fb      	strb	r3, [r7, #11]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681c      	ldr	r4, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68d8      	ldr	r0, [r3, #12]
 8002c16:	893b      	ldrh	r3, [r7, #8]
 8002c18:	7af9      	ldrb	r1, [r7, #11]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	47a0      	blx	r4
 8002c1e:	6178      	str	r0, [r7, #20]

  return ret;
 8002c20:	697b      	ldr	r3, [r7, #20]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}

08002c2a <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002c36:	f107 0208 	add.w	r2, r7, #8
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffc3 	bl	8002bca <hts221_read_reg>
 8002c44:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10f      	bne.n	8002c6c <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	7a3b      	ldrb	r3, [r7, #8]
 8002c56:	f362 0301 	bfi	r3, r2, #0, #2
 8002c5a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002c5c:	f107 0208 	add.w	r2, r7, #8
 8002c60:	2301      	movs	r3, #1
 8002c62:	2120      	movs	r1, #32
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffc8 	bl	8002bfa <hts221_write_reg>
 8002c6a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002c82:	f107 0208 	add.w	r2, r7, #8
 8002c86:	2301      	movs	r3, #1
 8002c88:	2120      	movs	r1, #32
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ff9d 	bl	8002bca <hts221_read_reg>
 8002c90:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8002c92:	7a3b      	ldrb	r3, [r7, #8]
 8002c94:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d81a      	bhi.n	8002cd4 <hts221_data_rate_get+0x5c>
 8002c9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ca4 <hts221_data_rate_get+0x2c>)
 8002ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002cbd 	.word	0x08002cbd
 8002cac:	08002cc5 	.word	0x08002cc5
 8002cb0:	08002ccd 	.word	0x08002ccd
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]
      break;
 8002cba:	e00f      	b.n	8002cdc <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e00b      	b.n	8002cdc <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	701a      	strb	r2, [r3, #0]
      break;
 8002cca:	e007      	b.n	8002cdc <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
      break;
 8002cd2:	e003      	b.n	8002cdc <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	701a      	strb	r2, [r3, #0]
      break;
 8002cda:	bf00      	nop
  }

  return ret;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop

08002ce8 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002cf4:	f107 0208 	add.w	r2, r7, #8
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff ff64 	bl	8002bca <hts221_read_reg>
 8002d02:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	7a3b      	ldrb	r3, [r7, #8]
 8002d14:	f362 0382 	bfi	r3, r2, #2, #1
 8002d18:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002d1a:	f107 0208 	add.w	r2, r7, #8
 8002d1e:	2301      	movs	r3, #1
 8002d20:	2120      	movs	r1, #32
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ff69 	bl	8002bfa <hts221_write_reg>
 8002d28:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8002d3e:	f107 0208 	add.w	r2, r7, #8
 8002d42:	2302      	movs	r3, #2
 8002d44:	2128      	movs	r1, #40	; 0x28
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ff3f 	bl	8002bca <hts221_read_reg>
 8002d4c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002d4e:	7a7b      	ldrb	r3, [r7, #9]
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	7a3b      	ldrb	r3, [r7, #8]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b21a      	sxth	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002d70:	68fb      	ldr	r3, [r7, #12]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
 8002d82:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8002d84:	f107 0208 	add.w	r2, r7, #8
 8002d88:	2302      	movs	r3, #2
 8002d8a:	212a      	movs	r1, #42	; 0x2a
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff1c 	bl	8002bca <hts221_read_reg>
 8002d92:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002d94:	7a7b      	ldrb	r3, [r7, #9]
 8002d96:	b21a      	sxth	r2, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	7a3b      	ldrb	r3, [r7, #8]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b21a      	sxth	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	801a      	strh	r2, [r3, #0]

  return ret;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002dca:	2301      	movs	r3, #1
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	210f      	movs	r1, #15
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fefa 	bl	8002bca <hts221_read_reg>
 8002dd6:	60f8      	str	r0, [r7, #12]

  return ret;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	2301      	movs	r3, #1
 8002df4:	2120      	movs	r1, #32
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fee7 	bl	8002bca <hts221_read_reg>
 8002dfc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10f      	bne.n	8002e24 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	7a3b      	ldrb	r3, [r7, #8]
 8002e0e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002e12:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002e14:	f107 0208 	add.w	r2, r7, #8
 8002e18:	2301      	movs	r3, #1
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff feec 	bl	8002bfa <hts221_write_reg>
 8002e22:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e24:	68fb      	ldr	r3, [r7, #12]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8002e38:	f107 020b 	add.w	r2, r7, #11
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	2130      	movs	r1, #48	; 0x30
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fec2 	bl	8002bca <hts221_read_reg>
 8002e46:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e52:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002e60:	68fb      	ldr	r3, [r7, #12]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8002e74:	f107 020b 	add.w	r2, r7, #11
 8002e78:	2301      	movs	r3, #1
 8002e7a:	2131      	movs	r1, #49	; 0x31
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fea4 	bl	8002bca <hts221_read_reg>
 8002e82:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8002eb0:	f107 020f 	add.w	r2, r7, #15
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	2132      	movs	r1, #50	; 0x32
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fe86 	bl	8002bca <hts221_read_reg>
 8002ebe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11b      	bne.n	8002efe <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002ec6:	f107 0210 	add.w	r2, r7, #16
 8002eca:	2301      	movs	r3, #1
 8002ecc:	2135      	movs	r1, #53	; 0x35
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff fe7b 	bl	8002bca <hts221_read_reg>
 8002ed4:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8002ed6:	7c3b      	ldrb	r3, [r7, #16]
 8002ed8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ef0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8002f12:	f107 020f 	add.w	r2, r7, #15
 8002f16:	2301      	movs	r3, #1
 8002f18:	2133      	movs	r1, #51	; 0x33
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fe55 	bl	8002bca <hts221_read_reg>
 8002f20:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d11b      	bne.n	8002f60 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002f28:	f107 0210 	add.w	r2, r7, #16
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	2135      	movs	r1, #53	; 0x35
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fe4a 	bl	8002bca <hts221_read_reg>
 8002f36:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8002f38:	7c3b      	ldrb	r3, [r7, #16]
 8002f3a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002f42:	7cfb      	ldrb	r3, [r7, #19]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	4413      	add	r3, r2
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f52:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8002f60:	697b      	ldr	r3, [r7, #20]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002f74:	f107 0208 	add.w	r2, r7, #8
 8002f78:	2302      	movs	r3, #2
 8002f7a:	2136      	movs	r1, #54	; 0x36
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fe24 	bl	8002bca <hts221_read_reg>
 8002f82:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002f84:	7a7b      	ldrb	r3, [r7, #9]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	7a3b      	ldrb	r3, [r7, #8]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002f96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002fbc:	f107 0208 	add.w	r2, r7, #8
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	213a      	movs	r1, #58	; 0x3a
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff fe00 	bl	8002bca <hts221_read_reg>
 8002fca:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002fcc:	7a7b      	ldrb	r3, [r7, #9]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	7a3b      	ldrb	r3, [r7, #8]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8002fde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003004:	f107 0208 	add.w	r2, r7, #8
 8003008:	2302      	movs	r3, #2
 800300a:	213c      	movs	r1, #60	; 0x3c
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff fddc 	bl	8002bca <hts221_read_reg>
 8003012:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003014:	7a7b      	ldrb	r3, [r7, #9]
 8003016:	b29b      	uxth	r3, r3
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	b29a      	uxth	r2, r3
 800301c:	7a3b      	ldrb	r3, [r7, #8]
 800301e:	b29b      	uxth	r3, r3
 8003020:	4413      	add	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003026:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800304c:	f107 0208 	add.w	r2, r7, #8
 8003050:	2302      	movs	r3, #2
 8003052:	213e      	movs	r1, #62	; 0x3e
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fdb8 	bl	8002bca <hts221_read_reg>
 800305a:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800305c:	7a7b      	ldrb	r3, [r7, #9]
 800305e:	b29b      	uxth	r3, r3
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	b29a      	uxth	r2, r3
 8003064:	7a3b      	ldrb	r3, [r7, #8]
 8003066:	b29b      	uxth	r3, r3
 8003068:	4413      	add	r3, r2
 800306a:	b29b      	uxth	r3, r3
 800306c:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800306e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d103      	bne.n	80030a8 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	e051      	b.n	800314c <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	7b1a      	ldrb	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <LIS2DW12_RegisterBusIO+0xcc>)
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <LIS2DW12_RegisterBusIO+0xd0>)
 80030ea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	e020      	b.n	800314c <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4798      	blx	r3
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e016      	b.n	800314c <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d112      	bne.n	800314c <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10d      	bne.n	800314c <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003130:	2305      	movs	r3, #5
 8003132:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003134:	7afb      	ldrb	r3, [r7, #11]
 8003136:	461a      	mov	r2, r3
 8003138:	2121      	movs	r1, #33	; 0x21
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fd87 	bl	8003c4e <LIS2DW12_Write_Reg>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	08003fe1 	.word	0x08003fe1
 800315c:	08004017 	.word	0x08004017

08003160 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3320      	adds	r3, #32
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fa94 	bl	800469c <lis2dw12_auto_increment_set>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e04b      	b.n	8003218 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3320      	adds	r3, #32
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f9a8 	bl	80044dc <lis2dw12_block_data_update_set>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e03f      	b.n	8003218 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3320      	adds	r3, #32
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 faa2 	bl	80046e8 <lis2dw12_fifo_mode_set>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e033      	b.n	8003218 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3320      	adds	r3, #32
 80031b4:	2104      	movs	r1, #4
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 ff78 	bl	80040ac <lis2dw12_power_mode_set>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e027      	b.n	8003218 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <LIS2DW12_Init+0xc0>)
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3320      	adds	r3, #32
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 f869 	bl	80042bc <lis2dw12_data_rate_set>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
 80031f4:	e010      	b.n	8003218 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3320      	adds	r3, #32
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f001 f993 	bl	8004528 <lis2dw12_full_scale_set>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003208:	f04f 33ff 	mov.w	r3, #4294967295
 800320c:	e004      	b.n	8003218 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	42c80000 	.word	0x42c80000

08003224 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f888 	bl	8003342 <LIS2DW12_ACC_Disable>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e010      	b.n	8003260 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2DW12_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	6839      	ldr	r1, [r7, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f001 f9fe 	bl	800467a <lis2dw12_device_id_get>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003284:	f04f 33ff 	mov.w	r3, #4294967295
 8003288:	e000      	b.n	800328c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2200      	movs	r2, #0
 80032a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2200      	movs	r2, #0
 80032ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2200      	movs	r2, #0
 80032ba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2210      	movs	r2, #16
 80032c0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	4a06      	ldr	r2, [pc, #24]	; (80032ec <LIS2DW12_GetCapabilities+0x58>)
 80032d4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	44c80000 	.word	0x44c80000

080032f0 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e019      	b.n	800333a <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003318:	461a      	mov	r2, r3
 800331a:	eeb0 0a67 	vmov.f32	s0, s15
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fcb0 	bl	8003c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e004      	b.n	800333a <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	e010      	b.n	800337a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3320      	adds	r3, #32
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f000 ffac 	bl	80042bc <lis2dw12_data_rate_set>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 800336a:	f04f 33ff 	mov.w	r3, #4294967295
 800336e:	e004      	b.n	800337a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2DW12_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3320      	adds	r3, #32
 8003396:	f107 020b 	add.w	r2, r7, #11
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f001 f8e9 	bl	8004574 <lis2dw12_full_scale_get>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 80033a8:	f04f 33ff 	mov.w	r3, #4294967295
 80033ac:	e0a0      	b.n	80034f0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3320      	adds	r3, #32
 80033b2:	f107 020a 	add.w	r2, r7, #10
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fec5 	bl	8004148 <lis2dw12_power_mode_get>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
 80033c8:	e092      	b.n	80034f0 <LIS2DW12_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 80033ca:	7abb      	ldrb	r3, [r7, #10]
 80033cc:	2b1b      	cmp	r3, #27
 80033ce:	f200 8087 	bhi.w	80034e0 <LIS2DW12_ACC_GetSensitivity+0x15c>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <LIS2DW12_ACC_GetSensitivity+0x54>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	08003449 	.word	0x08003449
 80033dc:	08003495 	.word	0x08003495
 80033e0:	08003495 	.word	0x08003495
 80033e4:	08003495 	.word	0x08003495
 80033e8:	08003495 	.word	0x08003495
 80033ec:	080034e1 	.word	0x080034e1
 80033f0:	080034e1 	.word	0x080034e1
 80033f4:	080034e1 	.word	0x080034e1
 80033f8:	08003449 	.word	0x08003449
 80033fc:	08003495 	.word	0x08003495
 8003400:	08003495 	.word	0x08003495
 8003404:	08003495 	.word	0x08003495
 8003408:	080034e1 	.word	0x080034e1
 800340c:	080034e1 	.word	0x080034e1
 8003410:	080034e1 	.word	0x080034e1
 8003414:	080034e1 	.word	0x080034e1
 8003418:	08003449 	.word	0x08003449
 800341c:	08003495 	.word	0x08003495
 8003420:	08003495 	.word	0x08003495
 8003424:	08003495 	.word	0x08003495
 8003428:	08003495 	.word	0x08003495
 800342c:	080034e1 	.word	0x080034e1
 8003430:	080034e1 	.word	0x080034e1
 8003434:	080034e1 	.word	0x080034e1
 8003438:	08003449 	.word	0x08003449
 800343c:	08003495 	.word	0x08003495
 8003440:	08003495 	.word	0x08003495
 8003444:	08003495 	.word	0x08003495
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	2b03      	cmp	r3, #3
 800344c:	d81a      	bhi.n	8003484 <LIS2DW12_ACC_GetSensitivity+0x100>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <LIS2DW12_ACC_GetSensitivity+0xd0>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003465 	.word	0x08003465
 8003458:	0800346d 	.word	0x0800346d
 800345c:	08003475 	.word	0x08003475
 8003460:	0800347d 	.word	0x0800347d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 8003468:	601a      	str	r2, [r3, #0]
          break;
 800346a:	e012      	b.n	8003492 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	4a23      	ldr	r2, [pc, #140]	; (80034fc <LIS2DW12_ACC_GetSensitivity+0x178>)
 8003470:	601a      	str	r2, [r3, #0]
          break;
 8003472:	e00e      	b.n	8003492 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4a22      	ldr	r2, [pc, #136]	; (8003500 <LIS2DW12_ACC_GetSensitivity+0x17c>)
 8003478:	601a      	str	r2, [r3, #0]
          break;
 800347a:	e00a      	b.n	8003492 <LIS2DW12_ACC_GetSensitivity+0x10e>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <LIS2DW12_ACC_GetSensitivity+0x180>)
 8003480:	601a      	str	r2, [r3, #0]
          break;
 8003482:	e006      	b.n	8003492 <LIS2DW12_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <LIS2DW12_ACC_GetSensitivity+0x184>)
 8003488:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	60fb      	str	r3, [r7, #12]
          break;
 8003490:	bf00      	nop
      }
      break;
 8003492:	e02c      	b.n	80034ee <LIS2DW12_ACC_GetSensitivity+0x16a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d81a      	bhi.n	80034d0 <LIS2DW12_ACC_GetSensitivity+0x14c>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b9 	.word	0x080034b9
 80034a8:	080034c1 	.word	0x080034c1
 80034ac:	080034c9 	.word	0x080034c9
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <LIS2DW12_ACC_GetSensitivity+0x188>)
 80034b4:	601a      	str	r2, [r3, #0]
          break;
 80034b6:	e012      	b.n	80034de <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <LIS2DW12_ACC_GetSensitivity+0x18c>)
 80034bc:	601a      	str	r2, [r3, #0]
          break;
 80034be:	e00e      	b.n	80034de <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <LIS2DW12_ACC_GetSensitivity+0x174>)
 80034c4:	601a      	str	r2, [r3, #0]
          break;
 80034c6:	e00a      	b.n	80034de <LIS2DW12_ACC_GetSensitivity+0x15a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <LIS2DW12_ACC_GetSensitivity+0x178>)
 80034cc:	601a      	str	r2, [r3, #0]
          break;
 80034ce:	e006      	b.n	80034de <LIS2DW12_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	4a0d      	ldr	r2, [pc, #52]	; (8003508 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80034d4:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	60fb      	str	r3, [r7, #12]
          break;
 80034dc:	bf00      	nop
      }
      break;
 80034de:	e006      	b.n	80034ee <LIS2DW12_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <LIS2DW12_ACC_GetSensitivity+0x184>)
 80034e4:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	60fb      	str	r3, [r7, #12]
      break;
 80034ec:	bf00      	nop
  }

  return ret;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	3f79db23 	.word	0x3f79db23
 80034fc:	3ff9db23 	.word	0x3ff9db23
 8003500:	4079db23 	.word	0x4079db23
 8003504:	40f9db23 	.word	0x40f9db23
 8003508:	bf800000 	.word	0xbf800000
 800350c:	3e79db23 	.word	0x3e79db23
 8003510:	3ef9db23 	.word	0x3ef9db23

08003514 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3320      	adds	r3, #32
 8003526:	f107 020b 	add.w	r2, r7, #11
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 ff0b 	bl	8004348 <lis2dw12_data_rate_get>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	e1d4      	b.n	80038e8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3320      	adds	r3, #32
 8003542:	f107 020a 	add.w	r2, r7, #10
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fdfd 	bl	8004148 <lis2dw12_power_mode_get>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	e1c6      	b.n	80038e8 <LIS2DW12_ACC_GetOutputDataRate+0x3d4>
  }

  switch (odr_low_level)
 800355a:	7afb      	ldrb	r3, [r7, #11]
 800355c:	2b32      	cmp	r3, #50	; 0x32
 800355e:	f200 81bb 	bhi.w	80038d8 <LIS2DW12_ACC_GetOutputDataRate+0x3c4>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	08003635 	.word	0x08003635
 800356c:	0800363f 	.word	0x0800363f
 8003570:	080036dd 	.word	0x080036dd
 8003574:	080036e5 	.word	0x080036e5
 8003578:	080036ed 	.word	0x080036ed
 800357c:	080036f5 	.word	0x080036f5
 8003580:	080036fd 	.word	0x080036fd
 8003584:	08003705 	.word	0x08003705
 8003588:	080037a1 	.word	0x080037a1
 800358c:	0800383d 	.word	0x0800383d
 8003590:	080038d9 	.word	0x080038d9
 8003594:	080038d9 	.word	0x080038d9
 8003598:	080038d9 	.word	0x080038d9
 800359c:	080038d9 	.word	0x080038d9
 80035a0:	080038d9 	.word	0x080038d9
 80035a4:	080038d9 	.word	0x080038d9
 80035a8:	080038d9 	.word	0x080038d9
 80035ac:	080038d9 	.word	0x080038d9
 80035b0:	08003635 	.word	0x08003635
 80035b4:	080038d9 	.word	0x080038d9
 80035b8:	080038d9 	.word	0x080038d9
 80035bc:	080038d9 	.word	0x080038d9
 80035c0:	080038d9 	.word	0x080038d9
 80035c4:	080038d9 	.word	0x080038d9
 80035c8:	080038d9 	.word	0x080038d9
 80035cc:	080038d9 	.word	0x080038d9
 80035d0:	080038d9 	.word	0x080038d9
 80035d4:	080038d9 	.word	0x080038d9
 80035d8:	080038d9 	.word	0x080038d9
 80035dc:	080038d9 	.word	0x080038d9
 80035e0:	080038d9 	.word	0x080038d9
 80035e4:	080038d9 	.word	0x080038d9
 80035e8:	080038d9 	.word	0x080038d9
 80035ec:	080038d9 	.word	0x080038d9
 80035f0:	080038d9 	.word	0x080038d9
 80035f4:	080038d9 	.word	0x080038d9
 80035f8:	080038d9 	.word	0x080038d9
 80035fc:	080038d9 	.word	0x080038d9
 8003600:	080038d9 	.word	0x080038d9
 8003604:	080038d9 	.word	0x080038d9
 8003608:	080038d9 	.word	0x080038d9
 800360c:	080038d9 	.word	0x080038d9
 8003610:	080038d9 	.word	0x080038d9
 8003614:	080038d9 	.word	0x080038d9
 8003618:	080038d9 	.word	0x080038d9
 800361c:	080038d9 	.word	0x080038d9
 8003620:	080038d9 	.word	0x080038d9
 8003624:	080038d9 	.word	0x080038d9
 8003628:	080038d9 	.word	0x080038d9
 800362c:	080038d9 	.word	0x080038d9
 8003630:	08003635 	.word	0x08003635
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
      break;
 800363c:	e153      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 800363e:	7abb      	ldrb	r3, [r7, #10]
 8003640:	2b1b      	cmp	r3, #27
 8003642:	d843      	bhi.n	80036cc <LIS2DW12_ACC_GetOutputDataRate+0x1b8>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <LIS2DW12_ACC_GetOutputDataRate+0x138>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	080036c5 	.word	0x080036c5
 8003650:	080036c5 	.word	0x080036c5
 8003654:	080036c5 	.word	0x080036c5
 8003658:	080036c5 	.word	0x080036c5
 800365c:	080036bd 	.word	0x080036bd
 8003660:	080036cd 	.word	0x080036cd
 8003664:	080036cd 	.word	0x080036cd
 8003668:	080036cd 	.word	0x080036cd
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036c5 	.word	0x080036c5
 8003674:	080036c5 	.word	0x080036c5
 8003678:	080036c5 	.word	0x080036c5
 800367c:	080036cd 	.word	0x080036cd
 8003680:	080036cd 	.word	0x080036cd
 8003684:	080036cd 	.word	0x080036cd
 8003688:	080036cd 	.word	0x080036cd
 800368c:	080036c5 	.word	0x080036c5
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036c5 	.word	0x080036c5
 8003698:	080036c5 	.word	0x080036c5
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036cd 	.word	0x080036cd
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	080036c5 	.word	0x080036c5
 80036b0:	080036c5 	.word	0x080036c5
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036c5 	.word	0x080036c5
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4a8c      	ldr	r2, [pc, #560]	; (80038f0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80036c0:	601a      	str	r2, [r3, #0]
          break;
 80036c2:	e00a      	b.n	80036da <LIS2DW12_ACC_GetOutputDataRate+0x1c6>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4a8b      	ldr	r2, [pc, #556]	; (80038f4 <LIS2DW12_ACC_GetOutputDataRate+0x3e0>)
 80036c8:	601a      	str	r2, [r3, #0]
          break;
 80036ca:	e006      	b.n	80036da <LIS2DW12_ACC_GetOutputDataRate+0x1c6>

        default:
          *Odr = -1.0f;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	4a8a      	ldr	r2, [pc, #552]	; (80038f8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80036d0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	60fb      	str	r3, [r7, #12]
          break;
 80036d8:	bf00      	nop
      }
      break;
 80036da:	e104      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4a84      	ldr	r2, [pc, #528]	; (80038f0 <LIS2DW12_ACC_GetOutputDataRate+0x3dc>)
 80036e0:	601a      	str	r2, [r3, #0]
      break;
 80036e2:	e100      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4a85      	ldr	r2, [pc, #532]	; (80038fc <LIS2DW12_ACC_GetOutputDataRate+0x3e8>)
 80036e8:	601a      	str	r2, [r3, #0]
      break;
 80036ea:	e0fc      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4a84      	ldr	r2, [pc, #528]	; (8003900 <LIS2DW12_ACC_GetOutputDataRate+0x3ec>)
 80036f0:	601a      	str	r2, [r3, #0]
      break;
 80036f2:	e0f8      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4a83      	ldr	r2, [pc, #524]	; (8003904 <LIS2DW12_ACC_GetOutputDataRate+0x3f0>)
 80036f8:	601a      	str	r2, [r3, #0]
      break;
 80036fa:	e0f4      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4a82      	ldr	r2, [pc, #520]	; (8003908 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003700:	601a      	str	r2, [r3, #0]
      break;
 8003702:	e0f0      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003704:	7abb      	ldrb	r3, [r7, #10]
 8003706:	2b1b      	cmp	r3, #27
 8003708:	d842      	bhi.n	8003790 <LIS2DW12_ACC_GetOutputDataRate+0x27c>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <LIS2DW12_ACC_GetOutputDataRate+0x1fc>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	08003789 	.word	0x08003789
 8003714:	08003789 	.word	0x08003789
 8003718:	08003789 	.word	0x08003789
 800371c:	08003789 	.word	0x08003789
 8003720:	08003781 	.word	0x08003781
 8003724:	08003791 	.word	0x08003791
 8003728:	08003791 	.word	0x08003791
 800372c:	08003791 	.word	0x08003791
 8003730:	08003789 	.word	0x08003789
 8003734:	08003789 	.word	0x08003789
 8003738:	08003789 	.word	0x08003789
 800373c:	08003789 	.word	0x08003789
 8003740:	08003791 	.word	0x08003791
 8003744:	08003791 	.word	0x08003791
 8003748:	08003791 	.word	0x08003791
 800374c:	08003791 	.word	0x08003791
 8003750:	08003789 	.word	0x08003789
 8003754:	08003789 	.word	0x08003789
 8003758:	08003789 	.word	0x08003789
 800375c:	08003789 	.word	0x08003789
 8003760:	08003781 	.word	0x08003781
 8003764:	08003791 	.word	0x08003791
 8003768:	08003791 	.word	0x08003791
 800376c:	08003791 	.word	0x08003791
 8003770:	08003789 	.word	0x08003789
 8003774:	08003789 	.word	0x08003789
 8003778:	08003789 	.word	0x08003789
 800377c:	08003789 	.word	0x08003789
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	4a62      	ldr	r2, [pc, #392]	; (800390c <LIS2DW12_ACC_GetOutputDataRate+0x3f8>)
 8003784:	601a      	str	r2, [r3, #0]
          break;
 8003786:	e00a      	b.n	800379e <LIS2DW12_ACC_GetOutputDataRate+0x28a>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	4a5f      	ldr	r2, [pc, #380]	; (8003908 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 800378c:	601a      	str	r2, [r3, #0]
          break;
 800378e:	e006      	b.n	800379e <LIS2DW12_ACC_GetOutputDataRate+0x28a>

        default:
          *Odr = -1.0f;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4a59      	ldr	r2, [pc, #356]	; (80038f8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003794:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	60fb      	str	r3, [r7, #12]
          break;
 800379c:	bf00      	nop
      }
      break;
 800379e:	e0a2      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80037a0:	7abb      	ldrb	r3, [r7, #10]
 80037a2:	2b1b      	cmp	r3, #27
 80037a4:	d842      	bhi.n	800382c <LIS2DW12_ACC_GetOutputDataRate+0x318>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <LIS2DW12_ACC_GetOutputDataRate+0x298>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	08003825 	.word	0x08003825
 80037b0:	08003825 	.word	0x08003825
 80037b4:	08003825 	.word	0x08003825
 80037b8:	08003825 	.word	0x08003825
 80037bc:	0800381d 	.word	0x0800381d
 80037c0:	0800382d 	.word	0x0800382d
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	0800382d 	.word	0x0800382d
 80037cc:	08003825 	.word	0x08003825
 80037d0:	08003825 	.word	0x08003825
 80037d4:	08003825 	.word	0x08003825
 80037d8:	08003825 	.word	0x08003825
 80037dc:	0800382d 	.word	0x0800382d
 80037e0:	0800382d 	.word	0x0800382d
 80037e4:	0800382d 	.word	0x0800382d
 80037e8:	0800382d 	.word	0x0800382d
 80037ec:	08003825 	.word	0x08003825
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003825 	.word	0x08003825
 80037f8:	08003825 	.word	0x08003825
 80037fc:	0800381d 	.word	0x0800381d
 8003800:	0800382d 	.word	0x0800382d
 8003804:	0800382d 	.word	0x0800382d
 8003808:	0800382d 	.word	0x0800382d
 800380c:	08003825 	.word	0x08003825
 8003810:	08003825 	.word	0x08003825
 8003814:	08003825 	.word	0x08003825
 8003818:	08003825 	.word	0x08003825
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4a3c      	ldr	r2, [pc, #240]	; (8003910 <LIS2DW12_ACC_GetOutputDataRate+0x3fc>)
 8003820:	601a      	str	r2, [r3, #0]
          break;
 8003822:	e00a      	b.n	800383a <LIS2DW12_ACC_GetOutputDataRate+0x326>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	4a38      	ldr	r2, [pc, #224]	; (8003908 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 8003828:	601a      	str	r2, [r3, #0]
          break;
 800382a:	e006      	b.n	800383a <LIS2DW12_ACC_GetOutputDataRate+0x326>

        default:
          *Odr = -1.0f;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4a32      	ldr	r2, [pc, #200]	; (80038f8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 8003830:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	60fb      	str	r3, [r7, #12]
          break;
 8003838:	bf00      	nop
      }
      break;
 800383a:	e054      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 800383c:	7abb      	ldrb	r3, [r7, #10]
 800383e:	2b1b      	cmp	r3, #27
 8003840:	d842      	bhi.n	80038c8 <LIS2DW12_ACC_GetOutputDataRate+0x3b4>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <LIS2DW12_ACC_GetOutputDataRate+0x334>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	080038c1 	.word	0x080038c1
 800384c:	080038c1 	.word	0x080038c1
 8003850:	080038c1 	.word	0x080038c1
 8003854:	080038c1 	.word	0x080038c1
 8003858:	080038b9 	.word	0x080038b9
 800385c:	080038c9 	.word	0x080038c9
 8003860:	080038c9 	.word	0x080038c9
 8003864:	080038c9 	.word	0x080038c9
 8003868:	080038c1 	.word	0x080038c1
 800386c:	080038c1 	.word	0x080038c1
 8003870:	080038c1 	.word	0x080038c1
 8003874:	080038c1 	.word	0x080038c1
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038c9 	.word	0x080038c9
 8003880:	080038c9 	.word	0x080038c9
 8003884:	080038c9 	.word	0x080038c9
 8003888:	080038c1 	.word	0x080038c1
 800388c:	080038c1 	.word	0x080038c1
 8003890:	080038c1 	.word	0x080038c1
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038b9 	.word	0x080038b9
 800389c:	080038c9 	.word	0x080038c9
 80038a0:	080038c9 	.word	0x080038c9
 80038a4:	080038c9 	.word	0x080038c9
 80038a8:	080038c1 	.word	0x080038c1
 80038ac:	080038c1 	.word	0x080038c1
 80038b0:	080038c1 	.word	0x080038c1
 80038b4:	080038c1 	.word	0x080038c1
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <LIS2DW12_ACC_GetOutputDataRate+0x400>)
 80038bc:	601a      	str	r2, [r3, #0]
          break;
 80038be:	e00a      	b.n	80038d6 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4a11      	ldr	r2, [pc, #68]	; (8003908 <LIS2DW12_ACC_GetOutputDataRate+0x3f4>)
 80038c4:	601a      	str	r2, [r3, #0]
          break;
 80038c6:	e006      	b.n	80038d6 <LIS2DW12_ACC_GetOutputDataRate+0x3c2>

        default:
          *Odr = -1.0f;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80038cc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	60fb      	str	r3, [r7, #12]
          break;
 80038d4:	bf00      	nop
      }
      break;
 80038d6:	e006      	b.n	80038e6 <LIS2DW12_ACC_GetOutputDataRate+0x3d2>

    default:
      *Odr = -1.0f;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4a07      	ldr	r2, [pc, #28]	; (80038f8 <LIS2DW12_ACC_GetOutputDataRate+0x3e4>)
 80038dc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	60fb      	str	r3, [r7, #12]
      break;
 80038e4:	bf00      	nop
  }

  return ret;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	41480000 	.word	0x41480000
 80038f4:	3fcccccd 	.word	0x3fcccccd
 80038f8:	bf800000 	.word	0xbf800000
 80038fc:	41c80000 	.word	0x41c80000
 8003900:	42480000 	.word	0x42480000
 8003904:	42c80000 	.word	0x42c80000
 8003908:	43480000 	.word	0x43480000
 800390c:	43c80000 	.word	0x43c80000
 8003910:	44480000 	.word	0x44480000
 8003914:	44c80000 	.word	0x44c80000

08003918 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003924:	2200      	movs	r2, #0
 8003926:	2100      	movs	r1, #0
 8003928:	ed97 0a00 	vldr	s0, [r7]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f805 	bl	800393c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	ed87 0a02 	vstr	s0, [r7, #8]
 8003948:	460b      	mov	r3, r1
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	4613      	mov	r3, r2
 800394e:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003956:	2b01      	cmp	r3, #1
 8003958:	d109      	bne.n	800396e <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 800395a:	79ba      	ldrb	r2, [r7, #6]
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	4619      	mov	r1, r3
 8003960:	ed97 0a02 	vldr	s0, [r7, #8]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f98d 	bl	8003c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 800396a:	4603      	mov	r3, r0
 800396c:	e008      	b.n	8003980 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 800396e:	79ba      	ldrb	r2, [r7, #6]
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	4619      	mov	r1, r3
 8003974:	ed97 0a02 	vldr	s0, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fa9f 	bl	8003ebc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800397e:	4603      	mov	r3, r0
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3320      	adds	r3, #32
 800399a:	f107 020b 	add.w	r2, r7, #11
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fde7 	bl	8004574 <lis2dw12_full_scale_get>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
 80039b0:	e027      	b.n	8003a02 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	2b03      	cmp	r3, #3
 80039b6:	d81b      	bhi.n	80039f0 <LIS2DW12_ACC_GetFullScale+0x68>
 80039b8:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <LIS2DW12_ACC_GetFullScale+0x38>)
 80039ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039be:	bf00      	nop
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039d9 	.word	0x080039d9
 80039c8:	080039e1 	.word	0x080039e1
 80039cc:	080039e9 	.word	0x080039e9
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	601a      	str	r2, [r3, #0]
      break;
 80039d6:	e013      	b.n	8003a00 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2204      	movs	r2, #4
 80039dc:	601a      	str	r2, [r3, #0]
      break;
 80039de:	e00f      	b.n	8003a00 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	2208      	movs	r2, #8
 80039e4:	601a      	str	r2, [r3, #0]
      break;
 80039e6:	e00b      	b.n	8003a00 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2210      	movs	r2, #16
 80039ec:	601a      	str	r2, [r3, #0]
      break;
 80039ee:	e007      	b.n	8003a00 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f04f 32ff 	mov.w	r2, #4294967295
 80039f6:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	60fb      	str	r3, [r7, #12]
      break;
 80039fe:	bf00      	nop
  }

  return ret;
 8003a00:	68fb      	ldr	r3, [r7, #12]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop

08003a0c <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	dd0b      	ble.n	8003a34 <LIS2DW12_ACC_SetFullScale+0x28>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	dd06      	ble.n	8003a30 <LIS2DW12_ACC_SetFullScale+0x24>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	dc01      	bgt.n	8003a2c <LIS2DW12_ACC_SetFullScale+0x20>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e004      	b.n	8003a36 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e002      	b.n	8003a36 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003a30:	2301      	movs	r3, #1
 8003a32:	e000      	b.n	8003a36 <LIS2DW12_ACC_SetFullScale+0x2a>
 8003a34:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003a36:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	4611      	mov	r1, r2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fd71 	bl	8004528 <lis2dw12_full_scale_set>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a50:	e000      	b.n	8003a54 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3320      	adds	r3, #32
 8003a6e:	f107 020b 	add.w	r2, r7, #11
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fb67 	bl	8004148 <lis2dw12_power_mode_get>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003a80:	f04f 33ff 	mov.w	r3, #4294967295
 8003a84:	e089      	b.n	8003b9a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	3320      	adds	r3, #32
 8003a8a:	f107 020c 	add.w	r2, r7, #12
 8003a8e:	4611      	mov	r1, r2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fda7 	bl	80045e4 <lis2dw12_acceleration_raw_get>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	e07b      	b.n	8003b9a <LIS2DW12_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 8003aa2:	7afb      	ldrb	r3, [r7, #11]
 8003aa4:	2b1b      	cmp	r3, #27
 8003aa6:	d873      	bhi.n	8003b90 <LIS2DW12_ACC_GetAxesRaw+0x134>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <LIS2DW12_ACC_GetAxesRaw+0x54>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003b21 	.word	0x08003b21
 8003ab4:	08003b59 	.word	0x08003b59
 8003ab8:	08003b59 	.word	0x08003b59
 8003abc:	08003b59 	.word	0x08003b59
 8003ac0:	08003b59 	.word	0x08003b59
 8003ac4:	08003b91 	.word	0x08003b91
 8003ac8:	08003b91 	.word	0x08003b91
 8003acc:	08003b91 	.word	0x08003b91
 8003ad0:	08003b21 	.word	0x08003b21
 8003ad4:	08003b59 	.word	0x08003b59
 8003ad8:	08003b59 	.word	0x08003b59
 8003adc:	08003b59 	.word	0x08003b59
 8003ae0:	08003b91 	.word	0x08003b91
 8003ae4:	08003b91 	.word	0x08003b91
 8003ae8:	08003b91 	.word	0x08003b91
 8003aec:	08003b91 	.word	0x08003b91
 8003af0:	08003b21 	.word	0x08003b21
 8003af4:	08003b59 	.word	0x08003b59
 8003af8:	08003b59 	.word	0x08003b59
 8003afc:	08003b59 	.word	0x08003b59
 8003b00:	08003b59 	.word	0x08003b59
 8003b04:	08003b91 	.word	0x08003b91
 8003b08:	08003b91 	.word	0x08003b91
 8003b0c:	08003b91 	.word	0x08003b91
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b59 	.word	0x08003b59
 8003b18:	08003b59 	.word	0x08003b59
 8003b1c:	08003b59 	.word	0x08003b59
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8003b20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	da00      	bge.n	8003b2a <LIS2DW12_ACC_GetAxesRaw+0xce>
 8003b28:	330f      	adds	r3, #15
 8003b2a:	111b      	asrs	r3, r3, #4
 8003b2c:	b21a      	sxth	r2, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8003b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da00      	bge.n	8003b3c <LIS2DW12_ACC_GetAxesRaw+0xe0>
 8003b3a:	330f      	adds	r3, #15
 8003b3c:	111b      	asrs	r3, r3, #4
 8003b3e:	b21a      	sxth	r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8003b44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	da00      	bge.n	8003b4e <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003b4c:	330f      	adds	r3, #15
 8003b4e:	111b      	asrs	r3, r3, #4
 8003b50:	b21a      	sxth	r2, r3
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	809a      	strh	r2, [r3, #4]
      break;
 8003b56:	e01f      	b.n	8003b98 <LIS2DW12_ACC_GetAxesRaw+0x13c>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	da00      	bge.n	8003b62 <LIS2DW12_ACC_GetAxesRaw+0x106>
 8003b60:	3303      	adds	r3, #3
 8003b62:	109b      	asrs	r3, r3, #2
 8003b64:	b21a      	sxth	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003b6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da00      	bge.n	8003b74 <LIS2DW12_ACC_GetAxesRaw+0x118>
 8003b72:	3303      	adds	r3, #3
 8003b74:	109b      	asrs	r3, r3, #2
 8003b76:	b21a      	sxth	r2, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8003b7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da00      	bge.n	8003b86 <LIS2DW12_ACC_GetAxesRaw+0x12a>
 8003b84:	3303      	adds	r3, #3
 8003b86:	109b      	asrs	r3, r3, #2
 8003b88:	b21a      	sxth	r2, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	809a      	strh	r2, [r3, #4]
      break;
 8003b8e:	e003      	b.n	8003b98 <LIS2DW12_ACC_GetAxesRaw+0x13c>

    default:
      ret = LIS2DW12_ERROR;
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	617b      	str	r3, [r7, #20]
      break;
 8003b96:	bf00      	nop
  }

  return ret;
 8003b98:	697b      	ldr	r3, [r7, #20]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop

08003ba4 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ff4e 	bl	8003a5c <LIS2DW12_ACC_GetAxesRaw>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	e03c      	b.n	8003c46 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fbd6 	bl	8003384 <LIS2DW12_ACC_GetSensitivity>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	e030      	b.n	8003c46 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003be4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bfc:	ee17 2a90 	vmov	r2, s15
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003c04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c1c:	ee17 2a90 	vmov	r2, s15
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003c24:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c3c:	ee17 2a90 	vmov	r2, s15
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b082      	sub	sp, #8
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f103 0020 	add.w	r0, r3, #32
 8003c64:	1cba      	adds	r2, r7, #2
 8003c66:	78f9      	ldrb	r1, [r7, #3]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f000 fa07 	bl	800407c <lis2dw12_write_reg>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	e000      	b.n	8003c7c <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c90:	460b      	mov	r3, r1
 8003c92:	71fb      	strb	r3, [r7, #7]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d80b      	bhi.n	8003cb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003d11 	.word	0x08003d11
 8003cb0:	08003d3d 	.word	0x08003d3d
 8003cb4:	08003d69 	.word	0x08003d69
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003cb8:	79bb      	ldrb	r3, [r7, #6]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d002      	beq.n	8003cc4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8003cc2:	e002      	b.n	8003cca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8003cc4:	2314      	movs	r3, #20
 8003cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8003cc8:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8003cca:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cce:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cda:	d400      	bmi.n	8003cde <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8003cdc:	e05a      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8003cde:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8003ce0:	60bb      	str	r3, [r7, #8]
      break;
 8003ce2:	e057      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8003ce4:	79bb      	ldrb	r3, [r7, #6]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d002      	beq.n	8003cf0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8003cea:	2303      	movs	r3, #3
 8003cec:	75fb      	strb	r3, [r7, #23]
          break;
 8003cee:	e002      	b.n	8003cf6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8003cf0:	2313      	movs	r3, #19
 8003cf2:	75fb      	strb	r3, [r7, #23]
          break;
 8003cf4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cfa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dc00      	bgt.n	8003d0a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8003d08:	e044      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003d0a:	4b66      	ldr	r3, [pc, #408]	; (8003ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003d0c:	60bb      	str	r3, [r7, #8]
      break;
 8003d0e:	e041      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8003d10:	79bb      	ldrb	r3, [r7, #6]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d002      	beq.n	8003d1c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8003d16:	2302      	movs	r3, #2
 8003d18:	75fb      	strb	r3, [r7, #23]
          break;
 8003d1a:	e002      	b.n	8003d22 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003d1c:	2312      	movs	r3, #18
 8003d1e:	75fb      	strb	r3, [r7, #23]
          break;
 8003d20:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d26:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dc00      	bgt.n	8003d36 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8003d34:	e02e      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003d36:	4b5b      	ldr	r3, [pc, #364]	; (8003ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003d38:	60bb      	str	r3, [r7, #8]
      break;
 8003d3a:	e02b      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8003d3c:	79bb      	ldrb	r3, [r7, #6]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d002      	beq.n	8003d48 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
          break;
 8003d46:	e002      	b.n	8003d4e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003d48:	2311      	movs	r3, #17
 8003d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8003d4c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003d4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d52:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5e:	dc00      	bgt.n	8003d62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8003d60:	e018      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8003d62:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003d64:	60bb      	str	r3, [r7, #8]
      break;
 8003d66:	e015      	b.n	8003d94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003d68:	79bb      	ldrb	r3, [r7, #6]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d002      	beq.n	8003d74 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]
          break;
 8003d72:	e002      	b.n	8003d7a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003d74:	2310      	movs	r3, #16
 8003d76:	75fb      	strb	r3, [r7, #23]
          break;
 8003d78:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003d7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d7e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8a:	dc00      	bgt.n	8003d8e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8003d8c:	e001      	b.n	8003d92 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8003d8e:	4b45      	ldr	r3, [pc, #276]	; (8003ea4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8003d90:	60bb      	str	r3, [r7, #8]
      break;
 8003d92:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8003d94:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d98:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8003ea8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 8003d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d801      	bhi.n	8003daa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e04d      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dae:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d801      	bhi.n	8003dc0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e042      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dc4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d801      	bhi.n	8003dd6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e037      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dda:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003eac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8003dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	d801      	bhi.n	8003dec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003de8:	2304      	movs	r3, #4
 8003dea:	e02c      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003dec:	edd7 7a02 	vldr	s15, [r7, #8]
 8003df0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003eb0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8003df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfc:	d801      	bhi.n	8003e02 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8003dfe:	2305      	movs	r3, #5
 8003e00:	e021      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003e02:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e06:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003ea0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8003e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e12:	d801      	bhi.n	8003e18 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003e14:	2306      	movs	r3, #6
 8003e16:	e016      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e1c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003eb4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8003e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	d801      	bhi.n	8003e2e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e00b      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e32:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003eb8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8003e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	d801      	bhi.n	8003e44 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8003e40:	2308      	movs	r3, #8
 8003e42:	e000      	b.n	8003e46 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8003e44:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8003e46:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3320      	adds	r3, #32
 8003e4c:	7dba      	ldrb	r2, [r7, #22]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fa33 	bl	80042bc <lis2dw12_data_rate_set>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e60:	e018      	b.n	8003e94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3320      	adds	r3, #32
 8003e66:	7dfa      	ldrb	r2, [r7, #23]
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 f91e 	bl	80040ac <lis2dw12_power_mode_set>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d002      	beq.n	8003e7c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7a:	e00b      	b.n	8003e94 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	79ba      	ldrb	r2, [r7, #6]
 8003e8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return LIS2DW12_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	41480000 	.word	0x41480000
 8003ea0:	43480000 	.word	0x43480000
 8003ea4:	43480000 	.word	0x43480000
 8003ea8:	3fcccccd 	.word	0x3fcccccd
 8003eac:	42480000 	.word	0x42480000
 8003eb0:	42c80000 	.word	0x42c80000
 8003eb4:	43c80000 	.word	0x43c80000
 8003eb8:	44480000 	.word	0x44480000

08003ebc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	79fa      	ldrb	r2, [r7, #7]
 8003ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	79ba      	ldrb	r2, [r7, #6]
 8003edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8003ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ee4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003fa4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	d801      	bhi.n	8003ef6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8003ef4:	e04d      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8003ef6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003efa:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f06:	d801      	bhi.n	8003f0c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8003f0a:	e042      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8003f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f10:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1c:	d801      	bhi.n	8003f22 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8003f20:	e037      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8003f22:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f26:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003fb4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f32:	d801      	bhi.n	8003f38 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8003f36:	e02c      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8003f38:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003fbc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f48:	d801      	bhi.n	8003f4e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8003f4c:	e021      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8003f4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f52:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003fc4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 8003f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	d801      	bhi.n	8003f64 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003f60:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8003f62:	e016      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8003f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f68:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003fcc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8003f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	d801      	bhi.n	8003f7a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003f78:	e00b      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8003f7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f7e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003fd4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8003f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8a:	d801      	bhi.n	8003f90 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003f8e:	e000      	b.n	8003f92 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	6353      	str	r3, [r2, #52]	; 0x34

  return LIS2DW12_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	3fcccccd 	.word	0x3fcccccd
 8003fa8:	3fcccccd 	.word	0x3fcccccd
 8003fac:	41480000 	.word	0x41480000
 8003fb0:	41c80000 	.word	0x41c80000
 8003fb4:	42480000 	.word	0x42480000
 8003fb8:	42480000 	.word	0x42480000
 8003fbc:	42c80000 	.word	0x42c80000
 8003fc0:	42c80000 	.word	0x42c80000
 8003fc4:	43480000 	.word	0x43480000
 8003fc8:	43480000 	.word	0x43480000
 8003fcc:	43c80000 	.word	0x43c80000
 8003fd0:	43c80000 	.word	0x43c80000
 8003fd4:	44480000 	.word	0x44480000
 8003fd8:	44480000 	.word	0x44480000
 8003fdc:	44c80000 	.word	0x44c80000

08003fe0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b087      	sub	sp, #28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	461a      	mov	r2, r3
 8003fec:	460b      	mov	r3, r1
 8003fee:	72fb      	strb	r3, [r7, #11]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	695c      	ldr	r4, [r3, #20]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	7b1b      	ldrb	r3, [r3, #12]
 8004000:	b298      	uxth	r0, r3
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	b299      	uxth	r1, r3
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	47a0      	blx	r4
 800400c:	4603      	mov	r3, r0
}
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	bd90      	pop	{r4, r7, pc}

08004016 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004016:	b590      	push	{r4, r7, lr}
 8004018:	b087      	sub	sp, #28
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	461a      	mov	r2, r3
 8004022:	460b      	mov	r3, r1
 8004024:	72fb      	strb	r3, [r7, #11]
 8004026:	4613      	mov	r3, r2
 8004028:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	691c      	ldr	r4, [r3, #16]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	7b1b      	ldrb	r3, [r3, #12]
 8004036:	b298      	uxth	r0, r3
 8004038:	7afb      	ldrb	r3, [r7, #11]
 800403a:	b299      	uxth	r1, r3
 800403c:	893b      	ldrh	r3, [r7, #8]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	47a0      	blx	r4
 8004042:	4603      	mov	r3, r0
}
 8004044:	4618      	mov	r0, r3
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd90      	pop	{r4, r7, pc}

0800404c <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	461a      	mov	r2, r3
 8004058:	460b      	mov	r3, r1
 800405a:	72fb      	strb	r3, [r7, #11]
 800405c:	4613      	mov	r3, r2
 800405e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685c      	ldr	r4, [r3, #4]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68d8      	ldr	r0, [r3, #12]
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	7af9      	ldrb	r1, [r7, #11]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	47a0      	blx	r4
 8004070:	6178      	str	r0, [r7, #20]

  return ret;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd90      	pop	{r4, r7, pc}

0800407c <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800407c:	b590      	push	{r4, r7, lr}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	461a      	mov	r2, r3
 8004088:	460b      	mov	r3, r1
 800408a:	72fb      	strb	r3, [r7, #11]
 800408c:	4613      	mov	r3, r2
 800408e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681c      	ldr	r4, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68d8      	ldr	r0, [r3, #12]
 8004098:	893b      	ldrh	r3, [r7, #8]
 800409a:	7af9      	ldrb	r1, [r7, #11]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	47a0      	blx	r4
 80040a0:	6178      	str	r0, [r7, #20]

  return ret;
 80040a2:	697b      	ldr	r3, [r7, #20]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd90      	pop	{r4, r7, pc}

080040ac <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80040b8:	f107 0210 	add.w	r2, r7, #16
 80040bc:	2301      	movs	r3, #1
 80040be:	2120      	movs	r1, #32
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ffc3 	bl	800404c <lis2dw12_read_reg>
 80040c6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	7c3b      	ldrb	r3, [r7, #16]
 80040da:	f362 0383 	bfi	r3, r2, #2, #2
 80040de:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	7c3b      	ldrb	r3, [r7, #16]
 80040ea:	f362 0301 	bfi	r3, r2, #0, #2
 80040ee:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80040f0:	f107 0210 	add.w	r2, r7, #16
 80040f4:	2301      	movs	r3, #1
 80040f6:	2120      	movs	r1, #32
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ffbf 	bl	800407c <lis2dw12_write_reg>
 80040fe:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d107      	bne.n	8004116 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004106:	f107 020c 	add.w	r2, r7, #12
 800410a:	2301      	movs	r3, #1
 800410c:	2125      	movs	r1, #37	; 0x25
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff9c 	bl	800404c <lis2dw12_read_reg>
 8004114:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d110      	bne.n	800413e <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	b2da      	uxtb	r2, r3
 8004126:	7b3b      	ldrb	r3, [r7, #12]
 8004128:	f362 0382 	bfi	r3, r2, #2, #1
 800412c:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800412e:	f107 020c 	add.w	r2, r7, #12
 8004132:	2301      	movs	r3, #1
 8004134:	2125      	movs	r1, #37	; 0x25
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ffa0 	bl	800407c <lis2dw12_write_reg>
 800413c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800413e:	697b      	ldr	r3, [r7, #20]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004152:	f107 0210 	add.w	r2, r7, #16
 8004156:	2301      	movs	r3, #1
 8004158:	2120      	movs	r1, #32
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff ff76 	bl	800404c <lis2dw12_read_reg>
 8004160:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 80a3 	bne.w	80042b0 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800416a:	f107 020c 	add.w	r2, r7, #12
 800416e:	2301      	movs	r3, #1
 8004170:	2125      	movs	r1, #37	; 0x25
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff6a 	bl	800404c <lis2dw12_read_reg>
 8004178:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800417a:	7b3b      	ldrb	r3, [r7, #12]
 800417c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004180:	b2db      	uxtb	r3, r3
 8004182:	011a      	lsls	r2, r3, #4
 8004184:	7c3b      	ldrb	r3, [r7, #16]
 8004186:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800418a:	b2db      	uxtb	r3, r3
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004190:	7c3a      	ldrb	r2, [r7, #16]
 8004192:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8004196:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004198:	4413      	add	r3, r2
 800419a:	2b1b      	cmp	r3, #27
 800419c:	f200 8084 	bhi.w	80042a8 <lis2dw12_power_mode_get+0x160>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <lis2dw12_power_mode_get+0x60>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	08004239 	.word	0x08004239
 80041ac:	08004231 	.word	0x08004231
 80041b0:	08004229 	.word	0x08004229
 80041b4:	08004221 	.word	0x08004221
 80041b8:	08004219 	.word	0x08004219
 80041bc:	080042a9 	.word	0x080042a9
 80041c0:	080042a9 	.word	0x080042a9
 80041c4:	080042a9 	.word	0x080042a9
 80041c8:	08004259 	.word	0x08004259
 80041cc:	08004251 	.word	0x08004251
 80041d0:	08004249 	.word	0x08004249
 80041d4:	08004241 	.word	0x08004241
 80041d8:	080042a9 	.word	0x080042a9
 80041dc:	080042a9 	.word	0x080042a9
 80041e0:	080042a9 	.word	0x080042a9
 80041e4:	080042a9 	.word	0x080042a9
 80041e8:	08004281 	.word	0x08004281
 80041ec:	08004279 	.word	0x08004279
 80041f0:	08004271 	.word	0x08004271
 80041f4:	08004269 	.word	0x08004269
 80041f8:	08004261 	.word	0x08004261
 80041fc:	080042a9 	.word	0x080042a9
 8004200:	080042a9 	.word	0x080042a9
 8004204:	080042a9 	.word	0x080042a9
 8004208:	080042a1 	.word	0x080042a1
 800420c:	08004299 	.word	0x08004299
 8004210:	08004291 	.word	0x08004291
 8004214:	08004289 	.word	0x08004289
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2204      	movs	r2, #4
 800421c:	701a      	strb	r2, [r3, #0]
        break;
 800421e:	e048      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2203      	movs	r2, #3
 8004224:	701a      	strb	r2, [r3, #0]
        break;
 8004226:	e044      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]
        break;
 800422e:	e040      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
        break;
 8004236:	e03c      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
        break;
 800423e:	e038      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	220b      	movs	r2, #11
 8004244:	701a      	strb	r2, [r3, #0]
        break;
 8004246:	e034      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	220a      	movs	r2, #10
 800424c:	701a      	strb	r2, [r3, #0]
        break;
 800424e:	e030      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2209      	movs	r2, #9
 8004254:	701a      	strb	r2, [r3, #0]
        break;
 8004256:	e02c      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2208      	movs	r2, #8
 800425c:	701a      	strb	r2, [r3, #0]
        break;
 800425e:	e028      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2214      	movs	r2, #20
 8004264:	701a      	strb	r2, [r3, #0]
        break;
 8004266:	e024      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2213      	movs	r2, #19
 800426c:	701a      	strb	r2, [r3, #0]
        break;
 800426e:	e020      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2212      	movs	r2, #18
 8004274:	701a      	strb	r2, [r3, #0]
        break;
 8004276:	e01c      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2211      	movs	r2, #17
 800427c:	701a      	strb	r2, [r3, #0]
        break;
 800427e:	e018      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	701a      	strb	r2, [r3, #0]
        break;
 8004286:	e014      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	221b      	movs	r2, #27
 800428c:	701a      	strb	r2, [r3, #0]
        break;
 800428e:	e010      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	221a      	movs	r2, #26
 8004294:	701a      	strb	r2, [r3, #0]
        break;
 8004296:	e00c      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2219      	movs	r2, #25
 800429c:	701a      	strb	r2, [r3, #0]
        break;
 800429e:	e008      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2218      	movs	r2, #24
 80042a4:	701a      	strb	r2, [r3, #0]
        break;
 80042a6:	e004      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2204      	movs	r2, #4
 80042ac:	701a      	strb	r2, [r3, #0]
        break;
 80042ae:	e000      	b.n	80042b2 <lis2dw12_power_mode_get+0x16a>
    }
  }
 80042b0:	bf00      	nop

  return ret;
 80042b2:	697b      	ldr	r3, [r7, #20]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80042c8:	f107 0210 	add.w	r2, r7, #16
 80042cc:	2301      	movs	r3, #1
 80042ce:	2120      	movs	r1, #32
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff febb 	bl	800404c <lis2dw12_read_reg>
 80042d6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	7c3b      	ldrb	r3, [r7, #16]
 80042e8:	f362 1307 	bfi	r3, r2, #4, #4
 80042ec:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80042ee:	f107 0210 	add.w	r2, r7, #16
 80042f2:	2301      	movs	r3, #1
 80042f4:	2120      	movs	r1, #32
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fec0 	bl	800407c <lis2dw12_write_reg>
 80042fc:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004304:	f107 020c 	add.w	r2, r7, #12
 8004308:	2301      	movs	r3, #1
 800430a:	2122      	movs	r1, #34	; 0x22
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fe9d 	bl	800404c <lis2dw12_read_reg>
 8004312:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d110      	bne.n	800433c <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	b2da      	uxtb	r2, r3
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	f362 0301 	bfi	r3, r2, #0, #2
 800432a:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800432c:	f107 020c 	add.w	r2, r7, #12
 8004330:	2301      	movs	r3, #1
 8004332:	2122      	movs	r1, #34	; 0x22
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff fea1 	bl	800407c <lis2dw12_write_reg>
 800433a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800433c:	697b      	ldr	r3, [r7, #20]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004352:	f107 0210 	add.w	r2, r7, #16
 8004356:	2301      	movs	r3, #1
 8004358:	2120      	movs	r1, #32
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fe76 	bl	800404c <lis2dw12_read_reg>
 8004360:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 80b3 	bne.w	80044d0 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800436a:	f107 020c 	add.w	r2, r7, #12
 800436e:	2301      	movs	r3, #1
 8004370:	2122      	movs	r1, #34	; 0x22
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fe6a 	bl	800404c <lis2dw12_read_reg>
 8004378:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800437a:	7b3b      	ldrb	r3, [r7, #12]
 800437c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004380:	b2db      	uxtb	r3, r3
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	7c3a      	ldrb	r2, [r7, #16]
 8004386:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	4413      	add	r3, r2
 800438e:	2b32      	cmp	r3, #50	; 0x32
 8004390:	f200 809a 	bhi.w	80044c8 <lis2dw12_data_rate_get+0x180>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <lis2dw12_data_rate_get+0x54>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	08004469 	.word	0x08004469
 80043a0:	08004471 	.word	0x08004471
 80043a4:	08004479 	.word	0x08004479
 80043a8:	08004481 	.word	0x08004481
 80043ac:	08004489 	.word	0x08004489
 80043b0:	08004491 	.word	0x08004491
 80043b4:	08004499 	.word	0x08004499
 80043b8:	080044a1 	.word	0x080044a1
 80043bc:	080044a9 	.word	0x080044a9
 80043c0:	080044b1 	.word	0x080044b1
 80043c4:	080044c9 	.word	0x080044c9
 80043c8:	080044c9 	.word	0x080044c9
 80043cc:	080044c9 	.word	0x080044c9
 80043d0:	080044c9 	.word	0x080044c9
 80043d4:	080044c9 	.word	0x080044c9
 80043d8:	080044c9 	.word	0x080044c9
 80043dc:	080044c9 	.word	0x080044c9
 80043e0:	080044c9 	.word	0x080044c9
 80043e4:	080044c1 	.word	0x080044c1
 80043e8:	080044c9 	.word	0x080044c9
 80043ec:	080044c9 	.word	0x080044c9
 80043f0:	080044c9 	.word	0x080044c9
 80043f4:	080044c9 	.word	0x080044c9
 80043f8:	080044c9 	.word	0x080044c9
 80043fc:	080044c9 	.word	0x080044c9
 8004400:	080044c9 	.word	0x080044c9
 8004404:	080044c9 	.word	0x080044c9
 8004408:	080044c9 	.word	0x080044c9
 800440c:	080044c9 	.word	0x080044c9
 8004410:	080044c9 	.word	0x080044c9
 8004414:	080044c9 	.word	0x080044c9
 8004418:	080044c9 	.word	0x080044c9
 800441c:	080044c9 	.word	0x080044c9
 8004420:	080044c9 	.word	0x080044c9
 8004424:	080044c9 	.word	0x080044c9
 8004428:	080044c9 	.word	0x080044c9
 800442c:	080044c9 	.word	0x080044c9
 8004430:	080044c9 	.word	0x080044c9
 8004434:	080044c9 	.word	0x080044c9
 8004438:	080044c9 	.word	0x080044c9
 800443c:	080044c9 	.word	0x080044c9
 8004440:	080044c9 	.word	0x080044c9
 8004444:	080044c9 	.word	0x080044c9
 8004448:	080044c9 	.word	0x080044c9
 800444c:	080044c9 	.word	0x080044c9
 8004450:	080044c9 	.word	0x080044c9
 8004454:	080044c9 	.word	0x080044c9
 8004458:	080044c9 	.word	0x080044c9
 800445c:	080044c9 	.word	0x080044c9
 8004460:	080044c9 	.word	0x080044c9
 8004464:	080044b9 	.word	0x080044b9
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
        break;
 800446e:	e030      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
        break;
 8004476:	e02c      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2202      	movs	r2, #2
 800447c:	701a      	strb	r2, [r3, #0]
        break;
 800447e:	e028      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2203      	movs	r2, #3
 8004484:	701a      	strb	r2, [r3, #0]
        break;
 8004486:	e024      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
        break;
 800448e:	e020      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2205      	movs	r2, #5
 8004494:	701a      	strb	r2, [r3, #0]
        break;
 8004496:	e01c      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2206      	movs	r2, #6
 800449c:	701a      	strb	r2, [r3, #0]
        break;
 800449e:	e018      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2207      	movs	r2, #7
 80044a4:	701a      	strb	r2, [r3, #0]
        break;
 80044a6:	e014      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2208      	movs	r2, #8
 80044ac:	701a      	strb	r2, [r3, #0]
        break;
 80044ae:	e010      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2209      	movs	r2, #9
 80044b4:	701a      	strb	r2, [r3, #0]
        break;
 80044b6:	e00c      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2232      	movs	r2, #50	; 0x32
 80044bc:	701a      	strb	r2, [r3, #0]
        break;
 80044be:	e008      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2212      	movs	r2, #18
 80044c4:	701a      	strb	r2, [r3, #0]
        break;
 80044c6:	e004      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
        break;
 80044ce:	e000      	b.n	80044d2 <lis2dw12_data_rate_get+0x18a>
    }
  }
 80044d0:	bf00      	nop

  return ret;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80044e8:	f107 0208 	add.w	r2, r7, #8
 80044ec:	2301      	movs	r3, #1
 80044ee:	2121      	movs	r1, #33	; 0x21
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7ff fdab 	bl	800404c <lis2dw12_read_reg>
 80044f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10f      	bne.n	800451e <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	b2da      	uxtb	r2, r3
 8004506:	7a3b      	ldrb	r3, [r7, #8]
 8004508:	f362 03c3 	bfi	r3, r2, #3, #1
 800450c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	2301      	movs	r3, #1
 8004514:	2121      	movs	r1, #33	; 0x21
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff fdb0 	bl	800407c <lis2dw12_write_reg>
 800451c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004534:	f107 0208 	add.w	r2, r7, #8
 8004538:	2301      	movs	r3, #1
 800453a:	2125      	movs	r1, #37	; 0x25
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fd85 	bl	800404c <lis2dw12_read_reg>
 8004542:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	b2da      	uxtb	r2, r3
 8004552:	7a3b      	ldrb	r3, [r7, #8]
 8004554:	f362 1305 	bfi	r3, r2, #4, #2
 8004558:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800455a:	f107 0208 	add.w	r2, r7, #8
 800455e:	2301      	movs	r3, #1
 8004560:	2125      	movs	r1, #37	; 0x25
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff fd8a 	bl	800407c <lis2dw12_write_reg>
 8004568:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 800457e:	f107 0208 	add.w	r2, r7, #8
 8004582:	2301      	movs	r3, #1
 8004584:	2125      	movs	r1, #37	; 0x25
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fd60 	bl	800404c <lis2dw12_read_reg>
 800458c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 800458e:	7a3b      	ldrb	r3, [r7, #8]
 8004590:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b03      	cmp	r3, #3
 8004598:	d81a      	bhi.n	80045d0 <lis2dw12_full_scale_get+0x5c>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <lis2dw12_full_scale_get+0x2c>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045b9 	.word	0x080045b9
 80045a8:	080045c1 	.word	0x080045c1
 80045ac:	080045c9 	.word	0x080045c9
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
      break;
 80045b6:	e00f      	b.n	80045d8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
      break;
 80045be:	e00b      	b.n	80045d8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2202      	movs	r2, #2
 80045c4:	701a      	strb	r2, [r3, #0]
      break;
 80045c6:	e007      	b.n	80045d8 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2203      	movs	r2, #3
 80045cc:	701a      	strb	r2, [r3, #0]
      break;
 80045ce:	e003      	b.n	80045d8 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
      break;
 80045d6:	bf00      	nop
  }

  return ret;
 80045d8:	68fb      	ldr	r3, [r7, #12]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop

080045e4 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 80045ee:	f107 020c 	add.w	r2, r7, #12
 80045f2:	2306      	movs	r3, #6
 80045f4:	2128      	movs	r1, #40	; 0x28
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fd28 	bl	800404c <lis2dw12_read_reg>
 80045fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80045fe:	7b7b      	ldrb	r3, [r7, #13]
 8004600:	b21a      	sxth	r2, r3
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800460c:	b29b      	uxth	r3, r3
 800460e:	021b      	lsls	r3, r3, #8
 8004610:	b29a      	uxth	r2, r3
 8004612:	7b3b      	ldrb	r3, [r7, #12]
 8004614:	b29b      	uxth	r3, r3
 8004616:	4413      	add	r3, r2
 8004618:	b29b      	uxth	r3, r3
 800461a:	b21a      	sxth	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	3302      	adds	r3, #2
 8004626:	b212      	sxth	r2, r2
 8004628:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	3302      	adds	r3, #2
 800462e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004632:	b29b      	uxth	r3, r3
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	b29a      	uxth	r2, r3
 8004638:	7bbb      	ldrb	r3, [r7, #14]
 800463a:	b29b      	uxth	r3, r3
 800463c:	4413      	add	r3, r2
 800463e:	b29a      	uxth	r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	3302      	adds	r3, #2
 8004644:	b212      	sxth	r2, r2
 8004646:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004648:	7c7a      	ldrb	r2, [r7, #17]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	3304      	adds	r3, #4
 800464e:	b212      	sxth	r2, r2
 8004650:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	3304      	adds	r3, #4
 8004656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800465a:	b29b      	uxth	r3, r3
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	b29a      	uxth	r2, r3
 8004660:	7c3b      	ldrb	r3, [r7, #16]
 8004662:	b29b      	uxth	r3, r3
 8004664:	4413      	add	r3, r2
 8004666:	b29a      	uxth	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	3304      	adds	r3, #4
 800466c:	b212      	sxth	r2, r2
 800466e:	801a      	strh	r2, [r3, #0]

  return ret;
 8004670:	697b      	ldr	r3, [r7, #20]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004684:	2301      	movs	r3, #1
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	210f      	movs	r1, #15
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fcde 	bl	800404c <lis2dw12_read_reg>
 8004690:	60f8      	str	r0, [r7, #12]

  return ret;
 8004692:	68fb      	ldr	r3, [r7, #12]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80046a8:	f107 0208 	add.w	r2, r7, #8
 80046ac:	2301      	movs	r3, #1
 80046ae:	2121      	movs	r1, #33	; 0x21
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fccb 	bl	800404c <lis2dw12_read_reg>
 80046b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10f      	bne.n	80046de <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	7a3b      	ldrb	r3, [r7, #8]
 80046c8:	f362 0382 	bfi	r3, r2, #2, #1
 80046cc:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80046ce:	f107 0208 	add.w	r2, r7, #8
 80046d2:	2301      	movs	r3, #1
 80046d4:	2121      	movs	r1, #33	; 0x21
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fcd0 	bl	800407c <lis2dw12_write_reg>
 80046dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 80046f4:	f107 0208 	add.w	r2, r7, #8
 80046f8:	2301      	movs	r3, #1
 80046fa:	212e      	movs	r1, #46	; 0x2e
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fca5 	bl	800404c <lis2dw12_read_reg>
 8004702:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	b2da      	uxtb	r2, r3
 8004712:	7a3b      	ldrb	r3, [r7, #8]
 8004714:	f362 1347 	bfi	r3, r2, #5, #3
 8004718:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 800471a:	f107 0208 	add.w	r2, r7, #8
 800471e:	2301      	movs	r3, #1
 8004720:	212e      	movs	r1, #46	; 0x2e
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fcaa 	bl	800407c <lis2dw12_write_reg>
 8004728:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800472a:	68fb      	ldr	r3, [r7, #12]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d103      	bne.n	8004750 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004748:	f04f 33ff 	mov.w	r3, #4294967295
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e067      	b.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	7b1a      	ldrb	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a28      	ldr	r2, [pc, #160]	; (800482c <LIS2MDL_RegisterBusIO+0xf8>)
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a27      	ldr	r2, [pc, #156]	; (8004830 <LIS2MDL_RegisterBusIO+0xfc>)
 8004792:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d103      	bne.n	80047b2 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e036      	b.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4798      	blx	r3
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	e02c      	b.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d028      	beq.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d123      	bne.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10d      	bne.n	80047fc <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80047e0:	2334      	movs	r3, #52	; 0x34
 80047e2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	461a      	mov	r2, r3
 80047e8:	2162      	movs	r1, #98	; 0x62
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fb1b 	bl	8004e26 <LIS2MDL_Write_Reg>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d014      	beq.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295
 80047fa:	e012      	b.n	8004822 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d101      	bne.n	8004808 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	e00c      	b.n	8004822 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3320      	adds	r3, #32
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f000 ff70 	bl	80056f4 <lis2mdl_i2c_interface_set>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	e000      	b.n	8004822 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004820:	68fb      	ldr	r3, [r7, #12]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	08004e7d 	.word	0x08004e7d
 8004830:	08004eff 	.word	0x08004eff

08004834 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b03      	cmp	r3, #3
 8004842:	d144      	bne.n	80048ce <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004844:	f107 0208 	add.w	r2, r7, #8
 8004848:	2301      	movs	r3, #1
 800484a:	2162      	movs	r1, #98	; 0x62
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb97 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004858:	f04f 33ff 	mov.w	r3, #4294967295
 800485c:	e06c      	b.n	8004938 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800485e:	f107 020c 	add.w	r2, r7, #12
 8004862:	2301      	movs	r3, #1
 8004864:	2160      	movs	r1, #96	; 0x60
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fb8a 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004872:	f04f 33ff 	mov.w	r3, #4294967295
 8004876:	e05f      	b.n	8004938 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004878:	7a3b      	ldrb	r3, [r7, #8]
 800487a:	f043 0310 	orr.w	r3, r3, #16
 800487e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004880:	7a3b      	ldrb	r3, [r7, #8]
 8004882:	f36f 0341 	bfc	r3, #1, #1
 8004886:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004888:	7b3b      	ldrb	r3, [r7, #12]
 800488a:	2202      	movs	r2, #2
 800488c:	f362 0301 	bfi	r3, r2, #0, #2
 8004890:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004892:	7b3b      	ldrb	r3, [r7, #12]
 8004894:	f043 030c 	orr.w	r3, r3, #12
 8004898:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800489a:	f107 0208 	add.w	r2, r7, #8
 800489e:	2301      	movs	r3, #1
 80048a0:	2162      	movs	r1, #98	; 0x62
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fcab 	bl	80051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80048ae:	f04f 33ff 	mov.w	r3, #4294967295
 80048b2:	e041      	b.n	8004938 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80048b4:	f107 020c 	add.w	r2, r7, #12
 80048b8:	2301      	movs	r3, #1
 80048ba:	2160      	movs	r1, #96	; 0x60
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fc9e 	bl	80051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d032      	beq.n	800492e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295
 80048cc:	e034      	b.n	8004938 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3320      	adds	r3, #32
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fe65 	bl	80055a4 <lis2mdl_block_data_update_set>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e028      	b.n	8004938 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3320      	adds	r3, #32
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fdd4 	bl	800549a <lis2mdl_operating_mode_set>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80048f8:	f04f 33ff 	mov.w	r3, #4294967295
 80048fc:	e01c      	b.n	8004938 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3320      	adds	r3, #32
 8004902:	2103      	movs	r1, #3
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fdee 	bl	80054e6 <lis2mdl_data_rate_set>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	e010      	b.n	8004938 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3320      	adds	r3, #32
 800491a:	2100      	movs	r1, #0
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fec3 	bl	80056a8 <lis2mdl_self_test_set>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004928:	f04f 33ff 	mov.w	r3, #4294967295
 800492c:	e004      	b.n	8004938 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8a5 	bl	8004a98 <LIS2MDL_MAG_Disable>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004954:	f04f 33ff 	mov.w	r3, #4294967295
 8004958:	e004      	b.n	8004964 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LIS2MDL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b03      	cmp	r3, #3
 800497c:	d10b      	bne.n	8004996 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800497e:	2301      	movs	r3, #1
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	214f      	movs	r1, #79	; 0x4f
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fafb 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	e00c      	b.n	80049b0 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3320      	adds	r3, #32
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fe72 	bl	8005686 <lis2mdl_device_id_get>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	e000      	b.n	80049b0 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2232      	movs	r2, #50	; 0x32
 80049ea:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4a04      	ldr	r2, [pc, #16]	; (8004a10 <LIS2MDL_GetCapabilities+0x58>)
 8004a00:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	42c80000 	.word	0x42c80000

08004a14 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e032      	b.n	8004a90 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d11d      	bne.n	8004a6e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a32:	f107 020c 	add.w	r2, r7, #12
 8004a36:	2301      	movs	r3, #1
 8004a38:	2160      	movs	r1, #96	; 0x60
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 faa0 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004a46:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4a:	e021      	b.n	8004a90 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004a4c:	7b3b      	ldrb	r3, [r7, #12]
 8004a4e:	f36f 0301 	bfc	r3, #0, #2
 8004a52:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a54:	f107 020c 	add.w	r2, r7, #12
 8004a58:	2301      	movs	r3, #1
 8004a5a:	2160      	movs	r1, #96	; 0x60
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fbce 	bl	80051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6c:	e010      	b.n	8004a90 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3320      	adds	r3, #32
 8004a72:	2100      	movs	r1, #0
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fd10 	bl	800549a <lis2mdl_operating_mode_set>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
 8004a84:	e004      	b.n	8004a90 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e033      	b.n	8004b16 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	d11e      	bne.n	8004af4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004ab6:	f107 020c 	add.w	r2, r7, #12
 8004aba:	2301      	movs	r3, #1
 8004abc:	2160      	movs	r1, #96	; 0x60
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fa5e 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	e022      	b.n	8004b16 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004ad0:	7b3b      	ldrb	r3, [r7, #12]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f362 0301 	bfi	r3, r2, #0, #2
 8004ad8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004ada:	f107 020c 	add.w	r2, r7, #12
 8004ade:	2301      	movs	r3, #1
 8004ae0:	2160      	movs	r1, #96	; 0x60
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fb8b 	bl	80051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00e      	beq.n	8004b0c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004aee:	f04f 33ff 	mov.w	r3, #4294967295
 8004af2:	e010      	b.n	8004b16 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3320      	adds	r3, #32
 8004af8:	2102      	movs	r1, #2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fccd 	bl	800549a <lis2mdl_operating_mode_set>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	e004      	b.n	8004b16 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LIS2MDL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004b2e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3320      	adds	r3, #32
 8004b52:	f107 020b 	add.w	r2, r7, #11
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fceb 	bl	8005534 <lis2mdl_data_rate_get>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
 8004b68:	e023      	b.n	8004bb2 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d81b      	bhi.n	8004ba8 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004b70:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b91 	.word	0x08004b91
 8004b80:	08004b99 	.word	0x08004b99
 8004b84:	08004ba1 	.word	0x08004ba1
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4a0c      	ldr	r2, [pc, #48]	; (8004bbc <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004b8c:	601a      	str	r2, [r3, #0]
      break;
 8004b8e:	e00f      	b.n	8004bb0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004b94:	601a      	str	r2, [r3, #0]
      break;
 8004b96:	e00b      	b.n	8004bb0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	4a0a      	ldr	r2, [pc, #40]	; (8004bc4 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004b9c:	601a      	str	r2, [r3, #0]
      break;
 8004b9e:	e007      	b.n	8004bb0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004ba4:	601a      	str	r2, [r3, #0]
      break;
 8004ba6:	e003      	b.n	8004bb0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bac:	60fb      	str	r3, [r7, #12]
      break;
 8004bae:	bf00      	nop
  }

  return ret;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	41200000 	.word	0x41200000
 8004bc0:	41a00000 	.word	0x41a00000
 8004bc4:	42480000 	.word	0x42480000
 8004bc8:	42c80000 	.word	0x42c80000

08004bcc <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004bd8:	edd7 7a00 	vldr	s15, [r7]
 8004bdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	d801      	bhi.n	8004bee <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004bea:	2300      	movs	r3, #0
 8004bec:	e016      	b.n	8004c1c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004bee:	edd7 7a00 	vldr	s15, [r7]
 8004bf2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d801      	bhi.n	8004c04 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e00b      	b.n	8004c1c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004c04:	edd7 7a00 	vldr	s15, [r7]
 8004c08:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004c90 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	d801      	bhi.n	8004c1a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e000      	b.n	8004c1c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004c1a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004c1c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d121      	bne.n	8004c6a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c26:	f107 020c 	add.w	r2, r7, #12
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	2160      	movs	r1, #96	; 0x60
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f9a6 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c3e:	e022      	b.n	8004c86 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	7b3b      	ldrb	r3, [r7, #12]
 8004c4a:	f362 0383 	bfi	r3, r2, #2, #2
 8004c4e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c50:	f107 020c 	add.w	r2, r7, #12
 8004c54:	2301      	movs	r3, #1
 8004c56:	2160      	movs	r1, #96	; 0x60
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fad0 	bl	80051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	e00d      	b.n	8004c86 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3320      	adds	r3, #32
 8004c6e:	7bfa      	ldrb	r2, [r7, #15]
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fc37 	bl	80054e6 <lis2mdl_data_rate_set>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c82:	e000      	b.n	8004c86 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	42480000 	.word	0x42480000

08004c94 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2232      	movs	r2, #50	; 0x32
 8004ca2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3320      	adds	r3, #32
 8004cd8:	f107 0208 	add.w	r2, r7, #8
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fc86 	bl	80055f0 <lis2mdl_magnetic_raw_get>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	e00c      	b.n	8004d0a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cf0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cf8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d00:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b088      	sub	sp, #32
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d137      	bne.n	8004d94 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004d24:	f107 0218 	add.w	r2, r7, #24
 8004d28:	2306      	movs	r3, #6
 8004d2a:	2168      	movs	r1, #104	; 0x68
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f927 	bl	8004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	e06f      	b.n	8004e1e <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004d3e:	7e7b      	ldrb	r3, [r7, #25]
 8004d40:	b21b      	sxth	r3, r3
 8004d42:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004d44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	7e3b      	ldrb	r3, [r7, #24]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	b21b      	sxth	r3, r3
 8004d58:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004d5a:	7efb      	ldrb	r3, [r7, #27]
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004d60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	021b      	lsls	r3, r3, #8
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	7ebb      	ldrb	r3, [r7, #26]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	b21b      	sxth	r3, r3
 8004d74:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004d76:	7f7b      	ldrb	r3, [r7, #29]
 8004d78:	b21b      	sxth	r3, r3
 8004d7a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004d7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	7f3b      	ldrb	r3, [r7, #28]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b21b      	sxth	r3, r3
 8004d90:	82bb      	strh	r3, [r7, #20]
 8004d92:	e00d      	b.n	8004db0 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3320      	adds	r3, #32
 8004d98:	f107 0210 	add.w	r2, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fc26 	bl	80055f0 <lis2mdl_magnetic_raw_get>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8004daa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dae:	e036      	b.n	8004e1e <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff feb1 	bl	8004b1e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004dbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd4:	ee17 2a90 	vmov	r2, s15
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004ddc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df4:	ee17 2a90 	vmov	r2, s15
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004dfc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e14:	ee17 2a90 	vmov	r2, s15
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
 8004e32:	4613      	mov	r3, r2
 8004e34:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d10b      	bne.n	8004e56 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004e3e:	1cba      	adds	r2, r7, #2
 8004e40:	78f9      	ldrb	r1, [r7, #3]
 8004e42:	2301      	movs	r3, #1
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9da 	bl	80051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	e00e      	b.n	8004e74 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f103 0020 	add.w	r0, r3, #32
 8004e5c:	1cba      	adds	r2, r7, #2
 8004e5e:	78f9      	ldrb	r1, [r7, #3]
 8004e60:	2301      	movs	r3, #1
 8004e62:	f000 fb02 	bl	800546a <lis2mdl_write_reg>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e70:	e000      	b.n	8004e74 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	461a      	mov	r2, r3
 8004e88:	460b      	mov	r3, r1
 8004e8a:	72fb      	strb	r3, [r7, #11]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10e      	bne.n	8004eba <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	695c      	ldr	r4, [r3, #20]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	7b1b      	ldrb	r3, [r3, #12]
 8004ea4:	b298      	uxth	r0, r3
 8004ea6:	7afb      	ldrb	r3, [r7, #11]
 8004ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	b299      	uxth	r1, r3
 8004eb0:	893b      	ldrh	r3, [r7, #8]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	47a0      	blx	r4
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	e01d      	b.n	8004ef6 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d10b      	bne.n	8004eda <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	695c      	ldr	r4, [r3, #20]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	7b1b      	ldrb	r3, [r3, #12]
 8004eca:	b298      	uxth	r0, r3
 8004ecc:	7afb      	ldrb	r3, [r7, #11]
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	893b      	ldrh	r3, [r7, #8]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	47a0      	blx	r4
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	e00d      	b.n	8004ef6 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	695c      	ldr	r4, [r3, #20]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	7b1b      	ldrb	r3, [r3, #12]
 8004ee2:	b298      	uxth	r0, r3
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
 8004ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	b299      	uxth	r1, r3
 8004eee:	893b      	ldrh	r3, [r7, #8]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	47a0      	blx	r4
 8004ef4:	4603      	mov	r3, r0
  }
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd90      	pop	{r4, r7, pc}

08004efe <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004efe:	b590      	push	{r4, r7, lr}
 8004f00:	b087      	sub	sp, #28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	72fb      	strb	r3, [r7, #11]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10e      	bne.n	8004f3c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	691c      	ldr	r4, [r3, #16]
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	7b1b      	ldrb	r3, [r3, #12]
 8004f26:	b298      	uxth	r0, r3
 8004f28:	7afb      	ldrb	r3, [r7, #11]
 8004f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	b299      	uxth	r1, r3
 8004f32:	893b      	ldrh	r3, [r7, #8]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	47a0      	blx	r4
 8004f38:	4603      	mov	r3, r0
 8004f3a:	e01d      	b.n	8004f78 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d10b      	bne.n	8004f5c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	691c      	ldr	r4, [r3, #16]
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	7b1b      	ldrb	r3, [r3, #12]
 8004f4c:	b298      	uxth	r0, r3
 8004f4e:	7afb      	ldrb	r3, [r7, #11]
 8004f50:	b299      	uxth	r1, r3
 8004f52:	893b      	ldrh	r3, [r7, #8]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	47a0      	blx	r4
 8004f58:	4603      	mov	r3, r0
 8004f5a:	e00d      	b.n	8004f78 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	691c      	ldr	r4, [r3, #16]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	7b1b      	ldrb	r3, [r3, #12]
 8004f64:	b298      	uxth	r0, r3
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	b299      	uxth	r1, r3
 8004f70:	893b      	ldrh	r3, [r7, #8]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	47a0      	blx	r4
 8004f76:	4603      	mov	r3, r0
  }
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd90      	pop	{r4, r7, pc}

08004f80 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	72fb      	strb	r3, [r7, #11]
 8004f90:	4613      	mov	r3, r2
 8004f92:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004fa6:	233d      	movs	r3, #61	; 0x3d
 8004fa8:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004faa:	2315      	movs	r3, #21
 8004fac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004fb0:	2316      	movs	r3, #22
 8004fb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8004fb6:	2317      	movs	r3, #23
 8004fb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t master_config = 0x14U;
 8004fbc:	2314      	movs	r3, #20
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004fc2:	2344      	movs	r3, #68	; 0x44
 8004fc4:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004fcc:	2339      	movs	r3, #57	; 0x39
 8004fce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004fd8:	2329      	movs	r3, #41	; 0x29
 8004fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004fde:	231e      	movs	r3, #30
 8004fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t xlda = 0x01U;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t len = (uint8_t)Length;
 8004fea:	893b      	ldrh	r3, [r7, #8]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004ffc:	2340      	movs	r3, #64	; 0x40
 8004ffe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f103 0020 	add.w	r0, r3, #32
 8005008:	f107 0221 	add.w	r2, r7, #33	; 0x21
 800500c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8005010:	2301      	movs	r3, #1
 8005012:	f000 fa2a 	bl	800546a <lis2mdl_write_reg>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	e0e9      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f103 0020 	add.w	r0, r3, #32
 8005028:	f107 021f 	add.w	r2, r7, #31
 800502c:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8005030:	2301      	movs	r3, #1
 8005032:	f000 fa1a 	bl	800546a <lis2mdl_write_reg>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	e0d9      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f103 0020 	add.w	r0, r3, #32
 8005048:	f107 020b 	add.w	r2, r7, #11
 800504c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8005050:	2301      	movs	r3, #1
 8005052:	f000 fa0a 	bl	800546a <lis2mdl_write_reg>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	e0c9      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f103 0020 	add.w	r0, r3, #32
 8005068:	f107 021d 	add.w	r2, r7, #29
 800506c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8005070:	2301      	movs	r3, #1
 8005072:	f000 f9fa 	bl	800546a <lis2mdl_write_reg>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295
 8005080:	e0b9      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f103 0020 	add.w	r0, r3, #32
 8005088:	f107 021e 	add.w	r2, r7, #30
 800508c:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8005090:	2301      	movs	r3, #1
 8005092:	f000 f9ea 	bl	800546a <lis2mdl_write_reg>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	e0a9      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f103 0020 	add.w	r0, r3, #32
 80050a8:	f107 0220 	add.w	r2, r7, #32
 80050ac:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80050b0:	2301      	movs	r3, #1
 80050b2:	f000 f9da 	bl	800546a <lis2mdl_write_reg>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80050bc:	f04f 33ff 	mov.w	r3, #4294967295
 80050c0:	e099      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f103 0020 	add.w	r0, r3, #32
 80050c8:	f107 021c 	add.w	r2, r7, #28
 80050cc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80050d0:	2301      	movs	r3, #1
 80050d2:	f000 f9b2 	bl	800543a <lis2mdl_read_reg>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	e089      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80050e2:	7f3b      	ldrb	r3, [r7, #28]
 80050e4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d102      	bne.n	80050f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80050ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80050f0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f103 0020 	add.w	r0, r3, #32
 80050f8:	f107 021c 	add.w	r2, r7, #28
 80050fc:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005100:	2301      	movs	r3, #1
 8005102:	f000 f9b2 	bl	800546a <lis2mdl_write_reg>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	e071      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f103 0020 	add.w	r0, r3, #32
 8005118:	f107 0214 	add.w	r2, r7, #20
 800511c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005120:	2306      	movs	r3, #6
 8005122:	f000 f98a 	bl	800543a <lis2mdl_read_reg>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800512c:	f04f 33ff 	mov.w	r3, #4294967295
 8005130:	e061      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f103 0020 	add.w	r0, r3, #32
 8005138:	f107 021b 	add.w	r2, r7, #27
 800513c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8005140:	2301      	movs	r3, #1
 8005142:	f000 f97a 	bl	800543a <lis2mdl_read_reg>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	e051      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005152:	7efa      	ldrb	r2, [r7, #27]
 8005154:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005158:	4013      	ands	r3, r2
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005160:	429a      	cmp	r2, r3
 8005162:	d1e6      	bne.n	8005132 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f103 0020 	add.w	r0, r3, #32
 800516a:	f107 021b 	add.w	r2, r7, #27
 800516e:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8005172:	2301      	movs	r3, #1
 8005174:	f000 f961 	bl	800543a <lis2mdl_read_reg>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e038      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005184:	7efa      	ldrb	r2, [r7, #27]
 8005186:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800518a:	4013      	ands	r3, r2
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005192:	429a      	cmp	r2, r3
 8005194:	d1e6      	bne.n	8005164 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f103 0020 	add.w	r0, r3, #32
 800519c:	f107 0221 	add.w	r2, r7, #33	; 0x21
 80051a0:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80051a4:	2301      	movs	r3, #1
 80051a6:	f000 f960 	bl	800546a <lis2mdl_write_reg>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80051b0:	f04f 33ff 	mov.w	r3, #4294967295
 80051b4:	e01f      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f103 0020 	add.w	r0, r3, #32
 80051bc:	893b      	ldrh	r3, [r7, #8]
 80051be:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	f000 f939 	bl	800543a <lis2mdl_read_reg>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d002      	beq.n	80051d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	e010      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f103 0020 	add.w	r0, r3, #32
 80051da:	f107 0220 	add.w	r2, r7, #32
 80051de:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80051e2:	2301      	movs	r3, #1
 80051e4:	f000 f941 	bl	800546a <lis2mdl_write_reg>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80051ee:	f04f 33ff 	mov.w	r3, #4294967295
 80051f2:	e000      	b.n	80051f6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3730      	adds	r7, #48	; 0x30
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b08c      	sub	sp, #48	; 0x30
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	461a      	mov	r2, r3
 800520a:	460b      	mov	r3, r1
 800520c:	72fb      	strb	r3, [r7, #11]
 800520e:	4613      	mov	r3, r2
 8005210:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005218:	2340      	movs	r3, #64	; 0x40
 800521a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005224:	233c      	movs	r3, #60	; 0x3c
 8005226:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005228:	2315      	movs	r3, #21
 800522a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint8_t slv0_subadd = 0x16U;
 800522e:	2316      	movs	r3, #22
 8005230:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  uint8_t slave0_config = 0x17U;
 8005234:	2317      	movs	r3, #23
 8005236:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  uint8_t shub_odr_104 = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800523e:	2314      	movs	r3, #20
 8005240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005244:	2344      	movs	r3, #68	; 0x44
 8005246:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005248:	2339      	movs	r3, #57	; 0x39
 800524a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t wr_once_done = 0x80U;
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005254:	2329      	movs	r3, #41	; 0x29
 8005256:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800525a:	231e      	movs	r3, #30
 800525c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t xlda = 0x01U;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005266:	2310      	movs	r3, #16
 8005268:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005272:	2340      	movs	r3, #64	; 0x40
 8005274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005278:	230e      	movs	r3, #14
 800527a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f103 0020 	add.w	r0, r3, #32
 8005284:	f107 0221 	add.w	r2, r7, #33	; 0x21
 8005288:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800528c:	2301      	movs	r3, #1
 800528e:	f000 f8ec 	bl	800546a <lis2mdl_write_reg>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	e0c9      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f103 0020 	add.w	r0, r3, #32
 80052a4:	f107 021f 	add.w	r2, r7, #31
 80052a8:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 80052ac:	2301      	movs	r3, #1
 80052ae:	f000 f8dc 	bl	800546a <lis2mdl_write_reg>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	e0b9      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f103 0020 	add.w	r0, r3, #32
 80052c4:	f107 020b 	add.w	r2, r7, #11
 80052c8:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80052cc:	2301      	movs	r3, #1
 80052ce:	f000 f8cc 	bl	800546a <lis2mdl_write_reg>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	e0a9      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f103 0020 	add.w	r0, r3, #32
 80052e4:	f107 021e 	add.w	r2, r7, #30
 80052e8:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80052ec:	2301      	movs	r3, #1
 80052ee:	f000 f8bc 	bl	800546a <lis2mdl_write_reg>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	e099      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f103 0020 	add.w	r0, r3, #32
 8005304:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8005308:	2301      	movs	r3, #1
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	f000 f8ad 	bl	800546a <lis2mdl_write_reg>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005316:	f04f 33ff 	mov.w	r3, #4294967295
 800531a:	e08a      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f103 0020 	add.w	r0, r3, #32
 8005322:	f107 021d 	add.w	r2, r7, #29
 8005326:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800532a:	2301      	movs	r3, #1
 800532c:	f000 f89d 	bl	800546a <lis2mdl_write_reg>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	e07a      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f103 0020 	add.w	r0, r3, #32
 8005342:	f107 0220 	add.w	r2, r7, #32
 8005346:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800534a:	2301      	movs	r3, #1
 800534c:	f000 f88d 	bl	800546a <lis2mdl_write_reg>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d002      	beq.n	800535c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	e06a      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f103 0020 	add.w	r0, r3, #32
 8005362:	f107 021c 	add.w	r2, r7, #28
 8005366:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800536a:	2301      	movs	r3, #1
 800536c:	f000 f865 	bl	800543a <lis2mdl_read_reg>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	e05a      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800537c:	7f3b      	ldrb	r3, [r7, #28]
 800537e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005382:	429a      	cmp	r2, r3
 8005384:	d102      	bne.n	800538c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800538a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f103 0020 	add.w	r0, r3, #32
 8005392:	f107 021c 	add.w	r2, r7, #28
 8005396:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800539a:	2301      	movs	r3, #1
 800539c:	f000 f865 	bl	800546a <lis2mdl_write_reg>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	e042      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f103 0020 	add.w	r0, r3, #32
 80053b2:	f107 0214 	add.w	r2, r7, #20
 80053b6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80053ba:	2306      	movs	r3, #6
 80053bc:	f000 f83d 	bl	800543a <lis2mdl_read_reg>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e032      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f103 0020 	add.w	r0, r3, #32
 80053d2:	f107 021b 	add.w	r2, r7, #27
 80053d6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80053da:	2301      	movs	r3, #1
 80053dc:	f000 f82d 	bl	800543a <lis2mdl_read_reg>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80053e6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ea:	e022      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80053ec:	7efa      	ldrb	r2, [r7, #27]
 80053ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053f2:	4013      	ands	r3, r2
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d1e6      	bne.n	80053cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f103 0020 	add.w	r0, r3, #32
 8005404:	f107 021b 	add.w	r2, r7, #27
 8005408:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 800540c:	2301      	movs	r3, #1
 800540e:	f000 f814 	bl	800543a <lis2mdl_read_reg>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005418:	f04f 33ff 	mov.w	r3, #4294967295
 800541c:	e009      	b.n	8005432 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 800541e:	7efa      	ldrb	r2, [r7, #27]
 8005420:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005424:	4013      	ands	r3, r2
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800542c:	429a      	cmp	r2, r3
 800542e:	d1e6      	bne.n	80053fe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3730      	adds	r7, #48	; 0x30
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800543a:	b590      	push	{r4, r7, lr}
 800543c:	b087      	sub	sp, #28
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	461a      	mov	r2, r3
 8005446:	460b      	mov	r3, r1
 8005448:	72fb      	strb	r3, [r7, #11]
 800544a:	4613      	mov	r3, r2
 800544c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685c      	ldr	r4, [r3, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68d8      	ldr	r0, [r3, #12]
 8005456:	893b      	ldrh	r3, [r7, #8]
 8005458:	7af9      	ldrb	r1, [r7, #11]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	47a0      	blx	r4
 800545e:	6178      	str	r0, [r7, #20]

  return ret;
 8005460:	697b      	ldr	r3, [r7, #20]
}
 8005462:	4618      	mov	r0, r3
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	bd90      	pop	{r4, r7, pc}

0800546a <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800546a:	b590      	push	{r4, r7, lr}
 800546c:	b087      	sub	sp, #28
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	461a      	mov	r2, r3
 8005476:	460b      	mov	r3, r1
 8005478:	72fb      	strb	r3, [r7, #11]
 800547a:	4613      	mov	r3, r2
 800547c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681c      	ldr	r4, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68d8      	ldr	r0, [r3, #12]
 8005486:	893b      	ldrh	r3, [r7, #8]
 8005488:	7af9      	ldrb	r1, [r7, #11]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	47a0      	blx	r4
 800548e:	6178      	str	r0, [r7, #20]

  return ret;
 8005490:	697b      	ldr	r3, [r7, #20]
}
 8005492:	4618      	mov	r0, r3
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}

0800549a <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b084      	sub	sp, #16
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	2301      	movs	r3, #1
 80054ac:	2160      	movs	r1, #96	; 0x60
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ffc3 	bl	800543a <lis2mdl_read_reg>
 80054b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10f      	bne.n	80054dc <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	7a3b      	ldrb	r3, [r7, #8]
 80054c6:	f362 0301 	bfi	r3, r2, #0, #2
 80054ca:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054cc:	f107 0208 	add.w	r2, r7, #8
 80054d0:	2301      	movs	r3, #1
 80054d2:	2160      	movs	r1, #96	; 0x60
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ffc8 	bl	800546a <lis2mdl_write_reg>
 80054da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054f2:	f107 0208 	add.w	r2, r7, #8
 80054f6:	2301      	movs	r3, #1
 80054f8:	2160      	movs	r1, #96	; 0x60
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff9d 	bl	800543a <lis2mdl_read_reg>
 8005500:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	b2da      	uxtb	r2, r3
 8005510:	7a3b      	ldrb	r3, [r7, #8]
 8005512:	f362 0383 	bfi	r3, r2, #2, #2
 8005516:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005518:	f107 0208 	add.w	r2, r7, #8
 800551c:	2301      	movs	r3, #1
 800551e:	2160      	movs	r1, #96	; 0x60
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ffa2 	bl	800546a <lis2mdl_write_reg>
 8005526:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005528:	68fb      	ldr	r3, [r7, #12]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800553e:	f107 0208 	add.w	r2, r7, #8
 8005542:	2301      	movs	r3, #1
 8005544:	2160      	movs	r1, #96	; 0x60
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7ff ff77 	bl	800543a <lis2mdl_read_reg>
 800554c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800554e:	7a3b      	ldrb	r3, [r7, #8]
 8005550:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d81a      	bhi.n	8005590 <lis2mdl_data_rate_get+0x5c>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <lis2mdl_data_rate_get+0x2c>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005571 	.word	0x08005571
 8005564:	08005579 	.word	0x08005579
 8005568:	08005581 	.word	0x08005581
 800556c:	08005589 	.word	0x08005589
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
      break;
 8005576:	e00f      	b.n	8005598 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	2201      	movs	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
      break;
 800557e:	e00b      	b.n	8005598 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2202      	movs	r2, #2
 8005584:	701a      	strb	r2, [r3, #0]
      break;
 8005586:	e007      	b.n	8005598 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2203      	movs	r2, #3
 800558c:	701a      	strb	r2, [r3, #0]
      break;
 800558e:	e003      	b.n	8005598 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	701a      	strb	r2, [r3, #0]
      break;
 8005596:	bf00      	nop
  }

  return ret;
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop

080055a4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80055b0:	f107 0208 	add.w	r2, r7, #8
 80055b4:	2301      	movs	r3, #1
 80055b6:	2162      	movs	r1, #98	; 0x62
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff3e 	bl	800543a <lis2mdl_read_reg>
 80055be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	7a3b      	ldrb	r3, [r7, #8]
 80055d0:	f362 1304 	bfi	r3, r2, #4, #1
 80055d4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80055d6:	f107 0208 	add.w	r2, r7, #8
 80055da:	2301      	movs	r3, #1
 80055dc:	2162      	movs	r1, #98	; 0x62
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ff43 	bl	800546a <lis2mdl_write_reg>
 80055e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80055fa:	f107 020c 	add.w	r2, r7, #12
 80055fe:	2306      	movs	r3, #6
 8005600:	2168      	movs	r1, #104	; 0x68
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ff19 	bl	800543a <lis2mdl_read_reg>
 8005608:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800560a:	7b7b      	ldrb	r3, [r7, #13]
 800560c:	b21a      	sxth	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005618:	b29b      	uxth	r3, r3
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	b29a      	uxth	r2, r3
 800561e:	7b3b      	ldrb	r3, [r7, #12]
 8005620:	b29b      	uxth	r3, r3
 8005622:	4413      	add	r3, r2
 8005624:	b29b      	uxth	r3, r3
 8005626:	b21a      	sxth	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800562c:	7bfa      	ldrb	r2, [r7, #15]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	3302      	adds	r3, #2
 8005632:	b212      	sxth	r2, r2
 8005634:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3302      	adds	r3, #2
 800563a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800563e:	b29b      	uxth	r3, r3
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	b29a      	uxth	r2, r3
 8005644:	7bbb      	ldrb	r3, [r7, #14]
 8005646:	b29b      	uxth	r3, r3
 8005648:	4413      	add	r3, r2
 800564a:	b29a      	uxth	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	3302      	adds	r3, #2
 8005650:	b212      	sxth	r2, r2
 8005652:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005654:	7c7a      	ldrb	r2, [r7, #17]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	3304      	adds	r3, #4
 800565a:	b212      	sxth	r2, r2
 800565c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	3304      	adds	r3, #4
 8005662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005666:	b29b      	uxth	r3, r3
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	b29a      	uxth	r2, r3
 800566c:	7c3b      	ldrb	r3, [r7, #16]
 800566e:	b29b      	uxth	r3, r3
 8005670:	4413      	add	r3, r2
 8005672:	b29a      	uxth	r2, r3
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	3304      	adds	r3, #4
 8005678:	b212      	sxth	r2, r2
 800567a:	801a      	strh	r2, [r3, #0]

  return ret;
 800567c:	697b      	ldr	r3, [r7, #20]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005690:	2301      	movs	r3, #1
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	214f      	movs	r1, #79	; 0x4f
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff fecf 	bl	800543a <lis2mdl_read_reg>
 800569c:	60f8      	str	r0, [r7, #12]

  return ret;
 800569e:	68fb      	ldr	r3, [r7, #12]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80056b4:	f107 0208 	add.w	r2, r7, #8
 80056b8:	2301      	movs	r3, #1
 80056ba:	2162      	movs	r1, #98	; 0x62
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff febc 	bl	800543a <lis2mdl_read_reg>
 80056c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80056ca:	78fb      	ldrb	r3, [r7, #3]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	7a3b      	ldrb	r3, [r7, #8]
 80056d4:	f362 0341 	bfi	r3, r2, #1, #1
 80056d8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80056da:	f107 0208 	add.w	r2, r7, #8
 80056de:	2301      	movs	r3, #1
 80056e0:	2162      	movs	r1, #98	; 0x62
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7ff fec1 	bl	800546a <lis2mdl_write_reg>
 80056e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005700:	f107 0208 	add.w	r2, r7, #8
 8005704:	2301      	movs	r3, #1
 8005706:	2162      	movs	r1, #98	; 0x62
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fe96 	bl	800543a <lis2mdl_read_reg>
 800570e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	7a3b      	ldrb	r3, [r7, #8]
 8005720:	f362 1345 	bfi	r3, r2, #5, #1
 8005724:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005726:	f107 0208 	add.w	r2, r7, #8
 800572a:	2301      	movs	r3, #1
 800572c:	2162      	movs	r1, #98	; 0x62
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fe9b 	bl	800546a <lis2mdl_write_reg>
 8005734:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	e051      	b.n	8005800 <LPS22HH_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	7b1a      	ldrb	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	691a      	ldr	r2, [r3, #16]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a1d      	ldr	r2, [pc, #116]	; (800580c <LPS22HH_RegisterBusIO+0xcc>)
 8005798:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1c      	ldr	r2, [pc, #112]	; (8005810 <LPS22HH_RegisterBusIO+0xd0>)
 800579e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <LPS22HH_RegisterBusIO+0x7e>
    {
      ret = LPS22HH_ERROR;
 80057b6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e020      	b.n	8005800 <LPS22HH_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4798      	blx	r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <LPS22HH_RegisterBusIO+0x92>
    {
      ret = LPS22HH_ERROR;
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e016      	b.n	8005800 <LPS22HH_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d112      	bne.n	8005800 <LPS22HH_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10d      	bne.n	8005800 <LPS22HH_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80057e4:	2301      	movs	r3, #1
 80057e6:	72fb      	strb	r3, [r7, #11]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80057e8:	7afb      	ldrb	r3, [r7, #11]
 80057ea:	461a      	mov	r2, r3
 80057ec:	2110      	movs	r1, #16
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9df 	bl	8005bb2 <LPS22HH_Write_Reg>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <LPS22HH_RegisterBusIO+0xc0>
          {
            ret = LPS22HH_ERROR;
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295
 80057fe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005800:	68fb      	ldr	r3, [r7, #12]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	08005edb 	.word	0x08005edb
 8005810:	08005f11 	.word	0x08005f11

08005814 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fb0e 	bl	8005e48 <LPS22HH_Initialize>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8005832:	f04f 33ff 	mov.w	r3, #4294967295
 8005836:	e004      	b.n	8005842 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	d111      	bne.n	8005880 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f877 	bl	8005950 <LPS22HH_PRESS_Disable>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	e00d      	b.n	800588a <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f918 	bl	8005aa4 <LPS22HH_TEMP_Disable>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	e004      	b.n	800588a <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HH_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3320      	adds	r3, #32
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fd1a 	bl	80062dc <lps22hh_device_id_get>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295
 80058b2:	e000      	b.n	80058b6 <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2200      	movs	r2, #0
 80058ce:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2201      	movs	r2, #1
 80058d4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	4a05      	ldr	r2, [pc, #20]	; (8005904 <LPS22HH_GetCapabilities+0x44>)
 80058ee:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	4a04      	ldr	r2, [pc, #16]	; (8005904 <LPS22HH_GetCapabilities+0x44>)
 80058f4:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	43480000 	.word	0x43480000

08005908 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	e014      	b.n	8005948 <LPS22HH_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f103 0220 	add.w	r2, r3, #32
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f000 fb93 	bl	8006058 <lps22hh_data_rate_set>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <LPS22HH_PRESS_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	e004      	b.n	8005948 <LPS22HH_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e024      	b.n	80059b0 <LPS22HH_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11a      	bne.n	80059a6 <LPS22HH_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f103 0220 	add.w	r2, r3, #32
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3333      	adds	r3, #51	; 0x33
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f000 fbb9 	bl	80060f4 <lps22hh_data_rate_get>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <LPS22HH_PRESS_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295
 800598c:	e010      	b.n	80059b0 <LPS22HH_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	3320      	adds	r3, #32
 8005992:	2100      	movs	r1, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fb5f 	bl	8006058 <lps22hh_data_rate_set>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <LPS22HH_PRESS_Disable+0x56>
    {
      return LPS22HH_ERROR;
 80059a0:	f04f 33ff 	mov.w	r3, #4294967295
 80059a4:	e004      	b.n	80059b0 <LPS22HH_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HH_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f90f 	bl	8005be8 <LPS22HH_GetOutputDataRate>
 80059ca:	4603      	mov	r3, r0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d106      	bne.n	80059f8 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80059ea:	ed97 0a00 	vldr	s0, [r7]
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f95e 	bl	8005cb0 <LPS22HH_SetOutputDataRate_When_Enabled>
 80059f4:	4603      	mov	r3, r0
 80059f6:	e005      	b.n	8005a04 <LPS22HH_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80059f8:	ed97 0a00 	vldr	s0, [r7]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f9c9 	bl	8005d94 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005a02:	4603      	mov	r3, r0
  }
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f007 ffd0 	bl	800d9c4 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3320      	adds	r3, #32
 8005a28:	f107 020c 	add.w	r2, r7, #12
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fc08 	bl	8006244 <lps22hh_pressure_raw_get>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <LPS22HH_PRESS_GetPressure+0x34>
  {
    return LPS22HH_ERROR;
 8005a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a3e:	e009      	b.n	8005a54 <LPS22HH_PRESS_GetPressure+0x48>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fab0 	bl	8005fa8 <lps22hh_from_lsb_to_hpa>
 8005a48:	eef0 7a40 	vmov.f32	s15, s0
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e014      	b.n	8005a9c <LPS22HH_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f103 0220 	add.w	r2, r3, #32
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f000 fae9 	bl	8006058 <lps22hh_data_rate_set>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <LPS22HH_TEMP_Enable+0x36>
  {
    return LPS22HH_ERROR;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a90:	e004      	b.n	8005a9c <LPS22HH_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e024      	b.n	8005b04 <LPS22HH_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d11a      	bne.n	8005afa <LPS22HH_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f103 0220 	add.w	r2, r3, #32
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3333      	adds	r3, #51	; 0x33
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	f000 fb0f 	bl	80060f4 <lps22hh_data_rate_get>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <LPS22HH_TEMP_Disable+0x3e>
    {
      return LPS22HH_ERROR;
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ae0:	e010      	b.n	8005b04 <LPS22HH_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3320      	adds	r3, #32
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fab5 	bl	8006058 <lps22hh_data_rate_set>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <LPS22HH_TEMP_Disable+0x56>
    {
      return LPS22HH_ERROR;
 8005af4:	f04f 33ff 	mov.w	r3, #4294967295
 8005af8:	e004      	b.n	8005b04 <LPS22HH_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HH_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f865 	bl	8005be8 <LPS22HH_GetOutputDataRate>
 8005b1e:	4603      	mov	r3, r0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d106      	bne.n	8005b4c <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005b3e:	ed97 0a00 	vldr	s0, [r7]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8b4 	bl	8005cb0 <LPS22HH_SetOutputDataRate_When_Enabled>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	e005      	b.n	8005b58 <LPS22HH_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005b4c:	ed97 0a00 	vldr	s0, [r7]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f91f 	bl	8005d94 <LPS22HH_SetOutputDataRate_When_Disabled>
 8005b56:	4603      	mov	r3, r0
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005b6a:	f107 030c 	add.w	r3, r7, #12
 8005b6e:	2202      	movs	r2, #2
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f007 ff26 	bl	800d9c4 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	3320      	adds	r3, #32
 8005b7c:	f107 020c 	add.w	r2, r7, #12
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fb87 	bl	8006296 <lps22hh_temperature_raw_get>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <LPS22HH_TEMP_GetTemperature+0x34>
  {
    return LPS22HH_ERROR;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	e00a      	b.n	8005baa <LPS22HH_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005b94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fa1d 	bl	8005fd8 <lps22hh_from_lsb_to_celsius>
 8005b9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HH_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	70fb      	strb	r3, [r7, #3]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	70bb      	strb	r3, [r7, #2]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f103 0020 	add.w	r0, r3, #32
 8005bc8:	1cba      	adds	r2, r7, #2
 8005bca:	78f9      	ldrb	r1, [r7, #3]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f000 f9d2 	bl	8005f76 <lps22hh_write_reg>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <LPS22HH_Write_Reg+0x2c>
  {
    return LPS22HH_ERROR;
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bdc:	e000      	b.n	8005be0 <LPS22HH_Write_Reg+0x2e>
  }

  return LPS22HH_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3320      	adds	r3, #32
 8005bfa:	f107 020b 	add.w	r2, r7, #11
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fa77 	bl	80060f4 <lps22hh_data_rate_get>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <LPS22HH_GetOutputDataRate+0x2a>
  {
    return LPS22HH_ERROR;
 8005c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c10:	e03d      	b.n	8005c8e <LPS22HH_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 8005c12:	7afb      	ldrb	r3, [r7, #11]
 8005c14:	2b07      	cmp	r3, #7
 8005c16:	d835      	bhi.n	8005c84 <LPS22HH_GetOutputDataRate+0x9c>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <LPS22HH_GetOutputDataRate+0x38>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c41 	.word	0x08005c41
 8005c24:	08005c4b 	.word	0x08005c4b
 8005c28:	08005c55 	.word	0x08005c55
 8005c2c:	08005c5d 	.word	0x08005c5d
 8005c30:	08005c65 	.word	0x08005c65
 8005c34:	08005c6d 	.word	0x08005c6d
 8005c38:	08005c75 	.word	0x08005c75
 8005c3c:	08005c7d 	.word	0x08005c7d
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
      break;
 8005c48:	e020      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005c50:	601a      	str	r2, [r3, #0]
      break;
 8005c52:	e01b      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <LPS22HH_GetOutputDataRate+0xb0>)
 8005c58:	601a      	str	r2, [r3, #0]
      break;
 8005c5a:	e017      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4a0f      	ldr	r2, [pc, #60]	; (8005c9c <LPS22HH_GetOutputDataRate+0xb4>)
 8005c60:	601a      	str	r2, [r3, #0]
      break;
 8005c62:	e013      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <LPS22HH_GetOutputDataRate+0xb8>)
 8005c68:	601a      	str	r2, [r3, #0]
      break;
 8005c6a:	e00f      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <LPS22HH_GetOutputDataRate+0xbc>)
 8005c70:	601a      	str	r2, [r3, #0]
      break;
 8005c72:	e00b      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <LPS22HH_GetOutputDataRate+0xc0>)
 8005c78:	601a      	str	r2, [r3, #0]
      break;
 8005c7a:	e007      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <LPS22HH_GetOutputDataRate+0xc4>)
 8005c80:	601a      	str	r2, [r3, #0]
      break;
 8005c82:	e003      	b.n	8005c8c <LPS22HH_GetOutputDataRate+0xa4>

    default:
      ret = LPS22HH_ERROR;
 8005c84:	f04f 33ff 	mov.w	r3, #4294967295
 8005c88:	60fb      	str	r3, [r7, #12]
      break;
 8005c8a:	bf00      	nop
  }

  return ret;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	41200000 	.word	0x41200000
 8005c9c:	41c80000 	.word	0x41c80000
 8005ca0:	42480000 	.word	0x42480000
 8005ca4:	42960000 	.word	0x42960000
 8005ca8:	42c80000 	.word	0x42c80000
 8005cac:	43480000 	.word	0x43480000

08005cb0 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	ed87 0a00 	vstr	s0, [r7]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005cbc:	edd7 7a00 	vldr	s15, [r7]
 8005cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ccc:	d801      	bhi.n	8005cd2 <LPS22HH_SetOutputDataRate_When_Enabled+0x22>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e037      	b.n	8005d42 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005cd2:	edd7 7a00 	vldr	s15, [r7]
 8005cd6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce2:	d801      	bhi.n	8005ce8 <LPS22HH_SetOutputDataRate_When_Enabled+0x38>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e02c      	b.n	8005d42 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005ce8:	edd7 7a00 	vldr	s15, [r7]
 8005cec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf8:	d801      	bhi.n	8005cfe <LPS22HH_SetOutputDataRate_When_Enabled+0x4e>
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e021      	b.n	8005d42 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005cfe:	edd7 7a00 	vldr	s15, [r7]
 8005d02:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005d88 <LPS22HH_SetOutputDataRate_When_Enabled+0xd8>
 8005d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	d801      	bhi.n	8005d14 <LPS22HH_SetOutputDataRate_When_Enabled+0x64>
 8005d10:	2304      	movs	r3, #4
 8005d12:	e016      	b.n	8005d42 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005d14:	edd7 7a00 	vldr	s15, [r7]
 8005d18:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005d8c <LPS22HH_SetOutputDataRate_When_Enabled+0xdc>
 8005d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d24:	d801      	bhi.n	8005d2a <LPS22HH_SetOutputDataRate_When_Enabled+0x7a>
 8005d26:	2305      	movs	r3, #5
 8005d28:	e00b      	b.n	8005d42 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005d2a:	edd7 7a00 	vldr	s15, [r7]
 8005d2e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005d90 <LPS22HH_SetOutputDataRate_When_Enabled+0xe0>
 8005d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	d801      	bhi.n	8005d40 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
 8005d3c:	2306      	movs	r3, #6
 8005d3e:	e000      	b.n	8005d42 <LPS22HH_SetOutputDataRate_When_Enabled+0x92>
 8005d40:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005d42:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3320      	adds	r3, #32
 8005d48:	7bfa      	ldrb	r2, [r7, #15]
 8005d4a:	4611      	mov	r1, r2
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f983 	bl	8006058 <lps22hh_data_rate_set>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  {
    return LPS22HH_ERROR;
 8005d58:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5c:	e00f      	b.n	8005d7e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f103 0220 	add.w	r2, r3, #32
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3333      	adds	r3, #51	; 0x33
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f000 f9c2 	bl	80060f4 <lps22hh_data_rate_get>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <LPS22HH_SetOutputDataRate_When_Enabled+0xcc>
  {
    return LPS22HH_ERROR;
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	e000      	b.n	8005d7e <LPS22HH_SetOutputDataRate_When_Enabled+0xce>
  }

  return LPS22HH_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	42480000 	.word	0x42480000
 8005d8c:	42960000 	.word	0x42960000
 8005d90:	42c80000 	.word	0x42c80000

08005d94 <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005da0:	edd7 7a00 	vldr	s15, [r7]
 8005da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db0:	d801      	bhi.n	8005db6 <LPS22HH_SetOutputDataRate_When_Disabled+0x22>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e037      	b.n	8005e26 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005db6:	edd7 7a00 	vldr	s15, [r7]
 8005dba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005dbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	d801      	bhi.n	8005dcc <LPS22HH_SetOutputDataRate_When_Disabled+0x38>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e02c      	b.n	8005e26 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005dcc:	edd7 7a00 	vldr	s15, [r7]
 8005dd0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8005dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ddc:	d801      	bhi.n	8005de2 <LPS22HH_SetOutputDataRate_When_Disabled+0x4e>
 8005dde:	2303      	movs	r3, #3
 8005de0:	e021      	b.n	8005e26 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005de2:	edd7 7a00 	vldr	s15, [r7]
 8005de6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005e3c <LPS22HH_SetOutputDataRate_When_Disabled+0xa8>
 8005dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	d801      	bhi.n	8005df8 <LPS22HH_SetOutputDataRate_When_Disabled+0x64>
 8005df4:	2304      	movs	r3, #4
 8005df6:	e016      	b.n	8005e26 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005df8:	edd7 7a00 	vldr	s15, [r7]
 8005dfc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005e40 <LPS22HH_SetOutputDataRate_When_Disabled+0xac>
 8005e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e08:	d801      	bhi.n	8005e0e <LPS22HH_SetOutputDataRate_When_Disabled+0x7a>
 8005e0a:	2305      	movs	r3, #5
 8005e0c:	e00b      	b.n	8005e26 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005e0e:	edd7 7a00 	vldr	s15, [r7]
 8005e12:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005e44 <LPS22HH_SetOutputDataRate_When_Disabled+0xb0>
 8005e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	d801      	bhi.n	8005e24 <LPS22HH_SetOutputDataRate_When_Disabled+0x90>
 8005e20:	2306      	movs	r3, #6
 8005e22:	e000      	b.n	8005e26 <LPS22HH_SetOutputDataRate_When_Disabled+0x92>
 8005e24:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	42480000 	.word	0x42480000
 8005e40:	42960000 	.word	0x42960000
 8005e44:	42c80000 	.word	0x42c80000

08005e48 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3320      	adds	r3, #32
 8005e54:	2111      	movs	r1, #17
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fa9d 	bl	8006396 <lps22hh_i3c_interface_set>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <LPS22HH_Initialize+0x20>
  {
    return LPS22HH_ERROR;
 8005e62:	f04f 33ff 	mov.w	r3, #4294967295
 8005e66:	e034      	b.n	8005ed2 <LPS22HH_Initialize+0x8a>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3320      	adds	r3, #32
 8005e6c:	2110      	movs	r1, #16
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f8f2 	bl	8006058 <lps22hh_data_rate_set>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <LPS22HH_Initialize+0x38>
  {
    return LPS22HH_ERROR;
 8005e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7e:	e028      	b.n	8005ed2 <LPS22HH_Initialize+0x8a>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3320      	adds	r3, #32
 8005e84:	2100      	movs	r1, #0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fa5f 	bl	800634a <lps22hh_lp_bandwidth_set>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <LPS22HH_Initialize+0x50>
  {
    return LPS22HH_ERROR;
 8005e92:	f04f 33ff 	mov.w	r3, #4294967295
 8005e96:	e01c      	b.n	8005ed2 <LPS22HH_Initialize+0x8a>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3320      	adds	r3, #32
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f8b4 	bl	800600c <lps22hh_block_data_update_set>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <LPS22HH_Initialize+0x68>
  {
    return LPS22HH_ERROR;
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8005eae:	e010      	b.n	8005ed2 <LPS22HH_Initialize+0x8a>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3320      	adds	r3, #32
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fa21 	bl	80062fe <lps22hh_auto_increment_set>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <LPS22HH_Initialize+0x80>
  {
    return LPS22HH_ERROR;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	e004      	b.n	8005ed2 <LPS22HH_Initialize+0x8a>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2203      	movs	r2, #3
 8005ecc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HH_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005eda:	b590      	push	{r4, r7, lr}
 8005edc:	b087      	sub	sp, #28
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	72fb      	strb	r3, [r7, #11]
 8005eea:	4613      	mov	r3, r2
 8005eec:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	695c      	ldr	r4, [r3, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	7b1b      	ldrb	r3, [r3, #12]
 8005efa:	b298      	uxth	r0, r3
 8005efc:	7afb      	ldrb	r3, [r7, #11]
 8005efe:	b299      	uxth	r1, r3
 8005f00:	893b      	ldrh	r3, [r7, #8]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	47a0      	blx	r4
 8005f06:	4603      	mov	r3, r0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd90      	pop	{r4, r7, pc}

08005f10 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	72fb      	strb	r3, [r7, #11]
 8005f20:	4613      	mov	r3, r2
 8005f22:	813b      	strh	r3, [r7, #8]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	691c      	ldr	r4, [r3, #16]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	7b1b      	ldrb	r3, [r3, #12]
 8005f30:	b298      	uxth	r0, r3
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	b299      	uxth	r1, r3
 8005f36:	893b      	ldrh	r3, [r7, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	47a0      	blx	r4
 8005f3c:	4603      	mov	r3, r0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}

08005f46 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005f46:	b590      	push	{r4, r7, lr}
 8005f48:	b087      	sub	sp, #28
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	460b      	mov	r3, r1
 8005f54:	72fb      	strb	r3, [r7, #11]
 8005f56:	4613      	mov	r3, r2
 8005f58:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685c      	ldr	r4, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68d8      	ldr	r0, [r3, #12]
 8005f62:	893b      	ldrh	r3, [r7, #8]
 8005f64:	7af9      	ldrb	r1, [r7, #11]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	47a0      	blx	r4
 8005f6a:	6178      	str	r0, [r7, #20]

  return ret;
 8005f6c:	697b      	ldr	r3, [r7, #20]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd90      	pop	{r4, r7, pc}

08005f76 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005f76:	b590      	push	{r4, r7, lr}
 8005f78:	b087      	sub	sp, #28
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	461a      	mov	r2, r3
 8005f82:	460b      	mov	r3, r1
 8005f84:	72fb      	strb	r3, [r7, #11]
 8005f86:	4613      	mov	r3, r2
 8005f88:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681c      	ldr	r4, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68d8      	ldr	r0, [r3, #12]
 8005f92:	893b      	ldrh	r3, [r7, #8]
 8005f94:	7af9      	ldrb	r1, [r7, #11]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	47a0      	blx	r4
 8005f9a:	6178      	str	r0, [r7, #20]

  return ret;
 8005f9c:	697b      	ldr	r3, [r7, #20]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd90      	pop	{r4, r7, pc}
	...

08005fa8 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005fd4 <lps22hh_from_lsb_to_hpa+0x2c>
 8005fbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005fc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	49800000 	.word	0x49800000

08005fd8 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006008 <lps22hh_from_lsb_to_celsius+0x30>
 8005ff2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ff6:	eef0 7a66 	vmov.f32	s15, s13
}
 8005ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	42c80000 	.word	0x42c80000

0800600c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006018:	f107 0208 	add.w	r2, r7, #8
 800601c:	2301      	movs	r3, #1
 800601e:	2110      	movs	r1, #16
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff90 	bl	8005f46 <lps22hh_read_reg>
 8006026:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10f      	bne.n	800604e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	b2da      	uxtb	r2, r3
 8006036:	7a3b      	ldrb	r3, [r7, #8]
 8006038:	f362 0341 	bfi	r3, r2, #1, #1
 800603c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800603e:	f107 0208 	add.w	r2, r7, #8
 8006042:	2301      	movs	r3, #1
 8006044:	2110      	movs	r1, #16
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff ff95 	bl	8005f76 <lps22hh_write_reg>
 800604c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800604e:	68fb      	ldr	r3, [r7, #12]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006064:	f107 0210 	add.w	r2, r7, #16
 8006068:	2301      	movs	r3, #1
 800606a:	2110      	movs	r1, #16
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff6a 	bl	8005f46 <lps22hh_read_reg>
 8006072:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d107      	bne.n	800608a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800607a:	f107 020c 	add.w	r2, r7, #12
 800607e:	2301      	movs	r3, #1
 8006080:	2111      	movs	r1, #17
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ff5f 	bl	8005f46 <lps22hh_read_reg>
 8006088:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10f      	bne.n	80060b0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	b2da      	uxtb	r2, r3
 8006098:	7c3b      	ldrb	r3, [r7, #16]
 800609a:	f362 1306 	bfi	r3, r2, #4, #3
 800609e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80060a0:	f107 0210 	add.w	r2, r7, #16
 80060a4:	2301      	movs	r3, #1
 80060a6:	2110      	movs	r1, #16
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff64 	bl	8005f76 <lps22hh_write_reg>
 80060ae:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d119      	bne.n	80060ea <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	7b3b      	ldrb	r3, [r7, #12]
 80060c2:	f362 0341 	bfi	r3, r2, #1, #1
 80060c6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	08db      	lsrs	r3, r3, #3
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	7b3b      	ldrb	r3, [r7, #12]
 80060d4:	f362 0300 	bfi	r3, r2, #0, #1
 80060d8:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80060da:	f107 020c 	add.w	r2, r7, #12
 80060de:	2301      	movs	r3, #1
 80060e0:	2111      	movs	r1, #17
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7ff ff47 	bl	8005f76 <lps22hh_write_reg>
 80060e8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80060ea:	697b      	ldr	r3, [r7, #20]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3718      	adds	r7, #24
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80060fe:	f107 0210 	add.w	r2, r7, #16
 8006102:	2301      	movs	r3, #1
 8006104:	2110      	movs	r1, #16
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ff1d 	bl	8005f46 <lps22hh_read_reg>
 800610c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <lps22hh_data_rate_get+0x30>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006114:	f107 020c 	add.w	r2, r7, #12
 8006118:	2301      	movs	r3, #1
 800611a:	2111      	movs	r1, #17
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ff12 	bl	8005f46 <lps22hh_read_reg>
 8006122:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 8086 	bne.w	8006238 <lps22hh_data_rate_get+0x144>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800612c:	f107 020c 	add.w	r2, r7, #12
 8006130:	2301      	movs	r3, #1
 8006132:	2111      	movs	r1, #17
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff06 	bl	8005f46 <lps22hh_read_reg>
 800613a:	6178      	str	r0, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800613c:	7b3b      	ldrb	r3, [r7, #12]
 800613e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006142:	b2db      	uxtb	r3, r3
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	7b3b      	ldrb	r3, [r7, #12]
 8006148:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
             ctrl_reg1.odr))
 8006152:	7c3a      	ldrb	r2, [r7, #16]
 8006154:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006158:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 800615a:	4413      	add	r3, r2
 800615c:	2b15      	cmp	r3, #21
 800615e:	d867      	bhi.n	8006230 <lps22hh_data_rate_get+0x13c>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <lps22hh_data_rate_get+0x74>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	080061c1 	.word	0x080061c1
 800616c:	080061d1 	.word	0x080061d1
 8006170:	080061d9 	.word	0x080061d9
 8006174:	080061e1 	.word	0x080061e1
 8006178:	080061e9 	.word	0x080061e9
 800617c:	080061f1 	.word	0x080061f1
 8006180:	08006221 	.word	0x08006221
 8006184:	08006229 	.word	0x08006229
 8006188:	080061c9 	.word	0x080061c9
 800618c:	08006231 	.word	0x08006231
 8006190:	08006231 	.word	0x08006231
 8006194:	08006231 	.word	0x08006231
 8006198:	08006231 	.word	0x08006231
 800619c:	08006231 	.word	0x08006231
 80061a0:	08006231 	.word	0x08006231
 80061a4:	08006231 	.word	0x08006231
 80061a8:	08006231 	.word	0x08006231
 80061ac:	080061f9 	.word	0x080061f9
 80061b0:	08006201 	.word	0x08006201
 80061b4:	08006209 	.word	0x08006209
 80061b8:	08006211 	.word	0x08006211
 80061bc:	08006219 	.word	0x08006219
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
        break;
 80061c6:	e038      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2208      	movs	r2, #8
 80061cc:	701a      	strb	r2, [r3, #0]
        break;
 80061ce:	e034      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]
        break;
 80061d6:	e030      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2202      	movs	r2, #2
 80061dc:	701a      	strb	r2, [r3, #0]
        break;
 80061de:	e02c      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2203      	movs	r2, #3
 80061e4:	701a      	strb	r2, [r3, #0]
        break;
 80061e6:	e028      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2204      	movs	r2, #4
 80061ec:	701a      	strb	r2, [r3, #0]
        break;
 80061ee:	e024      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2205      	movs	r2, #5
 80061f4:	701a      	strb	r2, [r3, #0]
        break;
 80061f6:	e020      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2211      	movs	r2, #17
 80061fc:	701a      	strb	r2, [r3, #0]
        break;
 80061fe:	e01c      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2212      	movs	r2, #18
 8006204:	701a      	strb	r2, [r3, #0]
        break;
 8006206:	e018      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2213      	movs	r2, #19
 800620c:	701a      	strb	r2, [r3, #0]
        break;
 800620e:	e014      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2214      	movs	r2, #20
 8006214:	701a      	strb	r2, [r3, #0]
        break;
 8006216:	e010      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2215      	movs	r2, #21
 800621c:	701a      	strb	r2, [r3, #0]
        break;
 800621e:	e00c      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2206      	movs	r2, #6
 8006224:	701a      	strb	r2, [r3, #0]
        break;
 8006226:	e008      	b.n	800623a <lps22hh_data_rate_get+0x146>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2207      	movs	r2, #7
 800622c:	701a      	strb	r2, [r3, #0]
        break;
 800622e:	e004      	b.n	800623a <lps22hh_data_rate_get+0x146>

      default:
        *val = LPS22HH_POWER_DOWN;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
        break;
 8006236:	e000      	b.n	800623a <lps22hh_data_rate_get+0x146>
    }
  }
 8006238:	bf00      	nop

  return ret;
 800623a:	697b      	ldr	r3, [r7, #20]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800624e:	f107 0208 	add.w	r2, r7, #8
 8006252:	2303      	movs	r3, #3
 8006254:	2128      	movs	r1, #40	; 0x28
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fe75 	bl	8005f46 <lps22hh_read_reg>
 800625c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800625e:	7abb      	ldrb	r3, [r7, #10]
 8006260:	461a      	mov	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	7a7a      	ldrb	r2, [r7, #9]
 800626e:	441a      	add	r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	7a3a      	ldrb	r2, [r7, #8]
 800627c:	441a      	add	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]

  return ret;
 800628c:	68fb      	ldr	r3, [r7, #12]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 80062a0:	f107 0208 	add.w	r2, r7, #8
 80062a4:	2302      	movs	r3, #2
 80062a6:	212b      	movs	r1, #43	; 0x2b
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fe4c 	bl	8005f46 <lps22hh_read_reg>
 80062ae:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 80062b0:	7a7b      	ldrb	r3, [r7, #9]
 80062b2:	b21a      	sxth	r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	7a3b      	ldrb	r3, [r7, #8]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	b21a      	sxth	r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	801a      	strh	r2, [r3, #0]

  return ret;
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80062e6:	2301      	movs	r3, #1
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	210f      	movs	r1, #15
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fe2a 	bl	8005f46 <lps22hh_read_reg>
 80062f2:	60f8      	str	r0, [r7, #12]

  return ret;
 80062f4:	68fb      	ldr	r3, [r7, #12]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	460b      	mov	r3, r1
 8006308:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800630a:	f107 0208 	add.w	r2, r7, #8
 800630e:	2301      	movs	r3, #1
 8006310:	2111      	movs	r1, #17
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff fe17 	bl	8005f46 <lps22hh_read_reg>
 8006318:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10f      	bne.n	8006340 <lps22hh_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	7a3b      	ldrb	r3, [r7, #8]
 800632a:	f362 1304 	bfi	r3, r2, #4, #1
 800632e:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006330:	f107 0208 	add.w	r2, r7, #8
 8006334:	2301      	movs	r3, #1
 8006336:	2111      	movs	r1, #17
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff fe1c 	bl	8005f76 <lps22hh_write_reg>
 800633e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006356:	f107 0208 	add.w	r2, r7, #8
 800635a:	2301      	movs	r3, #1
 800635c:	2110      	movs	r1, #16
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fdf1 	bl	8005f46 <lps22hh_read_reg>
 8006364:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10f      	bne.n	800638c <lps22hh_lp_bandwidth_set+0x42>
  {
    reg.lpfp_cfg = (uint8_t)val;
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	b2da      	uxtb	r2, r3
 8006374:	7a3b      	ldrb	r3, [r7, #8]
 8006376:	f362 0383 	bfi	r3, r2, #2, #2
 800637a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800637c:	f107 0208 	add.w	r2, r7, #8
 8006380:	2301      	movs	r3, #1
 8006382:	2110      	movs	r1, #16
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f7ff fdf6 	bl	8005f76 <lps22hh_write_reg>
 800638a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	460b      	mov	r3, r1
 80063a0:	70fb      	strb	r3, [r7, #3]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80063a2:	f107 0208 	add.w	r2, r7, #8
 80063a6:	2301      	movs	r3, #1
 80063a8:	210e      	movs	r1, #14
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff fdcb 	bl	8005f46 <lps22hh_read_reg>
 80063b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d118      	bne.n	80063ea <lps22hh_i3c_interface_set+0x54>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	7a3b      	ldrb	r3, [r7, #8]
 80063c2:	f362 0341 	bfi	r3, r2, #1, #1
 80063c6:	723b      	strb	r3, [r7, #8]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	7a3b      	ldrb	r3, [r7, #8]
 80063d4:	f362 13c7 	bfi	r3, r2, #7, #1
 80063d8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 80063da:	f107 0208 	add.w	r2, r7, #8
 80063de:	2301      	movs	r3, #1
 80063e0:	210e      	movs	r1, #14
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff fdc7 	bl	8005f76 <lps22hh_write_reg>
 80063e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063ea:	68fb      	ldr	r3, [r7, #12]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d103      	bne.n	8006410 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	e051      	b.n	80064b4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	7b1a      	ldrb	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <LSM6DSO_RegisterBusIO+0xcc>)
 800644c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <LSM6DSO_RegisterBusIO+0xd0>)
 8006452:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	e020      	b.n	80064b4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4798      	blx	r3
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e016      	b.n	80064b4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d112      	bne.n	80064b4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006498:	230c      	movs	r3, #12
 800649a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 800649c:	7afb      	ldrb	r3, [r7, #11]
 800649e:	461a      	mov	r2, r3
 80064a0:	2112      	movs	r1, #18
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 ff59 	bl	800735a <LSM6DSO_Write_Reg>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80064ae:	f04f 33ff 	mov.w	r3, #4294967295
 80064b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80064b4:	68fb      	ldr	r3, [r7, #12]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	080077fd 	.word	0x080077fd
 80064c4:	08007833 	.word	0x08007833

080064c8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3320      	adds	r3, #32
 80064d4:	2180      	movs	r1, #128	; 0x80
 80064d6:	4618      	mov	r0, r3
 80064d8:	f001 fe97 	bl	800820a <lsm6dso_i3c_disable_set>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80064e2:	f04f 33ff 	mov.w	r3, #4294967295
 80064e6:	e060      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3320      	adds	r3, #32
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 fe65 	bl	80081be <lsm6dso_auto_increment_set>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	e054      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3320      	adds	r3, #32
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f001 fd66 	bl	8007fd8 <lsm6dso_block_data_update_set>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	e048      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	3320      	adds	r3, #32
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f001 feb9 	bl	8008296 <lsm6dso_fifo_mode_set>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	e03c      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2204      	movs	r2, #4
 8006534:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3320      	adds	r3, #32
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fa20 	bl	8007984 <lsm6dso_xl_data_rate_set>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800654a:	f04f 33ff 	mov.w	r3, #4294967295
 800654e:	e02c      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3320      	adds	r3, #32
 8006554:	2100      	movs	r1, #0
 8006556:	4618      	mov	r0, r3
 8006558:	f001 f9b6 	bl	80078c8 <lsm6dso_xl_full_scale_set>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	e020      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2204      	movs	r2, #4
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3320      	adds	r3, #32
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f001 fbd0 	bl	8007d1c <lsm6dso_gy_data_rate_set>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8006582:	f04f 33ff 	mov.w	r3, #4294967295
 8006586:	e010      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3320      	adds	r3, #32
 800658c:	2106      	movs	r1, #6
 800658e:	4618      	mov	r0, r3
 8006590:	f001 fb5c 	bl	8007c4c <lsm6dso_gy_full_scale_set>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	e004      	b.n	80065aa <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f888 	bl	80066d0 <LSM6DSO_ACC_Disable>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	e015      	b.n	80065f8 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fc2e 	bl	8006e2e <LSM6DSO_GYRO_Disable>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	e00c      	b.n	80065f8 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3320      	adds	r3, #32
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fdc3 	bl	800819c <lsm6dso_device_id_get>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 800661c:	f04f 33ff 	mov.w	r3, #4294967295
 8006620:	e000      	b.n	8006624 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2201      	movs	r2, #1
 800663a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006654:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2200      	movs	r2, #0
 8006660:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	4a07      	ldr	r2, [pc, #28]	; (8006684 <LSM6DSO_GetCapabilities+0x58>)
 8006666:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	4a06      	ldr	r2, [pc, #24]	; (8006684 <LSM6DSO_GetCapabilities+0x58>)
 800666c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	45d02000 	.word	0x45d02000

08006688 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e014      	b.n	80066c8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f103 0220 	add.w	r2, r3, #32
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f001 f969 	bl	8007984 <lsm6dso_xl_data_rate_set>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295
 80066bc:	e004      	b.n	80066c8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e01f      	b.n	8006726 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f103 0220 	add.w	r2, r3, #32
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3333      	adds	r3, #51	; 0x33
 80066f0:	4619      	mov	r1, r3
 80066f2:	4610      	mov	r0, r2
 80066f4:	f001 fa42 	bl	8007b7c <lsm6dso_xl_data_rate_get>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e010      	b.n	8006726 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3320      	adds	r3, #32
 8006708:	2100      	movs	r1, #0
 800670a:	4618      	mov	r0, r3
 800670c:	f001 f93a 	bl	8007984 <lsm6dso_xl_data_rate_set>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	e004      	b.n	8006726 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
	...

08006730 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3320      	adds	r3, #32
 8006742:	f107 020b 	add.w	r2, r7, #11
 8006746:	4611      	mov	r1, r2
 8006748:	4618      	mov	r0, r3
 800674a:	f001 f8e3 	bl	8007914 <lsm6dso_xl_full_scale_get>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006754:	f04f 33ff 	mov.w	r3, #4294967295
 8006758:	e023      	b.n	80067a2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800675a:	7afb      	ldrb	r3, [r7, #11]
 800675c:	2b03      	cmp	r3, #3
 800675e:	d81b      	bhi.n	8006798 <LSM6DSO_ACC_GetSensitivity+0x68>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006779 	.word	0x08006779
 800676c:	08006791 	.word	0x08006791
 8006770:	08006781 	.word	0x08006781
 8006774:	08006789 	.word	0x08006789
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800677c:	601a      	str	r2, [r3, #0]
      break;
 800677e:	e00f      	b.n	80067a0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006784:	601a      	str	r2, [r3, #0]
      break;
 8006786:	e00b      	b.n	80067a0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800678c:	601a      	str	r2, [r3, #0]
      break;
 800678e:	e007      	b.n	80067a0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006794:	601a      	str	r2, [r3, #0]
      break;
 8006796:	e003      	b.n	80067a0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006798:	f04f 33ff 	mov.w	r3, #4294967295
 800679c:	60fb      	str	r3, [r7, #12]
      break;
 800679e:	bf00      	nop
  }

  return ret;
 80067a0:	68fb      	ldr	r3, [r7, #12]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	3d79db23 	.word	0x3d79db23
 80067b0:	3df9db23 	.word	0x3df9db23
 80067b4:	3e79db23 	.word	0x3e79db23
 80067b8:	3ef9db23 	.word	0x3ef9db23

080067bc <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3320      	adds	r3, #32
 80067ce:	f107 020b 	add.w	r2, r7, #11
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f9d1 	bl	8007b7c <lsm6dso_xl_data_rate_get>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80067e0:	f04f 33ff 	mov.w	r3, #4294967295
 80067e4:	e054      	b.n	8006890 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80067e6:	7afb      	ldrb	r3, [r7, #11]
 80067e8:	2b0b      	cmp	r3, #11
 80067ea:	d84c      	bhi.n	8006886 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 80067ec:	a201      	add	r2, pc, #4	; (adr r2, 80067f4 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006825 	.word	0x08006825
 80067f8:	08006837 	.word	0x08006837
 80067fc:	0800683f 	.word	0x0800683f
 8006800:	08006847 	.word	0x08006847
 8006804:	0800684f 	.word	0x0800684f
 8006808:	08006857 	.word	0x08006857
 800680c:	0800685f 	.word	0x0800685f
 8006810:	08006867 	.word	0x08006867
 8006814:	0800686f 	.word	0x0800686f
 8006818:	08006877 	.word	0x08006877
 800681c:	0800687f 	.word	0x0800687f
 8006820:	0800682f 	.word	0x0800682f
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
      break;
 800682c:	e02f      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	4a19      	ldr	r2, [pc, #100]	; (8006898 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8006832:	601a      	str	r2, [r3, #0]
      break;
 8006834:	e02b      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	4a18      	ldr	r2, [pc, #96]	; (800689c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 800683a:	601a      	str	r2, [r3, #0]
      break;
 800683c:	e027      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	4a17      	ldr	r2, [pc, #92]	; (80068a0 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 8006842:	601a      	str	r2, [r3, #0]
      break;
 8006844:	e023      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	4a16      	ldr	r2, [pc, #88]	; (80068a4 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 800684a:	601a      	str	r2, [r3, #0]
      break;
 800684c:	e01f      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	4a15      	ldr	r2, [pc, #84]	; (80068a8 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 8006852:	601a      	str	r2, [r3, #0]
      break;
 8006854:	e01b      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	4a14      	ldr	r2, [pc, #80]	; (80068ac <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 800685a:	601a      	str	r2, [r3, #0]
      break;
 800685c:	e017      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 8006862:	601a      	str	r2, [r3, #0]
      break;
 8006864:	e013      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 800686a:	601a      	str	r2, [r3, #0]
      break;
 800686c:	e00f      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006872:	601a      	str	r2, [r3, #0]
      break;
 8006874:	e00b      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	4a10      	ldr	r2, [pc, #64]	; (80068bc <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800687a:	601a      	str	r2, [r3, #0]
      break;
 800687c:	e007      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006882:	601a      	str	r2, [r3, #0]
      break;
 8006884:	e003      	b.n	800688e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006886:	f04f 33ff 	mov.w	r3, #4294967295
 800688a:	60fb      	str	r3, [r7, #12]
      break;
 800688c:	bf00      	nop
  }

  return ret;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	3fcccccd 	.word	0x3fcccccd
 800689c:	41480000 	.word	0x41480000
 80068a0:	41d00000 	.word	0x41d00000
 80068a4:	42500000 	.word	0x42500000
 80068a8:	42d00000 	.word	0x42d00000
 80068ac:	43500000 	.word	0x43500000
 80068b0:	43d08000 	.word	0x43d08000
 80068b4:	44504000 	.word	0x44504000
 80068b8:	44d06000 	.word	0x44d06000
 80068bc:	45505000 	.word	0x45505000
 80068c0:	45d05800 	.word	0x45d05800

080068c4 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80068d0:	2100      	movs	r1, #0
 80068d2:	ed97 0a00 	vldr	s0, [r7]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f806 	bl	80068e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80068dc:	4603      	mov	r3, r0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
	...

080068e8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	; 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80068f4:	460b      	mov	r3, r1
 80068f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b02      	cmp	r3, #2
 8006904:	f000 80ea 	beq.w	8006adc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006908:	2b02      	cmp	r3, #2
 800690a:	f300 8163 	bgt.w	8006bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 8006912:	2b01      	cmp	r3, #1
 8006914:	d074      	beq.n	8006a00 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006916:	e15d      	b.n	8006bd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f103 0020 	add.w	r0, r3, #32
 800691e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006922:	2301      	movs	r3, #1
 8006924:	2114      	movs	r1, #20
 8006926:	f000 ff9f 	bl	8007868 <lsm6dso_read_reg>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8006930:	f04f 33ff 	mov.w	r3, #4294967295
 8006934:	e16c      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006936:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800693a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	d025      	beq.n	8006990 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800694a:	2b01      	cmp	r3, #1
 800694c:	d10b      	bne.n	8006966 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3320      	adds	r3, #32
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f001 f815 	bl	8007984 <lsm6dso_xl_data_rate_set>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	e154      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006966:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800696a:	f36f 13c7 	bfc	r3, #7, #1
 800696e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f103 0020 	add.w	r0, r3, #32
 8006978:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800697c:	2301      	movs	r3, #1
 800697e:	2114      	movs	r1, #20
 8006980:	f000 ff8a 	bl	8007898 <lsm6dso_write_reg>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800698a:	f04f 33ff 	mov.w	r3, #4294967295
 800698e:	e13f      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f103 0020 	add.w	r0, r3, #32
 8006996:	f107 0220 	add.w	r2, r7, #32
 800699a:	2301      	movs	r3, #1
 800699c:	2115      	movs	r1, #21
 800699e:	f000 ff63 	bl	8007868 <lsm6dso_read_reg>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80069a8:	f04f 33ff 	mov.w	r3, #4294967295
 80069ac:	e130      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80069ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d014      	beq.n	80069e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 80069bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069c0:	f36f 1304 	bfc	r3, #4, #1
 80069c4:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f103 0020 	add.w	r0, r3, #32
 80069ce:	f107 0220 	add.w	r2, r7, #32
 80069d2:	2301      	movs	r3, #1
 80069d4:	2115      	movs	r1, #21
 80069d6:	f000 ff5f 	bl	8007898 <lsm6dso_write_reg>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d002      	beq.n	80069e6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80069e0:	f04f 33ff 	mov.w	r3, #4294967295
 80069e4:	e114      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80069e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80069ea:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80069ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f6:	d400      	bmi.n	80069fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80069f8:	e0f0      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80069fa:	4b87      	ldr	r3, [pc, #540]	; (8006c18 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069fe:	e0ed      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f103 0020 	add.w	r0, r3, #32
 8006a06:	f107 021c 	add.w	r2, r7, #28
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	2114      	movs	r1, #20
 8006a0e:	f000 ff2b 	bl	8007868 <lsm6dso_read_reg>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	e0f8      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006a1e:	7f3b      	ldrb	r3, [r7, #28]
 8006a20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d023      	beq.n	8006a72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d10b      	bne.n	8006a4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3320      	adds	r3, #32
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 ffa2 	bl	8007984 <lsm6dso_xl_data_rate_set>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	e0e1      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006a4c:	7f3b      	ldrb	r3, [r7, #28]
 8006a4e:	f36f 13c7 	bfc	r3, #7, #1
 8006a52:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f103 0020 	add.w	r0, r3, #32
 8006a5a:	f107 021c 	add.w	r2, r7, #28
 8006a5e:	2301      	movs	r3, #1
 8006a60:	2114      	movs	r1, #20
 8006a62:	f000 ff19 	bl	8007898 <lsm6dso_write_reg>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8006a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a70:	e0ce      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f103 0020 	add.w	r0, r3, #32
 8006a78:	f107 0218 	add.w	r2, r7, #24
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	2115      	movs	r1, #21
 8006a80:	f000 fef2 	bl	8007868 <lsm6dso_read_reg>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8006a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8e:	e0bf      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006a90:	7e3b      	ldrb	r3, [r7, #24]
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d112      	bne.n	8006ac2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8006a9c:	7e3b      	ldrb	r3, [r7, #24]
 8006a9e:	f043 0310 	orr.w	r3, r3, #16
 8006aa2:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f103 0020 	add.w	r0, r3, #32
 8006aaa:	f107 0218 	add.w	r2, r7, #24
 8006aae:	2301      	movs	r3, #1
 8006ab0:	2115      	movs	r1, #21
 8006ab2:	f000 fef1 	bl	8007898 <lsm6dso_write_reg>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006abc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac0:	e0a6      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006ac2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006ac6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8006c1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad2:	dc00      	bgt.n	8006ad6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006ad4:	e082      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006ad6:	4b52      	ldr	r3, [pc, #328]	; (8006c20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ada:	e07f      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f103 0020 	add.w	r0, r3, #32
 8006ae2:	f107 0210 	add.w	r2, r7, #16
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	2115      	movs	r1, #21
 8006aea:	f000 febd 	bl	8007868 <lsm6dso_read_reg>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006af4:	f04f 33ff 	mov.w	r3, #4294967295
 8006af8:	e08a      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006afa:	7c3b      	ldrb	r3, [r7, #16]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d012      	beq.n	8006b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006b06:	7c3b      	ldrb	r3, [r7, #16]
 8006b08:	f36f 1304 	bfc	r3, #4, #1
 8006b0c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f103 0020 	add.w	r0, r3, #32
 8006b14:	f107 0210 	add.w	r2, r7, #16
 8006b18:	2301      	movs	r3, #1
 8006b1a:	2115      	movs	r1, #21
 8006b1c:	f000 febc 	bl	8007898 <lsm6dso_write_reg>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006b26:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2a:	e071      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d108      	bne.n	8006b48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f979 	bl	8006e2e <LSM6DSO_GYRO_Disable>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8006b42:	f04f 33ff 	mov.w	r3, #4294967295
 8006b46:	e063      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f103 0020 	add.w	r0, r3, #32
 8006b4e:	f107 0214 	add.w	r2, r7, #20
 8006b52:	2301      	movs	r3, #1
 8006b54:	2114      	movs	r1, #20
 8006b56:	f000 fe87 	bl	8007868 <lsm6dso_read_reg>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8006b60:	f04f 33ff 	mov.w	r3, #4294967295
 8006b64:	e054      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 8006b66:	7d3b      	ldrb	r3, [r7, #20]
 8006b68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d123      	bne.n	8006bba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d10b      	bne.n	8006b94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3320      	adds	r3, #32
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fefe 	bl	8007984 <lsm6dso_xl_data_rate_set>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8006b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b92:	e03d      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006b94:	7d3b      	ldrb	r3, [r7, #20]
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f103 0020 	add.w	r0, r3, #32
 8006ba2:	f107 0214 	add.w	r2, r7, #20
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	2114      	movs	r1, #20
 8006baa:	f000 fe75 	bl	8007898 <lsm6dso_write_reg>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb8:	e02a      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006bba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006bbe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006c1c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	dc00      	bgt.n	8006bce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006bcc:	e006      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006bce:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd2:	e003      	b.n	8006bdc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006bda:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d102      	bne.n	8006bea <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295
 8006be8:	e012      	b.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d106      	bne.n	8006c02 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006bf4:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fbc9 	bl	8007390 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006c00:	e005      	b.n	8006c0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006c02:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fc5a 	bl	80074c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3730      	adds	r7, #48	; 0x30
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	41480000 	.word	0x41480000
 8006c1c:	43500000 	.word	0x43500000
 8006c20:	43500000 	.word	0x43500000

08006c24 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3320      	adds	r3, #32
 8006c36:	f107 020b 	add.w	r2, r7, #11
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fe69 	bl	8007914 <lsm6dso_xl_full_scale_get>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006c48:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4c:	e023      	b.n	8006c96 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d81b      	bhi.n	8006c8c <LSM6DSO_ACC_GetFullScale+0x68>
 8006c54:	a201      	add	r2, pc, #4	; (adr r2, 8006c5c <LSM6DSO_ACC_GetFullScale+0x38>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c6d 	.word	0x08006c6d
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006c75 	.word	0x08006c75
 8006c68:	08006c7d 	.word	0x08006c7d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	601a      	str	r2, [r3, #0]
      break;
 8006c72:	e00f      	b.n	8006c94 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2204      	movs	r2, #4
 8006c78:	601a      	str	r2, [r3, #0]
      break;
 8006c7a:	e00b      	b.n	8006c94 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2208      	movs	r2, #8
 8006c80:	601a      	str	r2, [r3, #0]
      break;
 8006c82:	e007      	b.n	8006c94 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2210      	movs	r2, #16
 8006c88:	601a      	str	r2, [r3, #0]
      break;
 8006c8a:	e003      	b.n	8006c94 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c90:	60fb      	str	r3, [r7, #12]
      break;
 8006c92:	bf00      	nop
  }

  return ret;
 8006c94:	68fb      	ldr	r3, [r7, #12]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop

08006ca0 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	dd0b      	ble.n	8006cc8 <LSM6DSO_ACC_SetFullScale+0x28>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	dd06      	ble.n	8006cc4 <LSM6DSO_ACC_SetFullScale+0x24>
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	dc01      	bgt.n	8006cc0 <LSM6DSO_ACC_SetFullScale+0x20>
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e004      	b.n	8006cca <LSM6DSO_ACC_SetFullScale+0x2a>
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e002      	b.n	8006cca <LSM6DSO_ACC_SetFullScale+0x2a>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e000      	b.n	8006cca <LSM6DSO_ACC_SetFullScale+0x2a>
 8006cc8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006cca:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3320      	adds	r3, #32
 8006cd0:	7bfa      	ldrb	r2, [r7, #15]
 8006cd2:	4611      	mov	r1, r2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fdf7 	bl	80078c8 <lsm6dso_xl_full_scale_set>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce4:	e000      	b.n	8006ce8 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3320      	adds	r3, #32
 8006cfe:	f107 0208 	add.w	r2, r7, #8
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f001 f9d8 	bl	80080ba <lsm6dso_acceleration_raw_get>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006d10:	f04f 33ff 	mov.w	r3, #4294967295
 8006d14:	e00c      	b.n	8006d30 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006d16:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006d1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006d26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3320      	adds	r3, #32
 8006d4c:	f107 0210 	add.w	r2, r7, #16
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 f9b1 	bl	80080ba <lsm6dso_acceleration_raw_get>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8006d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d62:	e03c      	b.n	8006dde <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006d64:	f107 030c 	add.w	r3, r7, #12
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fce0 	bl	8006730 <LSM6DSO_ACC_GetSensitivity>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006d76:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7a:	e030      	b.n	8006dde <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006d7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d80:	ee07 3a90 	vmov	s15, r3
 8006d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d94:	ee17 2a90 	vmov	r2, s15
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db4:	ee17 2a90 	vmov	r2, s15
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006dbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006dc0:	ee07 3a90 	vmov	s15, r3
 8006dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dd4:	ee17 2a90 	vmov	r2, s15
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e014      	b.n	8006e26 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f103 0220 	add.w	r2, r3, #32
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e08:	4619      	mov	r1, r3
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	f000 ff86 	bl	8007d1c <lsm6dso_gy_data_rate_set>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	e004      	b.n	8006e26 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b082      	sub	sp, #8
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d101      	bne.n	8006e44 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e01f      	b.n	8006e84 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f103 0220 	add.w	r2, r3, #32
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3334      	adds	r3, #52	; 0x34
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f001 f85f 	bl	8007f14 <lsm6dso_gy_data_rate_get>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8006e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e60:	e010      	b.n	8006e84 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3320      	adds	r3, #32
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 ff57 	bl	8007d1c <lsm6dso_gy_data_rate_set>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006e74:	f04f 33ff 	mov.w	r3, #4294967295
 8006e78:	e004      	b.n	8006e84 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3320      	adds	r3, #32
 8006e9e:	f107 020b 	add.w	r2, r7, #11
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f000 fef7 	bl	8007c98 <lsm6dso_gy_full_scale_get>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb4:	e02d      	b.n	8006f12 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	d825      	bhi.n	8006f08 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006ee9 	.word	0x08006ee9
 8006ec8:	08006ee1 	.word	0x08006ee1
 8006ecc:	08006ef1 	.word	0x08006ef1
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006ef9 	.word	0x08006ef9
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f01 	.word	0x08006f01
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4a0e      	ldr	r2, [pc, #56]	; (8006f1c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006ee4:	601a      	str	r2, [r3, #0]
      break;
 8006ee6:	e013      	b.n	8006f10 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	4a0d      	ldr	r2, [pc, #52]	; (8006f20 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006eec:	601a      	str	r2, [r3, #0]
      break;
 8006eee:	e00f      	b.n	8006f10 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006ef4:	601a      	str	r2, [r3, #0]
      break;
 8006ef6:	e00b      	b.n	8006f10 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006efc:	601a      	str	r2, [r3, #0]
      break;
 8006efe:	e007      	b.n	8006f10 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006f04:	601a      	str	r2, [r3, #0]
      break;
 8006f06:	e003      	b.n	8006f10 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	60fb      	str	r3, [r7, #12]
      break;
 8006f0e:	bf00      	nop
  }

  return ret;
 8006f10:	68fb      	ldr	r3, [r7, #12]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	408c0000 	.word	0x408c0000
 8006f20:	410c0000 	.word	0x410c0000
 8006f24:	418c0000 	.word	0x418c0000
 8006f28:	420c0000 	.word	0x420c0000
 8006f2c:	428c0000 	.word	0x428c0000

08006f30 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3320      	adds	r3, #32
 8006f42:	f107 020b 	add.w	r2, r7, #11
 8006f46:	4611      	mov	r1, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 ffe3 	bl	8007f14 <lsm6dso_gy_data_rate_get>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006f54:	f04f 33ff 	mov.w	r3, #4294967295
 8006f58:	e04e      	b.n	8006ff8 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006f5a:	7afb      	ldrb	r3, [r7, #11]
 8006f5c:	2b0a      	cmp	r3, #10
 8006f5e:	d846      	bhi.n	8006fee <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8006f60:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8006f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f66:	bf00      	nop
 8006f68:	08006f95 	.word	0x08006f95
 8006f6c:	08006f9f 	.word	0x08006f9f
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006faf 	.word	0x08006faf
 8006f78:	08006fb7 	.word	0x08006fb7
 8006f7c:	08006fbf 	.word	0x08006fbf
 8006f80:	08006fc7 	.word	0x08006fc7
 8006f84:	08006fcf 	.word	0x08006fcf
 8006f88:	08006fd7 	.word	0x08006fd7
 8006f8c:	08006fdf 	.word	0x08006fdf
 8006f90:	08006fe7 	.word	0x08006fe7
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
      break;
 8006f9c:	e02b      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	4a17      	ldr	r2, [pc, #92]	; (8007000 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006fa2:	601a      	str	r2, [r3, #0]
      break;
 8006fa4:	e027      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	4a16      	ldr	r2, [pc, #88]	; (8007004 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8006faa:	601a      	str	r2, [r3, #0]
      break;
 8006fac:	e023      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	4a15      	ldr	r2, [pc, #84]	; (8007008 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006fb2:	601a      	str	r2, [r3, #0]
      break;
 8006fb4:	e01f      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	4a14      	ldr	r2, [pc, #80]	; (800700c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006fba:	601a      	str	r2, [r3, #0]
      break;
 8006fbc:	e01b      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	; (8007010 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006fc2:	601a      	str	r2, [r3, #0]
      break;
 8006fc4:	e017      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	4a12      	ldr	r2, [pc, #72]	; (8007014 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006fca:	601a      	str	r2, [r3, #0]
      break;
 8006fcc:	e013      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	4a11      	ldr	r2, [pc, #68]	; (8007018 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006fd2:	601a      	str	r2, [r3, #0]
      break;
 8006fd4:	e00f      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	4a10      	ldr	r2, [pc, #64]	; (800701c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006fda:	601a      	str	r2, [r3, #0]
      break;
 8006fdc:	e00b      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	4a0f      	ldr	r2, [pc, #60]	; (8007020 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8006fe2:	601a      	str	r2, [r3, #0]
      break;
 8006fe4:	e007      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	4a0e      	ldr	r2, [pc, #56]	; (8007024 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006fea:	601a      	str	r2, [r3, #0]
      break;
 8006fec:	e003      	b.n	8006ff6 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	60fb      	str	r3, [r7, #12]
      break;
 8006ff4:	bf00      	nop
  }

  return ret;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	41480000 	.word	0x41480000
 8007004:	41d00000 	.word	0x41d00000
 8007008:	42500000 	.word	0x42500000
 800700c:	42d00000 	.word	0x42d00000
 8007010:	43500000 	.word	0x43500000
 8007014:	43d08000 	.word	0x43d08000
 8007018:	44504000 	.word	0x44504000
 800701c:	44d06000 	.word	0x44d06000
 8007020:	45505000 	.word	0x45505000
 8007024:	45d05800 	.word	0x45d05800

08007028 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8007034:	2100      	movs	r1, #0
 8007036:	ed97 0a00 	vldr	s0, [r7]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f806 	bl	800704c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	ed87 0a02 	vstr	s0, [r7, #8]
 8007058:	460b      	mov	r3, r1
 800705a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 800706a:	2b01      	cmp	r3, #1
 800706c:	d028      	beq.n	80070c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 800706e:	e05c      	b.n	800712a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f103 0020 	add.w	r0, r3, #32
 8007076:	f107 0214 	add.w	r2, r7, #20
 800707a:	2301      	movs	r3, #1
 800707c:	2116      	movs	r1, #22
 800707e:	f000 fbf3 	bl	8007868 <lsm6dso_read_reg>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8007088:	f04f 33ff 	mov.w	r3, #4294967295
 800708c:	e06c      	b.n	8007168 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800708e:	7d3b      	ldrb	r3, [r7, #20]
 8007090:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d04b      	beq.n	8007132 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800709a:	7d3b      	ldrb	r3, [r7, #20]
 800709c:	f36f 13c7 	bfc	r3, #7, #1
 80070a0:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f103 0020 	add.w	r0, r3, #32
 80070a8:	f107 0214 	add.w	r2, r7, #20
 80070ac:	2301      	movs	r3, #1
 80070ae:	2116      	movs	r1, #22
 80070b0:	f000 fbf2 	bl	8007898 <lsm6dso_write_reg>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d03b      	beq.n	8007132 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 80070ba:	f04f 33ff 	mov.w	r3, #4294967295
 80070be:	e053      	b.n	8007168 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f103 0020 	add.w	r0, r3, #32
 80070c6:	f107 0210 	add.w	r2, r7, #16
 80070ca:	2301      	movs	r3, #1
 80070cc:	2116      	movs	r1, #22
 80070ce:	f000 fbcb 	bl	8007868 <lsm6dso_read_reg>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80070d8:	f04f 33ff 	mov.w	r3, #4294967295
 80070dc:	e044      	b.n	8007168 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80070de:	7c3b      	ldrb	r3, [r7, #16]
 80070e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d112      	bne.n	8007110 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80070ea:	7c3b      	ldrb	r3, [r7, #16]
 80070ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f103 0020 	add.w	r0, r3, #32
 80070f8:	f107 0210 	add.w	r2, r7, #16
 80070fc:	2301      	movs	r3, #1
 80070fe:	2116      	movs	r1, #22
 8007100:	f000 fbca 	bl	8007898 <lsm6dso_write_reg>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800710a:	f04f 33ff 	mov.w	r3, #4294967295
 800710e:	e02b      	b.n	8007168 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8007110:	edd7 7a06 	vldr	s15, [r7, #24]
 8007114:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8007170 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8007118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	dc00      	bgt.n	8007124 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8007122:	e007      	b.n	8007134 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8007124:	4b13      	ldr	r3, [pc, #76]	; (8007174 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	e004      	b.n	8007134 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 800712a:	f04f 33ff 	mov.w	r3, #4294967295
 800712e:	61fb      	str	r3, [r7, #28]
      break;
 8007130:	e000      	b.n	8007134 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8007132:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d102      	bne.n	8007142 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 800713c:	f04f 33ff 	mov.w	r3, #4294967295
 8007140:	e012      	b.n	8007168 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007148:	2b01      	cmp	r3, #1
 800714a:	d106      	bne.n	800715a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800714c:	ed97 0a06 	vldr	s0, [r7, #24]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa45 	bl	80075e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8007156:	61f8      	str	r0, [r7, #28]
 8007158:	e005      	b.n	8007166 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800715a:	ed97 0a06 	vldr	s0, [r7, #24]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 faca 	bl	80076f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8007164:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8007166:	69fb      	ldr	r3, [r7, #28]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3720      	adds	r7, #32
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	43500000 	.word	0x43500000
 8007174:	43500000 	.word	0x43500000

08007178 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3320      	adds	r3, #32
 800718a:	f107 020b 	add.w	r2, r7, #11
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fd81 	bl	8007c98 <lsm6dso_gy_full_scale_get>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	e030      	b.n	8007204 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b06      	cmp	r3, #6
 80071a6:	d828      	bhi.n	80071fa <LSM6DSO_GYRO_GetFullScale+0x82>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071d5 	.word	0x080071d5
 80071b4:	080071cd 	.word	0x080071cd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071fb 	.word	0x080071fb
 80071c0:	080071e7 	.word	0x080071e7
 80071c4:	080071fb 	.word	0x080071fb
 80071c8:	080071f1 	.word	0x080071f1
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	227d      	movs	r2, #125	; 0x7d
 80071d0:	601a      	str	r2, [r3, #0]
      break;
 80071d2:	e016      	b.n	8007202 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	22fa      	movs	r2, #250	; 0xfa
 80071d8:	601a      	str	r2, [r3, #0]
      break;
 80071da:	e012      	b.n	8007202 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80071e2:	601a      	str	r2, [r3, #0]
      break;
 80071e4:	e00d      	b.n	8007202 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071ec:	601a      	str	r2, [r3, #0]
      break;
 80071ee:	e008      	b.n	8007202 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80071f6:	601a      	str	r2, [r3, #0]
      break;
 80071f8:	e003      	b.n	8007202 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 80071fa:	f04f 33ff 	mov.w	r3, #4294967295
 80071fe:	60fb      	str	r3, [r7, #12]
      break;
 8007200:	bf00      	nop
  }

  return ret;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b7d      	cmp	r3, #125	; 0x7d
 800721a:	dd12      	ble.n	8007242 <LSM6DSO_GYRO_SetFullScale+0x36>
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2bfa      	cmp	r3, #250	; 0xfa
 8007220:	dd0d      	ble.n	800723e <LSM6DSO_GYRO_SetFullScale+0x32>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007228:	dd07      	ble.n	800723a <LSM6DSO_GYRO_SetFullScale+0x2e>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007230:	dc01      	bgt.n	8007236 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8007232:	2304      	movs	r3, #4
 8007234:	e006      	b.n	8007244 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007236:	2306      	movs	r3, #6
 8007238:	e004      	b.n	8007244 <LSM6DSO_GYRO_SetFullScale+0x38>
 800723a:	2302      	movs	r3, #2
 800723c:	e002      	b.n	8007244 <LSM6DSO_GYRO_SetFullScale+0x38>
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <LSM6DSO_GYRO_SetFullScale+0x38>
 8007242:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8007244:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3320      	adds	r3, #32
 800724a:	7bfa      	ldrb	r2, [r7, #15]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fcfc 	bl	8007c4c <lsm6dso_gy_full_scale_set>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	e000      	b.n	8007262 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3320      	adds	r3, #32
 8007278:	f107 0208 	add.w	r2, r7, #8
 800727c:	4611      	mov	r1, r2
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fed0 	bl	8008024 <lsm6dso_angular_rate_raw_get>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800728a:	f04f 33ff 	mov.w	r3, #4294967295
 800728e:	e00c      	b.n	80072aa <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8007290:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007298:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80072a0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3320      	adds	r3, #32
 80072c0:	f107 0210 	add.w	r2, r7, #16
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 feac 	bl	8008024 <lsm6dso_angular_rate_raw_get>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	e03c      	b.n	8007352 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80072d8:	f107 030c 	add.w	r3, r7, #12
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fdd4 	bl	8006e8c <LSM6DSO_GYRO_GetSensitivity>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d002      	beq.n	80072f0 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 80072ea:	f04f 33ff 	mov.w	r3, #4294967295
 80072ee:	e030      	b.n	8007352 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80072f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8007300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8007310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007314:	ee07 3a90 	vmov	s15, r3
 8007318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800731c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007328:	ee17 2a90 	vmov	r2, s15
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8007330:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800733c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007348:	ee17 2a90 	vmov	r2, s15
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
 8007366:	4613      	mov	r3, r2
 8007368:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f103 0020 	add.w	r0, r3, #32
 8007370:	1cba      	adds	r2, r7, #2
 8007372:	78f9      	ldrb	r1, [r7, #3]
 8007374:	2301      	movs	r3, #1
 8007376:	f000 fa8f 	bl	8007898 <lsm6dso_write_reg>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8007380:	f04f 33ff 	mov.w	r3, #4294967295
 8007384:	e000      	b.n	8007388 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800739c:	edd7 7a00 	vldr	s15, [r7]
 80073a0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80074a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 80073a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	d801      	bhi.n	80073b2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 80073ae:	230b      	movs	r3, #11
 80073b0:	e063      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80073b2:	edd7 7a00 	vldr	s15, [r7]
 80073b6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80073ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	d801      	bhi.n	80073c8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e058      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80073c8:	edd7 7a00 	vldr	s15, [r7]
 80073cc:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80073d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d8:	d801      	bhi.n	80073de <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80073da:	2302      	movs	r3, #2
 80073dc:	e04d      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80073de:	edd7 7a00 	vldr	s15, [r7]
 80073e2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80074a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 80073e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ee:	d801      	bhi.n	80073f4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80073f0:	2303      	movs	r3, #3
 80073f2:	e042      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80073f4:	edd7 7a00 	vldr	s15, [r7]
 80073f8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80074a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80073fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007404:	d801      	bhi.n	800740a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8007406:	2304      	movs	r3, #4
 8007408:	e037      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800740a:	edd7 7a00 	vldr	s15, [r7]
 800740e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80074ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8007412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741a:	d801      	bhi.n	8007420 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 800741c:	2305      	movs	r3, #5
 800741e:	e02c      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007420:	edd7 7a00 	vldr	s15, [r7]
 8007424:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80074b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8007428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	d801      	bhi.n	8007436 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8007432:	2306      	movs	r3, #6
 8007434:	e021      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007436:	edd7 7a00 	vldr	s15, [r7]
 800743a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80074b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 800743e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007446:	d801      	bhi.n	800744c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8007448:	2307      	movs	r3, #7
 800744a:	e016      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800744c:	edd7 7a00 	vldr	s15, [r7]
 8007450:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80074b8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8007454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800745c:	d801      	bhi.n	8007462 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800745e:	2308      	movs	r3, #8
 8007460:	e00b      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007462:	edd7 7a00 	vldr	s15, [r7]
 8007466:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80074bc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800746a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800746e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007472:	d801      	bhi.n	8007478 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007474:	2309      	movs	r3, #9
 8007476:	e000      	b.n	800747a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007478:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800747a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3320      	adds	r3, #32
 8007480:	7bfa      	ldrb	r2, [r7, #15]
 8007482:	4611      	mov	r1, r2
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fa7d 	bl	8007984 <lsm6dso_xl_data_rate_set>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8007490:	f04f 33ff 	mov.w	r3, #4294967295
 8007494:	e000      	b.n	8007498 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	3fcccccd 	.word	0x3fcccccd
 80074a4:	42500000 	.word	0x42500000
 80074a8:	42d00000 	.word	0x42d00000
 80074ac:	43500000 	.word	0x43500000
 80074b0:	43d08000 	.word	0x43d08000
 80074b4:	44504000 	.word	0x44504000
 80074b8:	44d06000 	.word	0x44d06000
 80074bc:	45505000 	.word	0x45505000

080074c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80074cc:	edd7 7a00 	vldr	s15, [r7]
 80074d0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80075c0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 80074d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074dc:	d801      	bhi.n	80074e2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 80074de:	230b      	movs	r3, #11
 80074e0:	e063      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80074e2:	edd7 7a00 	vldr	s15, [r7]
 80074e6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80074ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f2:	d801      	bhi.n	80074f8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e058      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80074f8:	edd7 7a00 	vldr	s15, [r7]
 80074fc:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007508:	d801      	bhi.n	800750e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800750a:	2302      	movs	r3, #2
 800750c:	e04d      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800750e:	edd7 7a00 	vldr	s15, [r7]
 8007512:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80075c4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8007516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751e:	d801      	bhi.n	8007524 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007520:	2303      	movs	r3, #3
 8007522:	e042      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007524:	edd7 7a00 	vldr	s15, [r7]
 8007528:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80075c8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 800752c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007534:	d801      	bhi.n	800753a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007536:	2304      	movs	r3, #4
 8007538:	e037      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800753a:	edd7 7a00 	vldr	s15, [r7]
 800753e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80075cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8007542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	d801      	bhi.n	8007550 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 800754c:	2305      	movs	r3, #5
 800754e:	e02c      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007550:	edd7 7a00 	vldr	s15, [r7]
 8007554:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80075d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8007558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	d801      	bhi.n	8007566 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007562:	2306      	movs	r3, #6
 8007564:	e021      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007566:	edd7 7a00 	vldr	s15, [r7]
 800756a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80075d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800756e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007576:	d801      	bhi.n	800757c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007578:	2307      	movs	r3, #7
 800757a:	e016      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800757c:	edd7 7a00 	vldr	s15, [r7]
 8007580:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80075d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758c:	d801      	bhi.n	8007592 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800758e:	2308      	movs	r3, #8
 8007590:	e00b      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007592:	edd7 7a00 	vldr	s15, [r7]
 8007596:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80075dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800759a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a2:	d801      	bhi.n	80075a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80075a4:	2309      	movs	r3, #9
 80075a6:	e000      	b.n	80075aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80075a8:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	3fcccccd 	.word	0x3fcccccd
 80075c4:	42500000 	.word	0x42500000
 80075c8:	42d00000 	.word	0x42d00000
 80075cc:	43500000 	.word	0x43500000
 80075d0:	43d08000 	.word	0x43d08000
 80075d4:	44504000 	.word	0x44504000
 80075d8:	44d06000 	.word	0x44d06000
 80075dc:	45505000 	.word	0x45505000

080075e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80075ec:	edd7 7a00 	vldr	s15, [r7]
 80075f0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80075f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fc:	d801      	bhi.n	8007602 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80075fe:	2301      	movs	r3, #1
 8007600:	e058      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007602:	edd7 7a00 	vldr	s15, [r7]
 8007606:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800760a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	d801      	bhi.n	8007618 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007614:	2302      	movs	r3, #2
 8007616:	e04d      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007618:	edd7 7a00 	vldr	s15, [r7]
 800761c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80076dc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8007620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007628:	d801      	bhi.n	800762e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800762a:	2303      	movs	r3, #3
 800762c:	e042      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800762e:	edd7 7a00 	vldr	s15, [r7]
 8007632:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80076e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	d801      	bhi.n	8007644 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8007640:	2304      	movs	r3, #4
 8007642:	e037      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007644:	edd7 7a00 	vldr	s15, [r7]
 8007648:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80076e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800764c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007654:	d801      	bhi.n	800765a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8007656:	2305      	movs	r3, #5
 8007658:	e02c      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800765a:	edd7 7a00 	vldr	s15, [r7]
 800765e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80076e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766a:	d801      	bhi.n	8007670 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800766c:	2306      	movs	r3, #6
 800766e:	e021      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007670:	edd7 7a00 	vldr	s15, [r7]
 8007674:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80076ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	d801      	bhi.n	8007686 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007682:	2307      	movs	r3, #7
 8007684:	e016      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007686:	edd7 7a00 	vldr	s15, [r7]
 800768a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80076f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800768e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007696:	d801      	bhi.n	800769c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007698:	2308      	movs	r3, #8
 800769a:	e00b      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800769c:	edd7 7a00 	vldr	s15, [r7]
 80076a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80076f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80076a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	d801      	bhi.n	80076b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80076ae:	2309      	movs	r3, #9
 80076b0:	e000      	b.n	80076b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80076b2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80076b4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	3320      	adds	r3, #32
 80076ba:	7bfa      	ldrb	r2, [r7, #15]
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fb2c 	bl	8007d1c <lsm6dso_gy_data_rate_set>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 80076ca:	f04f 33ff 	mov.w	r3, #4294967295
 80076ce:	e000      	b.n	80076d2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	42500000 	.word	0x42500000
 80076e0:	42d00000 	.word	0x42d00000
 80076e4:	43500000 	.word	0x43500000
 80076e8:	43d08000 	.word	0x43d08000
 80076ec:	44504000 	.word	0x44504000
 80076f0:	44d06000 	.word	0x44d06000
 80076f4:	45505000 	.word	0x45505000

080076f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007704:	edd7 7a00 	vldr	s15, [r7]
 8007708:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800770c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007714:	d801      	bhi.n	800771a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007716:	2301      	movs	r3, #1
 8007718:	e058      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800771a:	edd7 7a00 	vldr	s15, [r7]
 800771e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8007722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772a:	d801      	bhi.n	8007730 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800772c:	2302      	movs	r3, #2
 800772e:	e04d      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007730:	edd7 7a00 	vldr	s15, [r7]
 8007734:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80077e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800773c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007740:	d801      	bhi.n	8007746 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8007742:	2303      	movs	r3, #3
 8007744:	e042      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007746:	edd7 7a00 	vldr	s15, [r7]
 800774a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80077e4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800774e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007756:	d801      	bhi.n	800775c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007758:	2304      	movs	r3, #4
 800775a:	e037      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800775c:	edd7 7a00 	vldr	s15, [r7]
 8007760:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80077e8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800776c:	d801      	bhi.n	8007772 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800776e:	2305      	movs	r3, #5
 8007770:	e02c      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007772:	edd7 7a00 	vldr	s15, [r7]
 8007776:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80077ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800777a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	d801      	bhi.n	8007788 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007784:	2306      	movs	r3, #6
 8007786:	e021      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007788:	edd7 7a00 	vldr	s15, [r7]
 800778c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80077f0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007798:	d801      	bhi.n	800779e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800779a:	2307      	movs	r3, #7
 800779c:	e016      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800779e:	edd7 7a00 	vldr	s15, [r7]
 80077a2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80077f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80077a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	d801      	bhi.n	80077b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80077b0:	2308      	movs	r3, #8
 80077b2:	e00b      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077b4:	edd7 7a00 	vldr	s15, [r7]
 80077b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80077f8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80077bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c4:	d801      	bhi.n	80077ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80077c6:	2309      	movs	r3, #9
 80077c8:	e000      	b.n	80077cc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077ca:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	42500000 	.word	0x42500000
 80077e4:	42d00000 	.word	0x42d00000
 80077e8:	43500000 	.word	0x43500000
 80077ec:	43d08000 	.word	0x43d08000
 80077f0:	44504000 	.word	0x44504000
 80077f4:	44d06000 	.word	0x44d06000
 80077f8:	45505000 	.word	0x45505000

080077fc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	607a      	str	r2, [r7, #4]
 8007806:	461a      	mov	r2, r3
 8007808:	460b      	mov	r3, r1
 800780a:	72fb      	strb	r3, [r7, #11]
 800780c:	4613      	mov	r3, r2
 800780e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	695c      	ldr	r4, [r3, #20]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	7b1b      	ldrb	r3, [r3, #12]
 800781c:	b298      	uxth	r0, r3
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	b299      	uxth	r1, r3
 8007822:	893b      	ldrh	r3, [r7, #8]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	47a0      	blx	r4
 8007828:	4603      	mov	r3, r0
}
 800782a:	4618      	mov	r0, r3
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	bd90      	pop	{r4, r7, pc}

08007832 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007832:	b590      	push	{r4, r7, lr}
 8007834:	b087      	sub	sp, #28
 8007836:	af00      	add	r7, sp, #0
 8007838:	60f8      	str	r0, [r7, #12]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	461a      	mov	r2, r3
 800783e:	460b      	mov	r3, r1
 8007840:	72fb      	strb	r3, [r7, #11]
 8007842:	4613      	mov	r3, r2
 8007844:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	691c      	ldr	r4, [r3, #16]
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	7b1b      	ldrb	r3, [r3, #12]
 8007852:	b298      	uxth	r0, r3
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	b299      	uxth	r1, r3
 8007858:	893b      	ldrh	r3, [r7, #8]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	47a0      	blx	r4
 800785e:	4603      	mov	r3, r0
}
 8007860:	4618      	mov	r0, r3
 8007862:	371c      	adds	r7, #28
 8007864:	46bd      	mov	sp, r7
 8007866:	bd90      	pop	{r4, r7, pc}

08007868 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	461a      	mov	r2, r3
 8007874:	460b      	mov	r3, r1
 8007876:	72fb      	strb	r3, [r7, #11]
 8007878:	4613      	mov	r3, r2
 800787a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	685c      	ldr	r4, [r3, #4]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68d8      	ldr	r0, [r3, #12]
 8007884:	893b      	ldrh	r3, [r7, #8]
 8007886:	7af9      	ldrb	r1, [r7, #11]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	47a0      	blx	r4
 800788c:	6178      	str	r0, [r7, #20]

  return ret;
 800788e:	697b      	ldr	r3, [r7, #20]
}
 8007890:	4618      	mov	r0, r3
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	bd90      	pop	{r4, r7, pc}

08007898 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	461a      	mov	r2, r3
 80078a4:	460b      	mov	r3, r1
 80078a6:	72fb      	strb	r3, [r7, #11]
 80078a8:	4613      	mov	r3, r2
 80078aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681c      	ldr	r4, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	68d8      	ldr	r0, [r3, #12]
 80078b4:	893b      	ldrh	r3, [r7, #8]
 80078b6:	7af9      	ldrb	r1, [r7, #11]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	47a0      	blx	r4
 80078bc:	6178      	str	r0, [r7, #20]

  return ret;
 80078be:	697b      	ldr	r3, [r7, #20]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd90      	pop	{r4, r7, pc}

080078c8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80078d4:	f107 0208 	add.w	r2, r7, #8
 80078d8:	2301      	movs	r3, #1
 80078da:	2110      	movs	r1, #16
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7ff ffc3 	bl	8007868 <lsm6dso_read_reg>
 80078e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10f      	bne.n	800790a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	f003 0303 	and.w	r3, r3, #3
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	7a3b      	ldrb	r3, [r7, #8]
 80078f4:	f362 0383 	bfi	r3, r2, #2, #2
 80078f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80078fa:	f107 0208 	add.w	r2, r7, #8
 80078fe:	2301      	movs	r3, #1
 8007900:	2110      	movs	r1, #16
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff ffc8 	bl	8007898 <lsm6dso_write_reg>
 8007908:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800791e:	f107 0208 	add.w	r2, r7, #8
 8007922:	2301      	movs	r3, #1
 8007924:	2110      	movs	r1, #16
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff ff9e 	bl	8007868 <lsm6dso_read_reg>
 800792c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800792e:	7a3b      	ldrb	r3, [r7, #8]
 8007930:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b03      	cmp	r3, #3
 8007938:	d81a      	bhi.n	8007970 <lsm6dso_xl_full_scale_get+0x5c>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <lsm6dso_xl_full_scale_get+0x2c>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007951 	.word	0x08007951
 8007944:	08007959 	.word	0x08007959
 8007948:	08007961 	.word	0x08007961
 800794c:	08007969 	.word	0x08007969
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
      break;
 8007956:	e00f      	b.n	8007978 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2201      	movs	r2, #1
 800795c:	701a      	strb	r2, [r3, #0]
      break;
 800795e:	e00b      	b.n	8007978 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2202      	movs	r2, #2
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e007      	b.n	8007978 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2203      	movs	r2, #3
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e003      	b.n	8007978 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	bf00      	nop
  }

  return ret;
 8007978:	68fb      	ldr	r3, [r7, #12]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop

08007984 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fca1 	bl	80082e2 <lsm6dso_fsm_enable_get>
 80079a0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 80c4 	bne.w	8007b32 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80079aa:	7b3b      	ldrb	r3, [r7, #12]
 80079ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80079b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80079b2:	7b3b      	ldrb	r3, [r7, #12]
 80079b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80079b8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80079ba:	4313      	orrs	r3, r2
 80079bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80079be:	7b3b      	ldrb	r3, [r7, #12]
 80079c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80079c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80079ca:	7b3b      	ldrb	r3, [r7, #12]
 80079cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80079d6:	7b3b      	ldrb	r3, [r7, #12]
 80079d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80079dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80079de:	4313      	orrs	r3, r2
 80079e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80079e2:	7b3b      	ldrb	r3, [r7, #12]
 80079e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80079e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80079ea:	4313      	orrs	r3, r2
 80079ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80079ee:	7b3b      	ldrb	r3, [r7, #12]
 80079f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80079f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80079f6:	4313      	orrs	r3, r2
 80079f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80079fa:	7b3b      	ldrb	r3, [r7, #12]
 80079fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007a02:	4313      	orrs	r3, r2
 8007a04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007a0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007a12:	7b7b      	ldrb	r3, [r7, #13]
 8007a14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007a18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007a1e:	7b7b      	ldrb	r3, [r7, #13]
 8007a20:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007a24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007a26:	4313      	orrs	r3, r2
 8007a28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007a2a:	7b7b      	ldrb	r3, [r7, #13]
 8007a2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007a30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007a32:	4313      	orrs	r3, r2
 8007a34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007a36:	7b7b      	ldrb	r3, [r7, #13]
 8007a38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007a3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007a42:	7b7b      	ldrb	r3, [r7, #13]
 8007a44:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007a48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007a4e:	7b7b      	ldrb	r3, [r7, #13]
 8007a50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007a54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007a56:	4313      	orrs	r3, r2
 8007a58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007a5a:	7b7b      	ldrb	r3, [r7, #13]
 8007a5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007a62:	4313      	orrs	r3, r2
 8007a64:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d163      	bne.n	8007b32 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007a6a:	f107 030b 	add.w	r3, r7, #11
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fc57 	bl	8008324 <lsm6dso_fsm_data_rate_get>
 8007a76:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d159      	bne.n	8007b32 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d853      	bhi.n	8007b2c <lsm6dso_xl_data_rate_set+0x1a8>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <lsm6dso_xl_data_rate_set+0x108>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aaf 	.word	0x08007aaf
 8007a94:	08007acd 	.word	0x08007acd
 8007a98:	08007af7 	.word	0x08007af7
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d102      	bne.n	8007aa8 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007aa6:	e045      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8007aac:	e042      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007ab8:	e03c      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d102      	bne.n	8007ac6 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ac4:	e036      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	75fb      	strb	r3, [r7, #23]
            break;
 8007aca:	e033      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d102      	bne.n	8007ad8 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007ad6:	e02d      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d102      	bne.n	8007ae4 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	75fb      	strb	r3, [r7, #23]
            break;
 8007ae2:	e027      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007ae4:	78fb      	ldrb	r3, [r7, #3]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d102      	bne.n	8007af0 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007aea:	2303      	movs	r3, #3
 8007aec:	75fb      	strb	r3, [r7, #23]
            break;
 8007aee:	e021      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	75fb      	strb	r3, [r7, #23]
            break;
 8007af4:	e01e      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007afc:	2304      	movs	r3, #4
 8007afe:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8007b00:	e018      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d102      	bne.n	8007b0e <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007b08:	2304      	movs	r3, #4
 8007b0a:	75fb      	strb	r3, [r7, #23]
            break;
 8007b0c:	e012      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d102      	bne.n	8007b1a <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007b14:	2304      	movs	r3, #4
 8007b16:	75fb      	strb	r3, [r7, #23]
            break;
 8007b18:	e00c      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d102      	bne.n	8007b26 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007b20:	2304      	movs	r3, #4
 8007b22:	75fb      	strb	r3, [r7, #23]
            break;
 8007b24:	e006      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	75fb      	strb	r3, [r7, #23]
            break;
 8007b2a:	e003      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b30:	e000      	b.n	8007b34 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8007b32:	bf00      	nop
    }
  }

  if (ret == 0)
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d107      	bne.n	8007b4a <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007b3a:	f107 0208 	add.w	r2, r7, #8
 8007b3e:	2301      	movs	r3, #1
 8007b40:	2110      	movs	r1, #16
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fe90 	bl	8007868 <lsm6dso_read_reg>
 8007b48:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10f      	bne.n	8007b70 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	7a3b      	ldrb	r3, [r7, #8]
 8007b5a:	f362 1307 	bfi	r3, r2, #4, #4
 8007b5e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007b60:	f107 0208 	add.w	r2, r7, #8
 8007b64:	2301      	movs	r3, #1
 8007b66:	2110      	movs	r1, #16
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fe95 	bl	8007898 <lsm6dso_write_reg>
 8007b6e:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007b70:	693b      	ldr	r3, [r7, #16]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	2110      	movs	r1, #16
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fe6a 	bl	8007868 <lsm6dso_read_reg>
 8007b94:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007b96:	7a3b      	ldrb	r3, [r7, #8]
 8007b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b0b      	cmp	r3, #11
 8007ba0:	d84a      	bhi.n	8007c38 <lsm6dso_xl_data_rate_get+0xbc>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <lsm6dso_xl_data_rate_get+0x2c>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007be1 	.word	0x08007be1
 8007bb0:	08007be9 	.word	0x08007be9
 8007bb4:	08007bf1 	.word	0x08007bf1
 8007bb8:	08007bf9 	.word	0x08007bf9
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	08007c09 	.word	0x08007c09
 8007bc4:	08007c11 	.word	0x08007c11
 8007bc8:	08007c19 	.word	0x08007c19
 8007bcc:	08007c21 	.word	0x08007c21
 8007bd0:	08007c29 	.word	0x08007c29
 8007bd4:	08007c31 	.word	0x08007c31
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
      break;
 8007bde:	e02f      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2201      	movs	r2, #1
 8007be4:	701a      	strb	r2, [r3, #0]
      break;
 8007be6:	e02b      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2202      	movs	r2, #2
 8007bec:	701a      	strb	r2, [r3, #0]
      break;
 8007bee:	e027      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	701a      	strb	r2, [r3, #0]
      break;
 8007bf6:	e023      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	701a      	strb	r2, [r3, #0]
      break;
 8007bfe:	e01f      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2205      	movs	r2, #5
 8007c04:	701a      	strb	r2, [r3, #0]
      break;
 8007c06:	e01b      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2206      	movs	r2, #6
 8007c0c:	701a      	strb	r2, [r3, #0]
      break;
 8007c0e:	e017      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2207      	movs	r2, #7
 8007c14:	701a      	strb	r2, [r3, #0]
      break;
 8007c16:	e013      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2208      	movs	r2, #8
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e00f      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2209      	movs	r2, #9
 8007c24:	701a      	strb	r2, [r3, #0]
      break;
 8007c26:	e00b      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	220a      	movs	r2, #10
 8007c2c:	701a      	strb	r2, [r3, #0]
      break;
 8007c2e:	e007      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	220b      	movs	r2, #11
 8007c34:	701a      	strb	r2, [r3, #0]
      break;
 8007c36:	e003      	b.n	8007c40 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
      break;
 8007c3e:	bf00      	nop
  }

  return ret;
 8007c40:	68fb      	ldr	r3, [r7, #12]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop

08007c4c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007c58:	f107 0208 	add.w	r2, r7, #8
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	2111      	movs	r1, #17
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fe01 	bl	8007868 <lsm6dso_read_reg>
 8007c66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10f      	bne.n	8007c8e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	7a3b      	ldrb	r3, [r7, #8]
 8007c78:	f362 0343 	bfi	r3, r2, #1, #3
 8007c7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007c7e:	f107 0208 	add.w	r2, r7, #8
 8007c82:	2301      	movs	r3, #1
 8007c84:	2111      	movs	r1, #17
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff fe06 	bl	8007898 <lsm6dso_write_reg>
 8007c8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007ca2:	f107 0208 	add.w	r2, r7, #8
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	2111      	movs	r1, #17
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fddc 	bl	8007868 <lsm6dso_read_reg>
 8007cb0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8007cb2:	7a3b      	ldrb	r3, [r7, #8]
 8007cb4:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b06      	cmp	r3, #6
 8007cbc:	d824      	bhi.n	8007d08 <lsm6dso_gy_full_scale_get+0x70>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <lsm6dso_gy_full_scale_get+0x2c>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007ce1 	.word	0x08007ce1
 8007cc8:	08007ce9 	.word	0x08007ce9
 8007ccc:	08007cf1 	.word	0x08007cf1
 8007cd0:	08007d09 	.word	0x08007d09
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007d01 	.word	0x08007d01
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
      break;
 8007ce6:	e013      	b.n	8007d10 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]
      break;
 8007cee:	e00f      	b.n	8007d10 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	701a      	strb	r2, [r3, #0]
      break;
 8007cf6:	e00b      	b.n	8007d10 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	701a      	strb	r2, [r3, #0]
      break;
 8007cfe:	e007      	b.n	8007d10 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2206      	movs	r2, #6
 8007d04:	701a      	strb	r2, [r3, #0]
      break;
 8007d06:	e003      	b.n	8007d10 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
      break;
 8007d0e:	bf00      	nop
  }

  return ret;
 8007d10:	68fb      	ldr	r3, [r7, #12]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop

08007d1c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007d2c:	f107 030c 	add.w	r3, r7, #12
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fad5 	bl	80082e2 <lsm6dso_fsm_enable_get>
 8007d38:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 80c4 	bne.w	8007eca <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007d42:	7b3b      	ldrb	r3, [r7, #12]
 8007d44:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007d4a:	7b3b      	ldrb	r3, [r7, #12]
 8007d4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d50:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007d52:	4313      	orrs	r3, r2
 8007d54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007d56:	7b3b      	ldrb	r3, [r7, #12]
 8007d58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d5c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007d62:	7b3b      	ldrb	r3, [r7, #12]
 8007d64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007d68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007d6e:	7b3b      	ldrb	r3, [r7, #12]
 8007d70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007d74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007d76:	4313      	orrs	r3, r2
 8007d78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007d7a:	7b3b      	ldrb	r3, [r7, #12]
 8007d7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007d80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007d82:	4313      	orrs	r3, r2
 8007d84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007d86:	7b3b      	ldrb	r3, [r7, #12]
 8007d88:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007d8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007d92:	7b3b      	ldrb	r3, [r7, #12]
 8007d94:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007d98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007d9e:	7b7b      	ldrb	r3, [r7, #13]
 8007da0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007da4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007da6:	4313      	orrs	r3, r2
 8007da8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007daa:	7b7b      	ldrb	r3, [r7, #13]
 8007dac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007db0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007db2:	4313      	orrs	r3, r2
 8007db4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007db6:	7b7b      	ldrb	r3, [r7, #13]
 8007db8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007dc2:	7b7b      	ldrb	r3, [r7, #13]
 8007dc4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007dc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007dce:	7b7b      	ldrb	r3, [r7, #13]
 8007dd0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007dd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007dda:	7b7b      	ldrb	r3, [r7, #13]
 8007ddc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007de0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007de2:	4313      	orrs	r3, r2
 8007de4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007de6:	7b7b      	ldrb	r3, [r7, #13]
 8007de8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007dec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007df2:	7b7b      	ldrb	r3, [r7, #13]
 8007df4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007df8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d163      	bne.n	8007eca <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007e02:	f107 030b 	add.w	r3, r7, #11
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa8b 	bl	8008324 <lsm6dso_fsm_data_rate_get>
 8007e0e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d159      	bne.n	8007eca <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d853      	bhi.n	8007ec4 <lsm6dso_gy_data_rate_set+0x1a8>
 8007e1c:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <lsm6dso_gy_data_rate_set+0x108>)
 8007e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e22:	bf00      	nop
 8007e24:	08007e35 	.word	0x08007e35
 8007e28:	08007e47 	.word	0x08007e47
 8007e2c:	08007e65 	.word	0x08007e65
 8007e30:	08007e8f 	.word	0x08007e8f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007e34:	78fb      	ldrb	r3, [r7, #3]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007e3e:	e045      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007e40:	78fb      	ldrb	r3, [r7, #3]
 8007e42:	75fb      	strb	r3, [r7, #23]
            break;
 8007e44:	e042      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007e50:	e03c      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d102      	bne.n	8007e5e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007e58:	2302      	movs	r3, #2
 8007e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8007e5c:	e036      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	75fb      	strb	r3, [r7, #23]
            break;
 8007e62:	e033      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007e6e:	e02d      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d102      	bne.n	8007e7c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007e76:	2303      	movs	r3, #3
 8007e78:	75fb      	strb	r3, [r7, #23]
            break;
 8007e7a:	e027      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d102      	bne.n	8007e88 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007e82:	2303      	movs	r3, #3
 8007e84:	75fb      	strb	r3, [r7, #23]
            break;
 8007e86:	e021      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8007e8c:	e01e      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8007e8e:	78fb      	ldrb	r3, [r7, #3]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007e94:	2304      	movs	r3, #4
 8007e96:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8007e98:	e018      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d102      	bne.n	8007ea6 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ea4:	e012      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8007ea6:	78fb      	ldrb	r3, [r7, #3]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d102      	bne.n	8007eb2 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007eac:	2304      	movs	r3, #4
 8007eae:	75fb      	strb	r3, [r7, #23]
            break;
 8007eb0:	e00c      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d102      	bne.n	8007ebe <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007eb8:	2304      	movs	r3, #4
 8007eba:	75fb      	strb	r3, [r7, #23]
            break;
 8007ebc:	e006      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	75fb      	strb	r3, [r7, #23]
            break;
 8007ec2:	e003      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	75fb      	strb	r3, [r7, #23]
            break;
 8007ec8:	e000      	b.n	8007ecc <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8007eca:	bf00      	nop
    }
  }

  if (ret == 0)
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007ed2:	f107 0208 	add.w	r2, r7, #8
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	2111      	movs	r1, #17
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fcc4 	bl	8007868 <lsm6dso_read_reg>
 8007ee0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10f      	bne.n	8007f08 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	7a3b      	ldrb	r3, [r7, #8]
 8007ef2:	f362 1307 	bfi	r3, r2, #4, #4
 8007ef6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007ef8:	f107 0208 	add.w	r2, r7, #8
 8007efc:	2301      	movs	r3, #1
 8007efe:	2111      	movs	r1, #17
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff fcc9 	bl	8007898 <lsm6dso_write_reg>
 8007f06:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8007f08:	693b      	ldr	r3, [r7, #16]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007f1e:	f107 0208 	add.w	r2, r7, #8
 8007f22:	2301      	movs	r3, #1
 8007f24:	2111      	movs	r1, #17
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff fc9e 	bl	8007868 <lsm6dso_read_reg>
 8007f2c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007f2e:	7a3b      	ldrb	r3, [r7, #8]
 8007f30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b0a      	cmp	r3, #10
 8007f38:	d844      	bhi.n	8007fc4 <lsm6dso_gy_data_rate_get+0xb0>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <lsm6dso_gy_data_rate_get+0x2c>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f75 	.word	0x08007f75
 8007f48:	08007f7d 	.word	0x08007f7d
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f8d 	.word	0x08007f8d
 8007f54:	08007f95 	.word	0x08007f95
 8007f58:	08007f9d 	.word	0x08007f9d
 8007f5c:	08007fa5 	.word	0x08007fa5
 8007f60:	08007fad 	.word	0x08007fad
 8007f64:	08007fb5 	.word	0x08007fb5
 8007f68:	08007fbd 	.word	0x08007fbd
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
      break;
 8007f72:	e02b      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	701a      	strb	r2, [r3, #0]
      break;
 8007f7a:	e027      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	701a      	strb	r2, [r3, #0]
      break;
 8007f82:	e023      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2203      	movs	r2, #3
 8007f88:	701a      	strb	r2, [r3, #0]
      break;
 8007f8a:	e01f      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	701a      	strb	r2, [r3, #0]
      break;
 8007f92:	e01b      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2205      	movs	r2, #5
 8007f98:	701a      	strb	r2, [r3, #0]
      break;
 8007f9a:	e017      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2206      	movs	r2, #6
 8007fa0:	701a      	strb	r2, [r3, #0]
      break;
 8007fa2:	e013      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	701a      	strb	r2, [r3, #0]
      break;
 8007faa:	e00f      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2208      	movs	r2, #8
 8007fb0:	701a      	strb	r2, [r3, #0]
      break;
 8007fb2:	e00b      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2209      	movs	r2, #9
 8007fb8:	701a      	strb	r2, [r3, #0]
      break;
 8007fba:	e007      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	220a      	movs	r2, #10
 8007fc0:	701a      	strb	r2, [r3, #0]
      break;
 8007fc2:	e003      	b.n	8007fcc <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
      break;
 8007fca:	bf00      	nop
  }

  return ret;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop

08007fd8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007fe4:	f107 0208 	add.w	r2, r7, #8
 8007fe8:	2301      	movs	r3, #1
 8007fea:	2112      	movs	r1, #18
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fc3b 	bl	8007868 <lsm6dso_read_reg>
 8007ff2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10f      	bne.n	800801a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	b2da      	uxtb	r2, r3
 8008002:	7a3b      	ldrb	r3, [r7, #8]
 8008004:	f362 1386 	bfi	r3, r2, #6, #1
 8008008:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800800a:	f107 0208 	add.w	r2, r7, #8
 800800e:	2301      	movs	r3, #1
 8008010:	2112      	movs	r1, #18
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fc40 	bl	8007898 <lsm6dso_write_reg>
 8008018:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800801a:	68fb      	ldr	r3, [r7, #12]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800802e:	f107 020c 	add.w	r2, r7, #12
 8008032:	2306      	movs	r3, #6
 8008034:	2122      	movs	r1, #34	; 0x22
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fc16 	bl	8007868 <lsm6dso_read_reg>
 800803c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800803e:	7b7b      	ldrb	r3, [r7, #13]
 8008040:	b21a      	sxth	r2, r3
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800804c:	b29b      	uxth	r3, r3
 800804e:	021b      	lsls	r3, r3, #8
 8008050:	b29a      	uxth	r2, r3
 8008052:	7b3b      	ldrb	r3, [r7, #12]
 8008054:	b29b      	uxth	r3, r3
 8008056:	4413      	add	r3, r2
 8008058:	b29b      	uxth	r3, r3
 800805a:	b21a      	sxth	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	3302      	adds	r3, #2
 8008066:	b212      	sxth	r2, r2
 8008068:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	3302      	adds	r3, #2
 800806e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008072:	b29b      	uxth	r3, r3
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	b29a      	uxth	r2, r3
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	b29b      	uxth	r3, r3
 800807c:	4413      	add	r3, r2
 800807e:	b29a      	uxth	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	3302      	adds	r3, #2
 8008084:	b212      	sxth	r2, r2
 8008086:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008088:	7c7a      	ldrb	r2, [r7, #17]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	3304      	adds	r3, #4
 800808e:	b212      	sxth	r2, r2
 8008090:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	3304      	adds	r3, #4
 8008096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800809a:	b29b      	uxth	r3, r3
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	b29a      	uxth	r2, r3
 80080a0:	7c3b      	ldrb	r3, [r7, #16]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4413      	add	r3, r2
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	3304      	adds	r3, #4
 80080ac:	b212      	sxth	r2, r2
 80080ae:	801a      	strh	r2, [r3, #0]

  return ret;
 80080b0:	697b      	ldr	r3, [r7, #20]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80080c4:	f107 020c 	add.w	r2, r7, #12
 80080c8:	2306      	movs	r3, #6
 80080ca:	2128      	movs	r1, #40	; 0x28
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fbcb 	bl	8007868 <lsm6dso_read_reg>
 80080d2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80080d4:	7b7b      	ldrb	r3, [r7, #13]
 80080d6:	b21a      	sxth	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	7b3b      	ldrb	r3, [r7, #12]
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	4413      	add	r3, r2
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b21a      	sxth	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80080f6:	7bfa      	ldrb	r2, [r7, #15]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	3302      	adds	r3, #2
 80080fc:	b212      	sxth	r2, r2
 80080fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	3302      	adds	r3, #2
 8008104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008108:	b29b      	uxth	r3, r3
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	b29a      	uxth	r2, r3
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	b29b      	uxth	r3, r3
 8008112:	4413      	add	r3, r2
 8008114:	b29a      	uxth	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3302      	adds	r3, #2
 800811a:	b212      	sxth	r2, r2
 800811c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800811e:	7c7a      	ldrb	r2, [r7, #17]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	3304      	adds	r3, #4
 8008124:	b212      	sxth	r2, r2
 8008126:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	3304      	adds	r3, #4
 800812c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008130:	b29b      	uxth	r3, r3
 8008132:	021b      	lsls	r3, r3, #8
 8008134:	b29a      	uxth	r2, r3
 8008136:	7c3b      	ldrb	r3, [r7, #16]
 8008138:	b29b      	uxth	r3, r3
 800813a:	4413      	add	r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	3304      	adds	r3, #4
 8008142:	b212      	sxth	r2, r2
 8008144:	801a      	strh	r2, [r3, #0]

  return ret;
 8008146:	697b      	ldr	r3, [r7, #20]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800815c:	f107 0208 	add.w	r2, r7, #8
 8008160:	2301      	movs	r3, #1
 8008162:	2101      	movs	r1, #1
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff fb7f 	bl	8007868 <lsm6dso_read_reg>
 800816a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10f      	bne.n	8008192 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	b2da      	uxtb	r2, r3
 800817a:	7a3b      	ldrb	r3, [r7, #8]
 800817c:	f362 1387 	bfi	r3, r2, #6, #2
 8008180:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8008182:	f107 0208 	add.w	r2, r7, #8
 8008186:	2301      	movs	r3, #1
 8008188:	2101      	movs	r1, #1
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fb84 	bl	8007898 <lsm6dso_write_reg>
 8008190:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80081a6:	2301      	movs	r3, #1
 80081a8:	683a      	ldr	r2, [r7, #0]
 80081aa:	210f      	movs	r1, #15
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fb5b 	bl	8007868 <lsm6dso_read_reg>
 80081b2:	60f8      	str	r0, [r7, #12]

  return ret;
 80081b4:	68fb      	ldr	r3, [r7, #12]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80081ca:	f107 0208 	add.w	r2, r7, #8
 80081ce:	2301      	movs	r3, #1
 80081d0:	2112      	movs	r1, #18
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fb48 	bl	8007868 <lsm6dso_read_reg>
 80081d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10f      	bne.n	8008200 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	7a3b      	ldrb	r3, [r7, #8]
 80081ea:	f362 0382 	bfi	r3, r2, #2, #1
 80081ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80081f0:	f107 0208 	add.w	r2, r7, #8
 80081f4:	2301      	movs	r3, #1
 80081f6:	2112      	movs	r1, #18
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff fb4d 	bl	8007898 <lsm6dso_write_reg>
 80081fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008200:	68fb      	ldr	r3, [r7, #12]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b086      	sub	sp, #24
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008216:	f107 020c 	add.w	r2, r7, #12
 800821a:	2301      	movs	r3, #1
 800821c:	2118      	movs	r1, #24
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff fb22 	bl	8007868 <lsm6dso_read_reg>
 8008224:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d111      	bne.n	8008250 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	09db      	lsrs	r3, r3, #7
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	b2da      	uxtb	r2, r3
 8008238:	7b3b      	ldrb	r3, [r7, #12]
 800823a:	f362 0341 	bfi	r3, r2, #1, #1
 800823e:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8008240:	f107 020c 	add.w	r2, r7, #12
 8008244:	2301      	movs	r3, #1
 8008246:	2118      	movs	r1, #24
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff fb25 	bl	8007898 <lsm6dso_write_reg>
 800824e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d107      	bne.n	8008266 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8008256:	f107 0210 	add.w	r2, r7, #16
 800825a:	2301      	movs	r3, #1
 800825c:	2162      	movs	r1, #98	; 0x62
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff fb02 	bl	8007868 <lsm6dso_read_reg>
 8008264:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10f      	bne.n	800828c <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	b2da      	uxtb	r2, r3
 8008274:	7c3b      	ldrb	r3, [r7, #16]
 8008276:	f362 03c4 	bfi	r3, r2, #3, #2
 800827a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800827c:	f107 0210 	add.w	r2, r7, #16
 8008280:	2301      	movs	r3, #1
 8008282:	2162      	movs	r1, #98	; 0x62
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff fb07 	bl	8007898 <lsm6dso_write_reg>
 800828a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800828c:	697b      	ldr	r3, [r7, #20]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3718      	adds	r7, #24
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80082a2:	f107 0208 	add.w	r2, r7, #8
 80082a6:	2301      	movs	r3, #1
 80082a8:	210a      	movs	r1, #10
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff fadc 	bl	8007868 <lsm6dso_read_reg>
 80082b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10f      	bne.n	80082d8 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	7a3b      	ldrb	r3, [r7, #8]
 80082c2:	f362 0302 	bfi	r3, r2, #0, #3
 80082c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80082c8:	f107 0208 	add.w	r2, r7, #8
 80082cc:	2301      	movs	r3, #1
 80082ce:	210a      	movs	r1, #10
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fae1 	bl	8007898 <lsm6dso_write_reg>
 80082d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80082d8:	68fb      	ldr	r3, [r7, #12]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80082ec:	2102      	movs	r1, #2
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff ff2e 	bl	8008150 <lsm6dso_mem_bank_set>
 80082f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80082fc:	2302      	movs	r3, #2
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	2146      	movs	r1, #70	; 0x46
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff fab0 	bl	8007868 <lsm6dso_read_reg>
 8008308:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8008310:	2100      	movs	r1, #0
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff ff1c 	bl	8008150 <lsm6dso_mem_bank_set>
 8008318:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800832e:	2102      	movs	r1, #2
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff ff0d 	bl	8008150 <lsm6dso_mem_bank_set>
 8008336:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d107      	bne.n	800834e <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	2301      	movs	r3, #1
 8008344:	215f      	movs	r1, #95	; 0x5f
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fa8e 	bl	8007868 <lsm6dso_read_reg>
 800834c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d12a      	bne.n	80083aa <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8008354:	7a3b      	ldrb	r3, [r7, #8]
 8008356:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b03      	cmp	r3, #3
 800835e:	d81b      	bhi.n	8008398 <lsm6dso_fsm_data_rate_get+0x74>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <lsm6dso_fsm_data_rate_get+0x44>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	08008379 	.word	0x08008379
 800836c:	08008381 	.word	0x08008381
 8008370:	08008389 	.word	0x08008389
 8008374:	08008391 	.word	0x08008391
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
        break;
 800837e:	e00f      	b.n	80083a0 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2201      	movs	r2, #1
 8008384:	701a      	strb	r2, [r3, #0]
        break;
 8008386:	e00b      	b.n	80083a0 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2202      	movs	r2, #2
 800838c:	701a      	strb	r2, [r3, #0]
        break;
 800838e:	e007      	b.n	80083a0 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2203      	movs	r2, #3
 8008394:	701a      	strb	r2, [r3, #0]
        break;
 8008396:	e003      	b.n	80083a0 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
        break;
 800839e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fed4 	bl	8008150 <lsm6dso_mem_bank_set>
 80083a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80083aa:	68fb      	ldr	r3, [r7, #12]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d103      	bne.n	80083cc <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 80083c4:	f04f 33ff 	mov.w	r3, #4294967295
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	e034      	b.n	8008436 <STTS751_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	7b1a      	ldrb	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	695a      	ldr	r2, [r3, #20]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	699a      	ldr	r2, [r3, #24]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a0e      	ldr	r2, [pc, #56]	; (8008440 <STTS751_RegisterBusIO+0x8c>)
 8008408:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a0d      	ldr	r2, [pc, #52]	; (8008444 <STTS751_RegisterBusIO+0x90>)
 800840e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d004      	beq.n	8008430 <STTS751_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4798      	blx	r3
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	e002      	b.n	8008436 <STTS751_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS751_ERROR;
 8008430:	f04f 33ff 	mov.w	r3, #4294967295
 8008434:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	080088c9 	.word	0x080088c9
 8008444:	08008937 	.word	0x08008937

08008448 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008456:	2b00      	cmp	r3, #0
 8008458:	d127      	bne.n	80084aa <STTS751_Init+0x62>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3320      	adds	r3, #32
 800845e:	2101      	movs	r1, #1
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fc4c 	bl	8008cfe <stts751_pin_event_route_set>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <STTS751_Init+0x2a>
    {
      return STTS751_ERROR;
 800846c:	f04f 33ff 	mov.w	r3, #4294967295
 8008470:	e020      	b.n	80084b4 <STTS751_Init+0x6c>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8008478:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3320      	adds	r3, #32
 800847e:	2103      	movs	r1, #3
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fbaf 	bl	8008be4 <stts751_resolution_set>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <STTS751_Init+0x4a>
    {
      return STTS751_ERROR;
 800848c:	f04f 33ff 	mov.w	r3, #4294967295
 8008490:	e010      	b.n	80084b4 <STTS751_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3320      	adds	r3, #32
 8008496:	2180      	movs	r1, #128	; 0x80
 8008498:	4618      	mov	r0, r3
 800849a:	f000 facd 	bl	8008a38 <stts751_temp_data_rate_set>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <STTS751_Init+0x62>
    {
      return STTS751_ERROR;
 80084a4:	f04f 33ff 	mov.w	r3, #4294967295
 80084a8:	e004      	b.n	80084b4 <STTS751_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d108      	bne.n	80084e0 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f870 	bl	80085b4 <STTS751_TEMP_Disable>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 80084da:	f04f 33ff 	mov.w	r3, #4294967295
 80084de:	e004      	b.n	80084ea <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STTS751_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3320      	adds	r3, #32
 8008500:	f107 020c 	add.w	r2, r7, #12
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fc1f 	bl	8008d4a <stts751_device_id_get>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <STTS751_ReadID+0x26>
  {
    return STTS751_ERROR;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	e003      	b.n	8008520 <STTS751_ReadID+0x2e>
  }

  *Id = buf.manufacturer_id;
 8008518:	7b7a      	ldrb	r2, [r7, #13]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2200      	movs	r2, #0
 8008536:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2201      	movs	r2, #1
 8008542:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8008558:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	e012      	b.n	80085ac <STTS751_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800858c:	eeb0 0a67 	vmov.f32	s0, s15
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f8b5 	bl	8008700 <STTS751_TEMP_SetOutputDataRate>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <STTS751_TEMP_Enable+0x32>
  {
    return STTS751_ERROR;
 800859c:	f04f 33ff 	mov.w	r3, #4294967295
 80085a0:	e004      	b.n	80085ac <STTS751_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e01c      	b.n	8008604 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3334      	adds	r3, #52	; 0x34
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f81b 	bl	800860c <STTS751_TEMP_GetOutputDataRate>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <STTS751_TEMP_Disable+0x2e>
  {
    return STTS751_ERROR;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	e010      	b.n	8008604 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3320      	adds	r3, #32
 80085e6:	2180      	movs	r1, #128	; 0x80
 80085e8:	4618      	mov	r0, r3
 80085ea:	f000 fa25 	bl	8008a38 <stts751_temp_data_rate_set>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 80085f4:	f04f 33ff 	mov.w	r3, #4294967295
 80085f8:	e004      	b.n	8008604 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STTS751_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3320      	adds	r3, #32
 800861e:	f107 020b 	add.w	r2, r7, #11
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fa5d 	bl	8008ae4 <stts751_temp_data_rate_get>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <STTS751_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS751_ERROR;
 8008630:	f04f 33ff 	mov.w	r3, #4294967295
 8008634:	e060      	b.n	80086f8 <STTS751_TEMP_GetOutputDataRate+0xec>
  }

  switch (odr_low_level)
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	2b90      	cmp	r3, #144	; 0x90
 800863a:	d021      	beq.n	8008680 <STTS751_TEMP_GetOutputDataRate+0x74>
 800863c:	2b90      	cmp	r3, #144	; 0x90
 800863e:	dc56      	bgt.n	80086ee <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008640:	2b09      	cmp	r3, #9
 8008642:	dc1b      	bgt.n	800867c <STTS751_TEMP_GetOutputDataRate+0x70>
 8008644:	2b00      	cmp	r3, #0
 8008646:	db52      	blt.n	80086ee <STTS751_TEMP_GetOutputDataRate+0xe2>
 8008648:	2b09      	cmp	r3, #9
 800864a:	d850      	bhi.n	80086ee <STTS751_TEMP_GetOutputDataRate+0xe2>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <STTS751_TEMP_GetOutputDataRate+0x48>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	0800868b 	.word	0x0800868b
 8008658:	08008695 	.word	0x08008695
 800865c:	0800869f 	.word	0x0800869f
 8008660:	080086a9 	.word	0x080086a9
 8008664:	080086b3 	.word	0x080086b3
 8008668:	080086bd 	.word	0x080086bd
 800866c:	080086c7 	.word	0x080086c7
 8008670:	080086d1 	.word	0x080086d1
 8008674:	080086db 	.word	0x080086db
 8008678:	080086e5 	.word	0x080086e5
 800867c:	2b80      	cmp	r3, #128	; 0x80
 800867e:	d136      	bne.n	80086ee <STTS751_TEMP_GetOutputDataRate+0xe2>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	f04f 0200 	mov.w	r2, #0
 8008686:	601a      	str	r2, [r3, #0]
      break;
 8008688:	e035      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8008690:	601a      	str	r2, [r3, #0]
      break;
 8008692:	e030      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800869a:	601a      	str	r2, [r3, #0]
      break;
 800869c:	e02b      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80086a4:	601a      	str	r2, [r3, #0]
      break;
 80086a6:	e026      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80086ae:	601a      	str	r2, [r3, #0]
      break;
 80086b0:	e021      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80086b8:	601a      	str	r2, [r3, #0]
      break;
 80086ba:	e01c      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80086c2:	601a      	str	r2, [r3, #0]
      break;
 80086c4:	e017      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80086cc:	601a      	str	r2, [r3, #0]
      break;
 80086ce:	e012      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80086d6:	601a      	str	r2, [r3, #0]
      break;
 80086d8:	e00d      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80086e0:	601a      	str	r2, [r3, #0]
      break;
 80086e2:	e008      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80086ea:	601a      	str	r2, [r3, #0]
      break;
 80086ec:	e003      	b.n	80086f6 <STTS751_TEMP_GetOutputDataRate+0xea>

    default:
      ret = STTS751_ERROR;
 80086ee:	f04f 33ff 	mov.w	r3, #4294967295
 80086f2:	60fb      	str	r3, [r7, #12]
      break;
 80086f4:	bf00      	nop
  }

  return ret;
 80086f6:	68fb      	ldr	r3, [r7, #12]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	ed87 0a00 	vstr	s0, [r7]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3320      	adds	r3, #32
 8008710:	f107 020e 	add.w	r2, r7, #14
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f000 fa8a 	bl	8008c30 <stts751_resolution_get>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <STTS751_TEMP_SetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295
 8008726:	e0a5      	b.n	8008874 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 8008728:	edd7 7a00 	vldr	s15, [r7]
 800872c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008730:	eef4 7a47 	vcmp.f32	s15, s14
 8008734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008738:	d10e      	bne.n	8008758 <STTS751_TEMP_SetOutputDataRate+0x58>
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d10b      	bne.n	8008758 <STTS751_TEMP_SetOutputDataRate+0x58>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3320      	adds	r3, #32
 8008744:	2101      	movs	r1, #1
 8008746:	4618      	mov	r0, r3
 8008748:	f000 fa4c 	bl	8008be4 <stts751_resolution_set>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <STTS751_TEMP_SetOutputDataRate+0x58>
    {
      return STTS751_ERROR;
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	e08d      	b.n	8008874 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 8008758:	edd7 7a00 	vldr	s15, [r7]
 800875c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800887c <STTS751_TEMP_SetOutputDataRate+0x17c>
 8008760:	eef4 7a47 	vcmp.f32	s15, s14
 8008764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008768:	d111      	bne.n	800878e <STTS751_TEMP_SetOutputDataRate+0x8e>
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d002      	beq.n	8008776 <STTS751_TEMP_SetOutputDataRate+0x76>
 8008770:	7bbb      	ldrb	r3, [r7, #14]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d10b      	bne.n	800878e <STTS751_TEMP_SetOutputDataRate+0x8e>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3320      	adds	r3, #32
 800877a:	2100      	movs	r1, #0
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fa31 	bl	8008be4 <stts751_resolution_set>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <STTS751_TEMP_SetOutputDataRate+0x8e>
    {
      return STTS751_ERROR;
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	e072      	b.n	8008874 <STTS751_TEMP_SetOutputDataRate+0x174>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 800878e:	edd7 7a00 	vldr	s15, [r7]
 8008792:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008880 <STTS751_TEMP_SetOutputDataRate+0x180>
 8008796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800879a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800879e:	d801      	bhi.n	80087a4 <STTS751_TEMP_SetOutputDataRate+0xa4>
 80087a0:	2300      	movs	r3, #0
 80087a2:	e058      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 80087a4:	edd7 7a00 	vldr	s15, [r7]
 80087a8:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80087ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b4:	d801      	bhi.n	80087ba <STTS751_TEMP_SetOutputDataRate+0xba>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e04d      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 80087ba:	edd7 7a00 	vldr	s15, [r7]
 80087be:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80087c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ca:	d801      	bhi.n	80087d0 <STTS751_TEMP_SetOutputDataRate+0xd0>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e042      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 80087d0:	edd7 7a00 	vldr	s15, [r7]
 80087d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80087d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e0:	d801      	bhi.n	80087e6 <STTS751_TEMP_SetOutputDataRate+0xe6>
 80087e2:	2303      	movs	r3, #3
 80087e4:	e037      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 80087e6:	edd7 7a00 	vldr	s15, [r7]
 80087ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80087f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f6:	d801      	bhi.n	80087fc <STTS751_TEMP_SetOutputDataRate+0xfc>
 80087f8:	2304      	movs	r3, #4
 80087fa:	e02c      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 80087fc:	edd7 7a00 	vldr	s15, [r7]
 8008800:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800880c:	d801      	bhi.n	8008812 <STTS751_TEMP_SetOutputDataRate+0x112>
 800880e:	2305      	movs	r3, #5
 8008810:	e021      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008812:	edd7 7a00 	vldr	s15, [r7]
 8008816:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800881a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800881e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008822:	d801      	bhi.n	8008828 <STTS751_TEMP_SetOutputDataRate+0x128>
 8008824:	2306      	movs	r3, #6
 8008826:	e016      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008828:	edd7 7a00 	vldr	s15, [r7]
 800882c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008838:	d801      	bhi.n	800883e <STTS751_TEMP_SetOutputDataRate+0x13e>
 800883a:	2307      	movs	r3, #7
 800883c:	e00b      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 800883e:	edd7 7a00 	vldr	s15, [r7]
 8008842:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8008846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800884a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800884e:	d801      	bhi.n	8008854 <STTS751_TEMP_SetOutputDataRate+0x154>
 8008850:	2308      	movs	r3, #8
 8008852:	e000      	b.n	8008856 <STTS751_TEMP_SetOutputDataRate+0x156>
 8008854:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 8008856:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3320      	adds	r3, #32
 800885c:	7bfa      	ldrb	r2, [r7, #15]
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f8e9 	bl	8008a38 <stts751_temp_data_rate_set>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <STTS751_TEMP_SetOutputDataRate+0x172>
  {
    return STTS751_ERROR;
 800886c:	f04f 33ff 	mov.w	r3, #4294967295
 8008870:	e000      	b.n	8008874 <STTS751_TEMP_SetOutputDataRate+0x174>
  }

  return STTS751_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	42000000 	.word	0x42000000
 8008880:	3d800000 	.word	0x3d800000

08008884 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3320      	adds	r3, #32
 8008892:	f107 020e 	add.w	r2, r7, #14
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f000 fa01 	bl	8008ca0 <stts751_temperature_raw_get>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <STTS751_TEMP_GetTemperature+0x26>
  {
    return STTS751_ERROR;
 80088a4:	f04f 33ff 	mov.w	r3, #4294967295
 80088a8:	e00a      	b.n	80088c0 <STTS751_TEMP_GetTemperature+0x3c>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 80088aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f8a8 	bl	8008a04 <stts751_from_lsb_to_celsius>
 80088b4:	eef0 7a40 	vmov.f32	s15, s0
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	edc3 7a00 	vstr	s15, [r3]

  return STTS751_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b089      	sub	sp, #36	; 0x24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	461a      	mov	r2, r3
 80088d4:	460b      	mov	r3, r1
 80088d6:	72fb      	strb	r3, [r7, #11]
 80088d8:	4613      	mov	r3, r2
 80088da:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d11f      	bne.n	800892c <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	83fb      	strh	r3, [r7, #30]
 80088f0:	e018      	b.n	8008924 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	695c      	ldr	r4, [r3, #20]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	7b1b      	ldrb	r3, [r3, #12]
 80088fa:	b298      	uxth	r0, r3
 80088fc:	7afb      	ldrb	r3, [r7, #11]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	8bfb      	ldrh	r3, [r7, #30]
 8008902:	4413      	add	r3, r2
 8008904:	b299      	uxth	r1, r3
 8008906:	8bfb      	ldrh	r3, [r7, #30]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	441a      	add	r2, r3
 800890c:	2301      	movs	r3, #1
 800890e:	47a0      	blx	r4
 8008910:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <ReadRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008918:	f04f 33ff 	mov.w	r3, #4294967295
 800891c:	e007      	b.n	800892e <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800891e:	8bfb      	ldrh	r3, [r7, #30]
 8008920:	3301      	adds	r3, #1
 8008922:	83fb      	strh	r3, [r7, #30]
 8008924:	8bfa      	ldrh	r2, [r7, #30]
 8008926:	893b      	ldrh	r3, [r7, #8]
 8008928:	429a      	cmp	r2, r3
 800892a:	d3e2      	bcc.n	80088f2 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800892c:	69bb      	ldr	r3, [r7, #24]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3724      	adds	r7, #36	; 0x24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd90      	pop	{r4, r7, pc}

08008936 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008936:	b590      	push	{r4, r7, lr}
 8008938:	b089      	sub	sp, #36	; 0x24
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	461a      	mov	r2, r3
 8008942:	460b      	mov	r3, r1
 8008944:	72fb      	strb	r3, [r7, #11]
 8008946:	4613      	mov	r3, r2
 8008948:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS751_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d11f      	bne.n	800899a <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800895a:	2300      	movs	r3, #0
 800895c:	83fb      	strh	r3, [r7, #30]
 800895e:	e018      	b.n	8008992 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	691c      	ldr	r4, [r3, #16]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	7b1b      	ldrb	r3, [r3, #12]
 8008968:	b298      	uxth	r0, r3
 800896a:	7afb      	ldrb	r3, [r7, #11]
 800896c:	b29a      	uxth	r2, r3
 800896e:	8bfb      	ldrh	r3, [r7, #30]
 8008970:	4413      	add	r3, r2
 8008972:	b299      	uxth	r1, r3
 8008974:	8bfb      	ldrh	r3, [r7, #30]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	441a      	add	r2, r3
 800897a:	2301      	movs	r3, #1
 800897c:	47a0      	blx	r4
 800897e:	61b8      	str	r0, [r7, #24]
      if (ret != STTS751_OK)
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <WriteRegWrap+0x56>
      {
        return STTS751_ERROR;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	e007      	b.n	800899c <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800898c:	8bfb      	ldrh	r3, [r7, #30]
 800898e:	3301      	adds	r3, #1
 8008990:	83fb      	strh	r3, [r7, #30]
 8008992:	8bfa      	ldrh	r2, [r7, #30]
 8008994:	893b      	ldrh	r3, [r7, #8]
 8008996:	429a      	cmp	r2, r3
 8008998:	d3e2      	bcc.n	8008960 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800899a:	69bb      	ldr	r3, [r7, #24]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3724      	adds	r7, #36	; 0x24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd90      	pop	{r4, r7, pc}

080089a4 <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80089a4:	b590      	push	{r4, r7, lr}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	607a      	str	r2, [r7, #4]
 80089ae:	461a      	mov	r2, r3
 80089b0:	460b      	mov	r3, r1
 80089b2:	72fb      	strb	r3, [r7, #11]
 80089b4:	4613      	mov	r3, r2
 80089b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	685c      	ldr	r4, [r3, #4]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68d8      	ldr	r0, [r3, #12]
 80089c0:	893b      	ldrh	r3, [r7, #8]
 80089c2:	7af9      	ldrb	r1, [r7, #11]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	47a0      	blx	r4
 80089c8:	6178      	str	r0, [r7, #20]

  return ret;
 80089ca:	697b      	ldr	r3, [r7, #20]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd90      	pop	{r4, r7, pc}

080089d4 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	461a      	mov	r2, r3
 80089e0:	460b      	mov	r3, r1
 80089e2:	72fb      	strb	r3, [r7, #11]
 80089e4:	4613      	mov	r3, r2
 80089e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681c      	ldr	r4, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	68d8      	ldr	r0, [r3, #12]
 80089f0:	893b      	ldrh	r3, [r7, #8]
 80089f2:	7af9      	ldrb	r1, [r7, #11]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	47a0      	blx	r4
 80089f8:	6178      	str	r0, [r7, #20]

  return ret;
 80089fa:	697b      	ldr	r3, [r7, #20]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd90      	pop	{r4, r7, pc}

08008a04 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) / 256.0f;
 8008a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a1a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008a34 <stts751_from_lsb_to_celsius+0x30>
 8008a1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a22:	eef0 7a66 	vmov.f32	s15, s13
}
 8008a26:	eeb0 0a67 	vmov.f32	s0, s15
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	43800000 	.word	0x43800000

08008a38 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 8008a44:	23aa      	movs	r3, #170	; 0xaa
 8008a46:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008a48:	f107 020c 	add.w	r2, r7, #12
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	2104      	movs	r1, #4
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff ffa7 	bl	80089a4 <stts751_read_reg>
 8008a56:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10f      	bne.n	8008a7e <stts751_temp_data_rate_set+0x46>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	f003 030f 	and.w	r3, r3, #15
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	7b3b      	ldrb	r3, [r7, #12]
 8008a68:	f362 0303 	bfi	r3, r2, #0, #4
 8008a6c:	733b      	strb	r3, [r7, #12]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 8008a6e:	f107 020c 	add.w	r2, r7, #12
 8008a72:	2301      	movs	r3, #1
 8008a74:	2104      	movs	r1, #4
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff ffac 	bl	80089d4 <stts751_write_reg>
 8008a7c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d107      	bne.n	8008a94 <stts751_temp_data_rate_set+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008a84:	f107 0210 	add.w	r2, r7, #16
 8008a88:	2301      	movs	r3, #1
 8008a8a:	2103      	movs	r1, #3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ff89 	bl	80089a4 <stts751_read_reg>
 8008a92:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d111      	bne.n	8008abe <stts751_temp_data_rate_set+0x86>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 8008a9a:	78fb      	ldrb	r3, [r7, #3]
 8008a9c:	09db      	lsrs	r3, r3, #7
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	7c3b      	ldrb	r3, [r7, #16]
 8008aa8:	f362 1386 	bfi	r3, r2, #6, #1
 8008aac:	743b      	strb	r3, [r7, #16]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 8008aae:	f107 0210 	add.w	r2, r7, #16
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	2103      	movs	r1, #3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7ff ff8c 	bl	80089d4 <stts751_write_reg>
 8008abc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10a      	bne.n	8008ada <stts751_temp_data_rate_set+0xa2>
 8008ac4:	78fb      	ldrb	r3, [r7, #3]
 8008ac6:	2b90      	cmp	r3, #144	; 0x90
 8008ac8:	d107      	bne.n	8008ada <stts751_temp_data_rate_set+0xa2>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 8008aca:	f107 020b 	add.w	r2, r7, #11
 8008ace:	2301      	movs	r3, #1
 8008ad0:	210f      	movs	r1, #15
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff ff7e 	bl	80089d4 <stts751_write_reg>
 8008ad8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8008ada:	697b      	ldr	r3, [r7, #20]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008aee:	f107 0210 	add.w	r2, r7, #16
 8008af2:	2301      	movs	r3, #1
 8008af4:	2104      	movs	r1, #4
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff ff54 	bl	80089a4 <stts751_read_reg>
 8008afc:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d107      	bne.n	8008b14 <stts751_temp_data_rate_get+0x30>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008b04:	f107 020c 	add.w	r2, r7, #12
 8008b08:	2301      	movs	r3, #1
 8008b0a:	2103      	movs	r1, #3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7ff ff49 	bl	80089a4 <stts751_read_reg>
 8008b12:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008b14:	7b3b      	ldrb	r3, [r7, #12]
 8008b16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	01db      	lsls	r3, r3, #7
 8008b1e:	7c3a      	ldrb	r2, [r7, #16]
 8008b20:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008b24:	b2d2      	uxtb	r2, r2
 8008b26:	4413      	add	r3, r2
 8008b28:	2b90      	cmp	r3, #144	; 0x90
 8008b2a:	d025      	beq.n	8008b78 <stts751_temp_data_rate_get+0x94>
 8008b2c:	2b90      	cmp	r3, #144	; 0x90
 8008b2e:	dc4f      	bgt.n	8008bd0 <stts751_temp_data_rate_get+0xec>
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	dc1b      	bgt.n	8008b6c <stts751_temp_data_rate_get+0x88>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	db4b      	blt.n	8008bd0 <stts751_temp_data_rate_get+0xec>
 8008b38:	2b09      	cmp	r3, #9
 8008b3a:	d849      	bhi.n	8008bd0 <stts751_temp_data_rate_get+0xec>
 8008b3c:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <stts751_temp_data_rate_get+0x60>)
 8008b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b42:	bf00      	nop
 8008b44:	08008b81 	.word	0x08008b81
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b91 	.word	0x08008b91
 8008b50:	08008b99 	.word	0x08008b99
 8008b54:	08008ba1 	.word	0x08008ba1
 8008b58:	08008ba9 	.word	0x08008ba9
 8008b5c:	08008bb1 	.word	0x08008bb1
 8008b60:	08008bb9 	.word	0x08008bb9
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bc9 	.word	0x08008bc9
 8008b6c:	2b80      	cmp	r3, #128	; 0x80
 8008b6e:	d12f      	bne.n	8008bd0 <stts751_temp_data_rate_get+0xec>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2280      	movs	r2, #128	; 0x80
 8008b74:	701a      	strb	r2, [r3, #0]
      break;
 8008b76:	e02f      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2290      	movs	r2, #144	; 0x90
 8008b7c:	701a      	strb	r2, [r3, #0]
      break;
 8008b7e:	e02b      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	2200      	movs	r2, #0
 8008b84:	701a      	strb	r2, [r3, #0]
      break;
 8008b86:	e027      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	701a      	strb	r2, [r3, #0]
      break;
 8008b8e:	e023      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2202      	movs	r2, #2
 8008b94:	701a      	strb	r2, [r3, #0]
      break;
 8008b96:	e01f      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	2203      	movs	r2, #3
 8008b9c:	701a      	strb	r2, [r3, #0]
      break;
 8008b9e:	e01b      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	701a      	strb	r2, [r3, #0]
      break;
 8008ba6:	e017      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2205      	movs	r2, #5
 8008bac:	701a      	strb	r2, [r3, #0]
      break;
 8008bae:	e013      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2206      	movs	r2, #6
 8008bb4:	701a      	strb	r2, [r3, #0]
      break;
 8008bb6:	e00f      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2207      	movs	r2, #7
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e00b      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2208      	movs	r2, #8
 8008bc4:	701a      	strb	r2, [r3, #0]
      break;
 8008bc6:	e007      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2209      	movs	r2, #9
 8008bcc:	701a      	strb	r2, [r3, #0]
      break;
 8008bce:	e003      	b.n	8008bd8 <stts751_temp_data_rate_get+0xf4>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2280      	movs	r2, #128	; 0x80
 8008bd4:	701a      	strb	r2, [r3, #0]
      break;
 8008bd6:	bf00      	nop
  }

  return ret;
 8008bd8:	697b      	ldr	r3, [r7, #20]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop

08008be4 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008bf0:	f107 0208 	add.w	r2, r7, #8
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	2103      	movs	r1, #3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff fed3 	bl	80089a4 <stts751_read_reg>
 8008bfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10f      	bne.n	8008c26 <stts751_resolution_set+0x42>
  {
    reg.tres = (uint8_t) val;
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	7a3b      	ldrb	r3, [r7, #8]
 8008c10:	f362 0383 	bfi	r3, r2, #2, #2
 8008c14:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008c16:	f107 0208 	add.w	r2, r7, #8
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	2103      	movs	r1, #3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f7ff fed8 	bl	80089d4 <stts751_write_reg>
 8008c24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008c26:	68fb      	ldr	r3, [r7, #12]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008c3a:	f107 0208 	add.w	r2, r7, #8
 8008c3e:	2301      	movs	r3, #1
 8008c40:	2103      	movs	r1, #3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff feae 	bl	80089a4 <stts751_read_reg>
 8008c48:	60f8      	str	r0, [r7, #12]

  switch (reg.tres)
 8008c4a:	7a3b      	ldrb	r3, [r7, #8]
 8008c4c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d81a      	bhi.n	8008c8c <stts751_resolution_get+0x5c>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <stts751_resolution_get+0x2c>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c75 	.word	0x08008c75
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c6d 	.word	0x08008c6d
 8008c68:	08008c85 	.word	0x08008c85
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	701a      	strb	r2, [r3, #0]
      break;
 8008c72:	e00f      	b.n	8008c94 <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	701a      	strb	r2, [r3, #0]
      break;
 8008c7a:	e00b      	b.n	8008c94 <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	701a      	strb	r2, [r3, #0]
      break;
 8008c82:	e007      	b.n	8008c94 <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2203      	movs	r2, #3
 8008c88:	701a      	strb	r2, [r3, #0]
      break;
 8008c8a:	e003      	b.n	8008c94 <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	701a      	strb	r2, [r3, #0]
      break;
 8008c92:	bf00      	nop
  }

  return ret;
 8008c94:	68fb      	ldr	r3, [r7, #12]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop

08008ca0 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 8008caa:	f107 0308 	add.w	r3, r7, #8
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff fe75 	bl	80089a4 <stts751_read_reg>
 8008cba:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d118      	bne.n	8008cf4 <stts751_temperature_raw_get+0x54>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 8008cc2:	f107 0208 	add.w	r2, r7, #8
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	2102      	movs	r1, #2
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff fe6a 	bl	80089a4 <stts751_read_reg>
 8008cd0:	60f8      	str	r0, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 8008cd2:	7a7b      	ldrb	r3, [r7, #9]
 8008cd4:	b21a      	sxth	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	7a3b      	ldrb	r3, [r7, #8]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	b21a      	sxth	r2, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008d0a:	f107 0208 	add.w	r2, r7, #8
 8008d0e:	2301      	movs	r3, #1
 8008d10:	2103      	movs	r1, #3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff fe46 	bl	80089a4 <stts751_read_reg>
 8008d18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10f      	bne.n	8008d40 <stts751_pin_event_route_set+0x42>
  {
    reg.mask1 = val;
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	7a3b      	ldrb	r3, [r7, #8]
 8008d2a:	f362 13c7 	bfi	r3, r2, #7, #1
 8008d2e:	723b      	strb	r3, [r7, #8]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 8008d30:	f107 0208 	add.w	r2, r7, #8
 8008d34:	2301      	movs	r3, #1
 8008d36:	2103      	movs	r1, #3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fe4b 	bl	80089d4 <stts751_write_reg>
 8008d3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008d40:	68fb      	ldr	r3, [r7, #12]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	2301      	movs	r3, #1
 8008d58:	21fd      	movs	r1, #253	; 0xfd
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7ff fe22 	bl	80089a4 <stts751_read_reg>
 8008d60:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d107      	bne.n	8008d78 <stts751_device_id_get+0x2e>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	21fe      	movs	r1, #254	; 0xfe
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff fe17 	bl	80089a4 <stts751_read_reg>
 8008d76:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d107      	bne.n	8008d8e <stts751_device_id_get+0x44>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	1c9a      	adds	r2, r3, #2
 8008d82:	2301      	movs	r3, #1
 8008d84:	21ff      	movs	r1, #255	; 0xff
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff fe0c 	bl	80089a4 <stts751_read_reg>
 8008d8c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	; 0x28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 8008da6:	2301      	movs	r3, #1
 8008da8:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d06e      	beq.n	8008e92 <IKS01A3_ENV_SENSOR_Init+0xfa>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	f200 809d 	bhi.w	8008ef6 <IKS01A3_ENV_SENSOR_Init+0x15e>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <IKS01A3_ENV_SENSOR_Init+0x32>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d032      	beq.n	8008e2e <IKS01A3_ENV_SENSOR_Init+0x96>
 8008dc8:	e095      	b.n	8008ef6 <IKS01A3_ENV_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 8008dca:	6838      	ldr	r0, [r7, #0]
 8008dcc:	f000 f9bc 	bl	8009148 <HTS221_0_Probe>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <IKS01A3_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	e0cc      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008ddc:	4a68      	ldr	r2, [pc, #416]	; (8008f80 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	4967      	ldr	r1, [pc, #412]	; (8008f84 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008dee:	f107 0108 	add.w	r1, r7, #8
 8008df2:	4610      	mov	r0, r2
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008dfc:	f06f 0306 	mvn.w	r3, #6
 8008e00:	e0b9      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8008e02:	7a3b      	ldrb	r3, [r7, #8]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d103      	bne.n	8008e10 <IKS01A3_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008e10:	7abb      	ldrb	r3, [r7, #10]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d103      	bne.n	8008e1e <IKS01A3_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	f043 0304 	orr.w	r3, r3, #4
 8008e1c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008e1e:	7a7b      	ldrb	r3, [r7, #9]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d16c      	bne.n	8008efe <IKS01A3_ENV_SENSOR_Init+0x166>
      {
        component_functions |= ENV_PRESSURE;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f043 0302 	orr.w	r3, r3, #2
 8008e2a:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008e2c:	e067      	b.n	8008efe <IKS01A3_ENV_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008e2e:	6838      	ldr	r0, [r7, #0]
 8008e30:	f000 fa44 	bl	80092bc <LPS22HH_0_Probe>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <IKS01A3_ENV_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8008e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e3e:	e09a      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008e40:	4a4f      	ldr	r2, [pc, #316]	; (8008f80 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	494e      	ldr	r1, [pc, #312]	; (8008f84 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008e52:	f107 0108 	add.w	r1, r7, #8
 8008e56:	4610      	mov	r0, r2
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <IKS01A3_ENV_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008e60:	f06f 0306 	mvn.w	r3, #6
 8008e64:	e087      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8008e66:	7a3b      	ldrb	r3, [r7, #8]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d103      	bne.n	8008e74 <IKS01A3_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_TEMPERATURE;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f043 0301 	orr.w	r3, r3, #1
 8008e72:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008e74:	7abb      	ldrb	r3, [r7, #10]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d103      	bne.n	8008e82 <IKS01A3_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_HUMIDITY;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	f043 0304 	orr.w	r3, r3, #4
 8008e80:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008e82:	7a7b      	ldrb	r3, [r7, #9]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d13c      	bne.n	8008f02 <IKS01A3_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_PRESSURE;
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	f043 0302 	orr.w	r3, r3, #2
 8008e8e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008e90:	e037      	b.n	8008f02 <IKS01A3_ENV_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 8008e92:	6838      	ldr	r0, [r7, #0]
 8008e94:	f000 face 	bl	8009434 <STTS751_0_Probe>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <IKS01A3_ENV_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8008e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea2:	e068      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008ea4:	4a36      	ldr	r2, [pc, #216]	; (8008f80 <IKS01A3_ENV_SENSOR_Init+0x1e8>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	4935      	ldr	r1, [pc, #212]	; (8008f84 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008eb6:	f107 0108 	add.w	r1, r7, #8
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4798      	blx	r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <IKS01A3_ENV_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008ec4:	f06f 0306 	mvn.w	r3, #6
 8008ec8:	e055      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
      if (cap.Temperature == 1U)
 8008eca:	7a3b      	ldrb	r3, [r7, #8]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d103      	bne.n	8008ed8 <IKS01A3_ENV_SENSOR_Init+0x140>
      {
        component_functions |= ENV_TEMPERATURE;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008ed8:	7abb      	ldrb	r3, [r7, #10]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d103      	bne.n	8008ee6 <IKS01A3_ENV_SENSOR_Init+0x14e>
      {
        component_functions |= ENV_HUMIDITY;
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f043 0304 	orr.w	r3, r3, #4
 8008ee4:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008ee6:	7a7b      	ldrb	r3, [r7, #9]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d10c      	bne.n	8008f06 <IKS01A3_ENV_SENSOR_Init+0x16e>
      {
        component_functions |= ENV_PRESSURE;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	f043 0302 	orr.w	r3, r3, #2
 8008ef2:	61bb      	str	r3, [r7, #24]
      }
      break;
 8008ef4:	e007      	b.n	8008f06 <IKS01A3_ENV_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008ef6:	f06f 0301 	mvn.w	r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008efc:	e004      	b.n	8008f08 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8008efe:	bf00      	nop
 8008f00:	e002      	b.n	8008f08 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8008f02:	bf00      	nop
 8008f04:	e000      	b.n	8008f08 <IKS01A3_ENV_SENSOR_Init+0x170>
      break;
 8008f06:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <IKS01A3_ENV_SENSOR_Init+0x17a>
  {
    return ret;
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	e031      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008f12:	2300      	movs	r3, #0
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	e02a      	b.n	8008f6e <IKS01A3_ENV_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	6a3a      	ldr	r2, [r7, #32]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d11e      	bne.n	8008f62 <IKS01A3_ENV_SENSOR_Init+0x1ca>
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	6a3a      	ldr	r2, [r7, #32]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d118      	bne.n	8008f62 <IKS01A3_ENV_SENSOR_Init+0x1ca>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008f30:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <IKS01A3_ENV_SENSOR_Init+0x1f0>)
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f38:	4814      	ldr	r0, [pc, #80]	; (8008f8c <IKS01A3_ENV_SENSOR_Init+0x1f4>)
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	005b      	lsls	r3, r3, #1
 8008f40:	4413      	add	r3, r2
 8008f42:	440b      	add	r3, r1
 8008f44:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	490e      	ldr	r1, [pc, #56]	; (8008f84 <IKS01A3_ENV_SENSOR_Init+0x1ec>)
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008f52:	4610      	mov	r0, r2
 8008f54:	4798      	blx	r3
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <IKS01A3_ENV_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8008f5c:	f06f 0304 	mvn.w	r3, #4
 8008f60:	e009      	b.n	8008f76 <IKS01A3_ENV_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d9d1      	bls.n	8008f18 <IKS01A3_ENV_SENSOR_Init+0x180>
  }

  return ret;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3728      	adds	r7, #40	; 0x28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000434 	.word	0x20000434
 8008f84:	20000404 	.word	0x20000404
 8008f88:	20000158 	.word	0x20000158
 8008f8c:	20000410 	.word	0x20000410

08008f90 <IKS01A3_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d903      	bls.n	8008fa8 <IKS01A3_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008fa0:	f06f 0301 	mvn.w	r3, #1
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e014      	b.n	8008fd2 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8008fa8:	4a0c      	ldr	r2, [pc, #48]	; (8008fdc <IKS01A3_ENV_SENSOR_GetCapabilities+0x4c>)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	490b      	ldr	r1, [pc, #44]	; (8008fe0 <IKS01A3_ENV_SENSOR_GetCapabilities+0x50>)
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <IKS01A3_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008fc6:	f06f 0306 	mvn.w	r3, #6
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	e001      	b.n	8008fd2 <IKS01A3_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000434 	.word	0x20000434
 8008fe0:	20000404 	.word	0x20000404

08008fe4 <IKS01A3_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d903      	bls.n	8008ffc <IKS01A3_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ff4:	f06f 0301 	mvn.w	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e014      	b.n	8009026 <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 8008ffc:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <IKS01A3_ENV_SENSOR_ReadID+0x4c>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	490b      	ldr	r1, [pc, #44]	; (8009034 <IKS01A3_ENV_SENSOR_ReadID+0x50>)
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	4610      	mov	r0, r2
 8009012:	4798      	blx	r3
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d003      	beq.n	8009022 <IKS01A3_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800901a:	f06f 0306 	mvn.w	r3, #6
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e001      	b.n	8009026 <IKS01A3_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009022:	2300      	movs	r3, #0
 8009024:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009026:	68fb      	ldr	r3, [r7, #12]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000434 	.word	0x20000434
 8009034:	20000404 	.word	0x20000404

08009038 <IKS01A3_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b02      	cmp	r3, #2
 8009048:	d903      	bls.n	8009052 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800904a:	f06f 0301 	mvn.w	r3, #1
 800904e:	617b      	str	r3, [r7, #20]
 8009050:	e029      	b.n	80090a6 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009052:	4a17      	ldr	r2, [pc, #92]	; (80090b0 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x78>)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	4013      	ands	r3, r2
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	429a      	cmp	r2, r3
 8009062:	d11d      	bne.n	80090a0 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009064:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x7c>)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800906c:	4812      	ldr	r0, [pc, #72]	; (80090b8 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x80>)
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	4613      	mov	r3, r2
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	4413      	add	r3, r2
 8009076:	440b      	add	r3, r1
 8009078:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	490f      	ldr	r1, [pc, #60]	; (80090bc <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x84>)
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009092:	f06f 0304 	mvn.w	r3, #4
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e005      	b.n	80090a6 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
 800909e:	e002      	b.n	80090a6 <IKS01A3_ENV_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80090a0:	f06f 0301 	mvn.w	r3, #1
 80090a4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80090a6:	697b      	ldr	r3, [r7, #20]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20000440 	.word	0x20000440
 80090b4:	20000158 	.word	0x20000158
 80090b8:	20000410 	.word	0x20000410
 80090bc:	20000404 	.word	0x20000404

080090c0 <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d903      	bls.n	80090da <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80090d2:	f06f 0301 	mvn.w	r3, #1
 80090d6:	617b      	str	r3, [r7, #20]
 80090d8:	e029      	b.n	800912e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80090da:	4a17      	ldr	r2, [pc, #92]	; (8009138 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4013      	ands	r3, r2
 80090e6:	68ba      	ldr	r2, [r7, #8]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d11d      	bne.n	8009128 <IKS01A3_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80090ec:	4a13      	ldr	r2, [pc, #76]	; (800913c <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090f4:	4812      	ldr	r0, [pc, #72]	; (8009140 <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	4613      	mov	r3, r2
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	4413      	add	r3, r2
 80090fe:	440b      	add	r3, r1
 8009100:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	490f      	ldr	r1, [pc, #60]	; (8009144 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <IKS01A3_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800911a:	f06f 0304 	mvn.w	r3, #4
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e005      	b.n	800912e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	e002      	b.n	800912e <IKS01A3_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009128:	f06f 0301 	mvn.w	r3, #1
 800912c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800912e:	697b      	ldr	r3, [r7, #20]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000440 	.word	0x20000440
 800913c:	20000158 	.word	0x20000158
 8009140:	20000410 	.word	0x20000410
 8009144:	20000404 	.word	0x20000404

08009148 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b090      	sub	sp, #64	; 0x40
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8009154:	2300      	movs	r3, #0
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8009158:	23bf      	movs	r3, #191	; 0xbf
 800915a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800915e:	4b49      	ldr	r3, [pc, #292]	; (8009284 <HTS221_0_Probe+0x13c>)
 8009160:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009162:	4b49      	ldr	r3, [pc, #292]	; (8009288 <HTS221_0_Probe+0x140>)
 8009164:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009166:	4b49      	ldr	r3, [pc, #292]	; (800928c <HTS221_0_Probe+0x144>)
 8009168:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800916a:	4b49      	ldr	r3, [pc, #292]	; (8009290 <HTS221_0_Probe+0x148>)
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800916e:	4b49      	ldr	r3, [pc, #292]	; (8009294 <HTS221_0_Probe+0x14c>)
 8009170:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8009172:	f107 031c 	add.w	r3, r7, #28
 8009176:	4619      	mov	r1, r3
 8009178:	4847      	ldr	r0, [pc, #284]	; (8009298 <HTS221_0_Probe+0x150>)
 800917a:	f7f9 f965 	bl	8002448 <HTS221_RegisterBusIO>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009184:	f06f 0306 	mvn.w	r3, #6
 8009188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918a:	e076      	b.n	800927a <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800918c:	f107 031b 	add.w	r3, r7, #27
 8009190:	4619      	mov	r1, r3
 8009192:	4841      	ldr	r0, [pc, #260]	; (8009298 <HTS221_0_Probe+0x150>)
 8009194:	f7f9 f9e1 	bl	800255a <HTS221_ReadID>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800919e:	f06f 0306 	mvn.w	r3, #6
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a4:	e069      	b.n	800927a <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 80091a6:	7efb      	ldrb	r3, [r7, #27]
 80091a8:	2bbc      	cmp	r3, #188	; 0xbc
 80091aa:	d003      	beq.n	80091b4 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80091ac:	f06f 0306 	mvn.w	r3, #6
 80091b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091b2:	e062      	b.n	800927a <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 80091b4:	f107 0308 	add.w	r3, r7, #8
 80091b8:	4619      	mov	r1, r3
 80091ba:	4837      	ldr	r0, [pc, #220]	; (8009298 <HTS221_0_Probe+0x150>)
 80091bc:	f7f9 f9e4 	bl	8002588 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80091c0:	7a3b      	ldrb	r3, [r7, #8]
 80091c2:	461a      	mov	r2, r3
 80091c4:	7a7b      	ldrb	r3, [r7, #9]
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 80091ca:	7abb      	ldrb	r3, [r7, #10]
 80091cc:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80091ce:	4313      	orrs	r3, r2
 80091d0:	4a32      	ldr	r2, [pc, #200]	; (800929c <HTS221_0_Probe+0x154>)
 80091d2:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 80091d4:	4b32      	ldr	r3, [pc, #200]	; (80092a0 <HTS221_0_Probe+0x158>)
 80091d6:	4a30      	ldr	r2, [pc, #192]	; (8009298 <HTS221_0_Probe+0x150>)
 80091d8:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 80091da:	4b32      	ldr	r3, [pc, #200]	; (80092a4 <HTS221_0_Probe+0x15c>)
 80091dc:	4a32      	ldr	r2, [pc, #200]	; (80092a8 <HTS221_0_Probe+0x160>)
 80091de:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80091e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d11d      	bne.n	8009222 <HTS221_0_Probe+0xda>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d018      	beq.n	8009222 <HTS221_0_Probe+0xda>
 80091f0:	7a3b      	ldrb	r3, [r7, #8]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d115      	bne.n	8009222 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 80091f6:	4b2d      	ldr	r3, [pc, #180]	; (80092ac <HTS221_0_Probe+0x164>)
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4a2d      	ldr	r2, [pc, #180]	; (80092b0 <HTS221_0_Probe+0x168>)
 80091fc:	492d      	ldr	r1, [pc, #180]	; (80092b4 <HTS221_0_Probe+0x16c>)
 80091fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009202:	4b28      	ldr	r3, [pc, #160]	; (80092a4 <HTS221_0_Probe+0x15c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a25      	ldr	r2, [pc, #148]	; (80092a0 <HTS221_0_Probe+0x158>)
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009216:	f06f 0304 	mvn.w	r3, #4
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921c:	e001      	b.n	8009222 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800921e:	2300      	movs	r3, #0
 8009220:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d11d      	bne.n	8009264 <HTS221_0_Probe+0x11c>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d018      	beq.n	8009264 <HTS221_0_Probe+0x11c>
 8009232:	7abb      	ldrb	r3, [r7, #10]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d115      	bne.n	8009264 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8009238:	4b1c      	ldr	r3, [pc, #112]	; (80092ac <HTS221_0_Probe+0x164>)
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	4a1c      	ldr	r2, [pc, #112]	; (80092b0 <HTS221_0_Probe+0x168>)
 800923e:	491e      	ldr	r1, [pc, #120]	; (80092b8 <HTS221_0_Probe+0x170>)
 8009240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8009244:	4b17      	ldr	r3, [pc, #92]	; (80092a4 <HTS221_0_Probe+0x15c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a15      	ldr	r2, [pc, #84]	; (80092a0 <HTS221_0_Probe+0x158>)
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	4610      	mov	r0, r2
 8009250:	4798      	blx	r3
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009258:	f06f 0304 	mvn.w	r3, #4
 800925c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800925e:	e001      	b.n	8009264 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009260:	2300      	movs	r3, #0
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d107      	bne.n	800927a <HTS221_0_Probe+0x132>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d002      	beq.n	800927a <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009274:	f06f 0304 	mvn.w	r3, #4
 8009278:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800927a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800927c:	4618      	mov	r0, r3
 800927e:	3740      	adds	r7, #64	; 0x40
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	08001fdd 	.word	0x08001fdd
 8009288:	08002059 	.word	0x08002059
 800928c:	0800210d 	.word	0x0800210d
 8009290:	080020a9 	.word	0x080020a9
 8009294:	08002171 	.word	0x08002171
 8009298:	2000044c 	.word	0x2000044c
 800929c:	20000440 	.word	0x20000440
 80092a0:	20000404 	.word	0x20000404
 80092a4:	20000434 	.word	0x20000434
 80092a8:	20000004 	.word	0x20000004
 80092ac:	20000158 	.word	0x20000158
 80092b0:	20000410 	.word	0x20000410
 80092b4:	20000028 	.word	0x20000028
 80092b8:	20000014 	.word	0x20000014

080092bc <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b090      	sub	sp, #64	; 0x40
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 80092c8:	2300      	movs	r3, #0
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 80092cc:	23bb      	movs	r3, #187	; 0xbb
 80092ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 80092d2:	4b4a      	ldr	r3, [pc, #296]	; (80093fc <LPS22HH_0_Probe+0x140>)
 80092d4:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80092d6:	4b4a      	ldr	r3, [pc, #296]	; (8009400 <LPS22HH_0_Probe+0x144>)
 80092d8:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80092da:	4b4a      	ldr	r3, [pc, #296]	; (8009404 <LPS22HH_0_Probe+0x148>)
 80092dc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80092de:	4b4a      	ldr	r3, [pc, #296]	; (8009408 <LPS22HH_0_Probe+0x14c>)
 80092e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80092e2:	4b4a      	ldr	r3, [pc, #296]	; (800940c <LPS22HH_0_Probe+0x150>)
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 80092e6:	f107 031c 	add.w	r3, r7, #28
 80092ea:	4619      	mov	r1, r3
 80092ec:	4848      	ldr	r0, [pc, #288]	; (8009410 <LPS22HH_0_Probe+0x154>)
 80092ee:	f7fc fa27 	bl	8005740 <LPS22HH_RegisterBusIO>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <LPS22HH_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80092f8:	f06f 0306 	mvn.w	r3, #6
 80092fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092fe:	e078      	b.n	80093f2 <LPS22HH_0_Probe+0x136>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8009300:	f107 031b 	add.w	r3, r7, #27
 8009304:	4619      	mov	r1, r3
 8009306:	4842      	ldr	r0, [pc, #264]	; (8009410 <LPS22HH_0_Probe+0x154>)
 8009308:	f7fc fac3 	bl	8005892 <LPS22HH_ReadID>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <LPS22HH_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009312:	f06f 0306 	mvn.w	r3, #6
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009318:	e06b      	b.n	80093f2 <LPS22HH_0_Probe+0x136>
  }
  else if (id != LPS22HH_ID)
 800931a:	7efb      	ldrb	r3, [r7, #27]
 800931c:	2bb3      	cmp	r3, #179	; 0xb3
 800931e:	d003      	beq.n	8009328 <LPS22HH_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009320:	f06f 0306 	mvn.w	r3, #6
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009326:	e064      	b.n	80093f2 <LPS22HH_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8009328:	f107 0308 	add.w	r3, r7, #8
 800932c:	4619      	mov	r1, r3
 800932e:	4838      	ldr	r0, [pc, #224]	; (8009410 <LPS22HH_0_Probe+0x154>)
 8009330:	f7fc fac6 	bl	80058c0 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009334:	7a3b      	ldrb	r3, [r7, #8]
 8009336:	461a      	mov	r2, r3
 8009338:	7a7b      	ldrb	r3, [r7, #9]
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800933e:	7abb      	ldrb	r3, [r7, #10]
 8009340:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8009342:	4313      	orrs	r3, r2
 8009344:	4a33      	ldr	r2, [pc, #204]	; (8009414 <LPS22HH_0_Probe+0x158>)
 8009346:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8009348:	4b33      	ldr	r3, [pc, #204]	; (8009418 <LPS22HH_0_Probe+0x15c>)
 800934a:	4a31      	ldr	r2, [pc, #196]	; (8009410 <LPS22HH_0_Probe+0x154>)
 800934c:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 800934e:	4b33      	ldr	r3, [pc, #204]	; (800941c <LPS22HH_0_Probe+0x160>)
 8009350:	4a33      	ldr	r2, [pc, #204]	; (8009420 <LPS22HH_0_Probe+0x164>)
 8009352:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8009354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d11e      	bne.n	8009398 <LPS22HH_0_Probe+0xdc>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d019      	beq.n	8009398 <LPS22HH_0_Probe+0xdc>
 8009364:	7a3b      	ldrb	r3, [r7, #8]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d116      	bne.n	8009398 <LPS22HH_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 800936a:	4b2e      	ldr	r3, [pc, #184]	; (8009424 <LPS22HH_0_Probe+0x168>)
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	4a2e      	ldr	r2, [pc, #184]	; (8009428 <LPS22HH_0_Probe+0x16c>)
 8009370:	3303      	adds	r3, #3
 8009372:	492e      	ldr	r1, [pc, #184]	; (800942c <LPS22HH_0_Probe+0x170>)
 8009374:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8009378:	4b28      	ldr	r3, [pc, #160]	; (800941c <LPS22HH_0_Probe+0x160>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a26      	ldr	r2, [pc, #152]	; (8009418 <LPS22HH_0_Probe+0x15c>)
 8009380:	6852      	ldr	r2, [r2, #4]
 8009382:	4610      	mov	r0, r2
 8009384:	4798      	blx	r3
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <LPS22HH_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800938c:	f06f 0304 	mvn.w	r3, #4
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009392:	e001      	b.n	8009398 <LPS22HH_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009394:	2300      	movs	r3, #0
 8009396:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8009398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d11e      	bne.n	80093dc <LPS22HH_0_Probe+0x120>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d019      	beq.n	80093dc <LPS22HH_0_Probe+0x120>
 80093a8:	7a7b      	ldrb	r3, [r7, #9]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d116      	bne.n	80093dc <LPS22HH_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 80093ae:	4b1d      	ldr	r3, [pc, #116]	; (8009424 <LPS22HH_0_Probe+0x168>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	4a1d      	ldr	r2, [pc, #116]	; (8009428 <LPS22HH_0_Probe+0x16c>)
 80093b4:	3303      	adds	r3, #3
 80093b6:	491e      	ldr	r1, [pc, #120]	; (8009430 <LPS22HH_0_Probe+0x174>)
 80093b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 80093bc:	4b17      	ldr	r3, [pc, #92]	; (800941c <LPS22HH_0_Probe+0x160>)
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a15      	ldr	r2, [pc, #84]	; (8009418 <LPS22HH_0_Probe+0x15c>)
 80093c4:	6852      	ldr	r2, [r2, #4]
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <LPS22HH_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80093d0:	f06f 0304 	mvn.w	r3, #4
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093d6:	e001      	b.n	80093dc <LPS22HH_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80093d8:	2300      	movs	r3, #0
 80093da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 80093dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d107      	bne.n	80093f2 <LPS22HH_0_Probe+0x136>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <LPS22HH_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80093ec:	f06f 0304 	mvn.w	r3, #4
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 80093f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3740      	adds	r7, #64	; 0x40
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	08001fdd 	.word	0x08001fdd
 8009400:	08002059 	.word	0x08002059
 8009404:	0800210d 	.word	0x0800210d
 8009408:	080020a9 	.word	0x080020a9
 800940c:	08002171 	.word	0x08002171
 8009410:	20000480 	.word	0x20000480
 8009414:	20000440 	.word	0x20000440
 8009418:	20000404 	.word	0x20000404
 800941c:	20000434 	.word	0x20000434
 8009420:	200000a4 	.word	0x200000a4
 8009424:	20000158 	.word	0x20000158
 8009428:	20000410 	.word	0x20000410
 800942c:	200000c8 	.word	0x200000c8
 8009430:	200000b4 	.word	0x200000b4

08009434 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b090      	sub	sp, #64	; 0x40
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800943c:	2300      	movs	r3, #0
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8009440:	2300      	movs	r3, #0
 8009442:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8009444:	2395      	movs	r3, #149	; 0x95
 8009446:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A3_I2C_Init;
 800944a:	4b3f      	ldr	r3, [pc, #252]	; (8009548 <STTS751_0_Probe+0x114>)
 800944c:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800944e:	4b3f      	ldr	r3, [pc, #252]	; (800954c <STTS751_0_Probe+0x118>)
 8009450:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009452:	4b3f      	ldr	r3, [pc, #252]	; (8009550 <STTS751_0_Probe+0x11c>)
 8009454:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009456:	4b3f      	ldr	r3, [pc, #252]	; (8009554 <STTS751_0_Probe+0x120>)
 8009458:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800945a:	4b3f      	ldr	r3, [pc, #252]	; (8009558 <STTS751_0_Probe+0x124>)
 800945c:	637b      	str	r3, [r7, #52]	; 0x34

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 800945e:	f107 031c 	add.w	r3, r7, #28
 8009462:	4619      	mov	r1, r3
 8009464:	483d      	ldr	r0, [pc, #244]	; (800955c <STTS751_0_Probe+0x128>)
 8009466:	f7fe ffa5 	bl	80083b4 <STTS751_RegisterBusIO>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <STTS751_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009470:	f06f 0306 	mvn.w	r3, #6
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009476:	e061      	b.n	800953c <STTS751_0_Probe+0x108>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8009478:	f107 031b 	add.w	r3, r7, #27
 800947c:	4619      	mov	r1, r3
 800947e:	4837      	ldr	r0, [pc, #220]	; (800955c <STTS751_0_Probe+0x128>)
 8009480:	f7ff f837 	bl	80084f2 <STTS751_ReadID>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <STTS751_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800948a:	f06f 0306 	mvn.w	r3, #6
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009490:	e054      	b.n	800953c <STTS751_0_Probe+0x108>
  }
  else if (id != STTS751_ID_MAN)
 8009492:	7efb      	ldrb	r3, [r7, #27]
 8009494:	2b53      	cmp	r3, #83	; 0x53
 8009496:	d003      	beq.n	80094a0 <STTS751_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009498:	f06f 0306 	mvn.w	r3, #6
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800949e:	e04d      	b.n	800953c <STTS751_0_Probe+0x108>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 80094a0:	f107 0308 	add.w	r3, r7, #8
 80094a4:	4619      	mov	r1, r3
 80094a6:	482d      	ldr	r0, [pc, #180]	; (800955c <STTS751_0_Probe+0x128>)
 80094a8:	f7ff f83e 	bl	8008528 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80094ac:	7a3b      	ldrb	r3, [r7, #8]
 80094ae:	461a      	mov	r2, r3
 80094b0:	7a7b      	ldrb	r3, [r7, #9]
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 80094b6:	7abb      	ldrb	r3, [r7, #10]
 80094b8:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 80094ba:	4313      	orrs	r3, r2
 80094bc:	4a28      	ldr	r2, [pc, #160]	; (8009560 <STTS751_0_Probe+0x12c>)
 80094be:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 80094c0:	4b28      	ldr	r3, [pc, #160]	; (8009564 <STTS751_0_Probe+0x130>)
 80094c2:	4a26      	ldr	r2, [pc, #152]	; (800955c <STTS751_0_Probe+0x128>)
 80094c4:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 80094c6:	4b28      	ldr	r3, [pc, #160]	; (8009568 <STTS751_0_Probe+0x134>)
 80094c8:	4a28      	ldr	r2, [pc, #160]	; (800956c <STTS751_0_Probe+0x138>)
 80094ca:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 80094cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d11e      	bne.n	8009510 <STTS751_0_Probe+0xdc>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d019      	beq.n	8009510 <STTS751_0_Probe+0xdc>
 80094dc:	7a3b      	ldrb	r3, [r7, #8]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d116      	bne.n	8009510 <STTS751_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 80094e2:	4b23      	ldr	r3, [pc, #140]	; (8009570 <STTS751_0_Probe+0x13c>)
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4a23      	ldr	r2, [pc, #140]	; (8009574 <STTS751_0_Probe+0x140>)
 80094e8:	3306      	adds	r3, #6
 80094ea:	4923      	ldr	r1, [pc, #140]	; (8009578 <STTS751_0_Probe+0x144>)
 80094ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 80094f0:	4b1d      	ldr	r3, [pc, #116]	; (8009568 <STTS751_0_Probe+0x134>)
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a1b      	ldr	r2, [pc, #108]	; (8009564 <STTS751_0_Probe+0x130>)
 80094f8:	6892      	ldr	r2, [r2, #8]
 80094fa:	4610      	mov	r0, r2
 80094fc:	4798      	blx	r3
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <STTS751_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009504:	f06f 0304 	mvn.w	r3, #4
 8009508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800950a:	e001      	b.n	8009510 <STTS751_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800950c:	2300      	movs	r3, #0
 800950e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	2b00      	cmp	r3, #0
 8009514:	d107      	bne.n	8009526 <STTS751_0_Probe+0xf2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <STTS751_0_Probe+0xf2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009520:	f06f 0304 	mvn.w	r3, #4
 8009524:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8009526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009528:	2b00      	cmp	r3, #0
 800952a:	d107      	bne.n	800953c <STTS751_0_Probe+0x108>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009536:	f06f 0304 	mvn.w	r3, #4
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800953c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800953e:	4618      	mov	r0, r3
 8009540:	3740      	adds	r7, #64	; 0x40
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	08001fdd 	.word	0x08001fdd
 800954c:	08002059 	.word	0x08002059
 8009550:	0800210d 	.word	0x0800210d
 8009554:	080020a9 	.word	0x080020a9
 8009558:	08002171 	.word	0x08002171
 800955c:	200004b4 	.word	0x200004b4
 8009560:	20000440 	.word	0x20000440
 8009564:	20000404 	.word	0x20000404
 8009568:	20000434 	.word	0x20000434
 800956c:	20000134 	.word	0x20000134
 8009570:	20000158 	.word	0x20000158
 8009574:	20000410 	.word	0x20000410
 8009578:	20000144 	.word	0x20000144

0800957c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08e      	sub	sp, #56	; 0x38
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009586:	2300      	movs	r3, #0
 8009588:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800958a:	2301      	movs	r3, #1
 800958c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b02      	cmp	r3, #2
 8009596:	d06e      	beq.n	8009676 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b02      	cmp	r3, #2
 800959c:	f200 809d 	bhi.w	80096da <IKS01A3_MOTION_SENSOR_Init+0x15e>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <IKS01A3_MOTION_SENSOR_Init+0x32>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d032      	beq.n	8009612 <IKS01A3_MOTION_SENSOR_Init+0x96>
 80095ac:	e095      	b.n	80096da <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80095ae:	6838      	ldr	r0, [r7, #0]
 80095b0:	f000 fa00 	bl	80099b4 <LSM6DSO_0_Probe>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	e0cc      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80095c0:	4a68      	ldr	r2, [pc, #416]	; (8009764 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	4967      	ldr	r1, [pc, #412]	; (8009768 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80095d2:	f107 010c 	add.w	r1, r7, #12
 80095d6:	4610      	mov	r0, r2
 80095d8:	4798      	blx	r3
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80095e0:	f06f 0306 	mvn.w	r3, #6
 80095e4:	e0b9      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80095e6:	7b3b      	ldrb	r3, [r7, #12]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d103      	bne.n	80095f4 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	f043 0302 	orr.w	r3, r3, #2
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80095f4:	7b7b      	ldrb	r3, [r7, #13]
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d103      	bne.n	8009602 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80095fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fc:	f043 0301 	orr.w	r3, r3, #1
 8009600:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009602:	7bbb      	ldrb	r3, [r7, #14]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d16c      	bne.n	80096e2 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f043 0304 	orr.w	r3, r3, #4
 800960e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009610:	e067      	b.n	80096e2 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009612:	6838      	ldr	r0, [r7, #0]
 8009614:	f000 fa8e 	bl	8009b34 <LIS2DW12_0_Probe>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	e09a      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009624:	4a4f      	ldr	r2, [pc, #316]	; (8009764 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	494e      	ldr	r1, [pc, #312]	; (8009768 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009636:	f107 010c 	add.w	r1, r7, #12
 800963a:	4610      	mov	r0, r2
 800963c:	4798      	blx	r3
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009644:	f06f 0306 	mvn.w	r3, #6
 8009648:	e087      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800964a:	7b3b      	ldrb	r3, [r7, #12]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d103      	bne.n	8009658 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	f043 0302 	orr.w	r3, r3, #2
 8009656:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009658:	7b7b      	ldrb	r3, [r7, #13]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d103      	bne.n	8009666 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d13c      	bne.n	80096e6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800966c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966e:	f043 0304 	orr.w	r3, r3, #4
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8009674:	e037      	b.n	80096e6 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8009676:	6838      	ldr	r0, [r7, #0]
 8009678:	f000 fb04 	bl	8009c84 <LIS2MDL_0_Probe>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	e068      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009688:	4a36      	ldr	r2, [pc, #216]	; (8009764 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	4935      	ldr	r1, [pc, #212]	; (8009768 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800969a:	f107 010c 	add.w	r1, r7, #12
 800969e:	4610      	mov	r0, r2
 80096a0:	4798      	blx	r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80096a8:	f06f 0306 	mvn.w	r3, #6
 80096ac:	e055      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80096ae:	7b3b      	ldrb	r3, [r7, #12]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d103      	bne.n	80096bc <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	f043 0302 	orr.w	r3, r3, #2
 80096ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80096bc:	7b7b      	ldrb	r3, [r7, #13]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d103      	bne.n	80096ca <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80096c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c4:	f043 0301 	orr.w	r3, r3, #1
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d10c      	bne.n	80096ea <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	f043 0304 	orr.w	r3, r3, #4
 80096d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80096d8:	e007      	b.n	80096ea <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80096da:	f06f 0301 	mvn.w	r3, #1
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80096e0:	e004      	b.n	80096ec <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 80096ea:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80096ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80096f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f4:	e031      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80096f6:	2300      	movs	r3, #0
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096fa:	e02a      	b.n	8009752 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	4013      	ands	r3, r2
 8009702:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009704:	429a      	cmp	r2, r3
 8009706:	d11e      	bne.n	8009746 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8009708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	4013      	ands	r3, r2
 800970e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009710:	429a      	cmp	r2, r3
 8009712:	d118      	bne.n	8009746 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009714:	4a15      	ldr	r2, [pc, #84]	; (800976c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800971c:	4814      	ldr	r0, [pc, #80]	; (8009770 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	4613      	mov	r3, r2
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	4413      	add	r3, r2
 8009726:	440b      	add	r3, r1
 8009728:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	490e      	ldr	r1, [pc, #56]	; (8009768 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009736:	4610      	mov	r0, r2
 8009738:	4798      	blx	r3
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009740:	f06f 0304 	mvn.w	r3, #4
 8009744:	e009      	b.n	800975a <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 800974c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974e:	3301      	adds	r3, #1
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	2b02      	cmp	r3, #2
 8009756:	d9d1      	bls.n	80096fc <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800975a:	4618      	mov	r0, r3
 800975c:	3738      	adds	r7, #56	; 0x38
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	2000051c 	.word	0x2000051c
 8009768:	200004ec 	.word	0x200004ec
 800976c:	2000016c 	.word	0x2000016c
 8009770:	200004f8 	.word	0x200004f8

08009774 <IKS01A3_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS01A3_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d903      	bls.n	800978c <IKS01A3_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009784:	f06f 0301 	mvn.w	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	e014      	b.n	80097b6 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800978c:	4a0c      	ldr	r2, [pc, #48]	; (80097c0 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x4c>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	490b      	ldr	r1, [pc, #44]	; (80097c4 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x50>)
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800979e:	6839      	ldr	r1, [r7, #0]
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097aa:	f06f 0306 	mvn.w	r3, #6
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e001      	b.n	80097b6 <IKS01A3_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80097b6:	68fb      	ldr	r3, [r7, #12]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	2000051c 	.word	0x2000051c
 80097c4:	200004ec 	.word	0x200004ec

080097c8 <IKS01A3_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d903      	bls.n	80097e0 <IKS01A3_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80097d8:	f06f 0301 	mvn.w	r3, #1
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e014      	b.n	800980a <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 80097e0:	4a0c      	ldr	r2, [pc, #48]	; (8009814 <IKS01A3_MOTION_SENSOR_ReadID+0x4c>)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	490b      	ldr	r1, [pc, #44]	; (8009818 <IKS01A3_MOTION_SENSOR_ReadID+0x50>)
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <IKS01A3_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097fe:	f06f 0306 	mvn.w	r3, #6
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	e001      	b.n	800980a <IKS01A3_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009806:	2300      	movs	r3, #0
 8009808:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800980a:	68fb      	ldr	r3, [r7, #12]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	2000051c 	.word	0x2000051c
 8009818:	200004ec 	.word	0x200004ec

0800981c <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d903      	bls.n	8009836 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800982e:	f06f 0301 	mvn.w	r3, #1
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e029      	b.n	800988a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009836:	4a17      	ldr	r2, [pc, #92]	; (8009894 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4013      	ands	r3, r2
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	429a      	cmp	r2, r3
 8009846:	d11d      	bne.n	8009884 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009848:	4a13      	ldr	r2, [pc, #76]	; (8009898 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009850:	4812      	ldr	r0, [pc, #72]	; (800989c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	4413      	add	r3, r2
 800985a:	440b      	add	r3, r1
 800985c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	490f      	ldr	r1, [pc, #60]	; (80098a0 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009876:	f06f 0304 	mvn.w	r3, #4
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e005      	b.n	800988a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800987e:	2300      	movs	r3, #0
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	e002      	b.n	800988a <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009884:	f06f 0301 	mvn.w	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800988a:	697b      	ldr	r3, [r7, #20]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20000528 	.word	0x20000528
 8009898:	2000016c 	.word	0x2000016c
 800989c:	200004f8 	.word	0x200004f8
 80098a0:	200004ec 	.word	0x200004ec

080098a4 <IKS01A3_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float *Odr)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d903      	bls.n	80098be <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80098b6:	f06f 0301 	mvn.w	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	e029      	b.n	8009912 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80098be:	4a17      	ldr	r2, [pc, #92]	; (800991c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x78>)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4013      	ands	r3, r2
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d11d      	bne.n	800990c <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80098d0:	4a13      	ldr	r2, [pc, #76]	; (8009920 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80098d8:	4812      	ldr	r0, [pc, #72]	; (8009924 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x80>)
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4613      	mov	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4413      	add	r3, r2
 80098e2:	440b      	add	r3, r1
 80098e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	490f      	ldr	r1, [pc, #60]	; (8009928 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x84>)
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4610      	mov	r0, r2
 80098f6:	4798      	blx	r3
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d003      	beq.n	8009906 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80098fe:	f06f 0304 	mvn.w	r3, #4
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e005      	b.n	8009912 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009906:	2300      	movs	r3, #0
 8009908:	617b      	str	r3, [r7, #20]
 800990a:	e002      	b.n	8009912 <IKS01A3_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800990c:	f06f 0301 	mvn.w	r3, #1
 8009910:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009912:	697b      	ldr	r3, [r7, #20]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	20000528 	.word	0x20000528
 8009920:	2000016c 	.word	0x2000016c
 8009924:	200004f8 	.word	0x200004f8
 8009928:	200004ec 	.word	0x200004ec

0800992c <IKS01A3_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d903      	bls.n	8009946 <IKS01A3_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800993e:	f06f 0301 	mvn.w	r3, #1
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	e029      	b.n	800999a <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009946:	4a17      	ldr	r2, [pc, #92]	; (80099a4 <IKS01A3_MOTION_SENSOR_GetFullScale+0x78>)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4013      	ands	r3, r2
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	429a      	cmp	r2, r3
 8009956:	d11d      	bne.n	8009994 <IKS01A3_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 8009958:	4a13      	ldr	r2, [pc, #76]	; (80099a8 <IKS01A3_MOTION_SENSOR_GetFullScale+0x7c>)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009960:	4812      	ldr	r0, [pc, #72]	; (80099ac <IKS01A3_MOTION_SENSOR_GetFullScale+0x80>)
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4613      	mov	r3, r2
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	4413      	add	r3, r2
 800996a:	440b      	add	r3, r1
 800996c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	490f      	ldr	r1, [pc, #60]	; (80099b0 <IKS01A3_MOTION_SENSOR_GetFullScale+0x84>)
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <IKS01A3_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009986:	f06f 0304 	mvn.w	r3, #4
 800998a:	617b      	str	r3, [r7, #20]
 800998c:	e005      	b.n	800999a <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	e002      	b.n	800999a <IKS01A3_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009994:	f06f 0301 	mvn.w	r3, #1
 8009998:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800999a:	697b      	ldr	r3, [r7, #20]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	20000528 	.word	0x20000528
 80099a8:	2000016c 	.word	0x2000016c
 80099ac:	200004f8 	.word	0x200004f8
 80099b0:	200004ec 	.word	0x200004ec

080099b4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b094      	sub	sp, #80	; 0x50
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80099bc:	2300      	movs	r3, #0
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80099c0:	2300      	movs	r3, #0
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80099c4:	23d7      	movs	r3, #215	; 0xd7
 80099c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80099ca:	4b4b      	ldr	r3, [pc, #300]	; (8009af8 <LSM6DSO_0_Probe+0x144>)
 80099cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80099ce:	4b4b      	ldr	r3, [pc, #300]	; (8009afc <LSM6DSO_0_Probe+0x148>)
 80099d0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80099d2:	4b4b      	ldr	r3, [pc, #300]	; (8009b00 <LSM6DSO_0_Probe+0x14c>)
 80099d4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80099d6:	4b4b      	ldr	r3, [pc, #300]	; (8009b04 <LSM6DSO_0_Probe+0x150>)
 80099d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80099da:	4b4b      	ldr	r3, [pc, #300]	; (8009b08 <LSM6DSO_0_Probe+0x154>)
 80099dc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80099de:	4b4b      	ldr	r3, [pc, #300]	; (8009b0c <LSM6DSO_0_Probe+0x158>)
 80099e0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80099e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099e6:	4619      	mov	r1, r3
 80099e8:	4849      	ldr	r0, [pc, #292]	; (8009b10 <LSM6DSO_0_Probe+0x15c>)
 80099ea:	f7fc fd03 	bl	80063f4 <LSM6DSO_RegisterBusIO>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d003      	beq.n	80099fc <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80099f4:	f06f 0306 	mvn.w	r3, #6
 80099f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099fa:	e077      	b.n	8009aec <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80099fc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009a00:	4619      	mov	r1, r3
 8009a02:	4843      	ldr	r0, [pc, #268]	; (8009b10 <LSM6DSO_0_Probe+0x15c>)
 8009a04:	f7fc fdfc 	bl	8006600 <LSM6DSO_ReadID>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a0e:	f06f 0306 	mvn.w	r3, #6
 8009a12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a14:	e06a      	b.n	8009aec <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8009a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a1a:	2b6c      	cmp	r3, #108	; 0x6c
 8009a1c:	d003      	beq.n	8009a26 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009a1e:	f06f 0306 	mvn.w	r3, #6
 8009a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a24:	e062      	b.n	8009aec <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009a26:	f107 030c 	add.w	r3, r7, #12
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4838      	ldr	r0, [pc, #224]	; (8009b10 <LSM6DSO_0_Probe+0x15c>)
 8009a2e:	f7fc fdfd 	bl	800662c <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009a32:	7b7b      	ldrb	r3, [r7, #13]
 8009a34:	461a      	mov	r2, r3
 8009a36:	7b3b      	ldrb	r3, [r7, #12]
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4313      	orrs	r3, r2
 8009a42:	4a34      	ldr	r2, [pc, #208]	; (8009b14 <LSM6DSO_0_Probe+0x160>)
 8009a44:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8009a46:	4b34      	ldr	r3, [pc, #208]	; (8009b18 <LSM6DSO_0_Probe+0x164>)
 8009a48:	4a31      	ldr	r2, [pc, #196]	; (8009b10 <LSM6DSO_0_Probe+0x15c>)
 8009a4a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009a4c:	4b33      	ldr	r3, [pc, #204]	; (8009b1c <LSM6DSO_0_Probe+0x168>)
 8009a4e:	4a34      	ldr	r2, [pc, #208]	; (8009b20 <LSM6DSO_0_Probe+0x16c>)
 8009a50:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d11d      	bne.n	8009a94 <LSM6DSO_0_Probe+0xe0>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d018      	beq.n	8009a94 <LSM6DSO_0_Probe+0xe0>
 8009a62:	7b7b      	ldrb	r3, [r7, #13]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d115      	bne.n	8009a94 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8009a68:	4b2e      	ldr	r3, [pc, #184]	; (8009b24 <LSM6DSO_0_Probe+0x170>)
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	4a2e      	ldr	r2, [pc, #184]	; (8009b28 <LSM6DSO_0_Probe+0x174>)
 8009a6e:	492f      	ldr	r1, [pc, #188]	; (8009b2c <LSM6DSO_0_Probe+0x178>)
 8009a70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009a74:	4b29      	ldr	r3, [pc, #164]	; (8009b1c <LSM6DSO_0_Probe+0x168>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a27      	ldr	r2, [pc, #156]	; (8009b18 <LSM6DSO_0_Probe+0x164>)
 8009a7c:	6812      	ldr	r2, [r2, #0]
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4798      	blx	r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a88:	f06f 0304 	mvn.w	r3, #4
 8009a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a8e:	e001      	b.n	8009a94 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009a90:	2300      	movs	r3, #0
 8009a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d11d      	bne.n	8009ad6 <LSM6DSO_0_Probe+0x122>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d018      	beq.n	8009ad6 <LSM6DSO_0_Probe+0x122>
 8009aa4:	7b3b      	ldrb	r3, [r7, #12]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d115      	bne.n	8009ad6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009aaa:	4b1e      	ldr	r3, [pc, #120]	; (8009b24 <LSM6DSO_0_Probe+0x170>)
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	4a1e      	ldr	r2, [pc, #120]	; (8009b28 <LSM6DSO_0_Probe+0x174>)
 8009ab0:	491f      	ldr	r1, [pc, #124]	; (8009b30 <LSM6DSO_0_Probe+0x17c>)
 8009ab2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009ab6:	4b19      	ldr	r3, [pc, #100]	; (8009b1c <LSM6DSO_0_Probe+0x168>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a16      	ldr	r2, [pc, #88]	; (8009b18 <LSM6DSO_0_Probe+0x164>)
 8009abe:	6812      	ldr	r2, [r2, #0]
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009aca:	f06f 0304 	mvn.w	r3, #4
 8009ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ad0:	e001      	b.n	8009ad6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d107      	bne.n	8009aec <LSM6DSO_0_Probe+0x138>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ae6:	f06f 0304 	mvn.w	r3, #4
 8009aea:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3750      	adds	r7, #80	; 0x50
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	08001fdd 	.word	0x08001fdd
 8009afc:	08002059 	.word	0x08002059
 8009b00:	0800210d 	.word	0x0800210d
 8009b04:	080020a9 	.word	0x080020a9
 8009b08:	08002171 	.word	0x08002171
 8009b0c:	0800a2cd 	.word	0x0800a2cd
 8009b10:	20000534 	.word	0x20000534
 8009b14:	20000528 	.word	0x20000528
 8009b18:	200004ec 	.word	0x200004ec
 8009b1c:	2000051c 	.word	0x2000051c
 8009b20:	200000dc 	.word	0x200000dc
 8009b24:	2000016c 	.word	0x2000016c
 8009b28:	200004f8 	.word	0x200004f8
 8009b2c:	20000110 	.word	0x20000110
 8009b30:	200000ec 	.word	0x200000ec

08009b34 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b094      	sub	sp, #80	; 0x50
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8009b40:	2300      	movs	r3, #0
 8009b42:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009b44:	2333      	movs	r3, #51	; 0x33
 8009b46:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009b4a:	4b40      	ldr	r3, [pc, #256]	; (8009c4c <LIS2DW12_0_Probe+0x118>)
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009b4e:	4b40      	ldr	r3, [pc, #256]	; (8009c50 <LIS2DW12_0_Probe+0x11c>)
 8009b50:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009b52:	4b40      	ldr	r3, [pc, #256]	; (8009c54 <LIS2DW12_0_Probe+0x120>)
 8009b54:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009b56:	4b40      	ldr	r3, [pc, #256]	; (8009c58 <LIS2DW12_0_Probe+0x124>)
 8009b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009b5a:	4b40      	ldr	r3, [pc, #256]	; (8009c5c <LIS2DW12_0_Probe+0x128>)
 8009b5c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009b5e:	4b40      	ldr	r3, [pc, #256]	; (8009c60 <LIS2DW12_0_Probe+0x12c>)
 8009b60:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b66:	4619      	mov	r1, r3
 8009b68:	483e      	ldr	r0, [pc, #248]	; (8009c64 <LIS2DW12_0_Probe+0x130>)
 8009b6a:	f7f9 fa8f 	bl	800308c <LIS2DW12_RegisterBusIO>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b74:	f06f 0306 	mvn.w	r3, #6
 8009b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b7a:	e062      	b.n	8009c42 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009b7c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009b80:	4619      	mov	r1, r3
 8009b82:	4838      	ldr	r0, [pc, #224]	; (8009c64 <LIS2DW12_0_Probe+0x130>)
 8009b84:	f7f9 fb70 	bl	8003268 <LIS2DW12_ReadID>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b8e:	f06f 0306 	mvn.w	r3, #6
 8009b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b94:	e055      	b.n	8009c42 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8009b96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b9a:	2b44      	cmp	r3, #68	; 0x44
 8009b9c:	d003      	beq.n	8009ba6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009b9e:	f06f 0306 	mvn.w	r3, #6
 8009ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ba4:	e04d      	b.n	8009c42 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8009ba6:	f107 030c 	add.w	r3, r7, #12
 8009baa:	4619      	mov	r1, r3
 8009bac:	482d      	ldr	r0, [pc, #180]	; (8009c64 <LIS2DW12_0_Probe+0x130>)
 8009bae:	f7f9 fb71 	bl	8003294 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009bb2:	7b7b      	ldrb	r3, [r7, #13]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	7b3b      	ldrb	r3, [r7, #12]
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	4a29      	ldr	r2, [pc, #164]	; (8009c68 <LIS2DW12_0_Probe+0x134>)
 8009bc4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8009bc6:	4b29      	ldr	r3, [pc, #164]	; (8009c6c <LIS2DW12_0_Probe+0x138>)
 8009bc8:	4a26      	ldr	r2, [pc, #152]	; (8009c64 <LIS2DW12_0_Probe+0x130>)
 8009bca:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8009bcc:	4b28      	ldr	r3, [pc, #160]	; (8009c70 <LIS2DW12_0_Probe+0x13c>)
 8009bce:	4a29      	ldr	r2, [pc, #164]	; (8009c74 <LIS2DW12_0_Probe+0x140>)
 8009bd0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11e      	bne.n	8009c16 <LIS2DW12_0_Probe+0xe2>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d019      	beq.n	8009c16 <LIS2DW12_0_Probe+0xe2>
 8009be2:	7b3b      	ldrb	r3, [r7, #12]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d116      	bne.n	8009c16 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009be8:	4b23      	ldr	r3, [pc, #140]	; (8009c78 <LIS2DW12_0_Probe+0x144>)
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	4a23      	ldr	r2, [pc, #140]	; (8009c7c <LIS2DW12_0_Probe+0x148>)
 8009bee:	3303      	adds	r3, #3
 8009bf0:	4923      	ldr	r1, [pc, #140]	; (8009c80 <LIS2DW12_0_Probe+0x14c>)
 8009bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <LIS2DW12_0_Probe+0x13c>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a1b      	ldr	r2, [pc, #108]	; (8009c6c <LIS2DW12_0_Probe+0x138>)
 8009bfe:	6852      	ldr	r2, [r2, #4]
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c0a:	f06f 0304 	mvn.w	r3, #4
 8009c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c10:	e001      	b.n	8009c16 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009c12:	2300      	movs	r3, #0
 8009c14:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d107      	bne.n	8009c2c <LIS2DW12_0_Probe+0xf8>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c26:	f06f 0304 	mvn.w	r3, #4
 8009c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d107      	bne.n	8009c42 <LIS2DW12_0_Probe+0x10e>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f003 0304 	and.w	r3, r3, #4
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009c3c:	f06f 0304 	mvn.w	r3, #4
 8009c40:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3750      	adds	r7, #80	; 0x50
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	08001fdd 	.word	0x08001fdd
 8009c50:	08002059 	.word	0x08002059
 8009c54:	0800210d 	.word	0x0800210d
 8009c58:	080020a9 	.word	0x080020a9
 8009c5c:	08002171 	.word	0x08002171
 8009c60:	0800a2cd 	.word	0x0800a2cd
 8009c64:	2000056c 	.word	0x2000056c
 8009c68:	20000528 	.word	0x20000528
 8009c6c:	200004ec 	.word	0x200004ec
 8009c70:	2000051c 	.word	0x2000051c
 8009c74:	2000003c 	.word	0x2000003c
 8009c78:	2000016c 	.word	0x2000016c
 8009c7c:	200004f8 	.word	0x200004f8
 8009c80:	2000004c 	.word	0x2000004c

08009c84 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b094      	sub	sp, #80	; 0x50
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009c90:	2300      	movs	r3, #0
 8009c92:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009c94:	233d      	movs	r3, #61	; 0x3d
 8009c96:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009c9a:	4b40      	ldr	r3, [pc, #256]	; (8009d9c <LIS2MDL_0_Probe+0x118>)
 8009c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009c9e:	4b40      	ldr	r3, [pc, #256]	; (8009da0 <LIS2MDL_0_Probe+0x11c>)
 8009ca0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009ca2:	4b40      	ldr	r3, [pc, #256]	; (8009da4 <LIS2MDL_0_Probe+0x120>)
 8009ca4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8009ca6:	4b40      	ldr	r3, [pc, #256]	; (8009da8 <LIS2MDL_0_Probe+0x124>)
 8009ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009caa:	4b40      	ldr	r3, [pc, #256]	; (8009dac <LIS2MDL_0_Probe+0x128>)
 8009cac:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8009cae:	4b40      	ldr	r3, [pc, #256]	; (8009db0 <LIS2MDL_0_Probe+0x12c>)
 8009cb0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 8009cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	483e      	ldr	r0, [pc, #248]	; (8009db4 <LIS2MDL_0_Probe+0x130>)
 8009cba:	f7fa fd3b 	bl	8004734 <LIS2MDL_RegisterBusIO>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009cc4:	f06f 0306 	mvn.w	r3, #6
 8009cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cca:	e062      	b.n	8009d92 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8009ccc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4838      	ldr	r0, [pc, #224]	; (8009db4 <LIS2MDL_0_Probe+0x130>)
 8009cd4:	f7fa fe4a 	bl	800496c <LIS2MDL_ReadID>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009cde:	f06f 0306 	mvn.w	r3, #6
 8009ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ce4:	e055      	b.n	8009d92 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 8009ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cea:	2b40      	cmp	r3, #64	; 0x40
 8009cec:	d003      	beq.n	8009cf6 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009cee:	f06f 0306 	mvn.w	r3, #6
 8009cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cf4:	e04d      	b.n	8009d92 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8009cf6:	f107 030c 	add.w	r3, r7, #12
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	482d      	ldr	r0, [pc, #180]	; (8009db4 <LIS2MDL_0_Probe+0x130>)
 8009cfe:	f7fa fe5b 	bl	80049b8 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009d02:	7b7b      	ldrb	r3, [r7, #13]
 8009d04:	461a      	mov	r2, r3
 8009d06:	7b3b      	ldrb	r3, [r7, #12]
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4313      	orrs	r3, r2
 8009d12:	4a29      	ldr	r2, [pc, #164]	; (8009db8 <LIS2MDL_0_Probe+0x134>)
 8009d14:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009d16:	4b29      	ldr	r3, [pc, #164]	; (8009dbc <LIS2MDL_0_Probe+0x138>)
 8009d18:	4a26      	ldr	r2, [pc, #152]	; (8009db4 <LIS2MDL_0_Probe+0x130>)
 8009d1a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009d1c:	4b28      	ldr	r3, [pc, #160]	; (8009dc0 <LIS2MDL_0_Probe+0x13c>)
 8009d1e:	4a29      	ldr	r2, [pc, #164]	; (8009dc4 <LIS2MDL_0_Probe+0x140>)
 8009d20:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8009d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d11e      	bne.n	8009d66 <LIS2MDL_0_Probe+0xe2>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f003 0304 	and.w	r3, r3, #4
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d019      	beq.n	8009d66 <LIS2MDL_0_Probe+0xe2>
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	d116      	bne.n	8009d66 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009d38:	4b23      	ldr	r3, [pc, #140]	; (8009dc8 <LIS2MDL_0_Probe+0x144>)
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	4a23      	ldr	r2, [pc, #140]	; (8009dcc <LIS2MDL_0_Probe+0x148>)
 8009d3e:	3306      	adds	r3, #6
 8009d40:	4923      	ldr	r1, [pc, #140]	; (8009dd0 <LIS2MDL_0_Probe+0x14c>)
 8009d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009d46:	4b1e      	ldr	r3, [pc, #120]	; (8009dc0 <LIS2MDL_0_Probe+0x13c>)
 8009d48:	689b      	ldr	r3, [r3, #8]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a1b      	ldr	r2, [pc, #108]	; (8009dbc <LIS2MDL_0_Probe+0x138>)
 8009d4e:	6892      	ldr	r2, [r2, #8]
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d5a:	f06f 0304 	mvn.w	r3, #4
 8009d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d60:	e001      	b.n	8009d66 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d107      	bne.n	8009d7c <LIS2MDL_0_Probe+0xf8>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d002      	beq.n	8009d7c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d76:	f06f 0304 	mvn.w	r3, #4
 8009d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d107      	bne.n	8009d92 <LIS2MDL_0_Probe+0x10e>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009d8c:	f06f 0304 	mvn.w	r3, #4
 8009d90:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8009d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3750      	adds	r7, #80	; 0x50
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	08001fdd 	.word	0x08001fdd
 8009da0:	08002059 	.word	0x08002059
 8009da4:	0800210d 	.word	0x0800210d
 8009da8:	080020a9 	.word	0x080020a9
 8009dac:	08002171 	.word	0x08002171
 8009db0:	0800a2cd 	.word	0x0800a2cd
 8009db4:	200005a8 	.word	0x200005a8
 8009db8:	20000528 	.word	0x20000528
 8009dbc:	200004ec 	.word	0x200004ec
 8009dc0:	2000051c 	.word	0x2000051c
 8009dc4:	20000070 	.word	0x20000070
 8009dc8:	2000016c 	.word	0x2000016c
 8009dcc:	200004f8 	.word	0x200004f8
 8009dd0:	20000080 	.word	0x20000080

08009dd4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	4a04      	ldr	r2, [pc, #16]	; (8009df4 <BSP_LED_Init+0x20>)
 8009de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009de6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	0800ff64 	.word	0x0800ff64

08009df8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dfe:	4b1c      	ldr	r3, [pc, #112]	; (8009e70 <LED_USER_GPIO_Init+0x78>)
 8009e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e02:	4a1b      	ldr	r2, [pc, #108]	; (8009e70 <LED_USER_GPIO_Init+0x78>)
 8009e04:	f043 0301 	orr.w	r3, r3, #1
 8009e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e0a:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <LED_USER_GPIO_Init+0x78>)
 8009e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	60bb      	str	r3, [r7, #8]
 8009e14:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e16:	f107 030c 	add.w	r3, r7, #12
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	605a      	str	r2, [r3, #4]
 8009e20:	609a      	str	r2, [r3, #8]
 8009e22:	60da      	str	r2, [r3, #12]
 8009e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e26:	4b12      	ldr	r3, [pc, #72]	; (8009e70 <LED_USER_GPIO_Init+0x78>)
 8009e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2a:	4a11      	ldr	r2, [pc, #68]	; (8009e70 <LED_USER_GPIO_Init+0x78>)
 8009e2c:	f043 0301 	orr.w	r3, r3, #1
 8009e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e32:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <LED_USER_GPIO_Init+0x78>)
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	607b      	str	r3, [r7, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2120      	movs	r1, #32
 8009e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e46:	f000 fe8b 	bl	800ab60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8009e4a:	2320      	movs	r3, #32
 8009e4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8009e5a:	f107 030c 	add.w	r3, r7, #12
 8009e5e:	4619      	mov	r1, r3
 8009e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e64:	f000 fbc6 	bl	800a5f4 <HAL_GPIO_Init>

}
 8009e68:	bf00      	nop
 8009e6a:	3720      	adds	r7, #32
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40021000 	.word	0x40021000

08009e74 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	71fb      	strb	r3, [r7, #7]
 8009e80:	4613      	mov	r3, r2
 8009e82:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	4a1f      	ldr	r2, [pc, #124]	; (8009f08 <BSP_PB_Init+0x94>)
 8009e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e90:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8009e92:	79bb      	ldrb	r3, [r7, #6]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d132      	bne.n	8009efe <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	00db      	lsls	r3, r3, #3
 8009e9c:	4a1b      	ldr	r2, [pc, #108]	; (8009f0c <BSP_PB_Init+0x98>)
 8009e9e:	441a      	add	r2, r3
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	491b      	ldr	r1, [pc, #108]	; (8009f10 <BSP_PB_Init+0x9c>)
 8009ea4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f000 fb5d 	bl	800a56a <HAL_EXTI_GetHandle>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009eb6:	f06f 0303 	mvn.w	r3, #3
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	e01f      	b.n	8009efe <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	4a12      	ldr	r2, [pc, #72]	; (8009f0c <BSP_PB_Init+0x98>)
 8009ec4:	1898      	adds	r0, r3, r2
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	4a12      	ldr	r2, [pc, #72]	; (8009f14 <BSP_PB_Init+0xa0>)
 8009eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	f000 fb30 	bl	800a536 <HAL_EXTI_RegisterCallback>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009edc:	f06f 0303 	mvn.w	r3, #3
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e00c      	b.n	8009efe <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8009ee4:	2028      	movs	r0, #40	; 0x28
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	4a0b      	ldr	r2, [pc, #44]	; (8009f18 <BSP_PB_Init+0xa4>)
 8009eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	f000 faea 	bl	800a4ca <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8009ef6:	2328      	movs	r3, #40	; 0x28
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fb02 	bl	800a502 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009efe:	68fb      	ldr	r3, [r7, #12]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	0800ff68 	.word	0x0800ff68
 8009f0c:	20000184 	.word	0x20000184
 8009f10:	0800ff6c 	.word	0x0800ff6c
 8009f14:	0800ff70 	.word	0x0800ff70
 8009f18:	0800ff74 	.word	0x0800ff74

08009f1c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	4603      	mov	r3, r0
 8009f24:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	4a09      	ldr	r2, [pc, #36]	; (8009f50 <BSP_PB_GetState+0x34>)
 8009f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f32:	4611      	mov	r1, r2
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fdfb 	bl	800ab30 <HAL_GPIO_ReadPin>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	bf0c      	ite	eq
 8009f40:	2301      	moveq	r3, #1
 8009f42:	2300      	movne	r3, #0
 8009f44:	b2db      	uxtb	r3, r3
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000180 	.word	0x20000180

08009f54 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8009f58:	2000      	movs	r0, #0
 8009f5a:	f7f7 f9d9 	bl	8001310 <BSP_PB_Callback>
}
 8009f5e:	bf00      	nop
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f6a:	4b19      	ldr	r3, [pc, #100]	; (8009fd0 <BUTTON_USER_GPIO_Init+0x6c>)
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <BUTTON_USER_GPIO_Init+0x6c>)
 8009f70:	f043 0304 	orr.w	r3, r3, #4
 8009f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f76:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <BUTTON_USER_GPIO_Init+0x6c>)
 8009f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	60bb      	str	r3, [r7, #8]
 8009f80:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f82:	f107 030c 	add.w	r3, r7, #12
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	605a      	str	r2, [r3, #4]
 8009f8c:	609a      	str	r2, [r3, #8]
 8009f8e:	60da      	str	r2, [r3, #12]
 8009f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f92:	4b0f      	ldr	r3, [pc, #60]	; (8009fd0 <BUTTON_USER_GPIO_Init+0x6c>)
 8009f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f96:	4a0e      	ldr	r2, [pc, #56]	; (8009fd0 <BUTTON_USER_GPIO_Init+0x6c>)
 8009f98:	f043 0304 	orr.w	r3, r3, #4
 8009f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f9e:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <BUTTON_USER_GPIO_Init+0x6c>)
 8009fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	607b      	str	r3, [r7, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8009faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009fb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8009fba:	f107 030c 	add.w	r3, r7, #12
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	4804      	ldr	r0, [pc, #16]	; (8009fd4 <BUTTON_USER_GPIO_Init+0x70>)
 8009fc2:	f000 fb17 	bl	800a5f4 <HAL_GPIO_Init>

}
 8009fc6:	bf00      	nop
 8009fc8:	3720      	adds	r7, #32
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40021000 	.word	0x40021000
 8009fd4:	48000800 	.word	0x48000800

08009fd8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d903      	bls.n	8009ff4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009fec:	f06f 0301 	mvn.w	r3, #1
 8009ff0:	60fb      	str	r3, [r7, #12]
 8009ff2:	e025      	b.n	800a040 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	79fa      	ldrb	r2, [r7, #7]
 8009ff8:	4914      	ldr	r1, [pc, #80]	; (800a04c <BSP_COM_Init+0x74>)
 8009ffa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ffe:	4814      	ldr	r0, [pc, #80]	; (800a050 <BSP_COM_Init+0x78>)
 800a000:	4613      	mov	r3, r2
 800a002:	015b      	lsls	r3, r3, #5
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4403      	add	r3, r0
 800a00a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800a00c:	79fa      	ldrb	r2, [r7, #7]
 800a00e:	4613      	mov	r3, r2
 800a010:	015b      	lsls	r3, r3, #5
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4a0e      	ldr	r2, [pc, #56]	; (800a050 <BSP_COM_Init+0x78>)
 800a018:	4413      	add	r3, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 f86a 	bl	800a0f4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800a020:	79fa      	ldrb	r2, [r7, #7]
 800a022:	4613      	mov	r3, r2
 800a024:	015b      	lsls	r3, r3, #5
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4a09      	ldr	r2, [pc, #36]	; (800a050 <BSP_COM_Init+0x78>)
 800a02c:	4413      	add	r3, r2
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f810 	bl	800a054 <MX_USART2_UART_Init>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800a03a:	f06f 0303 	mvn.w	r3, #3
 800a03e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a040:	68fb      	ldr	r3, [r7, #12]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	2000018c 	.word	0x2000018c
 800a050:	200005dc 	.word	0x200005dc

0800a054 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <MX_USART2_UART_Init+0x64>)
 800a064:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a06c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	220c      	movs	r2, #12
 800a084:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f002 ff12 	bl	800cec8 <HAL_UART_Init>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	40004400 	.word	0x40004400

0800a0bc <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800a0c4:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <__io_putchar+0x30>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	015b      	lsls	r3, r3, #5
 800a0ce:	4413      	add	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4a07      	ldr	r2, [pc, #28]	; (800a0f0 <__io_putchar+0x34>)
 800a0d4:	1898      	adds	r0, r3, r2
 800a0d6:	1d39      	adds	r1, r7, #4
 800a0d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f002 ff4b 	bl	800cf78 <HAL_UART_Transmit>
  return ch;
 800a0e2:	687b      	ldr	r3, [r7, #4]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20000660 	.word	0x20000660
 800a0f0:	200005dc 	.word	0x200005dc

0800a0f4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b0ac      	sub	sp, #176	; 0xb0
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a0fc:	f107 0314 	add.w	r3, r7, #20
 800a100:	2288      	movs	r2, #136	; 0x88
 800a102:	2100      	movs	r1, #0
 800a104:	4618      	mov	r0, r3
 800a106:	f003 fc5d 	bl	800d9c4 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a10a:	2302      	movs	r3, #2
 800a10c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a10e:	2300      	movs	r3, #0
 800a110:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a112:	f107 0314 	add.w	r3, r7, #20
 800a116:	4618      	mov	r0, r3
 800a118:	f002 fa1a 	bl	800c550 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800a11c:	4b23      	ldr	r3, [pc, #140]	; (800a1ac <USART2_MspInit+0xb8>)
 800a11e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a120:	4a22      	ldr	r2, [pc, #136]	; (800a1ac <USART2_MspInit+0xb8>)
 800a122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a126:	6593      	str	r3, [r2, #88]	; 0x58
 800a128:	4b20      	ldr	r3, [pc, #128]	; (800a1ac <USART2_MspInit+0xb8>)
 800a12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a12c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a130:	613b      	str	r3, [r7, #16]
 800a132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a134:	4b1d      	ldr	r3, [pc, #116]	; (800a1ac <USART2_MspInit+0xb8>)
 800a136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a138:	4a1c      	ldr	r2, [pc, #112]	; (800a1ac <USART2_MspInit+0xb8>)
 800a13a:	f043 0301 	orr.w	r3, r3, #1
 800a13e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a140:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <USART2_MspInit+0xb8>)
 800a142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	60fb      	str	r3, [r7, #12]
 800a14a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800a14c:	2304      	movs	r3, #4
 800a14e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a152:	2302      	movs	r3, #2
 800a154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a15e:	2303      	movs	r3, #3
 800a160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800a164:	2307      	movs	r3, #7
 800a166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800a16a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a16e:	4619      	mov	r1, r3
 800a170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a174:	f000 fa3e 	bl	800a5f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800a178:	2308      	movs	r3, #8
 800a17a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a17e:	2302      	movs	r3, #2
 800a180:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a184:	2300      	movs	r3, #0
 800a186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a18a:	2303      	movs	r3, #3
 800a18c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800a190:	2307      	movs	r3, #7
 800a192:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800a196:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a19a:	4619      	mov	r1, r3
 800a19c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1a0:	f000 fa28 	bl	800a5f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800a1a4:	bf00      	nop
 800a1a6:	37b0      	adds	r7, #176	; 0xb0
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	40021000 	.word	0x40021000

0800a1b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a1b4:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <SystemInit+0x20>)
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	4a05      	ldr	r2, [pc, #20]	; (800a1d0 <SystemInit+0x20>)
 800a1bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a1c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a1c4:	bf00      	nop
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	e000ed00 	.word	0xe000ed00

0800a1d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a1de:	4b0c      	ldr	r3, [pc, #48]	; (800a210 <HAL_Init+0x3c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a0b      	ldr	r2, [pc, #44]	; (800a210 <HAL_Init+0x3c>)
 800a1e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a1ea:	2003      	movs	r0, #3
 800a1ec:	f000 f962 	bl	800a4b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f000 f80f 	bl	800a214 <HAL_InitTick>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	71fb      	strb	r3, [r7, #7]
 800a200:	e001      	b.n	800a206 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a202:	f7f7 fe73 	bl	8001eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a206:	79fb      	ldrb	r3, [r7, #7]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	40022000 	.word	0x40022000

0800a214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a220:	4b17      	ldr	r3, [pc, #92]	; (800a280 <HAL_InitTick+0x6c>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d023      	beq.n	800a270 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a228:	4b16      	ldr	r3, [pc, #88]	; (800a284 <HAL_InitTick+0x70>)
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	4b14      	ldr	r3, [pc, #80]	; (800a280 <HAL_InitTick+0x6c>)
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	4619      	mov	r1, r3
 800a232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a236:	fbb3 f3f1 	udiv	r3, r3, r1
 800a23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f96d 	bl	800a51e <HAL_SYSTICK_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10f      	bne.n	800a26a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b0f      	cmp	r3, #15
 800a24e:	d809      	bhi.n	800a264 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a250:	2200      	movs	r2, #0
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	f000 f937 	bl	800a4ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a25c:	4a0a      	ldr	r2, [pc, #40]	; (800a288 <HAL_InitTick+0x74>)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6013      	str	r3, [r2, #0]
 800a262:	e007      	b.n	800a274 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	73fb      	strb	r3, [r7, #15]
 800a268:	e004      	b.n	800a274 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	73fb      	strb	r3, [r7, #15]
 800a26e:	e001      	b.n	800a274 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20000198 	.word	0x20000198
 800a284:	20000190 	.word	0x20000190
 800a288:	20000194 	.word	0x20000194

0800a28c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a28c:	b480      	push	{r7}
 800a28e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a290:	4b06      	ldr	r3, [pc, #24]	; (800a2ac <HAL_IncTick+0x20>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <HAL_IncTick+0x24>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4413      	add	r3, r2
 800a29c:	4a04      	ldr	r2, [pc, #16]	; (800a2b0 <HAL_IncTick+0x24>)
 800a29e:	6013      	str	r3, [r2, #0]
}
 800a2a0:	bf00      	nop
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	20000198 	.word	0x20000198
 800a2b0:	20000664 	.word	0x20000664

0800a2b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
  return uwTick;
 800a2b8:	4b03      	ldr	r3, [pc, #12]	; (800a2c8 <HAL_GetTick+0x14>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	20000664 	.word	0x20000664

0800a2cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a2d4:	f7ff ffee 	bl	800a2b4 <HAL_GetTick>
 800a2d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e4:	d005      	beq.n	800a2f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a2e6:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <HAL_Delay+0x44>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a2f2:	bf00      	nop
 800a2f4:	f7ff ffde 	bl	800a2b4 <HAL_GetTick>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	429a      	cmp	r2, r3
 800a302:	d8f7      	bhi.n	800a2f4 <HAL_Delay+0x28>
  {
  }
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	20000198 	.word	0x20000198

0800a314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f003 0307 	and.w	r3, r3, #7
 800a322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a324:	4b0c      	ldr	r3, [pc, #48]	; (800a358 <__NVIC_SetPriorityGrouping+0x44>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a330:	4013      	ands	r3, r2
 800a332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a33c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a346:	4a04      	ldr	r2, [pc, #16]	; (800a358 <__NVIC_SetPriorityGrouping+0x44>)
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	60d3      	str	r3, [r2, #12]
}
 800a34c:	bf00      	nop
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	e000ed00 	.word	0xe000ed00

0800a35c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <__NVIC_GetPriorityGrouping+0x18>)
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	0a1b      	lsrs	r3, r3, #8
 800a366:	f003 0307 	and.w	r3, r3, #7
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	e000ed00 	.word	0xe000ed00

0800a378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a386:	2b00      	cmp	r3, #0
 800a388:	db0b      	blt.n	800a3a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	f003 021f 	and.w	r2, r3, #31
 800a390:	4907      	ldr	r1, [pc, #28]	; (800a3b0 <__NVIC_EnableIRQ+0x38>)
 800a392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a396:	095b      	lsrs	r3, r3, #5
 800a398:	2001      	movs	r0, #1
 800a39a:	fa00 f202 	lsl.w	r2, r0, r2
 800a39e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a3a2:	bf00      	nop
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	e000e100 	.word	0xe000e100

0800a3b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	db0a      	blt.n	800a3de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	490c      	ldr	r1, [pc, #48]	; (800a400 <__NVIC_SetPriority+0x4c>)
 800a3ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3d2:	0112      	lsls	r2, r2, #4
 800a3d4:	b2d2      	uxtb	r2, r2
 800a3d6:	440b      	add	r3, r1
 800a3d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a3dc:	e00a      	b.n	800a3f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	b2da      	uxtb	r2, r3
 800a3e2:	4908      	ldr	r1, [pc, #32]	; (800a404 <__NVIC_SetPriority+0x50>)
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	3b04      	subs	r3, #4
 800a3ec:	0112      	lsls	r2, r2, #4
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	761a      	strb	r2, [r3, #24]
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	e000e100 	.word	0xe000e100
 800a404:	e000ed00 	.word	0xe000ed00

0800a408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a408:	b480      	push	{r7}
 800a40a:	b089      	sub	sp, #36	; 0x24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	f1c3 0307 	rsb	r3, r3, #7
 800a422:	2b04      	cmp	r3, #4
 800a424:	bf28      	it	cs
 800a426:	2304      	movcs	r3, #4
 800a428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	3304      	adds	r3, #4
 800a42e:	2b06      	cmp	r3, #6
 800a430:	d902      	bls.n	800a438 <NVIC_EncodePriority+0x30>
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	3b03      	subs	r3, #3
 800a436:	e000      	b.n	800a43a <NVIC_EncodePriority+0x32>
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a43c:	f04f 32ff 	mov.w	r2, #4294967295
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	fa02 f303 	lsl.w	r3, r2, r3
 800a446:	43da      	mvns	r2, r3
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	401a      	ands	r2, r3
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a450:	f04f 31ff 	mov.w	r1, #4294967295
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	fa01 f303 	lsl.w	r3, r1, r3
 800a45a:	43d9      	mvns	r1, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a460:	4313      	orrs	r3, r2
         );
}
 800a462:	4618      	mov	r0, r3
 800a464:	3724      	adds	r7, #36	; 0x24
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr
	...

0800a470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a480:	d301      	bcc.n	800a486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a482:	2301      	movs	r3, #1
 800a484:	e00f      	b.n	800a4a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a486:	4a0a      	ldr	r2, [pc, #40]	; (800a4b0 <SysTick_Config+0x40>)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a48e:	210f      	movs	r1, #15
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	f7ff ff8e 	bl	800a3b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a498:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <SysTick_Config+0x40>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a49e:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <SysTick_Config+0x40>)
 800a4a0:	2207      	movs	r2, #7
 800a4a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	e000e010 	.word	0xe000e010

0800a4b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ff29 	bl	800a314 <__NVIC_SetPriorityGrouping>
}
 800a4c2:	bf00      	nop
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b086      	sub	sp, #24
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	60b9      	str	r1, [r7, #8]
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a4dc:	f7ff ff3e 	bl	800a35c <__NVIC_GetPriorityGrouping>
 800a4e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	6978      	ldr	r0, [r7, #20]
 800a4e8:	f7ff ff8e 	bl	800a408 <NVIC_EncodePriority>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f2:	4611      	mov	r1, r2
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff ff5d 	bl	800a3b4 <__NVIC_SetPriority>
}
 800a4fa:	bf00      	nop
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	4603      	mov	r3, r0
 800a50a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a50c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff ff31 	bl	800a378 <__NVIC_EnableIRQ>
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff ffa2 	bl	800a470 <SysTick_Config>
 800a52c:	4603      	mov	r3, r0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a536:	b480      	push	{r7}
 800a538:	b087      	sub	sp, #28
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	460b      	mov	r3, r1
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a548:	7afb      	ldrb	r3, [r7, #11]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d103      	bne.n	800a556 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
      break;
 800a554:	e002      	b.n	800a55c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	75fb      	strb	r3, [r7, #23]
      break;
 800a55a:	bf00      	nop
  }

  return status;
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	371c      	adds	r7, #28
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr

0800a56a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e003      	b.n	800a586 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a584:	2300      	movs	r3, #0
  }
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
	...

0800a594 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	0c1b      	lsrs	r3, r3, #16
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 031f 	and.w	r3, r3, #31
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <HAL_EXTI_IRQHandler+0x5c>)
 800a5be:	4413      	add	r3, r2
 800a5c0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d009      	beq.n	800a5e6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	4798      	blx	r3
    }
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3718      	adds	r7, #24
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	40010414 	.word	0x40010414

0800a5f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a602:	e17f      	b.n	800a904 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	2101      	movs	r1, #1
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	fa01 f303 	lsl.w	r3, r1, r3
 800a610:	4013      	ands	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 8171 	beq.w	800a8fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	f003 0303 	and.w	r3, r3, #3
 800a624:	2b01      	cmp	r3, #1
 800a626:	d005      	beq.n	800a634 <HAL_GPIO_Init+0x40>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	2b02      	cmp	r3, #2
 800a632:	d130      	bne.n	800a696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	2203      	movs	r2, #3
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
 800a644:	43db      	mvns	r3, r3
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	4013      	ands	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a66a:	2201      	movs	r2, #1
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43db      	mvns	r3, r3
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	4013      	ands	r3, r2
 800a678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	091b      	lsrs	r3, r3, #4
 800a680:	f003 0201 	and.w	r2, r3, #1
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	fa02 f303 	lsl.w	r3, r2, r3
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	f003 0303 	and.w	r3, r3, #3
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d118      	bne.n	800a6d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b0:	43db      	mvns	r3, r3
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	08db      	lsrs	r3, r3, #3
 800a6be:	f003 0201 	and.w	r2, r3, #1
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f003 0303 	and.w	r3, r3, #3
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d017      	beq.n	800a710 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	2203      	movs	r2, #3
 800a6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f0:	43db      	mvns	r3, r3
 800a6f2:	693a      	ldr	r2, [r7, #16]
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	fa02 f303 	lsl.w	r3, r2, r3
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	4313      	orrs	r3, r2
 800a708:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f003 0303 	and.w	r3, r3, #3
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d123      	bne.n	800a764 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	08da      	lsrs	r2, r3, #3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3208      	adds	r2, #8
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	220f      	movs	r2, #15
 800a734:	fa02 f303 	lsl.w	r3, r2, r3
 800a738:	43db      	mvns	r3, r3
 800a73a:	693a      	ldr	r2, [r7, #16]
 800a73c:	4013      	ands	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f003 0307 	and.w	r3, r3, #7
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	fa02 f303 	lsl.w	r3, r2, r3
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	08da      	lsrs	r2, r3, #3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3208      	adds	r2, #8
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	005b      	lsls	r3, r3, #1
 800a76e:	2203      	movs	r2, #3
 800a770:	fa02 f303 	lsl.w	r3, r2, r3
 800a774:	43db      	mvns	r3, r3
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	4013      	ands	r3, r2
 800a77a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f003 0203 	and.w	r2, r3, #3
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	4313      	orrs	r3, r2
 800a790:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 80ac 	beq.w	800a8fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7a6:	4b5f      	ldr	r3, [pc, #380]	; (800a924 <HAL_GPIO_Init+0x330>)
 800a7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7aa:	4a5e      	ldr	r2, [pc, #376]	; (800a924 <HAL_GPIO_Init+0x330>)
 800a7ac:	f043 0301 	orr.w	r3, r3, #1
 800a7b0:	6613      	str	r3, [r2, #96]	; 0x60
 800a7b2:	4b5c      	ldr	r3, [pc, #368]	; (800a924 <HAL_GPIO_Init+0x330>)
 800a7b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	60bb      	str	r3, [r7, #8]
 800a7bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a7be:	4a5a      	ldr	r2, [pc, #360]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	089b      	lsrs	r3, r3, #2
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	220f      	movs	r2, #15
 800a7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7da:	43db      	mvns	r3, r3
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4013      	ands	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a7e8:	d025      	beq.n	800a836 <HAL_GPIO_Init+0x242>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a4f      	ldr	r2, [pc, #316]	; (800a92c <HAL_GPIO_Init+0x338>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d01f      	beq.n	800a832 <HAL_GPIO_Init+0x23e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a4e      	ldr	r2, [pc, #312]	; (800a930 <HAL_GPIO_Init+0x33c>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d019      	beq.n	800a82e <HAL_GPIO_Init+0x23a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a4d      	ldr	r2, [pc, #308]	; (800a934 <HAL_GPIO_Init+0x340>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d013      	beq.n	800a82a <HAL_GPIO_Init+0x236>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a4c      	ldr	r2, [pc, #304]	; (800a938 <HAL_GPIO_Init+0x344>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00d      	beq.n	800a826 <HAL_GPIO_Init+0x232>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a4b      	ldr	r2, [pc, #300]	; (800a93c <HAL_GPIO_Init+0x348>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d007      	beq.n	800a822 <HAL_GPIO_Init+0x22e>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a4a      	ldr	r2, [pc, #296]	; (800a940 <HAL_GPIO_Init+0x34c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d101      	bne.n	800a81e <HAL_GPIO_Init+0x22a>
 800a81a:	2306      	movs	r3, #6
 800a81c:	e00c      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a81e:	2307      	movs	r3, #7
 800a820:	e00a      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a822:	2305      	movs	r3, #5
 800a824:	e008      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a826:	2304      	movs	r3, #4
 800a828:	e006      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a82a:	2303      	movs	r3, #3
 800a82c:	e004      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a82e:	2302      	movs	r3, #2
 800a830:	e002      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <HAL_GPIO_Init+0x244>
 800a836:	2300      	movs	r3, #0
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	f002 0203 	and.w	r2, r2, #3
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	4093      	lsls	r3, r2
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	4313      	orrs	r3, r2
 800a846:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a848:	4937      	ldr	r1, [pc, #220]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	089b      	lsrs	r3, r3, #2
 800a84e:	3302      	adds	r3, #2
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a856:	4b3b      	ldr	r3, [pc, #236]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	43db      	mvns	r3, r3
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4013      	ands	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d003      	beq.n	800a87a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a87a:	4a32      	ldr	r2, [pc, #200]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a880:	4b30      	ldr	r3, [pc, #192]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	43db      	mvns	r3, r3
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	4013      	ands	r3, r2
 800a88e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a8a4:	4a27      	ldr	r2, [pc, #156]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a8aa:	4b26      	ldr	r3, [pc, #152]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	43db      	mvns	r3, r3
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a8ce:	4a1d      	ldr	r2, [pc, #116]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a8d4:	4b1b      	ldr	r3, [pc, #108]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	43db      	mvns	r3, r3
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a8f8:	4a12      	ldr	r2, [pc, #72]	; (800a944 <HAL_GPIO_Init+0x350>)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	3301      	adds	r3, #1
 800a902:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	fa22 f303 	lsr.w	r3, r2, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f ae78 	bne.w	800a604 <HAL_GPIO_Init+0x10>
  }
}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	371c      	adds	r7, #28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	40021000 	.word	0x40021000
 800a928:	40010000 	.word	0x40010000
 800a92c:	48000400 	.word	0x48000400
 800a930:	48000800 	.word	0x48000800
 800a934:	48000c00 	.word	0x48000c00
 800a938:	48001000 	.word	0x48001000
 800a93c:	48001400 	.word	0x48001400
 800a940:	48001800 	.word	0x48001800
 800a944:	40010400 	.word	0x40010400

0800a948 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a952:	2300      	movs	r3, #0
 800a954:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a956:	e0cd      	b.n	800aaf4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a958:	2201      	movs	r2, #1
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	fa02 f303 	lsl.w	r3, r2, r3
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	4013      	ands	r3, r2
 800a964:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80c0 	beq.w	800aaee <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a96e:	4a68      	ldr	r2, [pc, #416]	; (800ab10 <HAL_GPIO_DeInit+0x1c8>)
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	089b      	lsrs	r3, r3, #2
 800a974:	3302      	adds	r3, #2
 800a976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a97a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f003 0303 	and.w	r3, r3, #3
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	220f      	movs	r2, #15
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4013      	ands	r3, r2
 800a98e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a996:	d025      	beq.n	800a9e4 <HAL_GPIO_DeInit+0x9c>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a5e      	ldr	r2, [pc, #376]	; (800ab14 <HAL_GPIO_DeInit+0x1cc>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d01f      	beq.n	800a9e0 <HAL_GPIO_DeInit+0x98>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a5d      	ldr	r2, [pc, #372]	; (800ab18 <HAL_GPIO_DeInit+0x1d0>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d019      	beq.n	800a9dc <HAL_GPIO_DeInit+0x94>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a5c      	ldr	r2, [pc, #368]	; (800ab1c <HAL_GPIO_DeInit+0x1d4>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d013      	beq.n	800a9d8 <HAL_GPIO_DeInit+0x90>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a5b      	ldr	r2, [pc, #364]	; (800ab20 <HAL_GPIO_DeInit+0x1d8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d00d      	beq.n	800a9d4 <HAL_GPIO_DeInit+0x8c>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a5a      	ldr	r2, [pc, #360]	; (800ab24 <HAL_GPIO_DeInit+0x1dc>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d007      	beq.n	800a9d0 <HAL_GPIO_DeInit+0x88>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a59      	ldr	r2, [pc, #356]	; (800ab28 <HAL_GPIO_DeInit+0x1e0>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d101      	bne.n	800a9cc <HAL_GPIO_DeInit+0x84>
 800a9c8:	2306      	movs	r3, #6
 800a9ca:	e00c      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9cc:	2307      	movs	r3, #7
 800a9ce:	e00a      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9d0:	2305      	movs	r3, #5
 800a9d2:	e008      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	e006      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e004      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e002      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <HAL_GPIO_DeInit+0x9e>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	f002 0203 	and.w	r2, r2, #3
 800a9ec:	0092      	lsls	r2, r2, #2
 800a9ee:	4093      	lsls	r3, r2
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d132      	bne.n	800aa5c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a9f6:	4b4d      	ldr	r3, [pc, #308]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	43db      	mvns	r3, r3
 800a9fe:	494b      	ldr	r1, [pc, #300]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800aa04:	4b49      	ldr	r3, [pc, #292]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	43db      	mvns	r3, r3
 800aa0c:	4947      	ldr	r1, [pc, #284]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800aa12:	4b46      	ldr	r3, [pc, #280]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	4944      	ldr	r1, [pc, #272]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800aa20:	4b42      	ldr	r3, [pc, #264]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa22:	689a      	ldr	r2, [r3, #8]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	43db      	mvns	r3, r3
 800aa28:	4940      	ldr	r1, [pc, #256]	; (800ab2c <HAL_GPIO_DeInit+0x1e4>)
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f003 0303 	and.w	r3, r3, #3
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	220f      	movs	r2, #15
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800aa3e:	4a34      	ldr	r2, [pc, #208]	; (800ab10 <HAL_GPIO_DeInit+0x1c8>)
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	089b      	lsrs	r3, r3, #2
 800aa44:	3302      	adds	r3, #2
 800aa46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	43da      	mvns	r2, r3
 800aa4e:	4830      	ldr	r0, [pc, #192]	; (800ab10 <HAL_GPIO_DeInit+0x1c8>)
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	089b      	lsrs	r3, r3, #2
 800aa54:	400a      	ands	r2, r1
 800aa56:	3302      	adds	r3, #2
 800aa58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	2103      	movs	r1, #3
 800aa66:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	08da      	lsrs	r2, r3, #3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	3208      	adds	r2, #8
 800aa78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	220f      	movs	r2, #15
 800aa86:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8a:	43db      	mvns	r3, r3
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	08d2      	lsrs	r2, r2, #3
 800aa90:	4019      	ands	r1, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	3208      	adds	r2, #8
 800aa96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	689a      	ldr	r2, [r3, #8]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	2103      	movs	r1, #3
 800aaa4:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa8:	43db      	mvns	r3, r3
 800aaaa:	401a      	ands	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	2101      	movs	r1, #1
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	fa01 f303 	lsl.w	r3, r1, r3
 800aabc:	43db      	mvns	r3, r3
 800aabe:	401a      	ands	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	005b      	lsls	r3, r3, #1
 800aacc:	2103      	movs	r1, #3
 800aace:	fa01 f303 	lsl.w	r3, r1, r3
 800aad2:	43db      	mvns	r3, r3
 800aad4:	401a      	ands	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aade:	2101      	movs	r1, #1
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	43db      	mvns	r3, r3
 800aae8:	401a      	ands	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f47f af2b 	bne.w	800a958 <HAL_GPIO_DeInit+0x10>
  }
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	40010000 	.word	0x40010000
 800ab14:	48000400 	.word	0x48000400
 800ab18:	48000800 	.word	0x48000800
 800ab1c:	48000c00 	.word	0x48000c00
 800ab20:	48001000 	.word	0x48001000
 800ab24:	48001400 	.word	0x48001400
 800ab28:	48001800 	.word	0x48001800
 800ab2c:	40010400 	.word	0x40010400

0800ab30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691a      	ldr	r2, [r3, #16]
 800ab40:	887b      	ldrh	r3, [r7, #2]
 800ab42:	4013      	ands	r3, r2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	73fb      	strb	r3, [r7, #15]
 800ab4c:	e001      	b.n	800ab52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ab52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	807b      	strh	r3, [r7, #2]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ab70:	787b      	ldrb	r3, [r7, #1]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d003      	beq.n	800ab7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ab76:	887a      	ldrh	r2, [r7, #2]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ab7c:	e002      	b.n	800ab84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ab7e:	887a      	ldrh	r2, [r7, #2]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ab9a:	4b08      	ldr	r3, [pc, #32]	; (800abbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab9c:	695a      	ldr	r2, [r3, #20]
 800ab9e:	88fb      	ldrh	r3, [r7, #6]
 800aba0:	4013      	ands	r3, r2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d006      	beq.n	800abb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800aba6:	4a05      	ldr	r2, [pc, #20]	; (800abbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 f806 	bl	800abc0 <HAL_GPIO_EXTI_Callback>
  }
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	40010400 	.word	0x40010400

0800abc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b082      	sub	sp, #8
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e081      	b.n	800acec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d106      	bne.n	800ac02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f8a8 	bl	800ad52 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2224      	movs	r2, #36	; 0x24
 800ac06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f022 0201 	bic.w	r2, r2, #1
 800ac18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689a      	ldr	r2, [r3, #8]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d107      	bne.n	800ac50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689a      	ldr	r2, [r3, #8]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac4c:	609a      	str	r2, [r3, #8]
 800ac4e:	e006      	b.n	800ac5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ac5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d104      	bne.n	800ac70 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ac7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68da      	ldr	r2, [r3, #12]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	691a      	ldr	r2, [r3, #16]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69d9      	ldr	r1, [r3, #28]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0201 	orr.w	r2, r2, #1
 800accc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e021      	b.n	800ad4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2224      	movs	r2, #36	; 0x24
 800ad0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f022 0201 	bic.w	r2, r2, #1
 800ad1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f821 	bl	800ad66 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800ad6e:	bf00      	nop
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
	...

0800ad7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b088      	sub	sp, #32
 800ad80:	af02      	add	r7, sp, #8
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	4608      	mov	r0, r1
 800ad86:	4611      	mov	r1, r2
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	817b      	strh	r3, [r7, #10]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	813b      	strh	r3, [r7, #8]
 800ad92:	4613      	mov	r3, r2
 800ad94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	f040 80f9 	bne.w	800af96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ada4:	6a3b      	ldr	r3, [r7, #32]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d002      	beq.n	800adb0 <HAL_I2C_Mem_Write+0x34>
 800adaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adac:	2b00      	cmp	r3, #0
 800adae:	d105      	bne.n	800adbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	e0ed      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d101      	bne.n	800adca <HAL_I2C_Mem_Write+0x4e>
 800adc6:	2302      	movs	r3, #2
 800adc8:	e0e6      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800add2:	f7ff fa6f 	bl	800a2b4 <HAL_GetTick>
 800add6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2319      	movs	r3, #25
 800adde:	2201      	movs	r2, #1
 800ade0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 fadd 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e0d1      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2221      	movs	r2, #33	; 0x21
 800adf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2240      	movs	r2, #64	; 0x40
 800ae00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6a3a      	ldr	r2, [r7, #32]
 800ae0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ae1c:	88f8      	ldrh	r0, [r7, #6]
 800ae1e:	893a      	ldrh	r2, [r7, #8]
 800ae20:	8979      	ldrh	r1, [r7, #10]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 f9ed 	bl	800b20c <I2C_RequestMemoryWrite>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d005      	beq.n	800ae44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
 800ae42:	e0a9      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	2bff      	cmp	r3, #255	; 0xff
 800ae4c:	d90e      	bls.n	800ae6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	22ff      	movs	r2, #255	; 0xff
 800ae52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	8979      	ldrh	r1, [r7, #10]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 fc45 	bl	800b6f4 <I2C_TransferConfig>
 800ae6a:	e00f      	b.n	800ae8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	8979      	ldrh	r1, [r7, #10]
 800ae7e:	2300      	movs	r3, #0
 800ae80:	9300      	str	r3, [sp, #0]
 800ae82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fc34 	bl	800b6f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 fac7 	bl	800b424 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e07b      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea4:	781a      	ldrb	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	1c5a      	adds	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	3b01      	subs	r3, #1
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aec8:	3b01      	subs	r3, #1
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d034      	beq.n	800af44 <HAL_I2C_Mem_Write+0x1c8>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d130      	bne.n	800af44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	9300      	str	r3, [sp, #0]
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	2200      	movs	r2, #0
 800aeea:	2180      	movs	r1, #128	; 0x80
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fa59 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e04d      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af00:	b29b      	uxth	r3, r3
 800af02:	2bff      	cmp	r3, #255	; 0xff
 800af04:	d90e      	bls.n	800af24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	22ff      	movs	r2, #255	; 0xff
 800af0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af10:	b2da      	uxtb	r2, r3
 800af12:	8979      	ldrh	r1, [r7, #10]
 800af14:	2300      	movs	r3, #0
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 fbe9 	bl	800b6f4 <I2C_TransferConfig>
 800af22:	e00f      	b.n	800af44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af28:	b29a      	uxth	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af32:	b2da      	uxtb	r2, r3
 800af34:	8979      	ldrh	r1, [r7, #10]
 800af36:	2300      	movs	r3, #0
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 fbd8 	bl	800b6f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af48:	b29b      	uxth	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d19e      	bne.n	800ae8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f000 faa6 	bl	800b4a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e01a      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2220      	movs	r2, #32
 800af68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	6859      	ldr	r1, [r3, #4]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	4b0a      	ldr	r3, [pc, #40]	; (800afa0 <HAL_I2C_Mem_Write+0x224>)
 800af76:	400b      	ands	r3, r1
 800af78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2220      	movs	r2, #32
 800af7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	e000      	b.n	800af98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800af96:	2302      	movs	r3, #2
  }
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	fe00e800 	.word	0xfe00e800

0800afa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b088      	sub	sp, #32
 800afa8:	af02      	add	r7, sp, #8
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	4608      	mov	r0, r1
 800afae:	4611      	mov	r1, r2
 800afb0:	461a      	mov	r2, r3
 800afb2:	4603      	mov	r3, r0
 800afb4:	817b      	strh	r3, [r7, #10]
 800afb6:	460b      	mov	r3, r1
 800afb8:	813b      	strh	r3, [r7, #8]
 800afba:	4613      	mov	r3, r2
 800afbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b20      	cmp	r3, #32
 800afc8:	f040 80fd 	bne.w	800b1c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <HAL_I2C_Mem_Read+0x34>
 800afd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d105      	bne.n	800afe4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e0f1      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afea:	2b01      	cmp	r3, #1
 800afec:	d101      	bne.n	800aff2 <HAL_I2C_Mem_Read+0x4e>
 800afee:	2302      	movs	r3, #2
 800aff0:	e0ea      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800affa:	f7ff f95b 	bl	800a2b4 <HAL_GetTick>
 800affe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	2319      	movs	r3, #25
 800b006:	2201      	movs	r2, #1
 800b008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 f9c9 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d001      	beq.n	800b01c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	e0d5      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2222      	movs	r2, #34	; 0x22
 800b020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2240      	movs	r2, #64	; 0x40
 800b028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a3a      	ldr	r2, [r7, #32]
 800b036:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b03c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b044:	88f8      	ldrh	r0, [r7, #6]
 800b046:	893a      	ldrh	r2, [r7, #8]
 800b048:	8979      	ldrh	r1, [r7, #10]
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	4603      	mov	r3, r0
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 f92d 	bl	800b2b4 <I2C_RequestMemoryRead>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d005      	beq.n	800b06c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e0ad      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b070:	b29b      	uxth	r3, r3
 800b072:	2bff      	cmp	r3, #255	; 0xff
 800b074:	d90e      	bls.n	800b094 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	22ff      	movs	r2, #255	; 0xff
 800b07a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b080:	b2da      	uxtb	r2, r3
 800b082:	8979      	ldrh	r1, [r7, #10]
 800b084:	4b52      	ldr	r3, [pc, #328]	; (800b1d0 <HAL_I2C_Mem_Read+0x22c>)
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fb31 	bl	800b6f4 <I2C_TransferConfig>
 800b092:	e00f      	b.n	800b0b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b098:	b29a      	uxth	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a2:	b2da      	uxtb	r2, r3
 800b0a4:	8979      	ldrh	r1, [r7, #10]
 800b0a6:	4b4a      	ldr	r3, [pc, #296]	; (800b1d0 <HAL_I2C_Mem_Read+0x22c>)
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0ae:	68f8      	ldr	r0, [r7, #12]
 800b0b0:	f000 fb20 	bl	800b6f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2104      	movs	r1, #4
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 f970 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e07c      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	b2d2      	uxtb	r2, r2
 800b0da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	1c5a      	adds	r2, r3, #1
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b104:	b29b      	uxth	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d034      	beq.n	800b174 <HAL_I2C_Mem_Read+0x1d0>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d130      	bne.n	800b174 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	2200      	movs	r2, #0
 800b11a:	2180      	movs	r1, #128	; 0x80
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f000 f941 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e04d      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b130:	b29b      	uxth	r3, r3
 800b132:	2bff      	cmp	r3, #255	; 0xff
 800b134:	d90e      	bls.n	800b154 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	22ff      	movs	r2, #255	; 0xff
 800b13a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b140:	b2da      	uxtb	r2, r3
 800b142:	8979      	ldrh	r1, [r7, #10]
 800b144:	2300      	movs	r3, #0
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 fad1 	bl	800b6f4 <I2C_TransferConfig>
 800b152:	e00f      	b.n	800b174 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b158:	b29a      	uxth	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b162:	b2da      	uxtb	r2, r3
 800b164:	8979      	ldrh	r1, [r7, #10]
 800b166:	2300      	movs	r3, #0
 800b168:	9300      	str	r3, [sp, #0]
 800b16a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 fac0 	bl	800b6f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b178:	b29b      	uxth	r3, r3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d19a      	bne.n	800b0b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f000 f98e 	bl	800b4a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e01a      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2220      	movs	r2, #32
 800b198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6859      	ldr	r1, [r3, #4]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <HAL_I2C_Mem_Read+0x230>)
 800b1a6:	400b      	ands	r3, r1
 800b1a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2220      	movs	r2, #32
 800b1ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e000      	b.n	800b1c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b1c6:	2302      	movs	r3, #2
  }
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	80002400 	.word	0x80002400
 800b1d4:	fe00e800 	.word	0xfe00e800

0800b1d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1e6:	b2db      	uxtb	r3, r3
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af02      	add	r7, sp, #8
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	461a      	mov	r2, r3
 800b21a:	4603      	mov	r3, r0
 800b21c:	817b      	strh	r3, [r7, #10]
 800b21e:	460b      	mov	r3, r1
 800b220:	813b      	strh	r3, [r7, #8]
 800b222:	4613      	mov	r3, r2
 800b224:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b226:	88fb      	ldrh	r3, [r7, #6]
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	8979      	ldrh	r1, [r7, #10]
 800b22c:	4b20      	ldr	r3, [pc, #128]	; (800b2b0 <I2C_RequestMemoryWrite+0xa4>)
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fa5d 	bl	800b6f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b23a:	69fa      	ldr	r2, [r7, #28]
 800b23c:	69b9      	ldr	r1, [r7, #24]
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f000 f8f0 	bl	800b424 <I2C_WaitOnTXISFlagUntilTimeout>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e02c      	b.n	800b2a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b24e:	88fb      	ldrh	r3, [r7, #6]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d105      	bne.n	800b260 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b254:	893b      	ldrh	r3, [r7, #8]
 800b256:	b2da      	uxtb	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	629a      	str	r2, [r3, #40]	; 0x28
 800b25e:	e015      	b.n	800b28c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b260:	893b      	ldrh	r3, [r7, #8]
 800b262:	0a1b      	lsrs	r3, r3, #8
 800b264:	b29b      	uxth	r3, r3
 800b266:	b2da      	uxtb	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b26e:	69fa      	ldr	r2, [r7, #28]
 800b270:	69b9      	ldr	r1, [r7, #24]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f8d6 	bl	800b424 <I2C_WaitOnTXISFlagUntilTimeout>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e012      	b.n	800b2a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b282:	893b      	ldrh	r3, [r7, #8]
 800b284:	b2da      	uxtb	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	2200      	movs	r2, #0
 800b294:	2180      	movs	r1, #128	; 0x80
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f000 f884 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e000      	b.n	800b2a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	80002000 	.word	0x80002000

0800b2b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	4608      	mov	r0, r1
 800b2be:	4611      	mov	r1, r2
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	817b      	strh	r3, [r7, #10]
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	813b      	strh	r3, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	b2da      	uxtb	r2, r3
 800b2d2:	8979      	ldrh	r1, [r7, #10]
 800b2d4:	4b20      	ldr	r3, [pc, #128]	; (800b358 <I2C_RequestMemoryRead+0xa4>)
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 fa0a 	bl	800b6f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2e0:	69fa      	ldr	r2, [r7, #28]
 800b2e2:	69b9      	ldr	r1, [r7, #24]
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f000 f89d 	bl	800b424 <I2C_WaitOnTXISFlagUntilTimeout>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e02c      	b.n	800b34e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d105      	bne.n	800b306 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b2fa:	893b      	ldrh	r3, [r7, #8]
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	629a      	str	r2, [r3, #40]	; 0x28
 800b304:	e015      	b.n	800b332 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b306:	893b      	ldrh	r3, [r7, #8]
 800b308:	0a1b      	lsrs	r3, r3, #8
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	b2da      	uxtb	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b314:	69fa      	ldr	r2, [r7, #28]
 800b316:	69b9      	ldr	r1, [r7, #24]
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f883 	bl	800b424 <I2C_WaitOnTXISFlagUntilTimeout>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e012      	b.n	800b34e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b328:	893b      	ldrh	r3, [r7, #8]
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2200      	movs	r2, #0
 800b33a:	2140      	movs	r1, #64	; 0x40
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f000 f831 	bl	800b3a4 <I2C_WaitOnFlagUntilTimeout>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e000      	b.n	800b34e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	80002000 	.word	0x80002000

0800b35c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d103      	bne.n	800b37a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2200      	movs	r2, #0
 800b378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	f003 0301 	and.w	r3, r3, #1
 800b384:	2b01      	cmp	r3, #1
 800b386:	d007      	beq.n	800b398 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	699a      	ldr	r2, [r3, #24]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f042 0201 	orr.w	r2, r2, #1
 800b396:	619a      	str	r2, [r3, #24]
  }
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	603b      	str	r3, [r7, #0]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3b4:	e022      	b.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3bc:	d01e      	beq.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3be:	f7fe ff79 	bl	800a2b4 <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d302      	bcc.n	800b3d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d113      	bne.n	800b3fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d8:	f043 0220 	orr.w	r2, r3, #32
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e00f      	b.n	800b41c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	4013      	ands	r3, r2
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	429a      	cmp	r2, r3
 800b40a:	bf0c      	ite	eq
 800b40c:	2301      	moveq	r3, #1
 800b40e:	2300      	movne	r3, #0
 800b410:	b2db      	uxtb	r3, r3
 800b412:	461a      	mov	r2, r3
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	429a      	cmp	r2, r3
 800b418:	d0cd      	beq.n	800b3b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b430:	e02c      	b.n	800b48c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f000 f870 	bl	800b51c <I2C_IsErrorOccurred>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e02a      	b.n	800b49c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44c:	d01e      	beq.n	800b48c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b44e:	f7fe ff31 	bl	800a2b4 <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d302      	bcc.n	800b464 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d113      	bne.n	800b48c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b468:	f043 0220 	orr.w	r2, r3, #32
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2220      	movs	r2, #32
 800b474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e007      	b.n	800b49c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b02      	cmp	r3, #2
 800b498:	d1cb      	bne.n	800b432 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4b0:	e028      	b.n	800b504 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	68b9      	ldr	r1, [r7, #8]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 f830 	bl	800b51c <I2C_IsErrorOccurred>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e026      	b.n	800b514 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4c6:	f7fe fef5 	bl	800a2b4 <HAL_GetTick>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d302      	bcc.n	800b4dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d113      	bne.n	800b504 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e0:	f043 0220 	orr.w	r2, r3, #32
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e007      	b.n	800b514 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	f003 0320 	and.w	r3, r3, #32
 800b50e:	2b20      	cmp	r3, #32
 800b510:	d1cf      	bne.n	800b4b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08a      	sub	sp, #40	; 0x28
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b528:	2300      	movs	r3, #0
 800b52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	f003 0310 	and.w	r3, r3, #16
 800b544:	2b00      	cmp	r3, #0
 800b546:	d075      	beq.n	800b634 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2210      	movs	r2, #16
 800b54e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b550:	e056      	b.n	800b600 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b558:	d052      	beq.n	800b600 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b55a:	f7fe feab 	bl	800a2b4 <HAL_GetTick>
 800b55e:	4602      	mov	r2, r0
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	429a      	cmp	r2, r3
 800b568:	d302      	bcc.n	800b570 <I2C_IsErrorOccurred+0x54>
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d147      	bne.n	800b600 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b57a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b582:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b58e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b592:	d12e      	bne.n	800b5f2 <I2C_IsErrorOccurred+0xd6>
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b59a:	d02a      	beq.n	800b5f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800b59c:	7cfb      	ldrb	r3, [r7, #19]
 800b59e:	2b20      	cmp	r3, #32
 800b5a0:	d027      	beq.n	800b5f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b5b2:	f7fe fe7f 	bl	800a2b4 <HAL_GetTick>
 800b5b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5b8:	e01b      	b.n	800b5f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b5ba:	f7fe fe7b 	bl	800a2b4 <HAL_GetTick>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	2b19      	cmp	r3, #25
 800b5c6:	d914      	bls.n	800b5f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5cc:	f043 0220 	orr.w	r2, r3, #32
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	f003 0320 	and.w	r3, r3, #32
 800b5fc:	2b20      	cmp	r3, #32
 800b5fe:	d1dc      	bne.n	800b5ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	2b20      	cmp	r3, #32
 800b60c:	d003      	beq.n	800b616 <I2C_IsErrorOccurred+0xfa>
 800b60e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b612:	2b00      	cmp	r3, #0
 800b614:	d09d      	beq.n	800b552 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d103      	bne.n	800b626 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2220      	movs	r2, #32
 800b624:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	f043 0304 	orr.w	r3, r3, #4
 800b62c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00b      	beq.n	800b65e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	f043 0301 	orr.w	r3, r3, #1
 800b64c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00b      	beq.n	800b680 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	f043 0308 	orr.w	r3, r3, #8
 800b66e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00b      	beq.n	800b6a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	f043 0302 	orr.w	r3, r3, #2
 800b690:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b69a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b6a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d01c      	beq.n	800b6e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fe56 	bl	800b35c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6859      	ldr	r1, [r3, #4]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	; (800b6f0 <I2C_IsErrorOccurred+0x1d4>)
 800b6bc:	400b      	ands	r3, r1
 800b6be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3728      	adds	r7, #40	; 0x28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	fe00e800 	.word	0xfe00e800

0800b6f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	607b      	str	r3, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	817b      	strh	r3, [r7, #10]
 800b702:	4613      	mov	r3, r2
 800b704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b706:	897b      	ldrh	r3, [r7, #10]
 800b708:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b70c:	7a7b      	ldrb	r3, [r7, #9]
 800b70e:	041b      	lsls	r3, r3, #16
 800b710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b714:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b722:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	0d5b      	lsrs	r3, r3, #21
 800b72e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b732:	4b08      	ldr	r3, [pc, #32]	; (800b754 <I2C_TransferConfig+0x60>)
 800b734:	430b      	orrs	r3, r1
 800b736:	43db      	mvns	r3, r3
 800b738:	ea02 0103 	and.w	r1, r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	03ff63ff 	.word	0x03ff63ff

0800b758 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b20      	cmp	r3, #32
 800b76c:	d138      	bne.n	800b7e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b774:	2b01      	cmp	r3, #1
 800b776:	d101      	bne.n	800b77c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b778:	2302      	movs	r3, #2
 800b77a:	e032      	b.n	800b7e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2224      	movs	r2, #36	; 0x24
 800b788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0201 	bic.w	r2, r2, #1
 800b79a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b7aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6819      	ldr	r1, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	430a      	orrs	r2, r1
 800b7ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f042 0201 	orr.w	r2, r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2220      	movs	r2, #32
 800b7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	e000      	b.n	800b7e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b7e0:	2302      	movs	r3, #2
  }
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b085      	sub	sp, #20
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b20      	cmp	r3, #32
 800b802:	d139      	bne.n	800b878 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b80e:	2302      	movs	r3, #2
 800b810:	e033      	b.n	800b87a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2224      	movs	r2, #36	; 0x24
 800b81e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f022 0201 	bic.w	r2, r2, #1
 800b830:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b840:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	021b      	lsls	r3, r3, #8
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f042 0201 	orr.w	r2, r2, #1
 800b862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2220      	movs	r2, #32
 800b868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	e000      	b.n	800b87a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b878:	2302      	movs	r3, #2
  }
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
	...

0800b888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b88c:	4b04      	ldr	r3, [pc, #16]	; (800b8a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b894:	4618      	mov	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	40007000 	.word	0x40007000

0800b8a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8b2:	d130      	bne.n	800b916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b8b4:	4b23      	ldr	r3, [pc, #140]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c0:	d038      	beq.n	800b934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b8c2:	4b20      	ldr	r3, [pc, #128]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b8ca:	4a1e      	ldr	r2, [pc, #120]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b8cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b8d2:	4b1d      	ldr	r3, [pc, #116]	; (800b948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2232      	movs	r2, #50	; 0x32
 800b8d8:	fb02 f303 	mul.w	r3, r2, r3
 800b8dc:	4a1b      	ldr	r2, [pc, #108]	; (800b94c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b8de:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e2:	0c9b      	lsrs	r3, r3, #18
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b8e8:	e002      	b.n	800b8f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b8f0:	4b14      	ldr	r3, [pc, #80]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8fc:	d102      	bne.n	800b904 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1f2      	bne.n	800b8ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b90c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b910:	d110      	bne.n	800b934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b912:	2303      	movs	r3, #3
 800b914:	e00f      	b.n	800b936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b91e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b922:	d007      	beq.n	800b934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b924:	4b07      	ldr	r3, [pc, #28]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b92c:	4a05      	ldr	r2, [pc, #20]	; (800b944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b92e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	40007000 	.word	0x40007000
 800b948:	20000190 	.word	0x20000190
 800b94c:	431bde83 	.word	0x431bde83

0800b950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b088      	sub	sp, #32
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e3ca      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b962:	4b97      	ldr	r3, [pc, #604]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f003 030c 	and.w	r3, r3, #12
 800b96a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b96c:	4b94      	ldr	r3, [pc, #592]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f003 0303 	and.w	r3, r3, #3
 800b974:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 0310 	and.w	r3, r3, #16
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 80e4 	beq.w	800bb4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d007      	beq.n	800b99a <HAL_RCC_OscConfig+0x4a>
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	2b0c      	cmp	r3, #12
 800b98e:	f040 808b 	bne.w	800baa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	f040 8087 	bne.w	800baa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b99a:	4b89      	ldr	r3, [pc, #548]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <HAL_RCC_OscConfig+0x62>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e3a2      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a1a      	ldr	r2, [r3, #32]
 800b9b6:	4b82      	ldr	r3, [pc, #520]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f003 0308 	and.w	r3, r3, #8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d004      	beq.n	800b9cc <HAL_RCC_OscConfig+0x7c>
 800b9c2:	4b7f      	ldr	r3, [pc, #508]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9ca:	e005      	b.n	800b9d8 <HAL_RCC_OscConfig+0x88>
 800b9cc:	4b7c      	ldr	r3, [pc, #496]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b9ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b9d2:	091b      	lsrs	r3, r3, #4
 800b9d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d223      	bcs.n	800ba24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6a1b      	ldr	r3, [r3, #32]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 fd55 	bl	800c490 <RCC_SetFlashLatencyFromMSIRange>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e383      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b9f0:	4b73      	ldr	r3, [pc, #460]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a72      	ldr	r2, [pc, #456]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b9f6:	f043 0308 	orr.w	r3, r3, #8
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	4b70      	ldr	r3, [pc, #448]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	496d      	ldr	r1, [pc, #436]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ba0e:	4b6c      	ldr	r3, [pc, #432]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	69db      	ldr	r3, [r3, #28]
 800ba1a:	021b      	lsls	r3, r3, #8
 800ba1c:	4968      	ldr	r1, [pc, #416]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	604b      	str	r3, [r1, #4]
 800ba22:	e025      	b.n	800ba70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ba24:	4b66      	ldr	r3, [pc, #408]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a65      	ldr	r2, [pc, #404]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba2a:	f043 0308 	orr.w	r3, r3, #8
 800ba2e:	6013      	str	r3, [r2, #0]
 800ba30:	4b63      	ldr	r3, [pc, #396]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	4960      	ldr	r1, [pc, #384]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ba42:	4b5f      	ldr	r3, [pc, #380]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	021b      	lsls	r3, r3, #8
 800ba50:	495b      	ldr	r1, [pc, #364]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba52:	4313      	orrs	r3, r2
 800ba54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d109      	bne.n	800ba70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f000 fd15 	bl	800c490 <RCC_SetFlashLatencyFromMSIRange>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e343      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ba70:	f000 fc4a 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800ba74:	4602      	mov	r2, r0
 800ba76:	4b52      	ldr	r3, [pc, #328]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	091b      	lsrs	r3, r3, #4
 800ba7c:	f003 030f 	and.w	r3, r3, #15
 800ba80:	4950      	ldr	r1, [pc, #320]	; (800bbc4 <HAL_RCC_OscConfig+0x274>)
 800ba82:	5ccb      	ldrb	r3, [r1, r3]
 800ba84:	f003 031f 	and.w	r3, r3, #31
 800ba88:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8c:	4a4e      	ldr	r2, [pc, #312]	; (800bbc8 <HAL_RCC_OscConfig+0x278>)
 800ba8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800ba90:	4b4e      	ldr	r3, [pc, #312]	; (800bbcc <HAL_RCC_OscConfig+0x27c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe fbbd 	bl	800a214 <HAL_InitTick>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d052      	beq.n	800bb4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	e327      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d032      	beq.n	800bb16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bab0:	4b43      	ldr	r3, [pc, #268]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a42      	ldr	r2, [pc, #264]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bab6:	f043 0301 	orr.w	r3, r3, #1
 800baba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800babc:	f7fe fbfa 	bl	800a2b4 <HAL_GetTick>
 800bac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bac2:	e008      	b.n	800bad6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bac4:	f7fe fbf6 	bl	800a2b4 <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d901      	bls.n	800bad6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e310      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bad6:	4b3a      	ldr	r3, [pc, #232]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0f0      	beq.n	800bac4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bae2:	4b37      	ldr	r3, [pc, #220]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a36      	ldr	r2, [pc, #216]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bae8:	f043 0308 	orr.w	r3, r3, #8
 800baec:	6013      	str	r3, [r2, #0]
 800baee:	4b34      	ldr	r3, [pc, #208]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	4931      	ldr	r1, [pc, #196]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bafc:	4313      	orrs	r3, r2
 800bafe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb00:	4b2f      	ldr	r3, [pc, #188]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	021b      	lsls	r3, r3, #8
 800bb0e:	492c      	ldr	r1, [pc, #176]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	604b      	str	r3, [r1, #4]
 800bb14:	e01a      	b.n	800bb4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bb16:	4b2a      	ldr	r3, [pc, #168]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a29      	ldr	r2, [pc, #164]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb1c:	f023 0301 	bic.w	r3, r3, #1
 800bb20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bb22:	f7fe fbc7 	bl	800a2b4 <HAL_GetTick>
 800bb26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bb28:	e008      	b.n	800bb3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb2a:	f7fe fbc3 	bl	800a2b4 <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d901      	bls.n	800bb3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e2dd      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bb3c:	4b20      	ldr	r3, [pc, #128]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 0302 	and.w	r3, r3, #2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1f0      	bne.n	800bb2a <HAL_RCC_OscConfig+0x1da>
 800bb48:	e000      	b.n	800bb4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bb4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d074      	beq.n	800bc42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	2b08      	cmp	r3, #8
 800bb5c:	d005      	beq.n	800bb6a <HAL_RCC_OscConfig+0x21a>
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	2b0c      	cmp	r3, #12
 800bb62:	d10e      	bne.n	800bb82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	2b03      	cmp	r3, #3
 800bb68:	d10b      	bne.n	800bb82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb6a:	4b15      	ldr	r3, [pc, #84]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d064      	beq.n	800bc40 <HAL_RCC_OscConfig+0x2f0>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d160      	bne.n	800bc40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e2ba      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb8a:	d106      	bne.n	800bb9a <HAL_RCC_OscConfig+0x24a>
 800bb8c:	4b0c      	ldr	r3, [pc, #48]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a0b      	ldr	r2, [pc, #44]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bb92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	e026      	b.n	800bbe8 <HAL_RCC_OscConfig+0x298>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bba2:	d115      	bne.n	800bbd0 <HAL_RCC_OscConfig+0x280>
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a05      	ldr	r2, [pc, #20]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bbaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbae:	6013      	str	r3, [r2, #0]
 800bbb0:	4b03      	ldr	r3, [pc, #12]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a02      	ldr	r2, [pc, #8]	; (800bbc0 <HAL_RCC_OscConfig+0x270>)
 800bbb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	e014      	b.n	800bbe8 <HAL_RCC_OscConfig+0x298>
 800bbbe:	bf00      	nop
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	0800ff78 	.word	0x0800ff78
 800bbc8:	20000190 	.word	0x20000190
 800bbcc:	20000194 	.word	0x20000194
 800bbd0:	4ba0      	ldr	r3, [pc, #640]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a9f      	ldr	r2, [pc, #636]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bbd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	4b9d      	ldr	r3, [pc, #628]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a9c      	ldr	r2, [pc, #624]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bbe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bbe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	685b      	ldr	r3, [r3, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d013      	beq.n	800bc18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbf0:	f7fe fb60 	bl	800a2b4 <HAL_GetTick>
 800bbf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bbf6:	e008      	b.n	800bc0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbf8:	f7fe fb5c 	bl	800a2b4 <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	2b64      	cmp	r3, #100	; 0x64
 800bc04:	d901      	bls.n	800bc0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e276      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc0a:	4b92      	ldr	r3, [pc, #584]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d0f0      	beq.n	800bbf8 <HAL_RCC_OscConfig+0x2a8>
 800bc16:	e014      	b.n	800bc42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc18:	f7fe fb4c 	bl	800a2b4 <HAL_GetTick>
 800bc1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc20:	f7fe fb48 	bl	800a2b4 <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b64      	cmp	r3, #100	; 0x64
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e262      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bc32:	4b88      	ldr	r3, [pc, #544]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1f0      	bne.n	800bc20 <HAL_RCC_OscConfig+0x2d0>
 800bc3e:	e000      	b.n	800bc42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d060      	beq.n	800bd10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b04      	cmp	r3, #4
 800bc52:	d005      	beq.n	800bc60 <HAL_RCC_OscConfig+0x310>
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	2b0c      	cmp	r3, #12
 800bc58:	d119      	bne.n	800bc8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d116      	bne.n	800bc8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc60:	4b7c      	ldr	r3, [pc, #496]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <HAL_RCC_OscConfig+0x328>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e23f      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc78:	4b76      	ldr	r3, [pc, #472]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	061b      	lsls	r3, r3, #24
 800bc86:	4973      	ldr	r1, [pc, #460]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc8c:	e040      	b.n	800bd10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d023      	beq.n	800bcde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc96:	4b6f      	ldr	r3, [pc, #444]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a6e      	ldr	r2, [pc, #440]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bc9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca2:	f7fe fb07 	bl	800a2b4 <HAL_GetTick>
 800bca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bca8:	e008      	b.n	800bcbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcaa:	f7fe fb03 	bl	800a2b4 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d901      	bls.n	800bcbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e21d      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bcbc:	4b65      	ldr	r3, [pc, #404]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0f0      	beq.n	800bcaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcc8:	4b62      	ldr	r3, [pc, #392]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	061b      	lsls	r3, r3, #24
 800bcd6:	495f      	ldr	r1, [pc, #380]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	604b      	str	r3, [r1, #4]
 800bcdc:	e018      	b.n	800bd10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bcde:	4b5d      	ldr	r3, [pc, #372]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a5c      	ldr	r2, [pc, #368]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcea:	f7fe fae3 	bl	800a2b4 <HAL_GetTick>
 800bcee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bcf0:	e008      	b.n	800bd04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcf2:	f7fe fadf 	bl	800a2b4 <HAL_GetTick>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d901      	bls.n	800bd04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e1f9      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bd04:	4b53      	ldr	r3, [pc, #332]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1f0      	bne.n	800bcf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 0308 	and.w	r3, r3, #8
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d03c      	beq.n	800bd96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d01c      	beq.n	800bd5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd24:	4b4b      	ldr	r3, [pc, #300]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd2a:	4a4a      	ldr	r2, [pc, #296]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd2c:	f043 0301 	orr.w	r3, r3, #1
 800bd30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd34:	f7fe fabe 	bl	800a2b4 <HAL_GetTick>
 800bd38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bd3a:	e008      	b.n	800bd4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd3c:	f7fe faba 	bl	800a2b4 <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d901      	bls.n	800bd4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e1d4      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bd4e:	4b41      	ldr	r3, [pc, #260]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d0ef      	beq.n	800bd3c <HAL_RCC_OscConfig+0x3ec>
 800bd5c:	e01b      	b.n	800bd96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd5e:	4b3d      	ldr	r3, [pc, #244]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd64:	4a3b      	ldr	r2, [pc, #236]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd6e:	f7fe faa1 	bl	800a2b4 <HAL_GetTick>
 800bd72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bd74:	e008      	b.n	800bd88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd76:	f7fe fa9d 	bl	800a2b4 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d901      	bls.n	800bd88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e1b7      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bd88:	4b32      	ldr	r3, [pc, #200]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bd8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd8e:	f003 0302 	and.w	r3, r3, #2
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1ef      	bne.n	800bd76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 0304 	and.w	r3, r3, #4
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f000 80a6 	beq.w	800bef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bda4:	2300      	movs	r3, #0
 800bda6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bda8:	4b2a      	ldr	r3, [pc, #168]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bdaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10d      	bne.n	800bdd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdb4:	4b27      	ldr	r3, [pc, #156]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bdb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb8:	4a26      	ldr	r2, [pc, #152]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bdba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdbe:	6593      	str	r3, [r2, #88]	; 0x58
 800bdc0:	4b24      	ldr	r3, [pc, #144]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800bdc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc8:	60bb      	str	r3, [r7, #8]
 800bdca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bdd0:	4b21      	ldr	r3, [pc, #132]	; (800be58 <HAL_RCC_OscConfig+0x508>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d118      	bne.n	800be0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bddc:	4b1e      	ldr	r3, [pc, #120]	; (800be58 <HAL_RCC_OscConfig+0x508>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a1d      	ldr	r2, [pc, #116]	; (800be58 <HAL_RCC_OscConfig+0x508>)
 800bde2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bde6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bde8:	f7fe fa64 	bl	800a2b4 <HAL_GetTick>
 800bdec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bdee:	e008      	b.n	800be02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdf0:	f7fe fa60 	bl	800a2b4 <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d901      	bls.n	800be02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	e17a      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be02:	4b15      	ldr	r3, [pc, #84]	; (800be58 <HAL_RCC_OscConfig+0x508>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0f0      	beq.n	800bdf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d108      	bne.n	800be28 <HAL_RCC_OscConfig+0x4d8>
 800be16:	4b0f      	ldr	r3, [pc, #60]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800be18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be1c:	4a0d      	ldr	r2, [pc, #52]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800be1e:	f043 0301 	orr.w	r3, r3, #1
 800be22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800be26:	e029      	b.n	800be7c <HAL_RCC_OscConfig+0x52c>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	2b05      	cmp	r3, #5
 800be2e:	d115      	bne.n	800be5c <HAL_RCC_OscConfig+0x50c>
 800be30:	4b08      	ldr	r3, [pc, #32]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be36:	4a07      	ldr	r2, [pc, #28]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800be38:	f043 0304 	orr.w	r3, r3, #4
 800be3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800be40:	4b04      	ldr	r3, [pc, #16]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800be42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be46:	4a03      	ldr	r2, [pc, #12]	; (800be54 <HAL_RCC_OscConfig+0x504>)
 800be48:	f043 0301 	orr.w	r3, r3, #1
 800be4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800be50:	e014      	b.n	800be7c <HAL_RCC_OscConfig+0x52c>
 800be52:	bf00      	nop
 800be54:	40021000 	.word	0x40021000
 800be58:	40007000 	.word	0x40007000
 800be5c:	4b9c      	ldr	r3, [pc, #624]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800be5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be62:	4a9b      	ldr	r2, [pc, #620]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800be64:	f023 0301 	bic.w	r3, r3, #1
 800be68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800be6c:	4b98      	ldr	r3, [pc, #608]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800be6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be72:	4a97      	ldr	r2, [pc, #604]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800be74:	f023 0304 	bic.w	r3, r3, #4
 800be78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d016      	beq.n	800beb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be84:	f7fe fa16 	bl	800a2b4 <HAL_GetTick>
 800be88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be8a:	e00a      	b.n	800bea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be8c:	f7fe fa12 	bl	800a2b4 <HAL_GetTick>
 800be90:	4602      	mov	r2, r0
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	f241 3288 	movw	r2, #5000	; 0x1388
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d901      	bls.n	800bea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800be9e:	2303      	movs	r3, #3
 800bea0:	e12a      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bea2:	4b8b      	ldr	r3, [pc, #556]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea8:	f003 0302 	and.w	r3, r3, #2
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0ed      	beq.n	800be8c <HAL_RCC_OscConfig+0x53c>
 800beb0:	e015      	b.n	800bede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800beb2:	f7fe f9ff 	bl	800a2b4 <HAL_GetTick>
 800beb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800beb8:	e00a      	b.n	800bed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800beba:	f7fe f9fb 	bl	800a2b4 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bec8:	4293      	cmp	r3, r2
 800beca:	d901      	bls.n	800bed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800becc:	2303      	movs	r3, #3
 800bece:	e113      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bed0:	4b7f      	ldr	r3, [pc, #508]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed6:	f003 0302 	and.w	r3, r3, #2
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1ed      	bne.n	800beba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bede:	7ffb      	ldrb	r3, [r7, #31]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d105      	bne.n	800bef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bee4:	4b7a      	ldr	r3, [pc, #488]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee8:	4a79      	ldr	r2, [pc, #484]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800beea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800beee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 80fe 	beq.w	800c0f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befe:	2b02      	cmp	r3, #2
 800bf00:	f040 80d0 	bne.w	800c0a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800bf04:	4b72      	ldr	r3, [pc, #456]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f003 0203 	and.w	r2, r3, #3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d130      	bne.n	800bf7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf22:	3b01      	subs	r3, #1
 800bf24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d127      	bne.n	800bf7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d11f      	bne.n	800bf7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bf44:	2a07      	cmp	r2, #7
 800bf46:	bf14      	ite	ne
 800bf48:	2201      	movne	r2, #1
 800bf4a:	2200      	moveq	r2, #0
 800bf4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d113      	bne.n	800bf7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf5c:	085b      	lsrs	r3, r3, #1
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d109      	bne.n	800bf7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	085b      	lsrs	r3, r3, #1
 800bf72:	3b01      	subs	r3, #1
 800bf74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d06e      	beq.n	800c058 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	2b0c      	cmp	r3, #12
 800bf7e:	d069      	beq.n	800c054 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bf80:	4b53      	ldr	r3, [pc, #332]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d105      	bne.n	800bf98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800bf8c:	4b50      	ldr	r3, [pc, #320]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e0ad      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bf9c:	4b4c      	ldr	r3, [pc, #304]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a4b      	ldr	r2, [pc, #300]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bfa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bfa8:	f7fe f984 	bl	800a2b4 <HAL_GetTick>
 800bfac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfae:	e008      	b.n	800bfc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfb0:	f7fe f980 	bl	800a2b4 <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d901      	bls.n	800bfc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e09a      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfc2:	4b43      	ldr	r3, [pc, #268]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f0      	bne.n	800bfb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bfce:	4b40      	ldr	r3, [pc, #256]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	4b40      	ldr	r3, [pc, #256]	; (800c0d4 <HAL_RCC_OscConfig+0x784>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bfde:	3a01      	subs	r2, #1
 800bfe0:	0112      	lsls	r2, r2, #4
 800bfe2:	4311      	orrs	r1, r2
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bfe8:	0212      	lsls	r2, r2, #8
 800bfea:	4311      	orrs	r1, r2
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bff0:	0852      	lsrs	r2, r2, #1
 800bff2:	3a01      	subs	r2, #1
 800bff4:	0552      	lsls	r2, r2, #21
 800bff6:	4311      	orrs	r1, r2
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800bffc:	0852      	lsrs	r2, r2, #1
 800bffe:	3a01      	subs	r2, #1
 800c000:	0652      	lsls	r2, r2, #25
 800c002:	4311      	orrs	r1, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c008:	0912      	lsrs	r2, r2, #4
 800c00a:	0452      	lsls	r2, r2, #17
 800c00c:	430a      	orrs	r2, r1
 800c00e:	4930      	ldr	r1, [pc, #192]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c010:	4313      	orrs	r3, r2
 800c012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c014:	4b2e      	ldr	r3, [pc, #184]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a2d      	ldr	r2, [pc, #180]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c01a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c01e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c020:	4b2b      	ldr	r3, [pc, #172]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	4a2a      	ldr	r2, [pc, #168]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c02a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c02c:	f7fe f942 	bl	800a2b4 <HAL_GetTick>
 800c030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c032:	e008      	b.n	800c046 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c034:	f7fe f93e 	bl	800a2b4 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d901      	bls.n	800c046 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	e058      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c046:	4b22      	ldr	r3, [pc, #136]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0f0      	beq.n	800c034 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c052:	e050      	b.n	800c0f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e04f      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c058:	4b1d      	ldr	r3, [pc, #116]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c060:	2b00      	cmp	r3, #0
 800c062:	d148      	bne.n	800c0f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c064:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a19      	ldr	r2, [pc, #100]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c06a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c06e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c070:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c07a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c07c:	f7fe f91a 	bl	800a2b4 <HAL_GetTick>
 800c080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c082:	e008      	b.n	800c096 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c084:	f7fe f916 	bl	800a2b4 <HAL_GetTick>
 800c088:	4602      	mov	r2, r0
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	2b02      	cmp	r3, #2
 800c090:	d901      	bls.n	800c096 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800c092:	2303      	movs	r3, #3
 800c094:	e030      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c096:	4b0e      	ldr	r3, [pc, #56]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d0f0      	beq.n	800c084 <HAL_RCC_OscConfig+0x734>
 800c0a2:	e028      	b.n	800c0f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	2b0c      	cmp	r3, #12
 800c0a8:	d023      	beq.n	800c0f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0aa:	4b09      	ldr	r3, [pc, #36]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a08      	ldr	r2, [pc, #32]	; (800c0d0 <HAL_RCC_OscConfig+0x780>)
 800c0b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c0b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0b6:	f7fe f8fd 	bl	800a2b4 <HAL_GetTick>
 800c0ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0bc:	e00c      	b.n	800c0d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0be:	f7fe f8f9 	bl	800a2b4 <HAL_GetTick>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	1ad3      	subs	r3, r2, r3
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d905      	bls.n	800c0d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	e013      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
 800c0d0:	40021000 	.word	0x40021000
 800c0d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0d8:	4b09      	ldr	r3, [pc, #36]	; (800c100 <HAL_RCC_OscConfig+0x7b0>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1ec      	bne.n	800c0be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800c0e4:	4b06      	ldr	r3, [pc, #24]	; (800c100 <HAL_RCC_OscConfig+0x7b0>)
 800c0e6:	68da      	ldr	r2, [r3, #12]
 800c0e8:	4905      	ldr	r1, [pc, #20]	; (800c100 <HAL_RCC_OscConfig+0x7b0>)
 800c0ea:	4b06      	ldr	r3, [pc, #24]	; (800c104 <HAL_RCC_OscConfig+0x7b4>)
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	60cb      	str	r3, [r1, #12]
 800c0f0:	e001      	b.n	800c0f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e000      	b.n	800c0f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	40021000 	.word	0x40021000
 800c104:	feeefffc 	.word	0xfeeefffc

0800c108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	e0e7      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c11c:	4b75      	ldr	r3, [pc, #468]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0307 	and.w	r3, r3, #7
 800c124:	683a      	ldr	r2, [r7, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	d910      	bls.n	800c14c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c12a:	4b72      	ldr	r3, [pc, #456]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f023 0207 	bic.w	r2, r3, #7
 800c132:	4970      	ldr	r1, [pc, #448]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	4313      	orrs	r3, r2
 800c138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c13a:	4b6e      	ldr	r3, [pc, #440]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 0307 	and.w	r3, r3, #7
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d001      	beq.n	800c14c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e0cf      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0302 	and.w	r3, r3, #2
 800c154:	2b00      	cmp	r3, #0
 800c156:	d010      	beq.n	800c17a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	689a      	ldr	r2, [r3, #8]
 800c15c:	4b66      	ldr	r3, [pc, #408]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c164:	429a      	cmp	r2, r3
 800c166:	d908      	bls.n	800c17a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c168:	4b63      	ldr	r3, [pc, #396]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	4960      	ldr	r1, [pc, #384]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c176:	4313      	orrs	r3, r2
 800c178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d04c      	beq.n	800c220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	d107      	bne.n	800c19e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c18e:	4b5a      	ldr	r3, [pc, #360]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c196:	2b00      	cmp	r3, #0
 800c198:	d121      	bne.n	800c1de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c19a:	2301      	movs	r3, #1
 800c19c:	e0a6      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d107      	bne.n	800c1b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c1a6:	4b54      	ldr	r3, [pc, #336]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d115      	bne.n	800c1de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e09a      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d107      	bne.n	800c1ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c1be:	4b4e      	ldr	r3, [pc, #312]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f003 0302 	and.w	r3, r3, #2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d109      	bne.n	800c1de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e08e      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c1ce:	4b4a      	ldr	r3, [pc, #296]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e086      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c1de:	4b46      	ldr	r3, [pc, #280]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	f023 0203 	bic.w	r2, r3, #3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	4943      	ldr	r1, [pc, #268]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1f0:	f7fe f860 	bl	800a2b4 <HAL_GetTick>
 800c1f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c1f6:	e00a      	b.n	800c20e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1f8:	f7fe f85c 	bl	800a2b4 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	f241 3288 	movw	r2, #5000	; 0x1388
 800c206:	4293      	cmp	r3, r2
 800c208:	d901      	bls.n	800c20e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e06e      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c20e:	4b3a      	ldr	r3, [pc, #232]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c210:	689b      	ldr	r3, [r3, #8]
 800c212:	f003 020c 	and.w	r2, r3, #12
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d1eb      	bne.n	800c1f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 0302 	and.w	r3, r3, #2
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d010      	beq.n	800c24e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	689a      	ldr	r2, [r3, #8]
 800c230:	4b31      	ldr	r3, [pc, #196]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c238:	429a      	cmp	r2, r3
 800c23a:	d208      	bcs.n	800c24e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c23c:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	492b      	ldr	r1, [pc, #172]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c24e:	4b29      	ldr	r3, [pc, #164]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d210      	bcs.n	800c27e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c25c:	4b25      	ldr	r3, [pc, #148]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f023 0207 	bic.w	r2, r3, #7
 800c264:	4923      	ldr	r1, [pc, #140]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	4313      	orrs	r3, r2
 800c26a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c26c:	4b21      	ldr	r3, [pc, #132]	; (800c2f4 <HAL_RCC_ClockConfig+0x1ec>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 0307 	and.w	r3, r3, #7
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d001      	beq.n	800c27e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e036      	b.n	800c2ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f003 0304 	and.w	r3, r3, #4
 800c286:	2b00      	cmp	r3, #0
 800c288:	d008      	beq.n	800c29c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c28a:	4b1b      	ldr	r3, [pc, #108]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	4918      	ldr	r1, [pc, #96]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c298:	4313      	orrs	r3, r2
 800c29a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0308 	and.w	r3, r3, #8
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d009      	beq.n	800c2bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c2a8:	4b13      	ldr	r3, [pc, #76]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c2aa:	689b      	ldr	r3, [r3, #8]
 800c2ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	4910      	ldr	r1, [pc, #64]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c2bc:	f000 f824 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <HAL_RCC_ClockConfig+0x1f0>)
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	091b      	lsrs	r3, r3, #4
 800c2c8:	f003 030f 	and.w	r3, r3, #15
 800c2cc:	490b      	ldr	r1, [pc, #44]	; (800c2fc <HAL_RCC_ClockConfig+0x1f4>)
 800c2ce:	5ccb      	ldrb	r3, [r1, r3]
 800c2d0:	f003 031f 	and.w	r3, r3, #31
 800c2d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d8:	4a09      	ldr	r2, [pc, #36]	; (800c300 <HAL_RCC_ClockConfig+0x1f8>)
 800c2da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c2dc:	4b09      	ldr	r3, [pc, #36]	; (800c304 <HAL_RCC_ClockConfig+0x1fc>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fd ff97 	bl	800a214 <HAL_InitTick>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	72fb      	strb	r3, [r7, #11]

  return status;
 800c2ea:	7afb      	ldrb	r3, [r7, #11]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	40022000 	.word	0x40022000
 800c2f8:	40021000 	.word	0x40021000
 800c2fc:	0800ff78 	.word	0x0800ff78
 800c300:	20000190 	.word	0x20000190
 800c304:	20000194 	.word	0x20000194

0800c308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c308:	b480      	push	{r7}
 800c30a:	b089      	sub	sp, #36	; 0x24
 800c30c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c30e:	2300      	movs	r3, #0
 800c310:	61fb      	str	r3, [r7, #28]
 800c312:	2300      	movs	r3, #0
 800c314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c316:	4b3e      	ldr	r3, [pc, #248]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f003 030c 	and.w	r3, r3, #12
 800c31e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c320:	4b3b      	ldr	r3, [pc, #236]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d005      	beq.n	800c33c <HAL_RCC_GetSysClockFreq+0x34>
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	2b0c      	cmp	r3, #12
 800c334:	d121      	bne.n	800c37a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d11e      	bne.n	800c37a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c33c:	4b34      	ldr	r3, [pc, #208]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0308 	and.w	r3, r3, #8
 800c344:	2b00      	cmp	r3, #0
 800c346:	d107      	bne.n	800c358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c348:	4b31      	ldr	r3, [pc, #196]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c34a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c34e:	0a1b      	lsrs	r3, r3, #8
 800c350:	f003 030f 	and.w	r3, r3, #15
 800c354:	61fb      	str	r3, [r7, #28]
 800c356:	e005      	b.n	800c364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c358:	4b2d      	ldr	r3, [pc, #180]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	091b      	lsrs	r3, r3, #4
 800c35e:	f003 030f 	and.w	r3, r3, #15
 800c362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c364:	4a2b      	ldr	r2, [pc, #172]	; (800c414 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c36c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10d      	bne.n	800c390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c374:	69fb      	ldr	r3, [r7, #28]
 800c376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c378:	e00a      	b.n	800c390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	2b04      	cmp	r3, #4
 800c37e:	d102      	bne.n	800c386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c380:	4b25      	ldr	r3, [pc, #148]	; (800c418 <HAL_RCC_GetSysClockFreq+0x110>)
 800c382:	61bb      	str	r3, [r7, #24]
 800c384:	e004      	b.n	800c390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2b08      	cmp	r3, #8
 800c38a:	d101      	bne.n	800c390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c38c:	4b23      	ldr	r3, [pc, #140]	; (800c41c <HAL_RCC_GetSysClockFreq+0x114>)
 800c38e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2b0c      	cmp	r3, #12
 800c394:	d134      	bne.n	800c400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c396:	4b1e      	ldr	r3, [pc, #120]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f003 0303 	and.w	r3, r3, #3
 800c39e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d003      	beq.n	800c3ae <HAL_RCC_GetSysClockFreq+0xa6>
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d003      	beq.n	800c3b4 <HAL_RCC_GetSysClockFreq+0xac>
 800c3ac:	e005      	b.n	800c3ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c3ae:	4b1a      	ldr	r3, [pc, #104]	; (800c418 <HAL_RCC_GetSysClockFreq+0x110>)
 800c3b0:	617b      	str	r3, [r7, #20]
      break;
 800c3b2:	e005      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c3b4:	4b19      	ldr	r3, [pc, #100]	; (800c41c <HAL_RCC_GetSysClockFreq+0x114>)
 800c3b6:	617b      	str	r3, [r7, #20]
      break;
 800c3b8:	e002      	b.n	800c3c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	617b      	str	r3, [r7, #20]
      break;
 800c3be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c3c0:	4b13      	ldr	r3, [pc, #76]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	091b      	lsrs	r3, r3, #4
 800c3c6:	f003 0307 	and.w	r3, r3, #7
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c3ce:	4b10      	ldr	r3, [pc, #64]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d8:	697a      	ldr	r2, [r7, #20]
 800c3da:	fb03 f202 	mul.w	r2, r3, r2
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c3e6:	4b0a      	ldr	r3, [pc, #40]	; (800c410 <HAL_RCC_GetSysClockFreq+0x108>)
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	0e5b      	lsrs	r3, r3, #25
 800c3ec:	f003 0303 	and.w	r3, r3, #3
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	005b      	lsls	r3, r3, #1
 800c3f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c400:	69bb      	ldr	r3, [r7, #24]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3724      	adds	r7, #36	; 0x24
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	40021000 	.word	0x40021000
 800c414:	0800ff90 	.word	0x0800ff90
 800c418:	00f42400 	.word	0x00f42400
 800c41c:	007a1200 	.word	0x007a1200

0800c420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c420:	b480      	push	{r7}
 800c422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c424:	4b03      	ldr	r3, [pc, #12]	; (800c434 <HAL_RCC_GetHCLKFreq+0x14>)
 800c426:	681b      	ldr	r3, [r3, #0]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	20000190 	.word	0x20000190

0800c438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c43c:	f7ff fff0 	bl	800c420 <HAL_RCC_GetHCLKFreq>
 800c440:	4602      	mov	r2, r0
 800c442:	4b06      	ldr	r3, [pc, #24]	; (800c45c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	0a1b      	lsrs	r3, r3, #8
 800c448:	f003 0307 	and.w	r3, r3, #7
 800c44c:	4904      	ldr	r1, [pc, #16]	; (800c460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c44e:	5ccb      	ldrb	r3, [r1, r3]
 800c450:	f003 031f 	and.w	r3, r3, #31
 800c454:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c458:	4618      	mov	r0, r3
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	40021000 	.word	0x40021000
 800c460:	0800ff88 	.word	0x0800ff88

0800c464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c468:	f7ff ffda 	bl	800c420 <HAL_RCC_GetHCLKFreq>
 800c46c:	4602      	mov	r2, r0
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	0adb      	lsrs	r3, r3, #11
 800c474:	f003 0307 	and.w	r3, r3, #7
 800c478:	4904      	ldr	r1, [pc, #16]	; (800c48c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c47a:	5ccb      	ldrb	r3, [r1, r3]
 800c47c:	f003 031f 	and.w	r3, r3, #31
 800c480:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c484:	4618      	mov	r0, r3
 800c486:	bd80      	pop	{r7, pc}
 800c488:	40021000 	.word	0x40021000
 800c48c:	0800ff88 	.word	0x0800ff88

0800c490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c498:	2300      	movs	r3, #0
 800c49a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c49c:	4b2a      	ldr	r3, [pc, #168]	; (800c548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d003      	beq.n	800c4b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c4a8:	f7ff f9ee 	bl	800b888 <HAL_PWREx_GetVoltageRange>
 800c4ac:	6178      	str	r0, [r7, #20]
 800c4ae:	e014      	b.n	800c4da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c4b0:	4b25      	ldr	r3, [pc, #148]	; (800c548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4b4:	4a24      	ldr	r2, [pc, #144]	; (800c548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ba:	6593      	str	r3, [r2, #88]	; 0x58
 800c4bc:	4b22      	ldr	r3, [pc, #136]	; (800c548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c4c8:	f7ff f9de 	bl	800b888 <HAL_PWREx_GetVoltageRange>
 800c4cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	; (800c548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d2:	4a1d      	ldr	r2, [pc, #116]	; (800c548 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c4d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4e0:	d10b      	bne.n	800c4fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2b80      	cmp	r3, #128	; 0x80
 800c4e6:	d919      	bls.n	800c51c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2ba0      	cmp	r3, #160	; 0xa0
 800c4ec:	d902      	bls.n	800c4f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	613b      	str	r3, [r7, #16]
 800c4f2:	e013      	b.n	800c51c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	613b      	str	r3, [r7, #16]
 800c4f8:	e010      	b.n	800c51c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2b80      	cmp	r3, #128	; 0x80
 800c4fe:	d902      	bls.n	800c506 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c500:	2303      	movs	r3, #3
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	e00a      	b.n	800c51c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b80      	cmp	r3, #128	; 0x80
 800c50a:	d102      	bne.n	800c512 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c50c:	2302      	movs	r3, #2
 800c50e:	613b      	str	r3, [r7, #16]
 800c510:	e004      	b.n	800c51c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b70      	cmp	r3, #112	; 0x70
 800c516:	d101      	bne.n	800c51c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c518:	2301      	movs	r3, #1
 800c51a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c51c:	4b0b      	ldr	r3, [pc, #44]	; (800c54c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f023 0207 	bic.w	r2, r3, #7
 800c524:	4909      	ldr	r1, [pc, #36]	; (800c54c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	4313      	orrs	r3, r2
 800c52a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c52c:	4b07      	ldr	r3, [pc, #28]	; (800c54c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f003 0307 	and.w	r3, r3, #7
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	429a      	cmp	r2, r3
 800c538:	d001      	beq.n	800c53e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e000      	b.n	800c540 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	40021000 	.word	0x40021000
 800c54c:	40022000 	.word	0x40022000

0800c550 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c558:	2300      	movs	r3, #0
 800c55a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c55c:	2300      	movs	r3, #0
 800c55e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d041      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c570:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c574:	d02a      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c576:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c57a:	d824      	bhi.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c57c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c580:	d008      	beq.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c582:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c586:	d81e      	bhi.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00a      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c58c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c590:	d010      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c592:	e018      	b.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c594:	4b86      	ldr	r3, [pc, #536]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	4a85      	ldr	r2, [pc, #532]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c59a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c59e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c5a0:	e015      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 fabb 	bl	800cb24 <RCCEx_PLLSAI1_Config>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c5b2:	e00c      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	3320      	adds	r3, #32
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 fba6 	bl	800cd0c <RCCEx_PLLSAI2_Config>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c5c4:	e003      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	74fb      	strb	r3, [r7, #19]
      break;
 800c5ca:	e000      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c5cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5ce:	7cfb      	ldrb	r3, [r7, #19]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10b      	bne.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c5d4:	4b76      	ldr	r3, [pc, #472]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5e2:	4973      	ldr	r1, [pc, #460]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c5ea:	e001      	b.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ec:	7cfb      	ldrb	r3, [r7, #19]
 800c5ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d041      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c600:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c604:	d02a      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c606:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c60a:	d824      	bhi.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c60c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c610:	d008      	beq.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c616:	d81e      	bhi.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00a      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800c61c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c620:	d010      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c622:	e018      	b.n	800c656 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c624:	4b62      	ldr	r3, [pc, #392]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	4a61      	ldr	r2, [pc, #388]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c62a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c62e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c630:	e015      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	3304      	adds	r3, #4
 800c636:	2100      	movs	r1, #0
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fa73 	bl	800cb24 <RCCEx_PLLSAI1_Config>
 800c63e:	4603      	mov	r3, r0
 800c640:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c642:	e00c      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3320      	adds	r3, #32
 800c648:	2100      	movs	r1, #0
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fb5e 	bl	800cd0c <RCCEx_PLLSAI2_Config>
 800c650:	4603      	mov	r3, r0
 800c652:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c654:	e003      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	74fb      	strb	r3, [r7, #19]
      break;
 800c65a:	e000      	b.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800c65c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c65e:	7cfb      	ldrb	r3, [r7, #19]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10b      	bne.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c664:	4b52      	ldr	r3, [pc, #328]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c66a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c672:	494f      	ldr	r1, [pc, #316]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c674:	4313      	orrs	r3, r2
 800c676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c67a:	e001      	b.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c67c:	7cfb      	ldrb	r3, [r7, #19]
 800c67e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	f000 80a0 	beq.w	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c68e:	2300      	movs	r3, #0
 800c690:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c692:	4b47      	ldr	r3, [pc, #284]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e000      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00d      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6a8:	4b41      	ldr	r3, [pc, #260]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ac:	4a40      	ldr	r2, [pc, #256]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c6ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6b2:	6593      	str	r3, [r2, #88]	; 0x58
 800c6b4:	4b3e      	ldr	r3, [pc, #248]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c6b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c6c4:	4b3b      	ldr	r3, [pc, #236]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a3a      	ldr	r2, [pc, #232]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c6ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c6d0:	f7fd fdf0 	bl	800a2b4 <HAL_GetTick>
 800c6d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c6d6:	e009      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6d8:	f7fd fdec 	bl	800a2b4 <HAL_GetTick>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d902      	bls.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	74fb      	strb	r3, [r7, #19]
        break;
 800c6ea:	e005      	b.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c6ec:	4b31      	ldr	r3, [pc, #196]	; (800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0ef      	beq.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800c6f8:	7cfb      	ldrb	r3, [r7, #19]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d15c      	bne.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c6fe:	4b2c      	ldr	r3, [pc, #176]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c708:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d01f      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d019      	beq.n	800c750 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c71c:	4b24      	ldr	r3, [pc, #144]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c726:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c728:	4b21      	ldr	r3, [pc, #132]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c72e:	4a20      	ldr	r2, [pc, #128]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c738:	4b1d      	ldr	r3, [pc, #116]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c73a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c73e:	4a1c      	ldr	r2, [pc, #112]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c748:	4a19      	ldr	r2, [pc, #100]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d016      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c75a:	f7fd fdab 	bl	800a2b4 <HAL_GetTick>
 800c75e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c760:	e00b      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c762:	f7fd fda7 	bl	800a2b4 <HAL_GetTick>
 800c766:	4602      	mov	r2, r0
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	1ad3      	subs	r3, r2, r3
 800c76c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c770:	4293      	cmp	r3, r2
 800c772:	d902      	bls.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800c774:	2303      	movs	r3, #3
 800c776:	74fb      	strb	r3, [r7, #19]
            break;
 800c778:	e006      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c77a:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c780:	f003 0302 	and.w	r3, r3, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0ec      	beq.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800c788:	7cfb      	ldrb	r3, [r7, #19]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d10c      	bne.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c78e:	4b08      	ldr	r3, [pc, #32]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c794:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c79e:	4904      	ldr	r1, [pc, #16]	; (800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c7a6:	e009      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c7a8:	7cfb      	ldrb	r3, [r7, #19]
 800c7aa:	74bb      	strb	r3, [r7, #18]
 800c7ac:	e006      	b.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800c7ae:	bf00      	nop
 800c7b0:	40021000 	.word	0x40021000
 800c7b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b8:	7cfb      	ldrb	r3, [r7, #19]
 800c7ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c7bc:	7c7b      	ldrb	r3, [r7, #17]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d105      	bne.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7c2:	4b9e      	ldr	r3, [pc, #632]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c6:	4a9d      	ldr	r2, [pc, #628]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c7c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00a      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c7da:	4b98      	ldr	r3, [pc, #608]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7e0:	f023 0203 	bic.w	r2, r3, #3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e8:	4994      	ldr	r1, [pc, #592]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c7fc:	4b8f      	ldr	r3, [pc, #572]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c802:	f023 020c 	bic.w	r2, r3, #12
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c80a:	498c      	ldr	r1, [pc, #560]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0304 	and.w	r3, r3, #4
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c81e:	4b87      	ldr	r3, [pc, #540]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c824:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c82c:	4983      	ldr	r1, [pc, #524]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0308 	and.w	r3, r3, #8
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d00a      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c840:	4b7e      	ldr	r3, [pc, #504]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c846:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c84e:	497b      	ldr	r1, [pc, #492]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c850:	4313      	orrs	r3, r2
 800c852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0310 	and.w	r3, r3, #16
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00a      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c862:	4b76      	ldr	r3, [pc, #472]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c870:	4972      	ldr	r1, [pc, #456]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c872:	4313      	orrs	r3, r2
 800c874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0320 	and.w	r3, r3, #32
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00a      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c884:	4b6d      	ldr	r3, [pc, #436]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c88a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c892:	496a      	ldr	r1, [pc, #424]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c894:	4313      	orrs	r3, r2
 800c896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d00a      	beq.n	800c8bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c8a6:	4b65      	ldr	r3, [pc, #404]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b4:	4961      	ldr	r1, [pc, #388]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00a      	beq.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c8c8:	4b5c      	ldr	r3, [pc, #368]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8d6:	4959      	ldr	r1, [pc, #356]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00a      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c8ea:	4b54      	ldr	r3, [pc, #336]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c8ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8f8:	4950      	ldr	r1, [pc, #320]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d00a      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c90c:	4b4b      	ldr	r3, [pc, #300]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c90e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c912:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c91a:	4948      	ldr	r1, [pc, #288]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c91c:	4313      	orrs	r3, r2
 800c91e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00a      	beq.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c92e:	4b43      	ldr	r3, [pc, #268]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c934:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93c:	493f      	ldr	r1, [pc, #252]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c93e:	4313      	orrs	r3, r2
 800c940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d028      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c950:	4b3a      	ldr	r3, [pc, #232]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c95e:	4937      	ldr	r1, [pc, #220]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c960:	4313      	orrs	r3, r2
 800c962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c96a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c96e:	d106      	bne.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c970:	4b32      	ldr	r3, [pc, #200]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	4a31      	ldr	r2, [pc, #196]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c97a:	60d3      	str	r3, [r2, #12]
 800c97c:	e011      	b.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c986:	d10c      	bne.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3304      	adds	r3, #4
 800c98c:	2101      	movs	r1, #1
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f8c8 	bl	800cb24 <RCCEx_PLLSAI1_Config>
 800c994:	4603      	mov	r3, r0
 800c996:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c998:	7cfb      	ldrb	r3, [r7, #19]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800c99e:	7cfb      	ldrb	r3, [r7, #19]
 800c9a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d028      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c9ae:	4b23      	ldr	r3, [pc, #140]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9bc:	491f      	ldr	r1, [pc, #124]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9cc:	d106      	bne.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c9ce:	4b1b      	ldr	r3, [pc, #108]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	4a1a      	ldr	r2, [pc, #104]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c9d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9d8:	60d3      	str	r3, [r2, #12]
 800c9da:	e011      	b.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9e4:	d10c      	bne.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3304      	adds	r3, #4
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f899 	bl	800cb24 <RCCEx_PLLSAI1_Config>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c9f6:	7cfb      	ldrb	r3, [r7, #19]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800c9fc:	7cfb      	ldrb	r3, [r7, #19]
 800c9fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d02b      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca0c:	4b0b      	ldr	r3, [pc, #44]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ca0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca1a:	4908      	ldr	r1, [pc, #32]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca2a:	d109      	bne.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ca2c:	4b03      	ldr	r3, [pc, #12]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	4a02      	ldr	r2, [pc, #8]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ca32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca36:	60d3      	str	r3, [r2, #12]
 800ca38:	e014      	b.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800ca3a:	bf00      	nop
 800ca3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca48:	d10c      	bne.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	2101      	movs	r1, #1
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 f867 	bl	800cb24 <RCCEx_PLLSAI1_Config>
 800ca56:	4603      	mov	r3, r0
 800ca58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ca5a:	7cfb      	ldrb	r3, [r7, #19]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800ca60:	7cfb      	ldrb	r3, [r7, #19]
 800ca62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d02f      	beq.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca70:	4b2b      	ldr	r3, [pc, #172]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ca72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca7e:	4928      	ldr	r1, [pc, #160]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ca80:	4313      	orrs	r3, r2
 800ca82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca8e:	d10d      	bne.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	3304      	adds	r3, #4
 800ca94:	2102      	movs	r1, #2
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 f844 	bl	800cb24 <RCCEx_PLLSAI1_Config>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800caa0:	7cfb      	ldrb	r3, [r7, #19]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d014      	beq.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800caa6:	7cfb      	ldrb	r3, [r7, #19]
 800caa8:	74bb      	strb	r3, [r7, #18]
 800caaa:	e011      	b.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab4:	d10c      	bne.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3320      	adds	r3, #32
 800caba:	2102      	movs	r1, #2
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 f925 	bl	800cd0c <RCCEx_PLLSAI2_Config>
 800cac2:	4603      	mov	r3, r0
 800cac4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800cac6:	7cfb      	ldrb	r3, [r7, #19]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800cacc:	7cfb      	ldrb	r3, [r7, #19]
 800cace:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cadc:	4b10      	ldr	r3, [pc, #64]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cae2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caea:	490d      	ldr	r1, [pc, #52]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800caec:	4313      	orrs	r3, r2
 800caee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00b      	beq.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cafe:	4b08      	ldr	r3, [pc, #32]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cb00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb0e:	4904      	ldr	r1, [pc, #16]	; (800cb20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800cb10:	4313      	orrs	r3, r2
 800cb12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800cb16:	7cbb      	ldrb	r3, [r7, #18]
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	40021000 	.word	0x40021000

0800cb24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cb32:	4b75      	ldr	r3, [pc, #468]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cb34:	68db      	ldr	r3, [r3, #12]
 800cb36:	f003 0303 	and.w	r3, r3, #3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d018      	beq.n	800cb70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800cb3e:	4b72      	ldr	r3, [pc, #456]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f003 0203 	and.w	r2, r3, #3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d10d      	bne.n	800cb6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
       ||
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d009      	beq.n	800cb6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800cb56:	4b6c      	ldr	r3, [pc, #432]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	091b      	lsrs	r3, r3, #4
 800cb5c:	f003 0307 	and.w	r3, r3, #7
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
       ||
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d047      	beq.n	800cbfa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	73fb      	strb	r3, [r7, #15]
 800cb6e:	e044      	b.n	800cbfa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d018      	beq.n	800cbaa <RCCEx_PLLSAI1_Config+0x86>
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d825      	bhi.n	800cbc8 <RCCEx_PLLSAI1_Config+0xa4>
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d002      	beq.n	800cb86 <RCCEx_PLLSAI1_Config+0x62>
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d009      	beq.n	800cb98 <RCCEx_PLLSAI1_Config+0x74>
 800cb84:	e020      	b.n	800cbc8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cb86:	4b60      	ldr	r3, [pc, #384]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 0302 	and.w	r3, r3, #2
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d11d      	bne.n	800cbce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cb96:	e01a      	b.n	800cbce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cb98:	4b5b      	ldr	r3, [pc, #364]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d116      	bne.n	800cbd2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cba8:	e013      	b.n	800cbd2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cbaa:	4b57      	ldr	r3, [pc, #348]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d10f      	bne.n	800cbd6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cbb6:	4b54      	ldr	r3, [pc, #336]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d109      	bne.n	800cbd6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cbc6:	e006      	b.n	800cbd6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	73fb      	strb	r3, [r7, #15]
      break;
 800cbcc:	e004      	b.n	800cbd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbce:	bf00      	nop
 800cbd0:	e002      	b.n	800cbd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbd2:	bf00      	nop
 800cbd4:	e000      	b.n	800cbd8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800cbd6:	bf00      	nop
    }

    if(status == HAL_OK)
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d10d      	bne.n	800cbfa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cbde:	4b4a      	ldr	r3, [pc, #296]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbe0:	68db      	ldr	r3, [r3, #12]
 800cbe2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6819      	ldr	r1, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	3b01      	subs	r3, #1
 800cbf0:	011b      	lsls	r3, r3, #4
 800cbf2:	430b      	orrs	r3, r1
 800cbf4:	4944      	ldr	r1, [pc, #272]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d17d      	bne.n	800ccfc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cc00:	4b41      	ldr	r3, [pc, #260]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a40      	ldr	r2, [pc, #256]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc0c:	f7fd fb52 	bl	800a2b4 <HAL_GetTick>
 800cc10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc12:	e009      	b.n	800cc28 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cc14:	f7fd fb4e 	bl	800a2b4 <HAL_GetTick>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	2b02      	cmp	r3, #2
 800cc20:	d902      	bls.n	800cc28 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800cc22:	2303      	movs	r3, #3
 800cc24:	73fb      	strb	r3, [r7, #15]
        break;
 800cc26:	e005      	b.n	800cc34 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cc28:	4b37      	ldr	r3, [pc, #220]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1ef      	bne.n	800cc14 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d160      	bne.n	800ccfc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d111      	bne.n	800cc64 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc40:	4b31      	ldr	r3, [pc, #196]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800cc48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	6892      	ldr	r2, [r2, #8]
 800cc50:	0211      	lsls	r1, r2, #8
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	68d2      	ldr	r2, [r2, #12]
 800cc56:	0912      	lsrs	r2, r2, #4
 800cc58:	0452      	lsls	r2, r2, #17
 800cc5a:	430a      	orrs	r2, r1
 800cc5c:	492a      	ldr	r1, [pc, #168]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	610b      	str	r3, [r1, #16]
 800cc62:	e027      	b.n	800ccb4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d112      	bne.n	800cc90 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc6a:	4b27      	ldr	r3, [pc, #156]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800cc72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	6892      	ldr	r2, [r2, #8]
 800cc7a:	0211      	lsls	r1, r2, #8
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	6912      	ldr	r2, [r2, #16]
 800cc80:	0852      	lsrs	r2, r2, #1
 800cc82:	3a01      	subs	r2, #1
 800cc84:	0552      	lsls	r2, r2, #21
 800cc86:	430a      	orrs	r2, r1
 800cc88:	491f      	ldr	r1, [pc, #124]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	610b      	str	r3, [r1, #16]
 800cc8e:	e011      	b.n	800ccb4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cc90:	4b1d      	ldr	r3, [pc, #116]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800cc92:	691b      	ldr	r3, [r3, #16]
 800cc94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800cc98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	6892      	ldr	r2, [r2, #8]
 800cca0:	0211      	lsls	r1, r2, #8
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	6952      	ldr	r2, [r2, #20]
 800cca6:	0852      	lsrs	r2, r2, #1
 800cca8:	3a01      	subs	r2, #1
 800ccaa:	0652      	lsls	r2, r2, #25
 800ccac:	430a      	orrs	r2, r1
 800ccae:	4916      	ldr	r1, [pc, #88]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ccb4:	4b14      	ldr	r3, [pc, #80]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a13      	ldr	r2, [pc, #76]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccc0:	f7fd faf8 	bl	800a2b4 <HAL_GetTick>
 800ccc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ccc6:	e009      	b.n	800ccdc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ccc8:	f7fd faf4 	bl	800a2b4 <HAL_GetTick>
 800cccc:	4602      	mov	r2, r0
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	1ad3      	subs	r3, r2, r3
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d902      	bls.n	800ccdc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800ccd6:	2303      	movs	r3, #3
 800ccd8:	73fb      	strb	r3, [r7, #15]
          break;
 800ccda:	e005      	b.n	800cce8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d0ef      	beq.n	800ccc8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800cce8:	7bfb      	ldrb	r3, [r7, #15]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d106      	bne.n	800ccfc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ccee:	4b06      	ldr	r3, [pc, #24]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccf0:	691a      	ldr	r2, [r3, #16]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	699b      	ldr	r3, [r3, #24]
 800ccf6:	4904      	ldr	r1, [pc, #16]	; (800cd08 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ccfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	40021000 	.word	0x40021000

0800cd0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800cd1a:	4b6a      	ldr	r3, [pc, #424]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	f003 0303 	and.w	r3, r3, #3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d018      	beq.n	800cd58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800cd26:	4b67      	ldr	r3, [pc, #412]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	f003 0203 	and.w	r2, r3, #3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d10d      	bne.n	800cd52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
       ||
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d009      	beq.n	800cd52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800cd3e:	4b61      	ldr	r3, [pc, #388]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	091b      	lsrs	r3, r3, #4
 800cd44:	f003 0307 	and.w	r3, r3, #7
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685b      	ldr	r3, [r3, #4]
       ||
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d047      	beq.n	800cde2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	73fb      	strb	r3, [r7, #15]
 800cd56:	e044      	b.n	800cde2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d018      	beq.n	800cd92 <RCCEx_PLLSAI2_Config+0x86>
 800cd60:	2b03      	cmp	r3, #3
 800cd62:	d825      	bhi.n	800cdb0 <RCCEx_PLLSAI2_Config+0xa4>
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d002      	beq.n	800cd6e <RCCEx_PLLSAI2_Config+0x62>
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d009      	beq.n	800cd80 <RCCEx_PLLSAI2_Config+0x74>
 800cd6c:	e020      	b.n	800cdb0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cd6e:	4b55      	ldr	r3, [pc, #340]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 0302 	and.w	r3, r3, #2
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d11d      	bne.n	800cdb6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cd7e:	e01a      	b.n	800cdb6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800cd80:	4b50      	ldr	r3, [pc, #320]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d116      	bne.n	800cdba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cd90:	e013      	b.n	800cdba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800cd92:	4b4c      	ldr	r3, [pc, #304]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d10f      	bne.n	800cdbe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cd9e:	4b49      	ldr	r3, [pc, #292]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d109      	bne.n	800cdbe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdae:	e006      	b.n	800cdbe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	73fb      	strb	r3, [r7, #15]
      break;
 800cdb4:	e004      	b.n	800cdc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cdb6:	bf00      	nop
 800cdb8:	e002      	b.n	800cdc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cdba:	bf00      	nop
 800cdbc:	e000      	b.n	800cdc0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800cdbe:	bf00      	nop
    }

    if(status == HAL_OK)
 800cdc0:	7bfb      	ldrb	r3, [r7, #15]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d10d      	bne.n	800cde2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800cdc6:	4b3f      	ldr	r3, [pc, #252]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6819      	ldr	r1, [r3, #0]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	430b      	orrs	r3, r1
 800cddc:	4939      	ldr	r1, [pc, #228]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cdde:	4313      	orrs	r3, r2
 800cde0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d167      	bne.n	800ceb8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800cde8:	4b36      	ldr	r3, [pc, #216]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a35      	ldr	r2, [pc, #212]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800cdee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdf4:	f7fd fa5e 	bl	800a2b4 <HAL_GetTick>
 800cdf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800cdfa:	e009      	b.n	800ce10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800cdfc:	f7fd fa5a 	bl	800a2b4 <HAL_GetTick>
 800ce00:	4602      	mov	r2, r0
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	d902      	bls.n	800ce10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	73fb      	strb	r3, [r7, #15]
        break;
 800ce0e:	e005      	b.n	800ce1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ce10:	4b2c      	ldr	r3, [pc, #176]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1ef      	bne.n	800cdfc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d14a      	bne.n	800ceb8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d111      	bne.n	800ce4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ce28:	4b26      	ldr	r3, [pc, #152]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce2a:	695b      	ldr	r3, [r3, #20]
 800ce2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800ce30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	6892      	ldr	r2, [r2, #8]
 800ce38:	0211      	lsls	r1, r2, #8
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	68d2      	ldr	r2, [r2, #12]
 800ce3e:	0912      	lsrs	r2, r2, #4
 800ce40:	0452      	lsls	r2, r2, #17
 800ce42:	430a      	orrs	r2, r1
 800ce44:	491f      	ldr	r1, [pc, #124]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce46:	4313      	orrs	r3, r2
 800ce48:	614b      	str	r3, [r1, #20]
 800ce4a:	e011      	b.n	800ce70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800ce4c:	4b1d      	ldr	r3, [pc, #116]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800ce54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	6892      	ldr	r2, [r2, #8]
 800ce5c:	0211      	lsls	r1, r2, #8
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	6912      	ldr	r2, [r2, #16]
 800ce62:	0852      	lsrs	r2, r2, #1
 800ce64:	3a01      	subs	r2, #1
 800ce66:	0652      	lsls	r2, r2, #25
 800ce68:	430a      	orrs	r2, r1
 800ce6a:	4916      	ldr	r1, [pc, #88]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800ce70:	4b14      	ldr	r3, [pc, #80]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a13      	ldr	r2, [pc, #76]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce7c:	f7fd fa1a 	bl	800a2b4 <HAL_GetTick>
 800ce80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ce82:	e009      	b.n	800ce98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800ce84:	f7fd fa16 	bl	800a2b4 <HAL_GetTick>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d902      	bls.n	800ce98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800ce92:	2303      	movs	r3, #3
 800ce94:	73fb      	strb	r3, [r7, #15]
          break;
 800ce96:	e005      	b.n	800cea4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0ef      	beq.n	800ce84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d106      	bne.n	800ceb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800ceaa:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ceac:	695a      	ldr	r2, [r3, #20]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	4904      	ldr	r1, [pc, #16]	; (800cec4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	40021000 	.word	0x40021000

0800cec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d101      	bne.n	800ceda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e040      	b.n	800cf5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d106      	bne.n	800cef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 f83a 	bl	800cf64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2224      	movs	r2, #36	; 0x24
 800cef4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f022 0201 	bic.w	r2, r2, #1
 800cf04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f8ca 	bl	800d0a0 <UART_SetConfig>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d101      	bne.n	800cf16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e022      	b.n	800cf5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fb76 	bl	800d610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cf32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cf42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f042 0201 	orr.w	r2, r2, #1
 800cf52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fbfd 	bl	800d754 <UART_CheckIdleState>
 800cf5a:	4603      	mov	r3, r0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	; 0x28
 800cf7c:	af02      	add	r7, sp, #8
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	603b      	str	r3, [r7, #0]
 800cf84:	4613      	mov	r3, r2
 800cf86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf8c:	2b20      	cmp	r3, #32
 800cf8e:	f040 8082 	bne.w	800d096 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <HAL_UART_Transmit+0x26>
 800cf98:	88fb      	ldrh	r3, [r7, #6]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e07a      	b.n	800d098 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d101      	bne.n	800cfb0 <HAL_UART_Transmit+0x38>
 800cfac:	2302      	movs	r3, #2
 800cfae:	e073      	b.n	800d098 <HAL_UART_Transmit+0x120>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2221      	movs	r2, #33	; 0x21
 800cfc4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfc6:	f7fd f975 	bl	800a2b4 <HAL_GetTick>
 800cfca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	88fa      	ldrh	r2, [r7, #6]
 800cfd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	88fa      	ldrh	r2, [r7, #6]
 800cfd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfe4:	d108      	bne.n	800cff8 <HAL_UART_Transmit+0x80>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d104      	bne.n	800cff8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800cfee:	2300      	movs	r3, #0
 800cff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	61bb      	str	r3, [r7, #24]
 800cff6:	e003      	b.n	800d000 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cffc:	2300      	movs	r3, #0
 800cffe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d008:	e02d      	b.n	800d066 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	2200      	movs	r2, #0
 800d012:	2180      	movs	r1, #128	; 0x80
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 fbe6 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d001      	beq.n	800d024 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d020:	2303      	movs	r3, #3
 800d022:	e039      	b.n	800d098 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d10b      	bne.n	800d042 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	881a      	ldrh	r2, [r3, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d036:	b292      	uxth	r2, r2
 800d038:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	3302      	adds	r3, #2
 800d03e:	61bb      	str	r3, [r7, #24]
 800d040:	e008      	b.n	800d054 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	b292      	uxth	r2, r2
 800d04c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	3301      	adds	r3, #1
 800d052:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	3b01      	subs	r3, #1
 800d05e:	b29a      	uxth	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1cb      	bne.n	800d00a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	2200      	movs	r2, #0
 800d07a:	2140      	movs	r1, #64	; 0x40
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f000 fbb2 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d088:	2303      	movs	r3, #3
 800d08a:	e005      	b.n	800d098 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2220      	movs	r2, #32
 800d090:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	e000      	b.n	800d098 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d096:	2302      	movs	r3, #2
  }
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3720      	adds	r7, #32
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0a4:	b08a      	sub	sp, #40	; 0x28
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	689a      	ldr	r2, [r3, #8]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	695b      	ldr	r3, [r3, #20]
 800d0be:	431a      	orrs	r2, r3
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	69db      	ldr	r3, [r3, #28]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	4ba4      	ldr	r3, [pc, #656]	; (800d360 <UART_SetConfig+0x2c0>)
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	6812      	ldr	r2, [r2, #0]
 800d0d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	68da      	ldr	r2, [r3, #12]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	699b      	ldr	r3, [r3, #24]
 800d0f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a99      	ldr	r2, [pc, #612]	; (800d364 <UART_SetConfig+0x2c4>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d004      	beq.n	800d10c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d108:	4313      	orrs	r3, r2
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d11c:	430a      	orrs	r2, r1
 800d11e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a90      	ldr	r2, [pc, #576]	; (800d368 <UART_SetConfig+0x2c8>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d126      	bne.n	800d178 <UART_SetConfig+0xd8>
 800d12a:	4b90      	ldr	r3, [pc, #576]	; (800d36c <UART_SetConfig+0x2cc>)
 800d12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d130:	f003 0303 	and.w	r3, r3, #3
 800d134:	2b03      	cmp	r3, #3
 800d136:	d81b      	bhi.n	800d170 <UART_SetConfig+0xd0>
 800d138:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <UART_SetConfig+0xa0>)
 800d13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13e:	bf00      	nop
 800d140:	0800d151 	.word	0x0800d151
 800d144:	0800d161 	.word	0x0800d161
 800d148:	0800d159 	.word	0x0800d159
 800d14c:	0800d169 	.word	0x0800d169
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d156:	e116      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d158:	2302      	movs	r3, #2
 800d15a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d15e:	e112      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d160:	2304      	movs	r3, #4
 800d162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d166:	e10e      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d168:	2308      	movs	r3, #8
 800d16a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d16e:	e10a      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d170:	2310      	movs	r3, #16
 800d172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d176:	e106      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a7c      	ldr	r2, [pc, #496]	; (800d370 <UART_SetConfig+0x2d0>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d138      	bne.n	800d1f4 <UART_SetConfig+0x154>
 800d182:	4b7a      	ldr	r3, [pc, #488]	; (800d36c <UART_SetConfig+0x2cc>)
 800d184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d188:	f003 030c 	and.w	r3, r3, #12
 800d18c:	2b0c      	cmp	r3, #12
 800d18e:	d82d      	bhi.n	800d1ec <UART_SetConfig+0x14c>
 800d190:	a201      	add	r2, pc, #4	; (adr r2, 800d198 <UART_SetConfig+0xf8>)
 800d192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d196:	bf00      	nop
 800d198:	0800d1cd 	.word	0x0800d1cd
 800d19c:	0800d1ed 	.word	0x0800d1ed
 800d1a0:	0800d1ed 	.word	0x0800d1ed
 800d1a4:	0800d1ed 	.word	0x0800d1ed
 800d1a8:	0800d1dd 	.word	0x0800d1dd
 800d1ac:	0800d1ed 	.word	0x0800d1ed
 800d1b0:	0800d1ed 	.word	0x0800d1ed
 800d1b4:	0800d1ed 	.word	0x0800d1ed
 800d1b8:	0800d1d5 	.word	0x0800d1d5
 800d1bc:	0800d1ed 	.word	0x0800d1ed
 800d1c0:	0800d1ed 	.word	0x0800d1ed
 800d1c4:	0800d1ed 	.word	0x0800d1ed
 800d1c8:	0800d1e5 	.word	0x0800d1e5
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1d2:	e0d8      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1da:	e0d4      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d1dc:	2304      	movs	r3, #4
 800d1de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1e2:	e0d0      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d1e4:	2308      	movs	r3, #8
 800d1e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1ea:	e0cc      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d1ec:	2310      	movs	r3, #16
 800d1ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d1f2:	e0c8      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a5e      	ldr	r2, [pc, #376]	; (800d374 <UART_SetConfig+0x2d4>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d125      	bne.n	800d24a <UART_SetConfig+0x1aa>
 800d1fe:	4b5b      	ldr	r3, [pc, #364]	; (800d36c <UART_SetConfig+0x2cc>)
 800d200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d204:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d208:	2b30      	cmp	r3, #48	; 0x30
 800d20a:	d016      	beq.n	800d23a <UART_SetConfig+0x19a>
 800d20c:	2b30      	cmp	r3, #48	; 0x30
 800d20e:	d818      	bhi.n	800d242 <UART_SetConfig+0x1a2>
 800d210:	2b20      	cmp	r3, #32
 800d212:	d00a      	beq.n	800d22a <UART_SetConfig+0x18a>
 800d214:	2b20      	cmp	r3, #32
 800d216:	d814      	bhi.n	800d242 <UART_SetConfig+0x1a2>
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <UART_SetConfig+0x182>
 800d21c:	2b10      	cmp	r3, #16
 800d21e:	d008      	beq.n	800d232 <UART_SetConfig+0x192>
 800d220:	e00f      	b.n	800d242 <UART_SetConfig+0x1a2>
 800d222:	2300      	movs	r3, #0
 800d224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d228:	e0ad      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d22a:	2302      	movs	r3, #2
 800d22c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d230:	e0a9      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d232:	2304      	movs	r3, #4
 800d234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d238:	e0a5      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d23a:	2308      	movs	r3, #8
 800d23c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d240:	e0a1      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d242:	2310      	movs	r3, #16
 800d244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d248:	e09d      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a4a      	ldr	r2, [pc, #296]	; (800d378 <UART_SetConfig+0x2d8>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d125      	bne.n	800d2a0 <UART_SetConfig+0x200>
 800d254:	4b45      	ldr	r3, [pc, #276]	; (800d36c <UART_SetConfig+0x2cc>)
 800d256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d25a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d25e:	2bc0      	cmp	r3, #192	; 0xc0
 800d260:	d016      	beq.n	800d290 <UART_SetConfig+0x1f0>
 800d262:	2bc0      	cmp	r3, #192	; 0xc0
 800d264:	d818      	bhi.n	800d298 <UART_SetConfig+0x1f8>
 800d266:	2b80      	cmp	r3, #128	; 0x80
 800d268:	d00a      	beq.n	800d280 <UART_SetConfig+0x1e0>
 800d26a:	2b80      	cmp	r3, #128	; 0x80
 800d26c:	d814      	bhi.n	800d298 <UART_SetConfig+0x1f8>
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <UART_SetConfig+0x1d8>
 800d272:	2b40      	cmp	r3, #64	; 0x40
 800d274:	d008      	beq.n	800d288 <UART_SetConfig+0x1e8>
 800d276:	e00f      	b.n	800d298 <UART_SetConfig+0x1f8>
 800d278:	2300      	movs	r3, #0
 800d27a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d27e:	e082      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d280:	2302      	movs	r3, #2
 800d282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d286:	e07e      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d288:	2304      	movs	r3, #4
 800d28a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d28e:	e07a      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d290:	2308      	movs	r3, #8
 800d292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d296:	e076      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d298:	2310      	movs	r3, #16
 800d29a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d29e:	e072      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a35      	ldr	r2, [pc, #212]	; (800d37c <UART_SetConfig+0x2dc>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d12a      	bne.n	800d300 <UART_SetConfig+0x260>
 800d2aa:	4b30      	ldr	r3, [pc, #192]	; (800d36c <UART_SetConfig+0x2cc>)
 800d2ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d2b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2b8:	d01a      	beq.n	800d2f0 <UART_SetConfig+0x250>
 800d2ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d2be:	d81b      	bhi.n	800d2f8 <UART_SetConfig+0x258>
 800d2c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2c4:	d00c      	beq.n	800d2e0 <UART_SetConfig+0x240>
 800d2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ca:	d815      	bhi.n	800d2f8 <UART_SetConfig+0x258>
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d003      	beq.n	800d2d8 <UART_SetConfig+0x238>
 800d2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2d4:	d008      	beq.n	800d2e8 <UART_SetConfig+0x248>
 800d2d6:	e00f      	b.n	800d2f8 <UART_SetConfig+0x258>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2de:	e052      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2e6:	e04e      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d2e8:	2304      	movs	r3, #4
 800d2ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2ee:	e04a      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d2f0:	2308      	movs	r3, #8
 800d2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2f6:	e046      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d2f8:	2310      	movs	r3, #16
 800d2fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d2fe:	e042      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4a17      	ldr	r2, [pc, #92]	; (800d364 <UART_SetConfig+0x2c4>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d13a      	bne.n	800d380 <UART_SetConfig+0x2e0>
 800d30a:	4b18      	ldr	r3, [pc, #96]	; (800d36c <UART_SetConfig+0x2cc>)
 800d30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d310:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d318:	d01a      	beq.n	800d350 <UART_SetConfig+0x2b0>
 800d31a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d31e:	d81b      	bhi.n	800d358 <UART_SetConfig+0x2b8>
 800d320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d324:	d00c      	beq.n	800d340 <UART_SetConfig+0x2a0>
 800d326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d32a:	d815      	bhi.n	800d358 <UART_SetConfig+0x2b8>
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <UART_SetConfig+0x298>
 800d330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d334:	d008      	beq.n	800d348 <UART_SetConfig+0x2a8>
 800d336:	e00f      	b.n	800d358 <UART_SetConfig+0x2b8>
 800d338:	2300      	movs	r3, #0
 800d33a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d33e:	e022      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d340:	2302      	movs	r3, #2
 800d342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d346:	e01e      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d348:	2304      	movs	r3, #4
 800d34a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d34e:	e01a      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d350:	2308      	movs	r3, #8
 800d352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d356:	e016      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d358:	2310      	movs	r3, #16
 800d35a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d35e:	e012      	b.n	800d386 <UART_SetConfig+0x2e6>
 800d360:	efff69f3 	.word	0xefff69f3
 800d364:	40008000 	.word	0x40008000
 800d368:	40013800 	.word	0x40013800
 800d36c:	40021000 	.word	0x40021000
 800d370:	40004400 	.word	0x40004400
 800d374:	40004800 	.word	0x40004800
 800d378:	40004c00 	.word	0x40004c00
 800d37c:	40005000 	.word	0x40005000
 800d380:	2310      	movs	r3, #16
 800d382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a9f      	ldr	r2, [pc, #636]	; (800d608 <UART_SetConfig+0x568>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d17a      	bne.n	800d486 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d394:	2b08      	cmp	r3, #8
 800d396:	d824      	bhi.n	800d3e2 <UART_SetConfig+0x342>
 800d398:	a201      	add	r2, pc, #4	; (adr r2, 800d3a0 <UART_SetConfig+0x300>)
 800d39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39e:	bf00      	nop
 800d3a0:	0800d3c5 	.word	0x0800d3c5
 800d3a4:	0800d3e3 	.word	0x0800d3e3
 800d3a8:	0800d3cd 	.word	0x0800d3cd
 800d3ac:	0800d3e3 	.word	0x0800d3e3
 800d3b0:	0800d3d3 	.word	0x0800d3d3
 800d3b4:	0800d3e3 	.word	0x0800d3e3
 800d3b8:	0800d3e3 	.word	0x0800d3e3
 800d3bc:	0800d3e3 	.word	0x0800d3e3
 800d3c0:	0800d3db 	.word	0x0800d3db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3c4:	f7ff f838 	bl	800c438 <HAL_RCC_GetPCLK1Freq>
 800d3c8:	61f8      	str	r0, [r7, #28]
        break;
 800d3ca:	e010      	b.n	800d3ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d3cc:	4b8f      	ldr	r3, [pc, #572]	; (800d60c <UART_SetConfig+0x56c>)
 800d3ce:	61fb      	str	r3, [r7, #28]
        break;
 800d3d0:	e00d      	b.n	800d3ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3d2:	f7fe ff99 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800d3d6:	61f8      	str	r0, [r7, #28]
        break;
 800d3d8:	e009      	b.n	800d3ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3de:	61fb      	str	r3, [r7, #28]
        break;
 800d3e0:	e005      	b.n	800d3ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d3ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 80fb 	beq.w	800d5ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	4413      	add	r3, r2
 800d400:	69fa      	ldr	r2, [r7, #28]
 800d402:	429a      	cmp	r2, r3
 800d404:	d305      	bcc.n	800d412 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d40c:	69fa      	ldr	r2, [r7, #28]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d903      	bls.n	800d41a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d418:	e0e8      	b.n	800d5ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	2200      	movs	r2, #0
 800d41e:	461c      	mov	r4, r3
 800d420:	4615      	mov	r5, r2
 800d422:	f04f 0200 	mov.w	r2, #0
 800d426:	f04f 0300 	mov.w	r3, #0
 800d42a:	022b      	lsls	r3, r5, #8
 800d42c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d430:	0222      	lsls	r2, r4, #8
 800d432:	68f9      	ldr	r1, [r7, #12]
 800d434:	6849      	ldr	r1, [r1, #4]
 800d436:	0849      	lsrs	r1, r1, #1
 800d438:	2000      	movs	r0, #0
 800d43a:	4688      	mov	r8, r1
 800d43c:	4681      	mov	r9, r0
 800d43e:	eb12 0a08 	adds.w	sl, r2, r8
 800d442:	eb43 0b09 	adc.w	fp, r3, r9
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	685b      	ldr	r3, [r3, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	603b      	str	r3, [r7, #0]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d454:	4650      	mov	r0, sl
 800d456:	4659      	mov	r1, fp
 800d458:	f7f3 fbee 	bl	8000c38 <__aeabi_uldivmod>
 800d45c:	4602      	mov	r2, r0
 800d45e:	460b      	mov	r3, r1
 800d460:	4613      	mov	r3, r2
 800d462:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d46a:	d308      	bcc.n	800d47e <UART_SetConfig+0x3de>
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d472:	d204      	bcs.n	800d47e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	69ba      	ldr	r2, [r7, #24]
 800d47a:	60da      	str	r2, [r3, #12]
 800d47c:	e0b6      	b.n	800d5ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d484:	e0b2      	b.n	800d5ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	69db      	ldr	r3, [r3, #28]
 800d48a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d48e:	d15e      	bne.n	800d54e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d490:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d494:	2b08      	cmp	r3, #8
 800d496:	d828      	bhi.n	800d4ea <UART_SetConfig+0x44a>
 800d498:	a201      	add	r2, pc, #4	; (adr r2, 800d4a0 <UART_SetConfig+0x400>)
 800d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49e:	bf00      	nop
 800d4a0:	0800d4c5 	.word	0x0800d4c5
 800d4a4:	0800d4cd 	.word	0x0800d4cd
 800d4a8:	0800d4d5 	.word	0x0800d4d5
 800d4ac:	0800d4eb 	.word	0x0800d4eb
 800d4b0:	0800d4db 	.word	0x0800d4db
 800d4b4:	0800d4eb 	.word	0x0800d4eb
 800d4b8:	0800d4eb 	.word	0x0800d4eb
 800d4bc:	0800d4eb 	.word	0x0800d4eb
 800d4c0:	0800d4e3 	.word	0x0800d4e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4c4:	f7fe ffb8 	bl	800c438 <HAL_RCC_GetPCLK1Freq>
 800d4c8:	61f8      	str	r0, [r7, #28]
        break;
 800d4ca:	e014      	b.n	800d4f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4cc:	f7fe ffca 	bl	800c464 <HAL_RCC_GetPCLK2Freq>
 800d4d0:	61f8      	str	r0, [r7, #28]
        break;
 800d4d2:	e010      	b.n	800d4f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4d4:	4b4d      	ldr	r3, [pc, #308]	; (800d60c <UART_SetConfig+0x56c>)
 800d4d6:	61fb      	str	r3, [r7, #28]
        break;
 800d4d8:	e00d      	b.n	800d4f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4da:	f7fe ff15 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800d4de:	61f8      	str	r0, [r7, #28]
        break;
 800d4e0:	e009      	b.n	800d4f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4e6:	61fb      	str	r3, [r7, #28]
        break;
 800d4e8:	e005      	b.n	800d4f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d4f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d077      	beq.n	800d5ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	005a      	lsls	r2, r3, #1
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	085b      	lsrs	r3, r3, #1
 800d506:	441a      	add	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d510:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	2b0f      	cmp	r3, #15
 800d516:	d916      	bls.n	800d546 <UART_SetConfig+0x4a6>
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d51e:	d212      	bcs.n	800d546 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	b29b      	uxth	r3, r3
 800d524:	f023 030f 	bic.w	r3, r3, #15
 800d528:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	085b      	lsrs	r3, r3, #1
 800d52e:	b29b      	uxth	r3, r3
 800d530:	f003 0307 	and.w	r3, r3, #7
 800d534:	b29a      	uxth	r2, r3
 800d536:	8afb      	ldrh	r3, [r7, #22]
 800d538:	4313      	orrs	r3, r2
 800d53a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	8afa      	ldrh	r2, [r7, #22]
 800d542:	60da      	str	r2, [r3, #12]
 800d544:	e052      	b.n	800d5ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d546:	2301      	movs	r3, #1
 800d548:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d54c:	e04e      	b.n	800d5ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d54e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d552:	2b08      	cmp	r3, #8
 800d554:	d827      	bhi.n	800d5a6 <UART_SetConfig+0x506>
 800d556:	a201      	add	r2, pc, #4	; (adr r2, 800d55c <UART_SetConfig+0x4bc>)
 800d558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55c:	0800d581 	.word	0x0800d581
 800d560:	0800d589 	.word	0x0800d589
 800d564:	0800d591 	.word	0x0800d591
 800d568:	0800d5a7 	.word	0x0800d5a7
 800d56c:	0800d597 	.word	0x0800d597
 800d570:	0800d5a7 	.word	0x0800d5a7
 800d574:	0800d5a7 	.word	0x0800d5a7
 800d578:	0800d5a7 	.word	0x0800d5a7
 800d57c:	0800d59f 	.word	0x0800d59f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d580:	f7fe ff5a 	bl	800c438 <HAL_RCC_GetPCLK1Freq>
 800d584:	61f8      	str	r0, [r7, #28]
        break;
 800d586:	e014      	b.n	800d5b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d588:	f7fe ff6c 	bl	800c464 <HAL_RCC_GetPCLK2Freq>
 800d58c:	61f8      	str	r0, [r7, #28]
        break;
 800d58e:	e010      	b.n	800d5b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d590:	4b1e      	ldr	r3, [pc, #120]	; (800d60c <UART_SetConfig+0x56c>)
 800d592:	61fb      	str	r3, [r7, #28]
        break;
 800d594:	e00d      	b.n	800d5b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d596:	f7fe feb7 	bl	800c308 <HAL_RCC_GetSysClockFreq>
 800d59a:	61f8      	str	r0, [r7, #28]
        break;
 800d59c:	e009      	b.n	800d5b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5a2:	61fb      	str	r3, [r7, #28]
        break;
 800d5a4:	e005      	b.n	800d5b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d5b0:	bf00      	nop
    }

    if (pclk != 0U)
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d019      	beq.n	800d5ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	085a      	lsrs	r2, r3, #1
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	441a      	add	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	2b0f      	cmp	r3, #15
 800d5d0:	d909      	bls.n	800d5e6 <UART_SetConfig+0x546>
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5d8:	d205      	bcs.n	800d5e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	b29a      	uxth	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	60da      	str	r2, [r3, #12]
 800d5e4:	e002      	b.n	800d5ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d5f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3728      	adds	r7, #40	; 0x28
 800d600:	46bd      	mov	sp, r7
 800d602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d606:	bf00      	nop
 800d608:	40008000 	.word	0x40008000
 800d60c:	00f42400 	.word	0x00f42400

0800d610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61c:	f003 0301 	and.w	r3, r3, #1
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00a      	beq.n	800d63a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d63e:	f003 0302 	and.w	r3, r3, #2
 800d642:	2b00      	cmp	r3, #0
 800d644:	d00a      	beq.n	800d65c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	430a      	orrs	r2, r1
 800d65a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	f003 0304 	and.w	r3, r3, #4
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00a      	beq.n	800d67e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d682:	f003 0308 	and.w	r3, r3, #8
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00a      	beq.n	800d6a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	430a      	orrs	r2, r1
 800d69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a4:	f003 0310 	and.w	r3, r3, #16
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00a      	beq.n	800d6c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	430a      	orrs	r2, r1
 800d6c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00a      	beq.n	800d6e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	430a      	orrs	r2, r1
 800d6e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01a      	beq.n	800d726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	430a      	orrs	r2, r1
 800d704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d70e:	d10a      	bne.n	800d726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	430a      	orrs	r2, r1
 800d724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00a      	beq.n	800d748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	430a      	orrs	r2, r1
 800d746:	605a      	str	r2, [r3, #4]
  }
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af02      	add	r7, sp, #8
 800d75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d764:	f7fc fda6 	bl	800a2b4 <HAL_GetTick>
 800d768:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f003 0308 	and.w	r3, r3, #8
 800d774:	2b08      	cmp	r3, #8
 800d776:	d10e      	bne.n	800d796 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f82d 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d001      	beq.n	800d796 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d792:	2303      	movs	r3, #3
 800d794:	e023      	b.n	800d7de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f003 0304 	and.w	r3, r3, #4
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d10e      	bne.n	800d7c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f817 	bl	800d7e6 <UART_WaitOnFlagUntilTimeout>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d001      	beq.n	800d7c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	e00d      	b.n	800d7de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b09c      	sub	sp, #112	; 0x70
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	60f8      	str	r0, [r7, #12]
 800d7ee:	60b9      	str	r1, [r7, #8]
 800d7f0:	603b      	str	r3, [r7, #0]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7f6:	e0a5      	b.n	800d944 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fe:	f000 80a1 	beq.w	800d944 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d802:	f7fc fd57 	bl	800a2b4 <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d80e:	429a      	cmp	r2, r3
 800d810:	d302      	bcc.n	800d818 <UART_WaitOnFlagUntilTimeout+0x32>
 800d812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d814:	2b00      	cmp	r3, #0
 800d816:	d13e      	bne.n	800d896 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d81e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d820:	e853 3f00 	ldrex	r3, [r3]
 800d824:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d82c:	667b      	str	r3, [r7, #100]	; 0x64
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	461a      	mov	r2, r3
 800d834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d836:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d838:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d83c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d83e:	e841 2300 	strex	r3, r2, [r1]
 800d842:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e6      	bne.n	800d818 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	3308      	adds	r3, #8
 800d850:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85c:	f023 0301 	bic.w	r3, r3, #1
 800d860:	663b      	str	r3, [r7, #96]	; 0x60
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d86a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d86c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2220      	movs	r2, #32
 800d882:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2220      	movs	r2, #32
 800d888:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e067      	b.n	800d966 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 0304 	and.w	r3, r3, #4
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d04f      	beq.n	800d944 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	69db      	ldr	r3, [r3, #28]
 800d8aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d8b2:	d147      	bne.n	800d944 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8bc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8c6:	e853 3f00 	ldrex	r3, [r3]
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d8d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	461a      	mov	r2, r3
 800d8da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8dc:	637b      	str	r3, [r7, #52]	; 0x34
 800d8de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8e4:	e841 2300 	strex	r3, r2, [r1]
 800d8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1e6      	bne.n	800d8be <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	e853 3f00 	ldrex	r3, [r3]
 800d8fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	f023 0301 	bic.w	r3, r3, #1
 800d906:	66bb      	str	r3, [r7, #104]	; 0x68
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3308      	adds	r3, #8
 800d90e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d910:	623a      	str	r2, [r7, #32]
 800d912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d914:	69f9      	ldr	r1, [r7, #28]
 800d916:	6a3a      	ldr	r2, [r7, #32]
 800d918:	e841 2300 	strex	r3, r2, [r1]
 800d91c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1e5      	bne.n	800d8f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2220      	movs	r2, #32
 800d928:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2220      	movs	r2, #32
 800d92e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2220      	movs	r2, #32
 800d934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d940:	2303      	movs	r3, #3
 800d942:	e010      	b.n	800d966 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	69da      	ldr	r2, [r3, #28]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	4013      	ands	r3, r2
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	429a      	cmp	r2, r3
 800d952:	bf0c      	ite	eq
 800d954:	2301      	moveq	r3, #1
 800d956:	2300      	movne	r3, #0
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	461a      	mov	r2, r3
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	429a      	cmp	r2, r3
 800d960:	f43f af4a 	beq.w	800d7f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3770      	adds	r7, #112	; 0x70
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
	...

0800d970 <__errno>:
 800d970:	4b01      	ldr	r3, [pc, #4]	; (800d978 <__errno+0x8>)
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	2000019c 	.word	0x2000019c

0800d97c <__libc_init_array>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	4d0d      	ldr	r5, [pc, #52]	; (800d9b4 <__libc_init_array+0x38>)
 800d980:	4c0d      	ldr	r4, [pc, #52]	; (800d9b8 <__libc_init_array+0x3c>)
 800d982:	1b64      	subs	r4, r4, r5
 800d984:	10a4      	asrs	r4, r4, #2
 800d986:	2600      	movs	r6, #0
 800d988:	42a6      	cmp	r6, r4
 800d98a:	d109      	bne.n	800d9a0 <__libc_init_array+0x24>
 800d98c:	4d0b      	ldr	r5, [pc, #44]	; (800d9bc <__libc_init_array+0x40>)
 800d98e:	4c0c      	ldr	r4, [pc, #48]	; (800d9c0 <__libc_init_array+0x44>)
 800d990:	f002 f8ec 	bl	800fb6c <_init>
 800d994:	1b64      	subs	r4, r4, r5
 800d996:	10a4      	asrs	r4, r4, #2
 800d998:	2600      	movs	r6, #0
 800d99a:	42a6      	cmp	r6, r4
 800d99c:	d105      	bne.n	800d9aa <__libc_init_array+0x2e>
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9a4:	4798      	blx	r3
 800d9a6:	3601      	adds	r6, #1
 800d9a8:	e7ee      	b.n	800d988 <__libc_init_array+0xc>
 800d9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9ae:	4798      	blx	r3
 800d9b0:	3601      	adds	r6, #1
 800d9b2:	e7f2      	b.n	800d99a <__libc_init_array+0x1e>
 800d9b4:	08010090 	.word	0x08010090
 800d9b8:	08010090 	.word	0x08010090
 800d9bc:	08010090 	.word	0x08010090
 800d9c0:	08010094 	.word	0x08010094

0800d9c4 <memset>:
 800d9c4:	4402      	add	r2, r0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d100      	bne.n	800d9ce <memset+0xa>
 800d9cc:	4770      	bx	lr
 800d9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d9d2:	e7f9      	b.n	800d9c8 <memset+0x4>

0800d9d4 <iprintf>:
 800d9d4:	b40f      	push	{r0, r1, r2, r3}
 800d9d6:	4b0a      	ldr	r3, [pc, #40]	; (800da00 <iprintf+0x2c>)
 800d9d8:	b513      	push	{r0, r1, r4, lr}
 800d9da:	681c      	ldr	r4, [r3, #0]
 800d9dc:	b124      	cbz	r4, 800d9e8 <iprintf+0x14>
 800d9de:	69a3      	ldr	r3, [r4, #24]
 800d9e0:	b913      	cbnz	r3, 800d9e8 <iprintf+0x14>
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 f89a 	bl	800db1c <__sinit>
 800d9e8:	ab05      	add	r3, sp, #20
 800d9ea:	9a04      	ldr	r2, [sp, #16]
 800d9ec:	68a1      	ldr	r1, [r4, #8]
 800d9ee:	9301      	str	r3, [sp, #4]
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fb4d 	bl	800e090 <_vfiprintf_r>
 800d9f6:	b002      	add	sp, #8
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	b004      	add	sp, #16
 800d9fe:	4770      	bx	lr
 800da00:	2000019c 	.word	0x2000019c

0800da04 <sniprintf>:
 800da04:	b40c      	push	{r2, r3}
 800da06:	b530      	push	{r4, r5, lr}
 800da08:	4b17      	ldr	r3, [pc, #92]	; (800da68 <sniprintf+0x64>)
 800da0a:	1e0c      	subs	r4, r1, #0
 800da0c:	681d      	ldr	r5, [r3, #0]
 800da0e:	b09d      	sub	sp, #116	; 0x74
 800da10:	da08      	bge.n	800da24 <sniprintf+0x20>
 800da12:	238b      	movs	r3, #139	; 0x8b
 800da14:	602b      	str	r3, [r5, #0]
 800da16:	f04f 30ff 	mov.w	r0, #4294967295
 800da1a:	b01d      	add	sp, #116	; 0x74
 800da1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da20:	b002      	add	sp, #8
 800da22:	4770      	bx	lr
 800da24:	f44f 7302 	mov.w	r3, #520	; 0x208
 800da28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da2c:	bf14      	ite	ne
 800da2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da32:	4623      	moveq	r3, r4
 800da34:	9304      	str	r3, [sp, #16]
 800da36:	9307      	str	r3, [sp, #28]
 800da38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da3c:	9002      	str	r0, [sp, #8]
 800da3e:	9006      	str	r0, [sp, #24]
 800da40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da46:	ab21      	add	r3, sp, #132	; 0x84
 800da48:	a902      	add	r1, sp, #8
 800da4a:	4628      	mov	r0, r5
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	f000 f9f5 	bl	800de3c <_svfiprintf_r>
 800da52:	1c43      	adds	r3, r0, #1
 800da54:	bfbc      	itt	lt
 800da56:	238b      	movlt	r3, #139	; 0x8b
 800da58:	602b      	strlt	r3, [r5, #0]
 800da5a:	2c00      	cmp	r4, #0
 800da5c:	d0dd      	beq.n	800da1a <sniprintf+0x16>
 800da5e:	9b02      	ldr	r3, [sp, #8]
 800da60:	2200      	movs	r2, #0
 800da62:	701a      	strb	r2, [r3, #0]
 800da64:	e7d9      	b.n	800da1a <sniprintf+0x16>
 800da66:	bf00      	nop
 800da68:	2000019c 	.word	0x2000019c

0800da6c <std>:
 800da6c:	2300      	movs	r3, #0
 800da6e:	b510      	push	{r4, lr}
 800da70:	4604      	mov	r4, r0
 800da72:	e9c0 3300 	strd	r3, r3, [r0]
 800da76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da7a:	6083      	str	r3, [r0, #8]
 800da7c:	8181      	strh	r1, [r0, #12]
 800da7e:	6643      	str	r3, [r0, #100]	; 0x64
 800da80:	81c2      	strh	r2, [r0, #14]
 800da82:	6183      	str	r3, [r0, #24]
 800da84:	4619      	mov	r1, r3
 800da86:	2208      	movs	r2, #8
 800da88:	305c      	adds	r0, #92	; 0x5c
 800da8a:	f7ff ff9b 	bl	800d9c4 <memset>
 800da8e:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <std+0x38>)
 800da90:	6263      	str	r3, [r4, #36]	; 0x24
 800da92:	4b05      	ldr	r3, [pc, #20]	; (800daa8 <std+0x3c>)
 800da94:	62a3      	str	r3, [r4, #40]	; 0x28
 800da96:	4b05      	ldr	r3, [pc, #20]	; (800daac <std+0x40>)
 800da98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da9a:	4b05      	ldr	r3, [pc, #20]	; (800dab0 <std+0x44>)
 800da9c:	6224      	str	r4, [r4, #32]
 800da9e:	6323      	str	r3, [r4, #48]	; 0x30
 800daa0:	bd10      	pop	{r4, pc}
 800daa2:	bf00      	nop
 800daa4:	0800e639 	.word	0x0800e639
 800daa8:	0800e65b 	.word	0x0800e65b
 800daac:	0800e693 	.word	0x0800e693
 800dab0:	0800e6b7 	.word	0x0800e6b7

0800dab4 <_cleanup_r>:
 800dab4:	4901      	ldr	r1, [pc, #4]	; (800dabc <_cleanup_r+0x8>)
 800dab6:	f000 b8af 	b.w	800dc18 <_fwalk_reent>
 800daba:	bf00      	nop
 800dabc:	0800e991 	.word	0x0800e991

0800dac0 <__sfmoreglue>:
 800dac0:	b570      	push	{r4, r5, r6, lr}
 800dac2:	2268      	movs	r2, #104	; 0x68
 800dac4:	1e4d      	subs	r5, r1, #1
 800dac6:	4355      	muls	r5, r2
 800dac8:	460e      	mov	r6, r1
 800daca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dace:	f000 f8e5 	bl	800dc9c <_malloc_r>
 800dad2:	4604      	mov	r4, r0
 800dad4:	b140      	cbz	r0, 800dae8 <__sfmoreglue+0x28>
 800dad6:	2100      	movs	r1, #0
 800dad8:	e9c0 1600 	strd	r1, r6, [r0]
 800dadc:	300c      	adds	r0, #12
 800dade:	60a0      	str	r0, [r4, #8]
 800dae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dae4:	f7ff ff6e 	bl	800d9c4 <memset>
 800dae8:	4620      	mov	r0, r4
 800daea:	bd70      	pop	{r4, r5, r6, pc}

0800daec <__sfp_lock_acquire>:
 800daec:	4801      	ldr	r0, [pc, #4]	; (800daf4 <__sfp_lock_acquire+0x8>)
 800daee:	f000 b8b3 	b.w	800dc58 <__retarget_lock_acquire_recursive>
 800daf2:	bf00      	nop
 800daf4:	20000669 	.word	0x20000669

0800daf8 <__sfp_lock_release>:
 800daf8:	4801      	ldr	r0, [pc, #4]	; (800db00 <__sfp_lock_release+0x8>)
 800dafa:	f000 b8ae 	b.w	800dc5a <__retarget_lock_release_recursive>
 800dafe:	bf00      	nop
 800db00:	20000669 	.word	0x20000669

0800db04 <__sinit_lock_acquire>:
 800db04:	4801      	ldr	r0, [pc, #4]	; (800db0c <__sinit_lock_acquire+0x8>)
 800db06:	f000 b8a7 	b.w	800dc58 <__retarget_lock_acquire_recursive>
 800db0a:	bf00      	nop
 800db0c:	2000066a 	.word	0x2000066a

0800db10 <__sinit_lock_release>:
 800db10:	4801      	ldr	r0, [pc, #4]	; (800db18 <__sinit_lock_release+0x8>)
 800db12:	f000 b8a2 	b.w	800dc5a <__retarget_lock_release_recursive>
 800db16:	bf00      	nop
 800db18:	2000066a 	.word	0x2000066a

0800db1c <__sinit>:
 800db1c:	b510      	push	{r4, lr}
 800db1e:	4604      	mov	r4, r0
 800db20:	f7ff fff0 	bl	800db04 <__sinit_lock_acquire>
 800db24:	69a3      	ldr	r3, [r4, #24]
 800db26:	b11b      	cbz	r3, 800db30 <__sinit+0x14>
 800db28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db2c:	f7ff bff0 	b.w	800db10 <__sinit_lock_release>
 800db30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db34:	6523      	str	r3, [r4, #80]	; 0x50
 800db36:	4b13      	ldr	r3, [pc, #76]	; (800db84 <__sinit+0x68>)
 800db38:	4a13      	ldr	r2, [pc, #76]	; (800db88 <__sinit+0x6c>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800db3e:	42a3      	cmp	r3, r4
 800db40:	bf04      	itt	eq
 800db42:	2301      	moveq	r3, #1
 800db44:	61a3      	streq	r3, [r4, #24]
 800db46:	4620      	mov	r0, r4
 800db48:	f000 f820 	bl	800db8c <__sfp>
 800db4c:	6060      	str	r0, [r4, #4]
 800db4e:	4620      	mov	r0, r4
 800db50:	f000 f81c 	bl	800db8c <__sfp>
 800db54:	60a0      	str	r0, [r4, #8]
 800db56:	4620      	mov	r0, r4
 800db58:	f000 f818 	bl	800db8c <__sfp>
 800db5c:	2200      	movs	r2, #0
 800db5e:	60e0      	str	r0, [r4, #12]
 800db60:	2104      	movs	r1, #4
 800db62:	6860      	ldr	r0, [r4, #4]
 800db64:	f7ff ff82 	bl	800da6c <std>
 800db68:	68a0      	ldr	r0, [r4, #8]
 800db6a:	2201      	movs	r2, #1
 800db6c:	2109      	movs	r1, #9
 800db6e:	f7ff ff7d 	bl	800da6c <std>
 800db72:	68e0      	ldr	r0, [r4, #12]
 800db74:	2202      	movs	r2, #2
 800db76:	2112      	movs	r1, #18
 800db78:	f7ff ff78 	bl	800da6c <std>
 800db7c:	2301      	movs	r3, #1
 800db7e:	61a3      	str	r3, [r4, #24]
 800db80:	e7d2      	b.n	800db28 <__sinit+0xc>
 800db82:	bf00      	nop
 800db84:	0800ffc0 	.word	0x0800ffc0
 800db88:	0800dab5 	.word	0x0800dab5

0800db8c <__sfp>:
 800db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8e:	4607      	mov	r7, r0
 800db90:	f7ff ffac 	bl	800daec <__sfp_lock_acquire>
 800db94:	4b1e      	ldr	r3, [pc, #120]	; (800dc10 <__sfp+0x84>)
 800db96:	681e      	ldr	r6, [r3, #0]
 800db98:	69b3      	ldr	r3, [r6, #24]
 800db9a:	b913      	cbnz	r3, 800dba2 <__sfp+0x16>
 800db9c:	4630      	mov	r0, r6
 800db9e:	f7ff ffbd 	bl	800db1c <__sinit>
 800dba2:	3648      	adds	r6, #72	; 0x48
 800dba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	d503      	bpl.n	800dbb4 <__sfp+0x28>
 800dbac:	6833      	ldr	r3, [r6, #0]
 800dbae:	b30b      	cbz	r3, 800dbf4 <__sfp+0x68>
 800dbb0:	6836      	ldr	r6, [r6, #0]
 800dbb2:	e7f7      	b.n	800dba4 <__sfp+0x18>
 800dbb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbb8:	b9d5      	cbnz	r5, 800dbf0 <__sfp+0x64>
 800dbba:	4b16      	ldr	r3, [pc, #88]	; (800dc14 <__sfp+0x88>)
 800dbbc:	60e3      	str	r3, [r4, #12]
 800dbbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbc2:	6665      	str	r5, [r4, #100]	; 0x64
 800dbc4:	f000 f847 	bl	800dc56 <__retarget_lock_init_recursive>
 800dbc8:	f7ff ff96 	bl	800daf8 <__sfp_lock_release>
 800dbcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dbd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dbd4:	6025      	str	r5, [r4, #0]
 800dbd6:	61a5      	str	r5, [r4, #24]
 800dbd8:	2208      	movs	r2, #8
 800dbda:	4629      	mov	r1, r5
 800dbdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dbe0:	f7ff fef0 	bl	800d9c4 <memset>
 800dbe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dbe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dbec:	4620      	mov	r0, r4
 800dbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbf0:	3468      	adds	r4, #104	; 0x68
 800dbf2:	e7d9      	b.n	800dba8 <__sfp+0x1c>
 800dbf4:	2104      	movs	r1, #4
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f7ff ff62 	bl	800dac0 <__sfmoreglue>
 800dbfc:	4604      	mov	r4, r0
 800dbfe:	6030      	str	r0, [r6, #0]
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d1d5      	bne.n	800dbb0 <__sfp+0x24>
 800dc04:	f7ff ff78 	bl	800daf8 <__sfp_lock_release>
 800dc08:	230c      	movs	r3, #12
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	e7ee      	b.n	800dbec <__sfp+0x60>
 800dc0e:	bf00      	nop
 800dc10:	0800ffc0 	.word	0x0800ffc0
 800dc14:	ffff0001 	.word	0xffff0001

0800dc18 <_fwalk_reent>:
 800dc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	4688      	mov	r8, r1
 800dc20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc24:	2700      	movs	r7, #0
 800dc26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc2a:	f1b9 0901 	subs.w	r9, r9, #1
 800dc2e:	d505      	bpl.n	800dc3c <_fwalk_reent+0x24>
 800dc30:	6824      	ldr	r4, [r4, #0]
 800dc32:	2c00      	cmp	r4, #0
 800dc34:	d1f7      	bne.n	800dc26 <_fwalk_reent+0xe>
 800dc36:	4638      	mov	r0, r7
 800dc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3c:	89ab      	ldrh	r3, [r5, #12]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d907      	bls.n	800dc52 <_fwalk_reent+0x3a>
 800dc42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc46:	3301      	adds	r3, #1
 800dc48:	d003      	beq.n	800dc52 <_fwalk_reent+0x3a>
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	47c0      	blx	r8
 800dc50:	4307      	orrs	r7, r0
 800dc52:	3568      	adds	r5, #104	; 0x68
 800dc54:	e7e9      	b.n	800dc2a <_fwalk_reent+0x12>

0800dc56 <__retarget_lock_init_recursive>:
 800dc56:	4770      	bx	lr

0800dc58 <__retarget_lock_acquire_recursive>:
 800dc58:	4770      	bx	lr

0800dc5a <__retarget_lock_release_recursive>:
 800dc5a:	4770      	bx	lr

0800dc5c <sbrk_aligned>:
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	4e0e      	ldr	r6, [pc, #56]	; (800dc98 <sbrk_aligned+0x3c>)
 800dc60:	460c      	mov	r4, r1
 800dc62:	6831      	ldr	r1, [r6, #0]
 800dc64:	4605      	mov	r5, r0
 800dc66:	b911      	cbnz	r1, 800dc6e <sbrk_aligned+0x12>
 800dc68:	f000 fcd6 	bl	800e618 <_sbrk_r>
 800dc6c:	6030      	str	r0, [r6, #0]
 800dc6e:	4621      	mov	r1, r4
 800dc70:	4628      	mov	r0, r5
 800dc72:	f000 fcd1 	bl	800e618 <_sbrk_r>
 800dc76:	1c43      	adds	r3, r0, #1
 800dc78:	d00a      	beq.n	800dc90 <sbrk_aligned+0x34>
 800dc7a:	1cc4      	adds	r4, r0, #3
 800dc7c:	f024 0403 	bic.w	r4, r4, #3
 800dc80:	42a0      	cmp	r0, r4
 800dc82:	d007      	beq.n	800dc94 <sbrk_aligned+0x38>
 800dc84:	1a21      	subs	r1, r4, r0
 800dc86:	4628      	mov	r0, r5
 800dc88:	f000 fcc6 	bl	800e618 <_sbrk_r>
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d101      	bne.n	800dc94 <sbrk_aligned+0x38>
 800dc90:	f04f 34ff 	mov.w	r4, #4294967295
 800dc94:	4620      	mov	r0, r4
 800dc96:	bd70      	pop	{r4, r5, r6, pc}
 800dc98:	20000670 	.word	0x20000670

0800dc9c <_malloc_r>:
 800dc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca0:	1ccd      	adds	r5, r1, #3
 800dca2:	f025 0503 	bic.w	r5, r5, #3
 800dca6:	3508      	adds	r5, #8
 800dca8:	2d0c      	cmp	r5, #12
 800dcaa:	bf38      	it	cc
 800dcac:	250c      	movcc	r5, #12
 800dcae:	2d00      	cmp	r5, #0
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	db01      	blt.n	800dcb8 <_malloc_r+0x1c>
 800dcb4:	42a9      	cmp	r1, r5
 800dcb6:	d905      	bls.n	800dcc4 <_malloc_r+0x28>
 800dcb8:	230c      	movs	r3, #12
 800dcba:	603b      	str	r3, [r7, #0]
 800dcbc:	2600      	movs	r6, #0
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc4:	4e2e      	ldr	r6, [pc, #184]	; (800dd80 <_malloc_r+0xe4>)
 800dcc6:	f000 ff3f 	bl	800eb48 <__malloc_lock>
 800dcca:	6833      	ldr	r3, [r6, #0]
 800dccc:	461c      	mov	r4, r3
 800dcce:	bb34      	cbnz	r4, 800dd1e <_malloc_r+0x82>
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	4638      	mov	r0, r7
 800dcd4:	f7ff ffc2 	bl	800dc5c <sbrk_aligned>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	4604      	mov	r4, r0
 800dcdc:	d14d      	bne.n	800dd7a <_malloc_r+0xde>
 800dcde:	6834      	ldr	r4, [r6, #0]
 800dce0:	4626      	mov	r6, r4
 800dce2:	2e00      	cmp	r6, #0
 800dce4:	d140      	bne.n	800dd68 <_malloc_r+0xcc>
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	4631      	mov	r1, r6
 800dcea:	4638      	mov	r0, r7
 800dcec:	eb04 0803 	add.w	r8, r4, r3
 800dcf0:	f000 fc92 	bl	800e618 <_sbrk_r>
 800dcf4:	4580      	cmp	r8, r0
 800dcf6:	d13a      	bne.n	800dd6e <_malloc_r+0xd2>
 800dcf8:	6821      	ldr	r1, [r4, #0]
 800dcfa:	3503      	adds	r5, #3
 800dcfc:	1a6d      	subs	r5, r5, r1
 800dcfe:	f025 0503 	bic.w	r5, r5, #3
 800dd02:	3508      	adds	r5, #8
 800dd04:	2d0c      	cmp	r5, #12
 800dd06:	bf38      	it	cc
 800dd08:	250c      	movcc	r5, #12
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	4638      	mov	r0, r7
 800dd0e:	f7ff ffa5 	bl	800dc5c <sbrk_aligned>
 800dd12:	3001      	adds	r0, #1
 800dd14:	d02b      	beq.n	800dd6e <_malloc_r+0xd2>
 800dd16:	6823      	ldr	r3, [r4, #0]
 800dd18:	442b      	add	r3, r5
 800dd1a:	6023      	str	r3, [r4, #0]
 800dd1c:	e00e      	b.n	800dd3c <_malloc_r+0xa0>
 800dd1e:	6822      	ldr	r2, [r4, #0]
 800dd20:	1b52      	subs	r2, r2, r5
 800dd22:	d41e      	bmi.n	800dd62 <_malloc_r+0xc6>
 800dd24:	2a0b      	cmp	r2, #11
 800dd26:	d916      	bls.n	800dd56 <_malloc_r+0xba>
 800dd28:	1961      	adds	r1, r4, r5
 800dd2a:	42a3      	cmp	r3, r4
 800dd2c:	6025      	str	r5, [r4, #0]
 800dd2e:	bf18      	it	ne
 800dd30:	6059      	strne	r1, [r3, #4]
 800dd32:	6863      	ldr	r3, [r4, #4]
 800dd34:	bf08      	it	eq
 800dd36:	6031      	streq	r1, [r6, #0]
 800dd38:	5162      	str	r2, [r4, r5]
 800dd3a:	604b      	str	r3, [r1, #4]
 800dd3c:	4638      	mov	r0, r7
 800dd3e:	f104 060b 	add.w	r6, r4, #11
 800dd42:	f000 ff07 	bl	800eb54 <__malloc_unlock>
 800dd46:	f026 0607 	bic.w	r6, r6, #7
 800dd4a:	1d23      	adds	r3, r4, #4
 800dd4c:	1af2      	subs	r2, r6, r3
 800dd4e:	d0b6      	beq.n	800dcbe <_malloc_r+0x22>
 800dd50:	1b9b      	subs	r3, r3, r6
 800dd52:	50a3      	str	r3, [r4, r2]
 800dd54:	e7b3      	b.n	800dcbe <_malloc_r+0x22>
 800dd56:	6862      	ldr	r2, [r4, #4]
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	bf0c      	ite	eq
 800dd5c:	6032      	streq	r2, [r6, #0]
 800dd5e:	605a      	strne	r2, [r3, #4]
 800dd60:	e7ec      	b.n	800dd3c <_malloc_r+0xa0>
 800dd62:	4623      	mov	r3, r4
 800dd64:	6864      	ldr	r4, [r4, #4]
 800dd66:	e7b2      	b.n	800dcce <_malloc_r+0x32>
 800dd68:	4634      	mov	r4, r6
 800dd6a:	6876      	ldr	r6, [r6, #4]
 800dd6c:	e7b9      	b.n	800dce2 <_malloc_r+0x46>
 800dd6e:	230c      	movs	r3, #12
 800dd70:	603b      	str	r3, [r7, #0]
 800dd72:	4638      	mov	r0, r7
 800dd74:	f000 feee 	bl	800eb54 <__malloc_unlock>
 800dd78:	e7a1      	b.n	800dcbe <_malloc_r+0x22>
 800dd7a:	6025      	str	r5, [r4, #0]
 800dd7c:	e7de      	b.n	800dd3c <_malloc_r+0xa0>
 800dd7e:	bf00      	nop
 800dd80:	2000066c 	.word	0x2000066c

0800dd84 <__ssputs_r>:
 800dd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd88:	688e      	ldr	r6, [r1, #8]
 800dd8a:	429e      	cmp	r6, r3
 800dd8c:	4682      	mov	sl, r0
 800dd8e:	460c      	mov	r4, r1
 800dd90:	4690      	mov	r8, r2
 800dd92:	461f      	mov	r7, r3
 800dd94:	d838      	bhi.n	800de08 <__ssputs_r+0x84>
 800dd96:	898a      	ldrh	r2, [r1, #12]
 800dd98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd9c:	d032      	beq.n	800de04 <__ssputs_r+0x80>
 800dd9e:	6825      	ldr	r5, [r4, #0]
 800dda0:	6909      	ldr	r1, [r1, #16]
 800dda2:	eba5 0901 	sub.w	r9, r5, r1
 800dda6:	6965      	ldr	r5, [r4, #20]
 800dda8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	444b      	add	r3, r9
 800ddb4:	106d      	asrs	r5, r5, #1
 800ddb6:	429d      	cmp	r5, r3
 800ddb8:	bf38      	it	cc
 800ddba:	461d      	movcc	r5, r3
 800ddbc:	0553      	lsls	r3, r2, #21
 800ddbe:	d531      	bpl.n	800de24 <__ssputs_r+0xa0>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7ff ff6b 	bl	800dc9c <_malloc_r>
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	b950      	cbnz	r0, 800dde0 <__ssputs_r+0x5c>
 800ddca:	230c      	movs	r3, #12
 800ddcc:	f8ca 3000 	str.w	r3, [sl]
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddd6:	81a3      	strh	r3, [r4, #12]
 800ddd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde0:	6921      	ldr	r1, [r4, #16]
 800dde2:	464a      	mov	r2, r9
 800dde4:	f000 fe88 	bl	800eaf8 <memcpy>
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddf2:	81a3      	strh	r3, [r4, #12]
 800ddf4:	6126      	str	r6, [r4, #16]
 800ddf6:	6165      	str	r5, [r4, #20]
 800ddf8:	444e      	add	r6, r9
 800ddfa:	eba5 0509 	sub.w	r5, r5, r9
 800ddfe:	6026      	str	r6, [r4, #0]
 800de00:	60a5      	str	r5, [r4, #8]
 800de02:	463e      	mov	r6, r7
 800de04:	42be      	cmp	r6, r7
 800de06:	d900      	bls.n	800de0a <__ssputs_r+0x86>
 800de08:	463e      	mov	r6, r7
 800de0a:	6820      	ldr	r0, [r4, #0]
 800de0c:	4632      	mov	r2, r6
 800de0e:	4641      	mov	r1, r8
 800de10:	f000 fe80 	bl	800eb14 <memmove>
 800de14:	68a3      	ldr	r3, [r4, #8]
 800de16:	1b9b      	subs	r3, r3, r6
 800de18:	60a3      	str	r3, [r4, #8]
 800de1a:	6823      	ldr	r3, [r4, #0]
 800de1c:	4433      	add	r3, r6
 800de1e:	6023      	str	r3, [r4, #0]
 800de20:	2000      	movs	r0, #0
 800de22:	e7db      	b.n	800dddc <__ssputs_r+0x58>
 800de24:	462a      	mov	r2, r5
 800de26:	f000 fee7 	bl	800ebf8 <_realloc_r>
 800de2a:	4606      	mov	r6, r0
 800de2c:	2800      	cmp	r0, #0
 800de2e:	d1e1      	bne.n	800ddf4 <__ssputs_r+0x70>
 800de30:	6921      	ldr	r1, [r4, #16]
 800de32:	4650      	mov	r0, sl
 800de34:	f000 fe94 	bl	800eb60 <_free_r>
 800de38:	e7c7      	b.n	800ddca <__ssputs_r+0x46>
	...

0800de3c <_svfiprintf_r>:
 800de3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de40:	4698      	mov	r8, r3
 800de42:	898b      	ldrh	r3, [r1, #12]
 800de44:	061b      	lsls	r3, r3, #24
 800de46:	b09d      	sub	sp, #116	; 0x74
 800de48:	4607      	mov	r7, r0
 800de4a:	460d      	mov	r5, r1
 800de4c:	4614      	mov	r4, r2
 800de4e:	d50e      	bpl.n	800de6e <_svfiprintf_r+0x32>
 800de50:	690b      	ldr	r3, [r1, #16]
 800de52:	b963      	cbnz	r3, 800de6e <_svfiprintf_r+0x32>
 800de54:	2140      	movs	r1, #64	; 0x40
 800de56:	f7ff ff21 	bl	800dc9c <_malloc_r>
 800de5a:	6028      	str	r0, [r5, #0]
 800de5c:	6128      	str	r0, [r5, #16]
 800de5e:	b920      	cbnz	r0, 800de6a <_svfiprintf_r+0x2e>
 800de60:	230c      	movs	r3, #12
 800de62:	603b      	str	r3, [r7, #0]
 800de64:	f04f 30ff 	mov.w	r0, #4294967295
 800de68:	e0d1      	b.n	800e00e <_svfiprintf_r+0x1d2>
 800de6a:	2340      	movs	r3, #64	; 0x40
 800de6c:	616b      	str	r3, [r5, #20]
 800de6e:	2300      	movs	r3, #0
 800de70:	9309      	str	r3, [sp, #36]	; 0x24
 800de72:	2320      	movs	r3, #32
 800de74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de78:	f8cd 800c 	str.w	r8, [sp, #12]
 800de7c:	2330      	movs	r3, #48	; 0x30
 800de7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e028 <_svfiprintf_r+0x1ec>
 800de82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de86:	f04f 0901 	mov.w	r9, #1
 800de8a:	4623      	mov	r3, r4
 800de8c:	469a      	mov	sl, r3
 800de8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de92:	b10a      	cbz	r2, 800de98 <_svfiprintf_r+0x5c>
 800de94:	2a25      	cmp	r2, #37	; 0x25
 800de96:	d1f9      	bne.n	800de8c <_svfiprintf_r+0x50>
 800de98:	ebba 0b04 	subs.w	fp, sl, r4
 800de9c:	d00b      	beq.n	800deb6 <_svfiprintf_r+0x7a>
 800de9e:	465b      	mov	r3, fp
 800dea0:	4622      	mov	r2, r4
 800dea2:	4629      	mov	r1, r5
 800dea4:	4638      	mov	r0, r7
 800dea6:	f7ff ff6d 	bl	800dd84 <__ssputs_r>
 800deaa:	3001      	adds	r0, #1
 800deac:	f000 80aa 	beq.w	800e004 <_svfiprintf_r+0x1c8>
 800deb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deb2:	445a      	add	r2, fp
 800deb4:	9209      	str	r2, [sp, #36]	; 0x24
 800deb6:	f89a 3000 	ldrb.w	r3, [sl]
 800deba:	2b00      	cmp	r3, #0
 800debc:	f000 80a2 	beq.w	800e004 <_svfiprintf_r+0x1c8>
 800dec0:	2300      	movs	r3, #0
 800dec2:	f04f 32ff 	mov.w	r2, #4294967295
 800dec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800deca:	f10a 0a01 	add.w	sl, sl, #1
 800dece:	9304      	str	r3, [sp, #16]
 800ded0:	9307      	str	r3, [sp, #28]
 800ded2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ded6:	931a      	str	r3, [sp, #104]	; 0x68
 800ded8:	4654      	mov	r4, sl
 800deda:	2205      	movs	r2, #5
 800dedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee0:	4851      	ldr	r0, [pc, #324]	; (800e028 <_svfiprintf_r+0x1ec>)
 800dee2:	f7f2 f975 	bl	80001d0 <memchr>
 800dee6:	9a04      	ldr	r2, [sp, #16]
 800dee8:	b9d8      	cbnz	r0, 800df22 <_svfiprintf_r+0xe6>
 800deea:	06d0      	lsls	r0, r2, #27
 800deec:	bf44      	itt	mi
 800deee:	2320      	movmi	r3, #32
 800def0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def4:	0711      	lsls	r1, r2, #28
 800def6:	bf44      	itt	mi
 800def8:	232b      	movmi	r3, #43	; 0x2b
 800defa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800defe:	f89a 3000 	ldrb.w	r3, [sl]
 800df02:	2b2a      	cmp	r3, #42	; 0x2a
 800df04:	d015      	beq.n	800df32 <_svfiprintf_r+0xf6>
 800df06:	9a07      	ldr	r2, [sp, #28]
 800df08:	4654      	mov	r4, sl
 800df0a:	2000      	movs	r0, #0
 800df0c:	f04f 0c0a 	mov.w	ip, #10
 800df10:	4621      	mov	r1, r4
 800df12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df16:	3b30      	subs	r3, #48	; 0x30
 800df18:	2b09      	cmp	r3, #9
 800df1a:	d94e      	bls.n	800dfba <_svfiprintf_r+0x17e>
 800df1c:	b1b0      	cbz	r0, 800df4c <_svfiprintf_r+0x110>
 800df1e:	9207      	str	r2, [sp, #28]
 800df20:	e014      	b.n	800df4c <_svfiprintf_r+0x110>
 800df22:	eba0 0308 	sub.w	r3, r0, r8
 800df26:	fa09 f303 	lsl.w	r3, r9, r3
 800df2a:	4313      	orrs	r3, r2
 800df2c:	9304      	str	r3, [sp, #16]
 800df2e:	46a2      	mov	sl, r4
 800df30:	e7d2      	b.n	800ded8 <_svfiprintf_r+0x9c>
 800df32:	9b03      	ldr	r3, [sp, #12]
 800df34:	1d19      	adds	r1, r3, #4
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	9103      	str	r1, [sp, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	bfbb      	ittet	lt
 800df3e:	425b      	neglt	r3, r3
 800df40:	f042 0202 	orrlt.w	r2, r2, #2
 800df44:	9307      	strge	r3, [sp, #28]
 800df46:	9307      	strlt	r3, [sp, #28]
 800df48:	bfb8      	it	lt
 800df4a:	9204      	strlt	r2, [sp, #16]
 800df4c:	7823      	ldrb	r3, [r4, #0]
 800df4e:	2b2e      	cmp	r3, #46	; 0x2e
 800df50:	d10c      	bne.n	800df6c <_svfiprintf_r+0x130>
 800df52:	7863      	ldrb	r3, [r4, #1]
 800df54:	2b2a      	cmp	r3, #42	; 0x2a
 800df56:	d135      	bne.n	800dfc4 <_svfiprintf_r+0x188>
 800df58:	9b03      	ldr	r3, [sp, #12]
 800df5a:	1d1a      	adds	r2, r3, #4
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	9203      	str	r2, [sp, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	bfb8      	it	lt
 800df64:	f04f 33ff 	movlt.w	r3, #4294967295
 800df68:	3402      	adds	r4, #2
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e038 <_svfiprintf_r+0x1fc>
 800df70:	7821      	ldrb	r1, [r4, #0]
 800df72:	2203      	movs	r2, #3
 800df74:	4650      	mov	r0, sl
 800df76:	f7f2 f92b 	bl	80001d0 <memchr>
 800df7a:	b140      	cbz	r0, 800df8e <_svfiprintf_r+0x152>
 800df7c:	2340      	movs	r3, #64	; 0x40
 800df7e:	eba0 000a 	sub.w	r0, r0, sl
 800df82:	fa03 f000 	lsl.w	r0, r3, r0
 800df86:	9b04      	ldr	r3, [sp, #16]
 800df88:	4303      	orrs	r3, r0
 800df8a:	3401      	adds	r4, #1
 800df8c:	9304      	str	r3, [sp, #16]
 800df8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df92:	4826      	ldr	r0, [pc, #152]	; (800e02c <_svfiprintf_r+0x1f0>)
 800df94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df98:	2206      	movs	r2, #6
 800df9a:	f7f2 f919 	bl	80001d0 <memchr>
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d038      	beq.n	800e014 <_svfiprintf_r+0x1d8>
 800dfa2:	4b23      	ldr	r3, [pc, #140]	; (800e030 <_svfiprintf_r+0x1f4>)
 800dfa4:	bb1b      	cbnz	r3, 800dfee <_svfiprintf_r+0x1b2>
 800dfa6:	9b03      	ldr	r3, [sp, #12]
 800dfa8:	3307      	adds	r3, #7
 800dfaa:	f023 0307 	bic.w	r3, r3, #7
 800dfae:	3308      	adds	r3, #8
 800dfb0:	9303      	str	r3, [sp, #12]
 800dfb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb4:	4433      	add	r3, r6
 800dfb6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb8:	e767      	b.n	800de8a <_svfiprintf_r+0x4e>
 800dfba:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	2001      	movs	r0, #1
 800dfc2:	e7a5      	b.n	800df10 <_svfiprintf_r+0xd4>
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	3401      	adds	r4, #1
 800dfc8:	9305      	str	r3, [sp, #20]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	f04f 0c0a 	mov.w	ip, #10
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfd6:	3a30      	subs	r2, #48	; 0x30
 800dfd8:	2a09      	cmp	r2, #9
 800dfda:	d903      	bls.n	800dfe4 <_svfiprintf_r+0x1a8>
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d0c5      	beq.n	800df6c <_svfiprintf_r+0x130>
 800dfe0:	9105      	str	r1, [sp, #20]
 800dfe2:	e7c3      	b.n	800df6c <_svfiprintf_r+0x130>
 800dfe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfe8:	4604      	mov	r4, r0
 800dfea:	2301      	movs	r3, #1
 800dfec:	e7f0      	b.n	800dfd0 <_svfiprintf_r+0x194>
 800dfee:	ab03      	add	r3, sp, #12
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	462a      	mov	r2, r5
 800dff4:	4b0f      	ldr	r3, [pc, #60]	; (800e034 <_svfiprintf_r+0x1f8>)
 800dff6:	a904      	add	r1, sp, #16
 800dff8:	4638      	mov	r0, r7
 800dffa:	f3af 8000 	nop.w
 800dffe:	1c42      	adds	r2, r0, #1
 800e000:	4606      	mov	r6, r0
 800e002:	d1d6      	bne.n	800dfb2 <_svfiprintf_r+0x176>
 800e004:	89ab      	ldrh	r3, [r5, #12]
 800e006:	065b      	lsls	r3, r3, #25
 800e008:	f53f af2c 	bmi.w	800de64 <_svfiprintf_r+0x28>
 800e00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e00e:	b01d      	add	sp, #116	; 0x74
 800e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e014:	ab03      	add	r3, sp, #12
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	462a      	mov	r2, r5
 800e01a:	4b06      	ldr	r3, [pc, #24]	; (800e034 <_svfiprintf_r+0x1f8>)
 800e01c:	a904      	add	r1, sp, #16
 800e01e:	4638      	mov	r0, r7
 800e020:	f000 f9d4 	bl	800e3cc <_printf_i>
 800e024:	e7eb      	b.n	800dffe <_svfiprintf_r+0x1c2>
 800e026:	bf00      	nop
 800e028:	08010024 	.word	0x08010024
 800e02c:	0801002e 	.word	0x0801002e
 800e030:	00000000 	.word	0x00000000
 800e034:	0800dd85 	.word	0x0800dd85
 800e038:	0801002a 	.word	0x0801002a

0800e03c <__sfputc_r>:
 800e03c:	6893      	ldr	r3, [r2, #8]
 800e03e:	3b01      	subs	r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	b410      	push	{r4}
 800e044:	6093      	str	r3, [r2, #8]
 800e046:	da08      	bge.n	800e05a <__sfputc_r+0x1e>
 800e048:	6994      	ldr	r4, [r2, #24]
 800e04a:	42a3      	cmp	r3, r4
 800e04c:	db01      	blt.n	800e052 <__sfputc_r+0x16>
 800e04e:	290a      	cmp	r1, #10
 800e050:	d103      	bne.n	800e05a <__sfputc_r+0x1e>
 800e052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e056:	f000 bb33 	b.w	800e6c0 <__swbuf_r>
 800e05a:	6813      	ldr	r3, [r2, #0]
 800e05c:	1c58      	adds	r0, r3, #1
 800e05e:	6010      	str	r0, [r2, #0]
 800e060:	7019      	strb	r1, [r3, #0]
 800e062:	4608      	mov	r0, r1
 800e064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e068:	4770      	bx	lr

0800e06a <__sfputs_r>:
 800e06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06c:	4606      	mov	r6, r0
 800e06e:	460f      	mov	r7, r1
 800e070:	4614      	mov	r4, r2
 800e072:	18d5      	adds	r5, r2, r3
 800e074:	42ac      	cmp	r4, r5
 800e076:	d101      	bne.n	800e07c <__sfputs_r+0x12>
 800e078:	2000      	movs	r0, #0
 800e07a:	e007      	b.n	800e08c <__sfputs_r+0x22>
 800e07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e080:	463a      	mov	r2, r7
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff ffda 	bl	800e03c <__sfputc_r>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	d1f3      	bne.n	800e074 <__sfputs_r+0xa>
 800e08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e090 <_vfiprintf_r>:
 800e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	460d      	mov	r5, r1
 800e096:	b09d      	sub	sp, #116	; 0x74
 800e098:	4614      	mov	r4, r2
 800e09a:	4698      	mov	r8, r3
 800e09c:	4606      	mov	r6, r0
 800e09e:	b118      	cbz	r0, 800e0a8 <_vfiprintf_r+0x18>
 800e0a0:	6983      	ldr	r3, [r0, #24]
 800e0a2:	b90b      	cbnz	r3, 800e0a8 <_vfiprintf_r+0x18>
 800e0a4:	f7ff fd3a 	bl	800db1c <__sinit>
 800e0a8:	4b89      	ldr	r3, [pc, #548]	; (800e2d0 <_vfiprintf_r+0x240>)
 800e0aa:	429d      	cmp	r5, r3
 800e0ac:	d11b      	bne.n	800e0e6 <_vfiprintf_r+0x56>
 800e0ae:	6875      	ldr	r5, [r6, #4]
 800e0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0b2:	07d9      	lsls	r1, r3, #31
 800e0b4:	d405      	bmi.n	800e0c2 <_vfiprintf_r+0x32>
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	059a      	lsls	r2, r3, #22
 800e0ba:	d402      	bmi.n	800e0c2 <_vfiprintf_r+0x32>
 800e0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0be:	f7ff fdcb 	bl	800dc58 <__retarget_lock_acquire_recursive>
 800e0c2:	89ab      	ldrh	r3, [r5, #12]
 800e0c4:	071b      	lsls	r3, r3, #28
 800e0c6:	d501      	bpl.n	800e0cc <_vfiprintf_r+0x3c>
 800e0c8:	692b      	ldr	r3, [r5, #16]
 800e0ca:	b9eb      	cbnz	r3, 800e108 <_vfiprintf_r+0x78>
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	4630      	mov	r0, r6
 800e0d0:	f000 fb5a 	bl	800e788 <__swsetup_r>
 800e0d4:	b1c0      	cbz	r0, 800e108 <_vfiprintf_r+0x78>
 800e0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0d8:	07dc      	lsls	r4, r3, #31
 800e0da:	d50e      	bpl.n	800e0fa <_vfiprintf_r+0x6a>
 800e0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e0:	b01d      	add	sp, #116	; 0x74
 800e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e6:	4b7b      	ldr	r3, [pc, #492]	; (800e2d4 <_vfiprintf_r+0x244>)
 800e0e8:	429d      	cmp	r5, r3
 800e0ea:	d101      	bne.n	800e0f0 <_vfiprintf_r+0x60>
 800e0ec:	68b5      	ldr	r5, [r6, #8]
 800e0ee:	e7df      	b.n	800e0b0 <_vfiprintf_r+0x20>
 800e0f0:	4b79      	ldr	r3, [pc, #484]	; (800e2d8 <_vfiprintf_r+0x248>)
 800e0f2:	429d      	cmp	r5, r3
 800e0f4:	bf08      	it	eq
 800e0f6:	68f5      	ldreq	r5, [r6, #12]
 800e0f8:	e7da      	b.n	800e0b0 <_vfiprintf_r+0x20>
 800e0fa:	89ab      	ldrh	r3, [r5, #12]
 800e0fc:	0598      	lsls	r0, r3, #22
 800e0fe:	d4ed      	bmi.n	800e0dc <_vfiprintf_r+0x4c>
 800e100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e102:	f7ff fdaa 	bl	800dc5a <__retarget_lock_release_recursive>
 800e106:	e7e9      	b.n	800e0dc <_vfiprintf_r+0x4c>
 800e108:	2300      	movs	r3, #0
 800e10a:	9309      	str	r3, [sp, #36]	; 0x24
 800e10c:	2320      	movs	r3, #32
 800e10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e112:	f8cd 800c 	str.w	r8, [sp, #12]
 800e116:	2330      	movs	r3, #48	; 0x30
 800e118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e2dc <_vfiprintf_r+0x24c>
 800e11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e120:	f04f 0901 	mov.w	r9, #1
 800e124:	4623      	mov	r3, r4
 800e126:	469a      	mov	sl, r3
 800e128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e12c:	b10a      	cbz	r2, 800e132 <_vfiprintf_r+0xa2>
 800e12e:	2a25      	cmp	r2, #37	; 0x25
 800e130:	d1f9      	bne.n	800e126 <_vfiprintf_r+0x96>
 800e132:	ebba 0b04 	subs.w	fp, sl, r4
 800e136:	d00b      	beq.n	800e150 <_vfiprintf_r+0xc0>
 800e138:	465b      	mov	r3, fp
 800e13a:	4622      	mov	r2, r4
 800e13c:	4629      	mov	r1, r5
 800e13e:	4630      	mov	r0, r6
 800e140:	f7ff ff93 	bl	800e06a <__sfputs_r>
 800e144:	3001      	adds	r0, #1
 800e146:	f000 80aa 	beq.w	800e29e <_vfiprintf_r+0x20e>
 800e14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e14c:	445a      	add	r2, fp
 800e14e:	9209      	str	r2, [sp, #36]	; 0x24
 800e150:	f89a 3000 	ldrb.w	r3, [sl]
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 80a2 	beq.w	800e29e <_vfiprintf_r+0x20e>
 800e15a:	2300      	movs	r3, #0
 800e15c:	f04f 32ff 	mov.w	r2, #4294967295
 800e160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e164:	f10a 0a01 	add.w	sl, sl, #1
 800e168:	9304      	str	r3, [sp, #16]
 800e16a:	9307      	str	r3, [sp, #28]
 800e16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e170:	931a      	str	r3, [sp, #104]	; 0x68
 800e172:	4654      	mov	r4, sl
 800e174:	2205      	movs	r2, #5
 800e176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e17a:	4858      	ldr	r0, [pc, #352]	; (800e2dc <_vfiprintf_r+0x24c>)
 800e17c:	f7f2 f828 	bl	80001d0 <memchr>
 800e180:	9a04      	ldr	r2, [sp, #16]
 800e182:	b9d8      	cbnz	r0, 800e1bc <_vfiprintf_r+0x12c>
 800e184:	06d1      	lsls	r1, r2, #27
 800e186:	bf44      	itt	mi
 800e188:	2320      	movmi	r3, #32
 800e18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e18e:	0713      	lsls	r3, r2, #28
 800e190:	bf44      	itt	mi
 800e192:	232b      	movmi	r3, #43	; 0x2b
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e198:	f89a 3000 	ldrb.w	r3, [sl]
 800e19c:	2b2a      	cmp	r3, #42	; 0x2a
 800e19e:	d015      	beq.n	800e1cc <_vfiprintf_r+0x13c>
 800e1a0:	9a07      	ldr	r2, [sp, #28]
 800e1a2:	4654      	mov	r4, sl
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	f04f 0c0a 	mov.w	ip, #10
 800e1aa:	4621      	mov	r1, r4
 800e1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b0:	3b30      	subs	r3, #48	; 0x30
 800e1b2:	2b09      	cmp	r3, #9
 800e1b4:	d94e      	bls.n	800e254 <_vfiprintf_r+0x1c4>
 800e1b6:	b1b0      	cbz	r0, 800e1e6 <_vfiprintf_r+0x156>
 800e1b8:	9207      	str	r2, [sp, #28]
 800e1ba:	e014      	b.n	800e1e6 <_vfiprintf_r+0x156>
 800e1bc:	eba0 0308 	sub.w	r3, r0, r8
 800e1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	9304      	str	r3, [sp, #16]
 800e1c8:	46a2      	mov	sl, r4
 800e1ca:	e7d2      	b.n	800e172 <_vfiprintf_r+0xe2>
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	1d19      	adds	r1, r3, #4
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	9103      	str	r1, [sp, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	bfbb      	ittet	lt
 800e1d8:	425b      	neglt	r3, r3
 800e1da:	f042 0202 	orrlt.w	r2, r2, #2
 800e1de:	9307      	strge	r3, [sp, #28]
 800e1e0:	9307      	strlt	r3, [sp, #28]
 800e1e2:	bfb8      	it	lt
 800e1e4:	9204      	strlt	r2, [sp, #16]
 800e1e6:	7823      	ldrb	r3, [r4, #0]
 800e1e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e1ea:	d10c      	bne.n	800e206 <_vfiprintf_r+0x176>
 800e1ec:	7863      	ldrb	r3, [r4, #1]
 800e1ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f0:	d135      	bne.n	800e25e <_vfiprintf_r+0x1ce>
 800e1f2:	9b03      	ldr	r3, [sp, #12]
 800e1f4:	1d1a      	adds	r2, r3, #4
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	9203      	str	r2, [sp, #12]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	bfb8      	it	lt
 800e1fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e202:	3402      	adds	r4, #2
 800e204:	9305      	str	r3, [sp, #20]
 800e206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2ec <_vfiprintf_r+0x25c>
 800e20a:	7821      	ldrb	r1, [r4, #0]
 800e20c:	2203      	movs	r2, #3
 800e20e:	4650      	mov	r0, sl
 800e210:	f7f1 ffde 	bl	80001d0 <memchr>
 800e214:	b140      	cbz	r0, 800e228 <_vfiprintf_r+0x198>
 800e216:	2340      	movs	r3, #64	; 0x40
 800e218:	eba0 000a 	sub.w	r0, r0, sl
 800e21c:	fa03 f000 	lsl.w	r0, r3, r0
 800e220:	9b04      	ldr	r3, [sp, #16]
 800e222:	4303      	orrs	r3, r0
 800e224:	3401      	adds	r4, #1
 800e226:	9304      	str	r3, [sp, #16]
 800e228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22c:	482c      	ldr	r0, [pc, #176]	; (800e2e0 <_vfiprintf_r+0x250>)
 800e22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e232:	2206      	movs	r2, #6
 800e234:	f7f1 ffcc 	bl	80001d0 <memchr>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d03f      	beq.n	800e2bc <_vfiprintf_r+0x22c>
 800e23c:	4b29      	ldr	r3, [pc, #164]	; (800e2e4 <_vfiprintf_r+0x254>)
 800e23e:	bb1b      	cbnz	r3, 800e288 <_vfiprintf_r+0x1f8>
 800e240:	9b03      	ldr	r3, [sp, #12]
 800e242:	3307      	adds	r3, #7
 800e244:	f023 0307 	bic.w	r3, r3, #7
 800e248:	3308      	adds	r3, #8
 800e24a:	9303      	str	r3, [sp, #12]
 800e24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24e:	443b      	add	r3, r7
 800e250:	9309      	str	r3, [sp, #36]	; 0x24
 800e252:	e767      	b.n	800e124 <_vfiprintf_r+0x94>
 800e254:	fb0c 3202 	mla	r2, ip, r2, r3
 800e258:	460c      	mov	r4, r1
 800e25a:	2001      	movs	r0, #1
 800e25c:	e7a5      	b.n	800e1aa <_vfiprintf_r+0x11a>
 800e25e:	2300      	movs	r3, #0
 800e260:	3401      	adds	r4, #1
 800e262:	9305      	str	r3, [sp, #20]
 800e264:	4619      	mov	r1, r3
 800e266:	f04f 0c0a 	mov.w	ip, #10
 800e26a:	4620      	mov	r0, r4
 800e26c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e270:	3a30      	subs	r2, #48	; 0x30
 800e272:	2a09      	cmp	r2, #9
 800e274:	d903      	bls.n	800e27e <_vfiprintf_r+0x1ee>
 800e276:	2b00      	cmp	r3, #0
 800e278:	d0c5      	beq.n	800e206 <_vfiprintf_r+0x176>
 800e27a:	9105      	str	r1, [sp, #20]
 800e27c:	e7c3      	b.n	800e206 <_vfiprintf_r+0x176>
 800e27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e282:	4604      	mov	r4, r0
 800e284:	2301      	movs	r3, #1
 800e286:	e7f0      	b.n	800e26a <_vfiprintf_r+0x1da>
 800e288:	ab03      	add	r3, sp, #12
 800e28a:	9300      	str	r3, [sp, #0]
 800e28c:	462a      	mov	r2, r5
 800e28e:	4b16      	ldr	r3, [pc, #88]	; (800e2e8 <_vfiprintf_r+0x258>)
 800e290:	a904      	add	r1, sp, #16
 800e292:	4630      	mov	r0, r6
 800e294:	f3af 8000 	nop.w
 800e298:	4607      	mov	r7, r0
 800e29a:	1c78      	adds	r0, r7, #1
 800e29c:	d1d6      	bne.n	800e24c <_vfiprintf_r+0x1bc>
 800e29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2a0:	07d9      	lsls	r1, r3, #31
 800e2a2:	d405      	bmi.n	800e2b0 <_vfiprintf_r+0x220>
 800e2a4:	89ab      	ldrh	r3, [r5, #12]
 800e2a6:	059a      	lsls	r2, r3, #22
 800e2a8:	d402      	bmi.n	800e2b0 <_vfiprintf_r+0x220>
 800e2aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2ac:	f7ff fcd5 	bl	800dc5a <__retarget_lock_release_recursive>
 800e2b0:	89ab      	ldrh	r3, [r5, #12]
 800e2b2:	065b      	lsls	r3, r3, #25
 800e2b4:	f53f af12 	bmi.w	800e0dc <_vfiprintf_r+0x4c>
 800e2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ba:	e711      	b.n	800e0e0 <_vfiprintf_r+0x50>
 800e2bc:	ab03      	add	r3, sp, #12
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <_vfiprintf_r+0x258>)
 800e2c4:	a904      	add	r1, sp, #16
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f000 f880 	bl	800e3cc <_printf_i>
 800e2cc:	e7e4      	b.n	800e298 <_vfiprintf_r+0x208>
 800e2ce:	bf00      	nop
 800e2d0:	0800ffe4 	.word	0x0800ffe4
 800e2d4:	08010004 	.word	0x08010004
 800e2d8:	0800ffc4 	.word	0x0800ffc4
 800e2dc:	08010024 	.word	0x08010024
 800e2e0:	0801002e 	.word	0x0801002e
 800e2e4:	00000000 	.word	0x00000000
 800e2e8:	0800e06b 	.word	0x0800e06b
 800e2ec:	0801002a 	.word	0x0801002a

0800e2f0 <_printf_common>:
 800e2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2f4:	4616      	mov	r6, r2
 800e2f6:	4699      	mov	r9, r3
 800e2f8:	688a      	ldr	r2, [r1, #8]
 800e2fa:	690b      	ldr	r3, [r1, #16]
 800e2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e300:	4293      	cmp	r3, r2
 800e302:	bfb8      	it	lt
 800e304:	4613      	movlt	r3, r2
 800e306:	6033      	str	r3, [r6, #0]
 800e308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e30c:	4607      	mov	r7, r0
 800e30e:	460c      	mov	r4, r1
 800e310:	b10a      	cbz	r2, 800e316 <_printf_common+0x26>
 800e312:	3301      	adds	r3, #1
 800e314:	6033      	str	r3, [r6, #0]
 800e316:	6823      	ldr	r3, [r4, #0]
 800e318:	0699      	lsls	r1, r3, #26
 800e31a:	bf42      	ittt	mi
 800e31c:	6833      	ldrmi	r3, [r6, #0]
 800e31e:	3302      	addmi	r3, #2
 800e320:	6033      	strmi	r3, [r6, #0]
 800e322:	6825      	ldr	r5, [r4, #0]
 800e324:	f015 0506 	ands.w	r5, r5, #6
 800e328:	d106      	bne.n	800e338 <_printf_common+0x48>
 800e32a:	f104 0a19 	add.w	sl, r4, #25
 800e32e:	68e3      	ldr	r3, [r4, #12]
 800e330:	6832      	ldr	r2, [r6, #0]
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	42ab      	cmp	r3, r5
 800e336:	dc26      	bgt.n	800e386 <_printf_common+0x96>
 800e338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e33c:	1e13      	subs	r3, r2, #0
 800e33e:	6822      	ldr	r2, [r4, #0]
 800e340:	bf18      	it	ne
 800e342:	2301      	movne	r3, #1
 800e344:	0692      	lsls	r2, r2, #26
 800e346:	d42b      	bmi.n	800e3a0 <_printf_common+0xb0>
 800e348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e34c:	4649      	mov	r1, r9
 800e34e:	4638      	mov	r0, r7
 800e350:	47c0      	blx	r8
 800e352:	3001      	adds	r0, #1
 800e354:	d01e      	beq.n	800e394 <_printf_common+0xa4>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	68e5      	ldr	r5, [r4, #12]
 800e35a:	6832      	ldr	r2, [r6, #0]
 800e35c:	f003 0306 	and.w	r3, r3, #6
 800e360:	2b04      	cmp	r3, #4
 800e362:	bf08      	it	eq
 800e364:	1aad      	subeq	r5, r5, r2
 800e366:	68a3      	ldr	r3, [r4, #8]
 800e368:	6922      	ldr	r2, [r4, #16]
 800e36a:	bf0c      	ite	eq
 800e36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e370:	2500      	movne	r5, #0
 800e372:	4293      	cmp	r3, r2
 800e374:	bfc4      	itt	gt
 800e376:	1a9b      	subgt	r3, r3, r2
 800e378:	18ed      	addgt	r5, r5, r3
 800e37a:	2600      	movs	r6, #0
 800e37c:	341a      	adds	r4, #26
 800e37e:	42b5      	cmp	r5, r6
 800e380:	d11a      	bne.n	800e3b8 <_printf_common+0xc8>
 800e382:	2000      	movs	r0, #0
 800e384:	e008      	b.n	800e398 <_printf_common+0xa8>
 800e386:	2301      	movs	r3, #1
 800e388:	4652      	mov	r2, sl
 800e38a:	4649      	mov	r1, r9
 800e38c:	4638      	mov	r0, r7
 800e38e:	47c0      	blx	r8
 800e390:	3001      	adds	r0, #1
 800e392:	d103      	bne.n	800e39c <_printf_common+0xac>
 800e394:	f04f 30ff 	mov.w	r0, #4294967295
 800e398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39c:	3501      	adds	r5, #1
 800e39e:	e7c6      	b.n	800e32e <_printf_common+0x3e>
 800e3a0:	18e1      	adds	r1, r4, r3
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	2030      	movs	r0, #48	; 0x30
 800e3a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e3aa:	4422      	add	r2, r4
 800e3ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3b4:	3302      	adds	r3, #2
 800e3b6:	e7c7      	b.n	800e348 <_printf_common+0x58>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	4622      	mov	r2, r4
 800e3bc:	4649      	mov	r1, r9
 800e3be:	4638      	mov	r0, r7
 800e3c0:	47c0      	blx	r8
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	d0e6      	beq.n	800e394 <_printf_common+0xa4>
 800e3c6:	3601      	adds	r6, #1
 800e3c8:	e7d9      	b.n	800e37e <_printf_common+0x8e>
	...

0800e3cc <_printf_i>:
 800e3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3d0:	7e0f      	ldrb	r7, [r1, #24]
 800e3d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3d4:	2f78      	cmp	r7, #120	; 0x78
 800e3d6:	4691      	mov	r9, r2
 800e3d8:	4680      	mov	r8, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	469a      	mov	sl, r3
 800e3de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3e2:	d807      	bhi.n	800e3f4 <_printf_i+0x28>
 800e3e4:	2f62      	cmp	r7, #98	; 0x62
 800e3e6:	d80a      	bhi.n	800e3fe <_printf_i+0x32>
 800e3e8:	2f00      	cmp	r7, #0
 800e3ea:	f000 80d8 	beq.w	800e59e <_printf_i+0x1d2>
 800e3ee:	2f58      	cmp	r7, #88	; 0x58
 800e3f0:	f000 80a3 	beq.w	800e53a <_printf_i+0x16e>
 800e3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3fc:	e03a      	b.n	800e474 <_printf_i+0xa8>
 800e3fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e402:	2b15      	cmp	r3, #21
 800e404:	d8f6      	bhi.n	800e3f4 <_printf_i+0x28>
 800e406:	a101      	add	r1, pc, #4	; (adr r1, 800e40c <_printf_i+0x40>)
 800e408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e40c:	0800e465 	.word	0x0800e465
 800e410:	0800e479 	.word	0x0800e479
 800e414:	0800e3f5 	.word	0x0800e3f5
 800e418:	0800e3f5 	.word	0x0800e3f5
 800e41c:	0800e3f5 	.word	0x0800e3f5
 800e420:	0800e3f5 	.word	0x0800e3f5
 800e424:	0800e479 	.word	0x0800e479
 800e428:	0800e3f5 	.word	0x0800e3f5
 800e42c:	0800e3f5 	.word	0x0800e3f5
 800e430:	0800e3f5 	.word	0x0800e3f5
 800e434:	0800e3f5 	.word	0x0800e3f5
 800e438:	0800e585 	.word	0x0800e585
 800e43c:	0800e4a9 	.word	0x0800e4a9
 800e440:	0800e567 	.word	0x0800e567
 800e444:	0800e3f5 	.word	0x0800e3f5
 800e448:	0800e3f5 	.word	0x0800e3f5
 800e44c:	0800e5a7 	.word	0x0800e5a7
 800e450:	0800e3f5 	.word	0x0800e3f5
 800e454:	0800e4a9 	.word	0x0800e4a9
 800e458:	0800e3f5 	.word	0x0800e3f5
 800e45c:	0800e3f5 	.word	0x0800e3f5
 800e460:	0800e56f 	.word	0x0800e56f
 800e464:	682b      	ldr	r3, [r5, #0]
 800e466:	1d1a      	adds	r2, r3, #4
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	602a      	str	r2, [r5, #0]
 800e46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e474:	2301      	movs	r3, #1
 800e476:	e0a3      	b.n	800e5c0 <_printf_i+0x1f4>
 800e478:	6820      	ldr	r0, [r4, #0]
 800e47a:	6829      	ldr	r1, [r5, #0]
 800e47c:	0606      	lsls	r6, r0, #24
 800e47e:	f101 0304 	add.w	r3, r1, #4
 800e482:	d50a      	bpl.n	800e49a <_printf_i+0xce>
 800e484:	680e      	ldr	r6, [r1, #0]
 800e486:	602b      	str	r3, [r5, #0]
 800e488:	2e00      	cmp	r6, #0
 800e48a:	da03      	bge.n	800e494 <_printf_i+0xc8>
 800e48c:	232d      	movs	r3, #45	; 0x2d
 800e48e:	4276      	negs	r6, r6
 800e490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e494:	485e      	ldr	r0, [pc, #376]	; (800e610 <_printf_i+0x244>)
 800e496:	230a      	movs	r3, #10
 800e498:	e019      	b.n	800e4ce <_printf_i+0x102>
 800e49a:	680e      	ldr	r6, [r1, #0]
 800e49c:	602b      	str	r3, [r5, #0]
 800e49e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e4a2:	bf18      	it	ne
 800e4a4:	b236      	sxthne	r6, r6
 800e4a6:	e7ef      	b.n	800e488 <_printf_i+0xbc>
 800e4a8:	682b      	ldr	r3, [r5, #0]
 800e4aa:	6820      	ldr	r0, [r4, #0]
 800e4ac:	1d19      	adds	r1, r3, #4
 800e4ae:	6029      	str	r1, [r5, #0]
 800e4b0:	0601      	lsls	r1, r0, #24
 800e4b2:	d501      	bpl.n	800e4b8 <_printf_i+0xec>
 800e4b4:	681e      	ldr	r6, [r3, #0]
 800e4b6:	e002      	b.n	800e4be <_printf_i+0xf2>
 800e4b8:	0646      	lsls	r6, r0, #25
 800e4ba:	d5fb      	bpl.n	800e4b4 <_printf_i+0xe8>
 800e4bc:	881e      	ldrh	r6, [r3, #0]
 800e4be:	4854      	ldr	r0, [pc, #336]	; (800e610 <_printf_i+0x244>)
 800e4c0:	2f6f      	cmp	r7, #111	; 0x6f
 800e4c2:	bf0c      	ite	eq
 800e4c4:	2308      	moveq	r3, #8
 800e4c6:	230a      	movne	r3, #10
 800e4c8:	2100      	movs	r1, #0
 800e4ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4ce:	6865      	ldr	r5, [r4, #4]
 800e4d0:	60a5      	str	r5, [r4, #8]
 800e4d2:	2d00      	cmp	r5, #0
 800e4d4:	bfa2      	ittt	ge
 800e4d6:	6821      	ldrge	r1, [r4, #0]
 800e4d8:	f021 0104 	bicge.w	r1, r1, #4
 800e4dc:	6021      	strge	r1, [r4, #0]
 800e4de:	b90e      	cbnz	r6, 800e4e4 <_printf_i+0x118>
 800e4e0:	2d00      	cmp	r5, #0
 800e4e2:	d04d      	beq.n	800e580 <_printf_i+0x1b4>
 800e4e4:	4615      	mov	r5, r2
 800e4e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4ea:	fb03 6711 	mls	r7, r3, r1, r6
 800e4ee:	5dc7      	ldrb	r7, [r0, r7]
 800e4f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4f4:	4637      	mov	r7, r6
 800e4f6:	42bb      	cmp	r3, r7
 800e4f8:	460e      	mov	r6, r1
 800e4fa:	d9f4      	bls.n	800e4e6 <_printf_i+0x11a>
 800e4fc:	2b08      	cmp	r3, #8
 800e4fe:	d10b      	bne.n	800e518 <_printf_i+0x14c>
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	07de      	lsls	r6, r3, #31
 800e504:	d508      	bpl.n	800e518 <_printf_i+0x14c>
 800e506:	6923      	ldr	r3, [r4, #16]
 800e508:	6861      	ldr	r1, [r4, #4]
 800e50a:	4299      	cmp	r1, r3
 800e50c:	bfde      	ittt	le
 800e50e:	2330      	movle	r3, #48	; 0x30
 800e510:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e514:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e518:	1b52      	subs	r2, r2, r5
 800e51a:	6122      	str	r2, [r4, #16]
 800e51c:	f8cd a000 	str.w	sl, [sp]
 800e520:	464b      	mov	r3, r9
 800e522:	aa03      	add	r2, sp, #12
 800e524:	4621      	mov	r1, r4
 800e526:	4640      	mov	r0, r8
 800e528:	f7ff fee2 	bl	800e2f0 <_printf_common>
 800e52c:	3001      	adds	r0, #1
 800e52e:	d14c      	bne.n	800e5ca <_printf_i+0x1fe>
 800e530:	f04f 30ff 	mov.w	r0, #4294967295
 800e534:	b004      	add	sp, #16
 800e536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e53a:	4835      	ldr	r0, [pc, #212]	; (800e610 <_printf_i+0x244>)
 800e53c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e540:	6829      	ldr	r1, [r5, #0]
 800e542:	6823      	ldr	r3, [r4, #0]
 800e544:	f851 6b04 	ldr.w	r6, [r1], #4
 800e548:	6029      	str	r1, [r5, #0]
 800e54a:	061d      	lsls	r5, r3, #24
 800e54c:	d514      	bpl.n	800e578 <_printf_i+0x1ac>
 800e54e:	07df      	lsls	r7, r3, #31
 800e550:	bf44      	itt	mi
 800e552:	f043 0320 	orrmi.w	r3, r3, #32
 800e556:	6023      	strmi	r3, [r4, #0]
 800e558:	b91e      	cbnz	r6, 800e562 <_printf_i+0x196>
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	f023 0320 	bic.w	r3, r3, #32
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	2310      	movs	r3, #16
 800e564:	e7b0      	b.n	800e4c8 <_printf_i+0xfc>
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	f043 0320 	orr.w	r3, r3, #32
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	2378      	movs	r3, #120	; 0x78
 800e570:	4828      	ldr	r0, [pc, #160]	; (800e614 <_printf_i+0x248>)
 800e572:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e576:	e7e3      	b.n	800e540 <_printf_i+0x174>
 800e578:	0659      	lsls	r1, r3, #25
 800e57a:	bf48      	it	mi
 800e57c:	b2b6      	uxthmi	r6, r6
 800e57e:	e7e6      	b.n	800e54e <_printf_i+0x182>
 800e580:	4615      	mov	r5, r2
 800e582:	e7bb      	b.n	800e4fc <_printf_i+0x130>
 800e584:	682b      	ldr	r3, [r5, #0]
 800e586:	6826      	ldr	r6, [r4, #0]
 800e588:	6961      	ldr	r1, [r4, #20]
 800e58a:	1d18      	adds	r0, r3, #4
 800e58c:	6028      	str	r0, [r5, #0]
 800e58e:	0635      	lsls	r5, r6, #24
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	d501      	bpl.n	800e598 <_printf_i+0x1cc>
 800e594:	6019      	str	r1, [r3, #0]
 800e596:	e002      	b.n	800e59e <_printf_i+0x1d2>
 800e598:	0670      	lsls	r0, r6, #25
 800e59a:	d5fb      	bpl.n	800e594 <_printf_i+0x1c8>
 800e59c:	8019      	strh	r1, [r3, #0]
 800e59e:	2300      	movs	r3, #0
 800e5a0:	6123      	str	r3, [r4, #16]
 800e5a2:	4615      	mov	r5, r2
 800e5a4:	e7ba      	b.n	800e51c <_printf_i+0x150>
 800e5a6:	682b      	ldr	r3, [r5, #0]
 800e5a8:	1d1a      	adds	r2, r3, #4
 800e5aa:	602a      	str	r2, [r5, #0]
 800e5ac:	681d      	ldr	r5, [r3, #0]
 800e5ae:	6862      	ldr	r2, [r4, #4]
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	f7f1 fe0c 	bl	80001d0 <memchr>
 800e5b8:	b108      	cbz	r0, 800e5be <_printf_i+0x1f2>
 800e5ba:	1b40      	subs	r0, r0, r5
 800e5bc:	6060      	str	r0, [r4, #4]
 800e5be:	6863      	ldr	r3, [r4, #4]
 800e5c0:	6123      	str	r3, [r4, #16]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5c8:	e7a8      	b.n	800e51c <_printf_i+0x150>
 800e5ca:	6923      	ldr	r3, [r4, #16]
 800e5cc:	462a      	mov	r2, r5
 800e5ce:	4649      	mov	r1, r9
 800e5d0:	4640      	mov	r0, r8
 800e5d2:	47d0      	blx	sl
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	d0ab      	beq.n	800e530 <_printf_i+0x164>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	079b      	lsls	r3, r3, #30
 800e5dc:	d413      	bmi.n	800e606 <_printf_i+0x23a>
 800e5de:	68e0      	ldr	r0, [r4, #12]
 800e5e0:	9b03      	ldr	r3, [sp, #12]
 800e5e2:	4298      	cmp	r0, r3
 800e5e4:	bfb8      	it	lt
 800e5e6:	4618      	movlt	r0, r3
 800e5e8:	e7a4      	b.n	800e534 <_printf_i+0x168>
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	4632      	mov	r2, r6
 800e5ee:	4649      	mov	r1, r9
 800e5f0:	4640      	mov	r0, r8
 800e5f2:	47d0      	blx	sl
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	d09b      	beq.n	800e530 <_printf_i+0x164>
 800e5f8:	3501      	adds	r5, #1
 800e5fa:	68e3      	ldr	r3, [r4, #12]
 800e5fc:	9903      	ldr	r1, [sp, #12]
 800e5fe:	1a5b      	subs	r3, r3, r1
 800e600:	42ab      	cmp	r3, r5
 800e602:	dcf2      	bgt.n	800e5ea <_printf_i+0x21e>
 800e604:	e7eb      	b.n	800e5de <_printf_i+0x212>
 800e606:	2500      	movs	r5, #0
 800e608:	f104 0619 	add.w	r6, r4, #25
 800e60c:	e7f5      	b.n	800e5fa <_printf_i+0x22e>
 800e60e:	bf00      	nop
 800e610:	08010035 	.word	0x08010035
 800e614:	08010046 	.word	0x08010046

0800e618 <_sbrk_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4d06      	ldr	r5, [pc, #24]	; (800e634 <_sbrk_r+0x1c>)
 800e61c:	2300      	movs	r3, #0
 800e61e:	4604      	mov	r4, r0
 800e620:	4608      	mov	r0, r1
 800e622:	602b      	str	r3, [r5, #0]
 800e624:	f7f3 feda 	bl	80023dc <_sbrk>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_sbrk_r+0x1a>
 800e62c:	682b      	ldr	r3, [r5, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_sbrk_r+0x1a>
 800e630:	6023      	str	r3, [r4, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	20000674 	.word	0x20000674

0800e638 <__sread>:
 800e638:	b510      	push	{r4, lr}
 800e63a:	460c      	mov	r4, r1
 800e63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e640:	f000 fb0a 	bl	800ec58 <_read_r>
 800e644:	2800      	cmp	r0, #0
 800e646:	bfab      	itete	ge
 800e648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e64a:	89a3      	ldrhlt	r3, [r4, #12]
 800e64c:	181b      	addge	r3, r3, r0
 800e64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e652:	bfac      	ite	ge
 800e654:	6563      	strge	r3, [r4, #84]	; 0x54
 800e656:	81a3      	strhlt	r3, [r4, #12]
 800e658:	bd10      	pop	{r4, pc}

0800e65a <__swrite>:
 800e65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e65e:	461f      	mov	r7, r3
 800e660:	898b      	ldrh	r3, [r1, #12]
 800e662:	05db      	lsls	r3, r3, #23
 800e664:	4605      	mov	r5, r0
 800e666:	460c      	mov	r4, r1
 800e668:	4616      	mov	r6, r2
 800e66a:	d505      	bpl.n	800e678 <__swrite+0x1e>
 800e66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e670:	2302      	movs	r3, #2
 800e672:	2200      	movs	r2, #0
 800e674:	f000 f9c8 	bl	800ea08 <_lseek_r>
 800e678:	89a3      	ldrh	r3, [r4, #12]
 800e67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e682:	81a3      	strh	r3, [r4, #12]
 800e684:	4632      	mov	r2, r6
 800e686:	463b      	mov	r3, r7
 800e688:	4628      	mov	r0, r5
 800e68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e68e:	f000 b869 	b.w	800e764 <_write_r>

0800e692 <__sseek>:
 800e692:	b510      	push	{r4, lr}
 800e694:	460c      	mov	r4, r1
 800e696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e69a:	f000 f9b5 	bl	800ea08 <_lseek_r>
 800e69e:	1c43      	adds	r3, r0, #1
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	bf15      	itete	ne
 800e6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6ae:	81a3      	strheq	r3, [r4, #12]
 800e6b0:	bf18      	it	ne
 800e6b2:	81a3      	strhne	r3, [r4, #12]
 800e6b4:	bd10      	pop	{r4, pc}

0800e6b6 <__sclose>:
 800e6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ba:	f000 b8d3 	b.w	800e864 <_close_r>
	...

0800e6c0 <__swbuf_r>:
 800e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c2:	460e      	mov	r6, r1
 800e6c4:	4614      	mov	r4, r2
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	b118      	cbz	r0, 800e6d2 <__swbuf_r+0x12>
 800e6ca:	6983      	ldr	r3, [r0, #24]
 800e6cc:	b90b      	cbnz	r3, 800e6d2 <__swbuf_r+0x12>
 800e6ce:	f7ff fa25 	bl	800db1c <__sinit>
 800e6d2:	4b21      	ldr	r3, [pc, #132]	; (800e758 <__swbuf_r+0x98>)
 800e6d4:	429c      	cmp	r4, r3
 800e6d6:	d12b      	bne.n	800e730 <__swbuf_r+0x70>
 800e6d8:	686c      	ldr	r4, [r5, #4]
 800e6da:	69a3      	ldr	r3, [r4, #24]
 800e6dc:	60a3      	str	r3, [r4, #8]
 800e6de:	89a3      	ldrh	r3, [r4, #12]
 800e6e0:	071a      	lsls	r2, r3, #28
 800e6e2:	d52f      	bpl.n	800e744 <__swbuf_r+0x84>
 800e6e4:	6923      	ldr	r3, [r4, #16]
 800e6e6:	b36b      	cbz	r3, 800e744 <__swbuf_r+0x84>
 800e6e8:	6923      	ldr	r3, [r4, #16]
 800e6ea:	6820      	ldr	r0, [r4, #0]
 800e6ec:	1ac0      	subs	r0, r0, r3
 800e6ee:	6963      	ldr	r3, [r4, #20]
 800e6f0:	b2f6      	uxtb	r6, r6
 800e6f2:	4283      	cmp	r3, r0
 800e6f4:	4637      	mov	r7, r6
 800e6f6:	dc04      	bgt.n	800e702 <__swbuf_r+0x42>
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f000 f948 	bl	800e990 <_fflush_r>
 800e700:	bb30      	cbnz	r0, 800e750 <__swbuf_r+0x90>
 800e702:	68a3      	ldr	r3, [r4, #8]
 800e704:	3b01      	subs	r3, #1
 800e706:	60a3      	str	r3, [r4, #8]
 800e708:	6823      	ldr	r3, [r4, #0]
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	6022      	str	r2, [r4, #0]
 800e70e:	701e      	strb	r6, [r3, #0]
 800e710:	6963      	ldr	r3, [r4, #20]
 800e712:	3001      	adds	r0, #1
 800e714:	4283      	cmp	r3, r0
 800e716:	d004      	beq.n	800e722 <__swbuf_r+0x62>
 800e718:	89a3      	ldrh	r3, [r4, #12]
 800e71a:	07db      	lsls	r3, r3, #31
 800e71c:	d506      	bpl.n	800e72c <__swbuf_r+0x6c>
 800e71e:	2e0a      	cmp	r6, #10
 800e720:	d104      	bne.n	800e72c <__swbuf_r+0x6c>
 800e722:	4621      	mov	r1, r4
 800e724:	4628      	mov	r0, r5
 800e726:	f000 f933 	bl	800e990 <_fflush_r>
 800e72a:	b988      	cbnz	r0, 800e750 <__swbuf_r+0x90>
 800e72c:	4638      	mov	r0, r7
 800e72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e730:	4b0a      	ldr	r3, [pc, #40]	; (800e75c <__swbuf_r+0x9c>)
 800e732:	429c      	cmp	r4, r3
 800e734:	d101      	bne.n	800e73a <__swbuf_r+0x7a>
 800e736:	68ac      	ldr	r4, [r5, #8]
 800e738:	e7cf      	b.n	800e6da <__swbuf_r+0x1a>
 800e73a:	4b09      	ldr	r3, [pc, #36]	; (800e760 <__swbuf_r+0xa0>)
 800e73c:	429c      	cmp	r4, r3
 800e73e:	bf08      	it	eq
 800e740:	68ec      	ldreq	r4, [r5, #12]
 800e742:	e7ca      	b.n	800e6da <__swbuf_r+0x1a>
 800e744:	4621      	mov	r1, r4
 800e746:	4628      	mov	r0, r5
 800e748:	f000 f81e 	bl	800e788 <__swsetup_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d0cb      	beq.n	800e6e8 <__swbuf_r+0x28>
 800e750:	f04f 37ff 	mov.w	r7, #4294967295
 800e754:	e7ea      	b.n	800e72c <__swbuf_r+0x6c>
 800e756:	bf00      	nop
 800e758:	0800ffe4 	.word	0x0800ffe4
 800e75c:	08010004 	.word	0x08010004
 800e760:	0800ffc4 	.word	0x0800ffc4

0800e764 <_write_r>:
 800e764:	b538      	push	{r3, r4, r5, lr}
 800e766:	4d07      	ldr	r5, [pc, #28]	; (800e784 <_write_r+0x20>)
 800e768:	4604      	mov	r4, r0
 800e76a:	4608      	mov	r0, r1
 800e76c:	4611      	mov	r1, r2
 800e76e:	2200      	movs	r2, #0
 800e770:	602a      	str	r2, [r5, #0]
 800e772:	461a      	mov	r2, r3
 800e774:	f7f3 fde1 	bl	800233a <_write>
 800e778:	1c43      	adds	r3, r0, #1
 800e77a:	d102      	bne.n	800e782 <_write_r+0x1e>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	b103      	cbz	r3, 800e782 <_write_r+0x1e>
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	bd38      	pop	{r3, r4, r5, pc}
 800e784:	20000674 	.word	0x20000674

0800e788 <__swsetup_r>:
 800e788:	4b32      	ldr	r3, [pc, #200]	; (800e854 <__swsetup_r+0xcc>)
 800e78a:	b570      	push	{r4, r5, r6, lr}
 800e78c:	681d      	ldr	r5, [r3, #0]
 800e78e:	4606      	mov	r6, r0
 800e790:	460c      	mov	r4, r1
 800e792:	b125      	cbz	r5, 800e79e <__swsetup_r+0x16>
 800e794:	69ab      	ldr	r3, [r5, #24]
 800e796:	b913      	cbnz	r3, 800e79e <__swsetup_r+0x16>
 800e798:	4628      	mov	r0, r5
 800e79a:	f7ff f9bf 	bl	800db1c <__sinit>
 800e79e:	4b2e      	ldr	r3, [pc, #184]	; (800e858 <__swsetup_r+0xd0>)
 800e7a0:	429c      	cmp	r4, r3
 800e7a2:	d10f      	bne.n	800e7c4 <__swsetup_r+0x3c>
 800e7a4:	686c      	ldr	r4, [r5, #4]
 800e7a6:	89a3      	ldrh	r3, [r4, #12]
 800e7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7ac:	0719      	lsls	r1, r3, #28
 800e7ae:	d42c      	bmi.n	800e80a <__swsetup_r+0x82>
 800e7b0:	06dd      	lsls	r5, r3, #27
 800e7b2:	d411      	bmi.n	800e7d8 <__swsetup_r+0x50>
 800e7b4:	2309      	movs	r3, #9
 800e7b6:	6033      	str	r3, [r6, #0]
 800e7b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7bc:	81a3      	strh	r3, [r4, #12]
 800e7be:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c2:	e03e      	b.n	800e842 <__swsetup_r+0xba>
 800e7c4:	4b25      	ldr	r3, [pc, #148]	; (800e85c <__swsetup_r+0xd4>)
 800e7c6:	429c      	cmp	r4, r3
 800e7c8:	d101      	bne.n	800e7ce <__swsetup_r+0x46>
 800e7ca:	68ac      	ldr	r4, [r5, #8]
 800e7cc:	e7eb      	b.n	800e7a6 <__swsetup_r+0x1e>
 800e7ce:	4b24      	ldr	r3, [pc, #144]	; (800e860 <__swsetup_r+0xd8>)
 800e7d0:	429c      	cmp	r4, r3
 800e7d2:	bf08      	it	eq
 800e7d4:	68ec      	ldreq	r4, [r5, #12]
 800e7d6:	e7e6      	b.n	800e7a6 <__swsetup_r+0x1e>
 800e7d8:	0758      	lsls	r0, r3, #29
 800e7da:	d512      	bpl.n	800e802 <__swsetup_r+0x7a>
 800e7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7de:	b141      	cbz	r1, 800e7f2 <__swsetup_r+0x6a>
 800e7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7e4:	4299      	cmp	r1, r3
 800e7e6:	d002      	beq.n	800e7ee <__swsetup_r+0x66>
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f000 f9b9 	bl	800eb60 <_free_r>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800e7f2:	89a3      	ldrh	r3, [r4, #12]
 800e7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7f8:	81a3      	strh	r3, [r4, #12]
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	6063      	str	r3, [r4, #4]
 800e7fe:	6923      	ldr	r3, [r4, #16]
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	89a3      	ldrh	r3, [r4, #12]
 800e804:	f043 0308 	orr.w	r3, r3, #8
 800e808:	81a3      	strh	r3, [r4, #12]
 800e80a:	6923      	ldr	r3, [r4, #16]
 800e80c:	b94b      	cbnz	r3, 800e822 <__swsetup_r+0x9a>
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e818:	d003      	beq.n	800e822 <__swsetup_r+0x9a>
 800e81a:	4621      	mov	r1, r4
 800e81c:	4630      	mov	r0, r6
 800e81e:	f000 f92b 	bl	800ea78 <__smakebuf_r>
 800e822:	89a0      	ldrh	r0, [r4, #12]
 800e824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e828:	f010 0301 	ands.w	r3, r0, #1
 800e82c:	d00a      	beq.n	800e844 <__swsetup_r+0xbc>
 800e82e:	2300      	movs	r3, #0
 800e830:	60a3      	str	r3, [r4, #8]
 800e832:	6963      	ldr	r3, [r4, #20]
 800e834:	425b      	negs	r3, r3
 800e836:	61a3      	str	r3, [r4, #24]
 800e838:	6923      	ldr	r3, [r4, #16]
 800e83a:	b943      	cbnz	r3, 800e84e <__swsetup_r+0xc6>
 800e83c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e840:	d1ba      	bne.n	800e7b8 <__swsetup_r+0x30>
 800e842:	bd70      	pop	{r4, r5, r6, pc}
 800e844:	0781      	lsls	r1, r0, #30
 800e846:	bf58      	it	pl
 800e848:	6963      	ldrpl	r3, [r4, #20]
 800e84a:	60a3      	str	r3, [r4, #8]
 800e84c:	e7f4      	b.n	800e838 <__swsetup_r+0xb0>
 800e84e:	2000      	movs	r0, #0
 800e850:	e7f7      	b.n	800e842 <__swsetup_r+0xba>
 800e852:	bf00      	nop
 800e854:	2000019c 	.word	0x2000019c
 800e858:	0800ffe4 	.word	0x0800ffe4
 800e85c:	08010004 	.word	0x08010004
 800e860:	0800ffc4 	.word	0x0800ffc4

0800e864 <_close_r>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	4d06      	ldr	r5, [pc, #24]	; (800e880 <_close_r+0x1c>)
 800e868:	2300      	movs	r3, #0
 800e86a:	4604      	mov	r4, r0
 800e86c:	4608      	mov	r0, r1
 800e86e:	602b      	str	r3, [r5, #0]
 800e870:	f7f3 fd7f 	bl	8002372 <_close>
 800e874:	1c43      	adds	r3, r0, #1
 800e876:	d102      	bne.n	800e87e <_close_r+0x1a>
 800e878:	682b      	ldr	r3, [r5, #0]
 800e87a:	b103      	cbz	r3, 800e87e <_close_r+0x1a>
 800e87c:	6023      	str	r3, [r4, #0]
 800e87e:	bd38      	pop	{r3, r4, r5, pc}
 800e880:	20000674 	.word	0x20000674

0800e884 <__sflush_r>:
 800e884:	898a      	ldrh	r2, [r1, #12]
 800e886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e88a:	4605      	mov	r5, r0
 800e88c:	0710      	lsls	r0, r2, #28
 800e88e:	460c      	mov	r4, r1
 800e890:	d458      	bmi.n	800e944 <__sflush_r+0xc0>
 800e892:	684b      	ldr	r3, [r1, #4]
 800e894:	2b00      	cmp	r3, #0
 800e896:	dc05      	bgt.n	800e8a4 <__sflush_r+0x20>
 800e898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	dc02      	bgt.n	800e8a4 <__sflush_r+0x20>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8a6:	2e00      	cmp	r6, #0
 800e8a8:	d0f9      	beq.n	800e89e <__sflush_r+0x1a>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e8b0:	682f      	ldr	r7, [r5, #0]
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	d032      	beq.n	800e91c <__sflush_r+0x98>
 800e8b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e8b8:	89a3      	ldrh	r3, [r4, #12]
 800e8ba:	075a      	lsls	r2, r3, #29
 800e8bc:	d505      	bpl.n	800e8ca <__sflush_r+0x46>
 800e8be:	6863      	ldr	r3, [r4, #4]
 800e8c0:	1ac0      	subs	r0, r0, r3
 800e8c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8c4:	b10b      	cbz	r3, 800e8ca <__sflush_r+0x46>
 800e8c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8c8:	1ac0      	subs	r0, r0, r3
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8d0:	6a21      	ldr	r1, [r4, #32]
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	47b0      	blx	r6
 800e8d6:	1c43      	adds	r3, r0, #1
 800e8d8:	89a3      	ldrh	r3, [r4, #12]
 800e8da:	d106      	bne.n	800e8ea <__sflush_r+0x66>
 800e8dc:	6829      	ldr	r1, [r5, #0]
 800e8de:	291d      	cmp	r1, #29
 800e8e0:	d82c      	bhi.n	800e93c <__sflush_r+0xb8>
 800e8e2:	4a2a      	ldr	r2, [pc, #168]	; (800e98c <__sflush_r+0x108>)
 800e8e4:	40ca      	lsrs	r2, r1
 800e8e6:	07d6      	lsls	r6, r2, #31
 800e8e8:	d528      	bpl.n	800e93c <__sflush_r+0xb8>
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	6062      	str	r2, [r4, #4]
 800e8ee:	04d9      	lsls	r1, r3, #19
 800e8f0:	6922      	ldr	r2, [r4, #16]
 800e8f2:	6022      	str	r2, [r4, #0]
 800e8f4:	d504      	bpl.n	800e900 <__sflush_r+0x7c>
 800e8f6:	1c42      	adds	r2, r0, #1
 800e8f8:	d101      	bne.n	800e8fe <__sflush_r+0x7a>
 800e8fa:	682b      	ldr	r3, [r5, #0]
 800e8fc:	b903      	cbnz	r3, 800e900 <__sflush_r+0x7c>
 800e8fe:	6560      	str	r0, [r4, #84]	; 0x54
 800e900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e902:	602f      	str	r7, [r5, #0]
 800e904:	2900      	cmp	r1, #0
 800e906:	d0ca      	beq.n	800e89e <__sflush_r+0x1a>
 800e908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e90c:	4299      	cmp	r1, r3
 800e90e:	d002      	beq.n	800e916 <__sflush_r+0x92>
 800e910:	4628      	mov	r0, r5
 800e912:	f000 f925 	bl	800eb60 <_free_r>
 800e916:	2000      	movs	r0, #0
 800e918:	6360      	str	r0, [r4, #52]	; 0x34
 800e91a:	e7c1      	b.n	800e8a0 <__sflush_r+0x1c>
 800e91c:	6a21      	ldr	r1, [r4, #32]
 800e91e:	2301      	movs	r3, #1
 800e920:	4628      	mov	r0, r5
 800e922:	47b0      	blx	r6
 800e924:	1c41      	adds	r1, r0, #1
 800e926:	d1c7      	bne.n	800e8b8 <__sflush_r+0x34>
 800e928:	682b      	ldr	r3, [r5, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d0c4      	beq.n	800e8b8 <__sflush_r+0x34>
 800e92e:	2b1d      	cmp	r3, #29
 800e930:	d001      	beq.n	800e936 <__sflush_r+0xb2>
 800e932:	2b16      	cmp	r3, #22
 800e934:	d101      	bne.n	800e93a <__sflush_r+0xb6>
 800e936:	602f      	str	r7, [r5, #0]
 800e938:	e7b1      	b.n	800e89e <__sflush_r+0x1a>
 800e93a:	89a3      	ldrh	r3, [r4, #12]
 800e93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e940:	81a3      	strh	r3, [r4, #12]
 800e942:	e7ad      	b.n	800e8a0 <__sflush_r+0x1c>
 800e944:	690f      	ldr	r7, [r1, #16]
 800e946:	2f00      	cmp	r7, #0
 800e948:	d0a9      	beq.n	800e89e <__sflush_r+0x1a>
 800e94a:	0793      	lsls	r3, r2, #30
 800e94c:	680e      	ldr	r6, [r1, #0]
 800e94e:	bf08      	it	eq
 800e950:	694b      	ldreq	r3, [r1, #20]
 800e952:	600f      	str	r7, [r1, #0]
 800e954:	bf18      	it	ne
 800e956:	2300      	movne	r3, #0
 800e958:	eba6 0807 	sub.w	r8, r6, r7
 800e95c:	608b      	str	r3, [r1, #8]
 800e95e:	f1b8 0f00 	cmp.w	r8, #0
 800e962:	dd9c      	ble.n	800e89e <__sflush_r+0x1a>
 800e964:	6a21      	ldr	r1, [r4, #32]
 800e966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e968:	4643      	mov	r3, r8
 800e96a:	463a      	mov	r2, r7
 800e96c:	4628      	mov	r0, r5
 800e96e:	47b0      	blx	r6
 800e970:	2800      	cmp	r0, #0
 800e972:	dc06      	bgt.n	800e982 <__sflush_r+0xfe>
 800e974:	89a3      	ldrh	r3, [r4, #12]
 800e976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e97a:	81a3      	strh	r3, [r4, #12]
 800e97c:	f04f 30ff 	mov.w	r0, #4294967295
 800e980:	e78e      	b.n	800e8a0 <__sflush_r+0x1c>
 800e982:	4407      	add	r7, r0
 800e984:	eba8 0800 	sub.w	r8, r8, r0
 800e988:	e7e9      	b.n	800e95e <__sflush_r+0xda>
 800e98a:	bf00      	nop
 800e98c:	20400001 	.word	0x20400001

0800e990 <_fflush_r>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	690b      	ldr	r3, [r1, #16]
 800e994:	4605      	mov	r5, r0
 800e996:	460c      	mov	r4, r1
 800e998:	b913      	cbnz	r3, 800e9a0 <_fflush_r+0x10>
 800e99a:	2500      	movs	r5, #0
 800e99c:	4628      	mov	r0, r5
 800e99e:	bd38      	pop	{r3, r4, r5, pc}
 800e9a0:	b118      	cbz	r0, 800e9aa <_fflush_r+0x1a>
 800e9a2:	6983      	ldr	r3, [r0, #24]
 800e9a4:	b90b      	cbnz	r3, 800e9aa <_fflush_r+0x1a>
 800e9a6:	f7ff f8b9 	bl	800db1c <__sinit>
 800e9aa:	4b14      	ldr	r3, [pc, #80]	; (800e9fc <_fflush_r+0x6c>)
 800e9ac:	429c      	cmp	r4, r3
 800e9ae:	d11b      	bne.n	800e9e8 <_fflush_r+0x58>
 800e9b0:	686c      	ldr	r4, [r5, #4]
 800e9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0ef      	beq.n	800e99a <_fflush_r+0xa>
 800e9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9bc:	07d0      	lsls	r0, r2, #31
 800e9be:	d404      	bmi.n	800e9ca <_fflush_r+0x3a>
 800e9c0:	0599      	lsls	r1, r3, #22
 800e9c2:	d402      	bmi.n	800e9ca <_fflush_r+0x3a>
 800e9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9c6:	f7ff f947 	bl	800dc58 <__retarget_lock_acquire_recursive>
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	f7ff ff59 	bl	800e884 <__sflush_r>
 800e9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9d4:	07da      	lsls	r2, r3, #31
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	d4e0      	bmi.n	800e99c <_fflush_r+0xc>
 800e9da:	89a3      	ldrh	r3, [r4, #12]
 800e9dc:	059b      	lsls	r3, r3, #22
 800e9de:	d4dd      	bmi.n	800e99c <_fflush_r+0xc>
 800e9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9e2:	f7ff f93a 	bl	800dc5a <__retarget_lock_release_recursive>
 800e9e6:	e7d9      	b.n	800e99c <_fflush_r+0xc>
 800e9e8:	4b05      	ldr	r3, [pc, #20]	; (800ea00 <_fflush_r+0x70>)
 800e9ea:	429c      	cmp	r4, r3
 800e9ec:	d101      	bne.n	800e9f2 <_fflush_r+0x62>
 800e9ee:	68ac      	ldr	r4, [r5, #8]
 800e9f0:	e7df      	b.n	800e9b2 <_fflush_r+0x22>
 800e9f2:	4b04      	ldr	r3, [pc, #16]	; (800ea04 <_fflush_r+0x74>)
 800e9f4:	429c      	cmp	r4, r3
 800e9f6:	bf08      	it	eq
 800e9f8:	68ec      	ldreq	r4, [r5, #12]
 800e9fa:	e7da      	b.n	800e9b2 <_fflush_r+0x22>
 800e9fc:	0800ffe4 	.word	0x0800ffe4
 800ea00:	08010004 	.word	0x08010004
 800ea04:	0800ffc4 	.word	0x0800ffc4

0800ea08 <_lseek_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4d07      	ldr	r5, [pc, #28]	; (800ea28 <_lseek_r+0x20>)
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	4608      	mov	r0, r1
 800ea10:	4611      	mov	r1, r2
 800ea12:	2200      	movs	r2, #0
 800ea14:	602a      	str	r2, [r5, #0]
 800ea16:	461a      	mov	r2, r3
 800ea18:	f7f3 fcd2 	bl	80023c0 <_lseek>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	d102      	bne.n	800ea26 <_lseek_r+0x1e>
 800ea20:	682b      	ldr	r3, [r5, #0]
 800ea22:	b103      	cbz	r3, 800ea26 <_lseek_r+0x1e>
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	20000674 	.word	0x20000674

0800ea2c <__swhatbuf_r>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	460e      	mov	r6, r1
 800ea30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea34:	2900      	cmp	r1, #0
 800ea36:	b096      	sub	sp, #88	; 0x58
 800ea38:	4614      	mov	r4, r2
 800ea3a:	461d      	mov	r5, r3
 800ea3c:	da08      	bge.n	800ea50 <__swhatbuf_r+0x24>
 800ea3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	602a      	str	r2, [r5, #0]
 800ea46:	061a      	lsls	r2, r3, #24
 800ea48:	d410      	bmi.n	800ea6c <__swhatbuf_r+0x40>
 800ea4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea4e:	e00e      	b.n	800ea6e <__swhatbuf_r+0x42>
 800ea50:	466a      	mov	r2, sp
 800ea52:	f000 f913 	bl	800ec7c <_fstat_r>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	dbf1      	blt.n	800ea3e <__swhatbuf_r+0x12>
 800ea5a:	9a01      	ldr	r2, [sp, #4]
 800ea5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ea60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ea64:	425a      	negs	r2, r3
 800ea66:	415a      	adcs	r2, r3
 800ea68:	602a      	str	r2, [r5, #0]
 800ea6a:	e7ee      	b.n	800ea4a <__swhatbuf_r+0x1e>
 800ea6c:	2340      	movs	r3, #64	; 0x40
 800ea6e:	2000      	movs	r0, #0
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	b016      	add	sp, #88	; 0x58
 800ea74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea78 <__smakebuf_r>:
 800ea78:	898b      	ldrh	r3, [r1, #12]
 800ea7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea7c:	079d      	lsls	r5, r3, #30
 800ea7e:	4606      	mov	r6, r0
 800ea80:	460c      	mov	r4, r1
 800ea82:	d507      	bpl.n	800ea94 <__smakebuf_r+0x1c>
 800ea84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	6123      	str	r3, [r4, #16]
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	6163      	str	r3, [r4, #20]
 800ea90:	b002      	add	sp, #8
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
 800ea94:	ab01      	add	r3, sp, #4
 800ea96:	466a      	mov	r2, sp
 800ea98:	f7ff ffc8 	bl	800ea2c <__swhatbuf_r>
 800ea9c:	9900      	ldr	r1, [sp, #0]
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f7ff f8fb 	bl	800dc9c <_malloc_r>
 800eaa6:	b948      	cbnz	r0, 800eabc <__smakebuf_r+0x44>
 800eaa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaac:	059a      	lsls	r2, r3, #22
 800eaae:	d4ef      	bmi.n	800ea90 <__smakebuf_r+0x18>
 800eab0:	f023 0303 	bic.w	r3, r3, #3
 800eab4:	f043 0302 	orr.w	r3, r3, #2
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	e7e3      	b.n	800ea84 <__smakebuf_r+0xc>
 800eabc:	4b0d      	ldr	r3, [pc, #52]	; (800eaf4 <__smakebuf_r+0x7c>)
 800eabe:	62b3      	str	r3, [r6, #40]	; 0x28
 800eac0:	89a3      	ldrh	r3, [r4, #12]
 800eac2:	6020      	str	r0, [r4, #0]
 800eac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eac8:	81a3      	strh	r3, [r4, #12]
 800eaca:	9b00      	ldr	r3, [sp, #0]
 800eacc:	6163      	str	r3, [r4, #20]
 800eace:	9b01      	ldr	r3, [sp, #4]
 800ead0:	6120      	str	r0, [r4, #16]
 800ead2:	b15b      	cbz	r3, 800eaec <__smakebuf_r+0x74>
 800ead4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ead8:	4630      	mov	r0, r6
 800eada:	f000 f8e1 	bl	800eca0 <_isatty_r>
 800eade:	b128      	cbz	r0, 800eaec <__smakebuf_r+0x74>
 800eae0:	89a3      	ldrh	r3, [r4, #12]
 800eae2:	f023 0303 	bic.w	r3, r3, #3
 800eae6:	f043 0301 	orr.w	r3, r3, #1
 800eaea:	81a3      	strh	r3, [r4, #12]
 800eaec:	89a0      	ldrh	r0, [r4, #12]
 800eaee:	4305      	orrs	r5, r0
 800eaf0:	81a5      	strh	r5, [r4, #12]
 800eaf2:	e7cd      	b.n	800ea90 <__smakebuf_r+0x18>
 800eaf4:	0800dab5 	.word	0x0800dab5

0800eaf8 <memcpy>:
 800eaf8:	440a      	add	r2, r1
 800eafa:	4291      	cmp	r1, r2
 800eafc:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb00:	d100      	bne.n	800eb04 <memcpy+0xc>
 800eb02:	4770      	bx	lr
 800eb04:	b510      	push	{r4, lr}
 800eb06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb0e:	4291      	cmp	r1, r2
 800eb10:	d1f9      	bne.n	800eb06 <memcpy+0xe>
 800eb12:	bd10      	pop	{r4, pc}

0800eb14 <memmove>:
 800eb14:	4288      	cmp	r0, r1
 800eb16:	b510      	push	{r4, lr}
 800eb18:	eb01 0402 	add.w	r4, r1, r2
 800eb1c:	d902      	bls.n	800eb24 <memmove+0x10>
 800eb1e:	4284      	cmp	r4, r0
 800eb20:	4623      	mov	r3, r4
 800eb22:	d807      	bhi.n	800eb34 <memmove+0x20>
 800eb24:	1e43      	subs	r3, r0, #1
 800eb26:	42a1      	cmp	r1, r4
 800eb28:	d008      	beq.n	800eb3c <memmove+0x28>
 800eb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb32:	e7f8      	b.n	800eb26 <memmove+0x12>
 800eb34:	4402      	add	r2, r0
 800eb36:	4601      	mov	r1, r0
 800eb38:	428a      	cmp	r2, r1
 800eb3a:	d100      	bne.n	800eb3e <memmove+0x2a>
 800eb3c:	bd10      	pop	{r4, pc}
 800eb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb46:	e7f7      	b.n	800eb38 <memmove+0x24>

0800eb48 <__malloc_lock>:
 800eb48:	4801      	ldr	r0, [pc, #4]	; (800eb50 <__malloc_lock+0x8>)
 800eb4a:	f7ff b885 	b.w	800dc58 <__retarget_lock_acquire_recursive>
 800eb4e:	bf00      	nop
 800eb50:	20000668 	.word	0x20000668

0800eb54 <__malloc_unlock>:
 800eb54:	4801      	ldr	r0, [pc, #4]	; (800eb5c <__malloc_unlock+0x8>)
 800eb56:	f7ff b880 	b.w	800dc5a <__retarget_lock_release_recursive>
 800eb5a:	bf00      	nop
 800eb5c:	20000668 	.word	0x20000668

0800eb60 <_free_r>:
 800eb60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb62:	2900      	cmp	r1, #0
 800eb64:	d044      	beq.n	800ebf0 <_free_r+0x90>
 800eb66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb6a:	9001      	str	r0, [sp, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f1a1 0404 	sub.w	r4, r1, #4
 800eb72:	bfb8      	it	lt
 800eb74:	18e4      	addlt	r4, r4, r3
 800eb76:	f7ff ffe7 	bl	800eb48 <__malloc_lock>
 800eb7a:	4a1e      	ldr	r2, [pc, #120]	; (800ebf4 <_free_r+0x94>)
 800eb7c:	9801      	ldr	r0, [sp, #4]
 800eb7e:	6813      	ldr	r3, [r2, #0]
 800eb80:	b933      	cbnz	r3, 800eb90 <_free_r+0x30>
 800eb82:	6063      	str	r3, [r4, #4]
 800eb84:	6014      	str	r4, [r2, #0]
 800eb86:	b003      	add	sp, #12
 800eb88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb8c:	f7ff bfe2 	b.w	800eb54 <__malloc_unlock>
 800eb90:	42a3      	cmp	r3, r4
 800eb92:	d908      	bls.n	800eba6 <_free_r+0x46>
 800eb94:	6825      	ldr	r5, [r4, #0]
 800eb96:	1961      	adds	r1, r4, r5
 800eb98:	428b      	cmp	r3, r1
 800eb9a:	bf01      	itttt	eq
 800eb9c:	6819      	ldreq	r1, [r3, #0]
 800eb9e:	685b      	ldreq	r3, [r3, #4]
 800eba0:	1949      	addeq	r1, r1, r5
 800eba2:	6021      	streq	r1, [r4, #0]
 800eba4:	e7ed      	b.n	800eb82 <_free_r+0x22>
 800eba6:	461a      	mov	r2, r3
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	b10b      	cbz	r3, 800ebb0 <_free_r+0x50>
 800ebac:	42a3      	cmp	r3, r4
 800ebae:	d9fa      	bls.n	800eba6 <_free_r+0x46>
 800ebb0:	6811      	ldr	r1, [r2, #0]
 800ebb2:	1855      	adds	r5, r2, r1
 800ebb4:	42a5      	cmp	r5, r4
 800ebb6:	d10b      	bne.n	800ebd0 <_free_r+0x70>
 800ebb8:	6824      	ldr	r4, [r4, #0]
 800ebba:	4421      	add	r1, r4
 800ebbc:	1854      	adds	r4, r2, r1
 800ebbe:	42a3      	cmp	r3, r4
 800ebc0:	6011      	str	r1, [r2, #0]
 800ebc2:	d1e0      	bne.n	800eb86 <_free_r+0x26>
 800ebc4:	681c      	ldr	r4, [r3, #0]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	6053      	str	r3, [r2, #4]
 800ebca:	4421      	add	r1, r4
 800ebcc:	6011      	str	r1, [r2, #0]
 800ebce:	e7da      	b.n	800eb86 <_free_r+0x26>
 800ebd0:	d902      	bls.n	800ebd8 <_free_r+0x78>
 800ebd2:	230c      	movs	r3, #12
 800ebd4:	6003      	str	r3, [r0, #0]
 800ebd6:	e7d6      	b.n	800eb86 <_free_r+0x26>
 800ebd8:	6825      	ldr	r5, [r4, #0]
 800ebda:	1961      	adds	r1, r4, r5
 800ebdc:	428b      	cmp	r3, r1
 800ebde:	bf04      	itt	eq
 800ebe0:	6819      	ldreq	r1, [r3, #0]
 800ebe2:	685b      	ldreq	r3, [r3, #4]
 800ebe4:	6063      	str	r3, [r4, #4]
 800ebe6:	bf04      	itt	eq
 800ebe8:	1949      	addeq	r1, r1, r5
 800ebea:	6021      	streq	r1, [r4, #0]
 800ebec:	6054      	str	r4, [r2, #4]
 800ebee:	e7ca      	b.n	800eb86 <_free_r+0x26>
 800ebf0:	b003      	add	sp, #12
 800ebf2:	bd30      	pop	{r4, r5, pc}
 800ebf4:	2000066c 	.word	0x2000066c

0800ebf8 <_realloc_r>:
 800ebf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfc:	4680      	mov	r8, r0
 800ebfe:	4614      	mov	r4, r2
 800ec00:	460e      	mov	r6, r1
 800ec02:	b921      	cbnz	r1, 800ec0e <_realloc_r+0x16>
 800ec04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec08:	4611      	mov	r1, r2
 800ec0a:	f7ff b847 	b.w	800dc9c <_malloc_r>
 800ec0e:	b92a      	cbnz	r2, 800ec1c <_realloc_r+0x24>
 800ec10:	f7ff ffa6 	bl	800eb60 <_free_r>
 800ec14:	4625      	mov	r5, r4
 800ec16:	4628      	mov	r0, r5
 800ec18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec1c:	f000 f850 	bl	800ecc0 <_malloc_usable_size_r>
 800ec20:	4284      	cmp	r4, r0
 800ec22:	4607      	mov	r7, r0
 800ec24:	d802      	bhi.n	800ec2c <_realloc_r+0x34>
 800ec26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec2a:	d812      	bhi.n	800ec52 <_realloc_r+0x5a>
 800ec2c:	4621      	mov	r1, r4
 800ec2e:	4640      	mov	r0, r8
 800ec30:	f7ff f834 	bl	800dc9c <_malloc_r>
 800ec34:	4605      	mov	r5, r0
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d0ed      	beq.n	800ec16 <_realloc_r+0x1e>
 800ec3a:	42bc      	cmp	r4, r7
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	4631      	mov	r1, r6
 800ec40:	bf28      	it	cs
 800ec42:	463a      	movcs	r2, r7
 800ec44:	f7ff ff58 	bl	800eaf8 <memcpy>
 800ec48:	4631      	mov	r1, r6
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	f7ff ff88 	bl	800eb60 <_free_r>
 800ec50:	e7e1      	b.n	800ec16 <_realloc_r+0x1e>
 800ec52:	4635      	mov	r5, r6
 800ec54:	e7df      	b.n	800ec16 <_realloc_r+0x1e>
	...

0800ec58 <_read_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d07      	ldr	r5, [pc, #28]	; (800ec78 <_read_r+0x20>)
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	4608      	mov	r0, r1
 800ec60:	4611      	mov	r1, r2
 800ec62:	2200      	movs	r2, #0
 800ec64:	602a      	str	r2, [r5, #0]
 800ec66:	461a      	mov	r2, r3
 800ec68:	f7f3 fb4a 	bl	8002300 <_read>
 800ec6c:	1c43      	adds	r3, r0, #1
 800ec6e:	d102      	bne.n	800ec76 <_read_r+0x1e>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	b103      	cbz	r3, 800ec76 <_read_r+0x1e>
 800ec74:	6023      	str	r3, [r4, #0]
 800ec76:	bd38      	pop	{r3, r4, r5, pc}
 800ec78:	20000674 	.word	0x20000674

0800ec7c <_fstat_r>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4d07      	ldr	r5, [pc, #28]	; (800ec9c <_fstat_r+0x20>)
 800ec80:	2300      	movs	r3, #0
 800ec82:	4604      	mov	r4, r0
 800ec84:	4608      	mov	r0, r1
 800ec86:	4611      	mov	r1, r2
 800ec88:	602b      	str	r3, [r5, #0]
 800ec8a:	f7f3 fb7e 	bl	800238a <_fstat>
 800ec8e:	1c43      	adds	r3, r0, #1
 800ec90:	d102      	bne.n	800ec98 <_fstat_r+0x1c>
 800ec92:	682b      	ldr	r3, [r5, #0]
 800ec94:	b103      	cbz	r3, 800ec98 <_fstat_r+0x1c>
 800ec96:	6023      	str	r3, [r4, #0]
 800ec98:	bd38      	pop	{r3, r4, r5, pc}
 800ec9a:	bf00      	nop
 800ec9c:	20000674 	.word	0x20000674

0800eca0 <_isatty_r>:
 800eca0:	b538      	push	{r3, r4, r5, lr}
 800eca2:	4d06      	ldr	r5, [pc, #24]	; (800ecbc <_isatty_r+0x1c>)
 800eca4:	2300      	movs	r3, #0
 800eca6:	4604      	mov	r4, r0
 800eca8:	4608      	mov	r0, r1
 800ecaa:	602b      	str	r3, [r5, #0]
 800ecac:	f7f3 fb7d 	bl	80023aa <_isatty>
 800ecb0:	1c43      	adds	r3, r0, #1
 800ecb2:	d102      	bne.n	800ecba <_isatty_r+0x1a>
 800ecb4:	682b      	ldr	r3, [r5, #0]
 800ecb6:	b103      	cbz	r3, 800ecba <_isatty_r+0x1a>
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	bd38      	pop	{r3, r4, r5, pc}
 800ecbc:	20000674 	.word	0x20000674

0800ecc0 <_malloc_usable_size_r>:
 800ecc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc4:	1f18      	subs	r0, r3, #4
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	bfbc      	itt	lt
 800ecca:	580b      	ldrlt	r3, [r1, r0]
 800eccc:	18c0      	addlt	r0, r0, r3
 800ecce:	4770      	bx	lr

0800ecd0 <trunc>:
 800ecd0:	ec51 0b10 	vmov	r0, r1, d0
 800ecd4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ecd8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ecdc:	2b13      	cmp	r3, #19
 800ecde:	b5d0      	push	{r4, r6, r7, lr}
 800ece0:	460c      	mov	r4, r1
 800ece2:	dc10      	bgt.n	800ed06 <trunc+0x36>
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	bfa5      	ittet	ge
 800ece8:	4a11      	ldrge	r2, [pc, #68]	; (800ed30 <trunc+0x60>)
 800ecea:	fa42 f303 	asrge.w	r3, r2, r3
 800ecee:	2100      	movlt	r1, #0
 800ecf0:	2100      	movge	r1, #0
 800ecf2:	bfb9      	ittee	lt
 800ecf4:	2000      	movlt	r0, #0
 800ecf6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800ecfa:	2000      	movge	r0, #0
 800ecfc:	ea24 0103 	bicge.w	r1, r4, r3
 800ed00:	ec41 0b10 	vmov	d0, r0, r1
 800ed04:	bdd0      	pop	{r4, r6, r7, pc}
 800ed06:	2b33      	cmp	r3, #51	; 0x33
 800ed08:	dd08      	ble.n	800ed1c <trunc+0x4c>
 800ed0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed0e:	d1f7      	bne.n	800ed00 <trunc+0x30>
 800ed10:	ee10 2a10 	vmov	r2, s0
 800ed14:	460b      	mov	r3, r1
 800ed16:	f7f1 fab1 	bl	800027c <__adddf3>
 800ed1a:	e7f1      	b.n	800ed00 <trunc+0x30>
 800ed1c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ed20:	f04f 33ff 	mov.w	r3, #4294967295
 800ed24:	fa23 f202 	lsr.w	r2, r3, r2
 800ed28:	ea20 0602 	bic.w	r6, r0, r2
 800ed2c:	4630      	mov	r0, r6
 800ed2e:	e7e7      	b.n	800ed00 <trunc+0x30>
 800ed30:	000fffff 	.word	0x000fffff

0800ed34 <pow>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	ed2d 8b02 	vpush	{d8}
 800ed3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ed3e:	eef0 8a60 	vmov.f32	s17, s1
 800ed42:	ec55 4b11 	vmov	r4, r5, d1
 800ed46:	f000 f867 	bl	800ee18 <__ieee754_pow>
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	ec57 6b10 	vmov	r6, r7, d0
 800ed56:	f7f1 fee1 	bl	8000b1c <__aeabi_dcmpun>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d13b      	bne.n	800edd6 <pow+0xa2>
 800ed5e:	ec51 0b18 	vmov	r0, r1, d8
 800ed62:	2200      	movs	r2, #0
 800ed64:	2300      	movs	r3, #0
 800ed66:	f7f1 fea7 	bl	8000ab8 <__aeabi_dcmpeq>
 800ed6a:	b1b8      	cbz	r0, 800ed9c <pow+0x68>
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	2300      	movs	r3, #0
 800ed70:	4620      	mov	r0, r4
 800ed72:	4629      	mov	r1, r5
 800ed74:	f7f1 fea0 	bl	8000ab8 <__aeabi_dcmpeq>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d146      	bne.n	800ee0a <pow+0xd6>
 800ed7c:	ec45 4b10 	vmov	d0, r4, r5
 800ed80:	f000 fe63 	bl	800fa4a <finite>
 800ed84:	b338      	cbz	r0, 800edd6 <pow+0xa2>
 800ed86:	2200      	movs	r2, #0
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	4629      	mov	r1, r5
 800ed8e:	f7f1 fe9d 	bl	8000acc <__aeabi_dcmplt>
 800ed92:	b300      	cbz	r0, 800edd6 <pow+0xa2>
 800ed94:	f7fe fdec 	bl	800d970 <__errno>
 800ed98:	2322      	movs	r3, #34	; 0x22
 800ed9a:	e01b      	b.n	800edd4 <pow+0xa0>
 800ed9c:	ec47 6b10 	vmov	d0, r6, r7
 800eda0:	f000 fe53 	bl	800fa4a <finite>
 800eda4:	b9e0      	cbnz	r0, 800ede0 <pow+0xac>
 800eda6:	eeb0 0a48 	vmov.f32	s0, s16
 800edaa:	eef0 0a68 	vmov.f32	s1, s17
 800edae:	f000 fe4c 	bl	800fa4a <finite>
 800edb2:	b1a8      	cbz	r0, 800ede0 <pow+0xac>
 800edb4:	ec45 4b10 	vmov	d0, r4, r5
 800edb8:	f000 fe47 	bl	800fa4a <finite>
 800edbc:	b180      	cbz	r0, 800ede0 <pow+0xac>
 800edbe:	4632      	mov	r2, r6
 800edc0:	463b      	mov	r3, r7
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fea9 	bl	8000b1c <__aeabi_dcmpun>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d0e2      	beq.n	800ed94 <pow+0x60>
 800edce:	f7fe fdcf 	bl	800d970 <__errno>
 800edd2:	2321      	movs	r3, #33	; 0x21
 800edd4:	6003      	str	r3, [r0, #0]
 800edd6:	ecbd 8b02 	vpop	{d8}
 800edda:	ec47 6b10 	vmov	d0, r6, r7
 800edde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede0:	2200      	movs	r2, #0
 800ede2:	2300      	movs	r3, #0
 800ede4:	4630      	mov	r0, r6
 800ede6:	4639      	mov	r1, r7
 800ede8:	f7f1 fe66 	bl	8000ab8 <__aeabi_dcmpeq>
 800edec:	2800      	cmp	r0, #0
 800edee:	d0f2      	beq.n	800edd6 <pow+0xa2>
 800edf0:	eeb0 0a48 	vmov.f32	s0, s16
 800edf4:	eef0 0a68 	vmov.f32	s1, s17
 800edf8:	f000 fe27 	bl	800fa4a <finite>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	d0ea      	beq.n	800edd6 <pow+0xa2>
 800ee00:	ec45 4b10 	vmov	d0, r4, r5
 800ee04:	f000 fe21 	bl	800fa4a <finite>
 800ee08:	e7c3      	b.n	800ed92 <pow+0x5e>
 800ee0a:	4f01      	ldr	r7, [pc, #4]	; (800ee10 <pow+0xdc>)
 800ee0c:	2600      	movs	r6, #0
 800ee0e:	e7e2      	b.n	800edd6 <pow+0xa2>
 800ee10:	3ff00000 	.word	0x3ff00000
 800ee14:	00000000 	.word	0x00000000

0800ee18 <__ieee754_pow>:
 800ee18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1c:	ed2d 8b06 	vpush	{d8-d10}
 800ee20:	b089      	sub	sp, #36	; 0x24
 800ee22:	ed8d 1b00 	vstr	d1, [sp]
 800ee26:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ee2a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ee2e:	ea58 0102 	orrs.w	r1, r8, r2
 800ee32:	ec57 6b10 	vmov	r6, r7, d0
 800ee36:	d115      	bne.n	800ee64 <__ieee754_pow+0x4c>
 800ee38:	19b3      	adds	r3, r6, r6
 800ee3a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ee3e:	4152      	adcs	r2, r2
 800ee40:	4299      	cmp	r1, r3
 800ee42:	4b89      	ldr	r3, [pc, #548]	; (800f068 <__ieee754_pow+0x250>)
 800ee44:	4193      	sbcs	r3, r2
 800ee46:	f080 84d2 	bcs.w	800f7ee <__ieee754_pow+0x9d6>
 800ee4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee4e:	4630      	mov	r0, r6
 800ee50:	4639      	mov	r1, r7
 800ee52:	f7f1 fa13 	bl	800027c <__adddf3>
 800ee56:	ec41 0b10 	vmov	d0, r0, r1
 800ee5a:	b009      	add	sp, #36	; 0x24
 800ee5c:	ecbd 8b06 	vpop	{d8-d10}
 800ee60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee64:	4b81      	ldr	r3, [pc, #516]	; (800f06c <__ieee754_pow+0x254>)
 800ee66:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ee6a:	429c      	cmp	r4, r3
 800ee6c:	ee10 aa10 	vmov	sl, s0
 800ee70:	463d      	mov	r5, r7
 800ee72:	dc06      	bgt.n	800ee82 <__ieee754_pow+0x6a>
 800ee74:	d101      	bne.n	800ee7a <__ieee754_pow+0x62>
 800ee76:	2e00      	cmp	r6, #0
 800ee78:	d1e7      	bne.n	800ee4a <__ieee754_pow+0x32>
 800ee7a:	4598      	cmp	r8, r3
 800ee7c:	dc01      	bgt.n	800ee82 <__ieee754_pow+0x6a>
 800ee7e:	d10f      	bne.n	800eea0 <__ieee754_pow+0x88>
 800ee80:	b172      	cbz	r2, 800eea0 <__ieee754_pow+0x88>
 800ee82:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ee86:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ee8a:	ea55 050a 	orrs.w	r5, r5, sl
 800ee8e:	d1dc      	bne.n	800ee4a <__ieee754_pow+0x32>
 800ee90:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ee94:	18db      	adds	r3, r3, r3
 800ee96:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ee9a:	4152      	adcs	r2, r2
 800ee9c:	429d      	cmp	r5, r3
 800ee9e:	e7d0      	b.n	800ee42 <__ieee754_pow+0x2a>
 800eea0:	2d00      	cmp	r5, #0
 800eea2:	da3b      	bge.n	800ef1c <__ieee754_pow+0x104>
 800eea4:	4b72      	ldr	r3, [pc, #456]	; (800f070 <__ieee754_pow+0x258>)
 800eea6:	4598      	cmp	r8, r3
 800eea8:	dc51      	bgt.n	800ef4e <__ieee754_pow+0x136>
 800eeaa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800eeae:	4598      	cmp	r8, r3
 800eeb0:	f340 84ac 	ble.w	800f80c <__ieee754_pow+0x9f4>
 800eeb4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eeb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eebc:	2b14      	cmp	r3, #20
 800eebe:	dd0f      	ble.n	800eee0 <__ieee754_pow+0xc8>
 800eec0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800eec4:	fa22 f103 	lsr.w	r1, r2, r3
 800eec8:	fa01 f303 	lsl.w	r3, r1, r3
 800eecc:	4293      	cmp	r3, r2
 800eece:	f040 849d 	bne.w	800f80c <__ieee754_pow+0x9f4>
 800eed2:	f001 0101 	and.w	r1, r1, #1
 800eed6:	f1c1 0302 	rsb	r3, r1, #2
 800eeda:	9304      	str	r3, [sp, #16]
 800eedc:	b182      	cbz	r2, 800ef00 <__ieee754_pow+0xe8>
 800eede:	e05f      	b.n	800efa0 <__ieee754_pow+0x188>
 800eee0:	2a00      	cmp	r2, #0
 800eee2:	d15b      	bne.n	800ef9c <__ieee754_pow+0x184>
 800eee4:	f1c3 0314 	rsb	r3, r3, #20
 800eee8:	fa48 f103 	asr.w	r1, r8, r3
 800eeec:	fa01 f303 	lsl.w	r3, r1, r3
 800eef0:	4543      	cmp	r3, r8
 800eef2:	f040 8488 	bne.w	800f806 <__ieee754_pow+0x9ee>
 800eef6:	f001 0101 	and.w	r1, r1, #1
 800eefa:	f1c1 0302 	rsb	r3, r1, #2
 800eefe:	9304      	str	r3, [sp, #16]
 800ef00:	4b5c      	ldr	r3, [pc, #368]	; (800f074 <__ieee754_pow+0x25c>)
 800ef02:	4598      	cmp	r8, r3
 800ef04:	d132      	bne.n	800ef6c <__ieee754_pow+0x154>
 800ef06:	f1b9 0f00 	cmp.w	r9, #0
 800ef0a:	f280 8478 	bge.w	800f7fe <__ieee754_pow+0x9e6>
 800ef0e:	4959      	ldr	r1, [pc, #356]	; (800f074 <__ieee754_pow+0x25c>)
 800ef10:	4632      	mov	r2, r6
 800ef12:	463b      	mov	r3, r7
 800ef14:	2000      	movs	r0, #0
 800ef16:	f7f1 fc91 	bl	800083c <__aeabi_ddiv>
 800ef1a:	e79c      	b.n	800ee56 <__ieee754_pow+0x3e>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	2a00      	cmp	r2, #0
 800ef22:	d13d      	bne.n	800efa0 <__ieee754_pow+0x188>
 800ef24:	4b51      	ldr	r3, [pc, #324]	; (800f06c <__ieee754_pow+0x254>)
 800ef26:	4598      	cmp	r8, r3
 800ef28:	d1ea      	bne.n	800ef00 <__ieee754_pow+0xe8>
 800ef2a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ef2e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ef32:	ea53 030a 	orrs.w	r3, r3, sl
 800ef36:	f000 845a 	beq.w	800f7ee <__ieee754_pow+0x9d6>
 800ef3a:	4b4f      	ldr	r3, [pc, #316]	; (800f078 <__ieee754_pow+0x260>)
 800ef3c:	429c      	cmp	r4, r3
 800ef3e:	dd08      	ble.n	800ef52 <__ieee754_pow+0x13a>
 800ef40:	f1b9 0f00 	cmp.w	r9, #0
 800ef44:	f2c0 8457 	blt.w	800f7f6 <__ieee754_pow+0x9de>
 800ef48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef4c:	e783      	b.n	800ee56 <__ieee754_pow+0x3e>
 800ef4e:	2302      	movs	r3, #2
 800ef50:	e7e5      	b.n	800ef1e <__ieee754_pow+0x106>
 800ef52:	f1b9 0f00 	cmp.w	r9, #0
 800ef56:	f04f 0000 	mov.w	r0, #0
 800ef5a:	f04f 0100 	mov.w	r1, #0
 800ef5e:	f6bf af7a 	bge.w	800ee56 <__ieee754_pow+0x3e>
 800ef62:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ef66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ef6a:	e774      	b.n	800ee56 <__ieee754_pow+0x3e>
 800ef6c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ef70:	d106      	bne.n	800ef80 <__ieee754_pow+0x168>
 800ef72:	4632      	mov	r2, r6
 800ef74:	463b      	mov	r3, r7
 800ef76:	4630      	mov	r0, r6
 800ef78:	4639      	mov	r1, r7
 800ef7a:	f7f1 fb35 	bl	80005e8 <__aeabi_dmul>
 800ef7e:	e76a      	b.n	800ee56 <__ieee754_pow+0x3e>
 800ef80:	4b3e      	ldr	r3, [pc, #248]	; (800f07c <__ieee754_pow+0x264>)
 800ef82:	4599      	cmp	r9, r3
 800ef84:	d10c      	bne.n	800efa0 <__ieee754_pow+0x188>
 800ef86:	2d00      	cmp	r5, #0
 800ef88:	db0a      	blt.n	800efa0 <__ieee754_pow+0x188>
 800ef8a:	ec47 6b10 	vmov	d0, r6, r7
 800ef8e:	b009      	add	sp, #36	; 0x24
 800ef90:	ecbd 8b06 	vpop	{d8-d10}
 800ef94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef98:	f000 bc6c 	b.w	800f874 <__ieee754_sqrt>
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9304      	str	r3, [sp, #16]
 800efa0:	ec47 6b10 	vmov	d0, r6, r7
 800efa4:	f000 fd48 	bl	800fa38 <fabs>
 800efa8:	ec51 0b10 	vmov	r0, r1, d0
 800efac:	f1ba 0f00 	cmp.w	sl, #0
 800efb0:	d129      	bne.n	800f006 <__ieee754_pow+0x1ee>
 800efb2:	b124      	cbz	r4, 800efbe <__ieee754_pow+0x1a6>
 800efb4:	4b2f      	ldr	r3, [pc, #188]	; (800f074 <__ieee754_pow+0x25c>)
 800efb6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800efba:	429a      	cmp	r2, r3
 800efbc:	d123      	bne.n	800f006 <__ieee754_pow+0x1ee>
 800efbe:	f1b9 0f00 	cmp.w	r9, #0
 800efc2:	da05      	bge.n	800efd0 <__ieee754_pow+0x1b8>
 800efc4:	4602      	mov	r2, r0
 800efc6:	460b      	mov	r3, r1
 800efc8:	2000      	movs	r0, #0
 800efca:	492a      	ldr	r1, [pc, #168]	; (800f074 <__ieee754_pow+0x25c>)
 800efcc:	f7f1 fc36 	bl	800083c <__aeabi_ddiv>
 800efd0:	2d00      	cmp	r5, #0
 800efd2:	f6bf af40 	bge.w	800ee56 <__ieee754_pow+0x3e>
 800efd6:	9b04      	ldr	r3, [sp, #16]
 800efd8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800efdc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800efe0:	4323      	orrs	r3, r4
 800efe2:	d108      	bne.n	800eff6 <__ieee754_pow+0x1de>
 800efe4:	4602      	mov	r2, r0
 800efe6:	460b      	mov	r3, r1
 800efe8:	4610      	mov	r0, r2
 800efea:	4619      	mov	r1, r3
 800efec:	f7f1 f944 	bl	8000278 <__aeabi_dsub>
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	e78f      	b.n	800ef16 <__ieee754_pow+0xfe>
 800eff6:	9b04      	ldr	r3, [sp, #16]
 800eff8:	2b01      	cmp	r3, #1
 800effa:	f47f af2c 	bne.w	800ee56 <__ieee754_pow+0x3e>
 800effe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f002:	4619      	mov	r1, r3
 800f004:	e727      	b.n	800ee56 <__ieee754_pow+0x3e>
 800f006:	0feb      	lsrs	r3, r5, #31
 800f008:	3b01      	subs	r3, #1
 800f00a:	9306      	str	r3, [sp, #24]
 800f00c:	9a06      	ldr	r2, [sp, #24]
 800f00e:	9b04      	ldr	r3, [sp, #16]
 800f010:	4313      	orrs	r3, r2
 800f012:	d102      	bne.n	800f01a <__ieee754_pow+0x202>
 800f014:	4632      	mov	r2, r6
 800f016:	463b      	mov	r3, r7
 800f018:	e7e6      	b.n	800efe8 <__ieee754_pow+0x1d0>
 800f01a:	4b19      	ldr	r3, [pc, #100]	; (800f080 <__ieee754_pow+0x268>)
 800f01c:	4598      	cmp	r8, r3
 800f01e:	f340 80fb 	ble.w	800f218 <__ieee754_pow+0x400>
 800f022:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f026:	4598      	cmp	r8, r3
 800f028:	4b13      	ldr	r3, [pc, #76]	; (800f078 <__ieee754_pow+0x260>)
 800f02a:	dd0c      	ble.n	800f046 <__ieee754_pow+0x22e>
 800f02c:	429c      	cmp	r4, r3
 800f02e:	dc0f      	bgt.n	800f050 <__ieee754_pow+0x238>
 800f030:	f1b9 0f00 	cmp.w	r9, #0
 800f034:	da0f      	bge.n	800f056 <__ieee754_pow+0x23e>
 800f036:	2000      	movs	r0, #0
 800f038:	b009      	add	sp, #36	; 0x24
 800f03a:	ecbd 8b06 	vpop	{d8-d10}
 800f03e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f042:	f000 bcf0 	b.w	800fa26 <__math_oflow>
 800f046:	429c      	cmp	r4, r3
 800f048:	dbf2      	blt.n	800f030 <__ieee754_pow+0x218>
 800f04a:	4b0a      	ldr	r3, [pc, #40]	; (800f074 <__ieee754_pow+0x25c>)
 800f04c:	429c      	cmp	r4, r3
 800f04e:	dd19      	ble.n	800f084 <__ieee754_pow+0x26c>
 800f050:	f1b9 0f00 	cmp.w	r9, #0
 800f054:	dcef      	bgt.n	800f036 <__ieee754_pow+0x21e>
 800f056:	2000      	movs	r0, #0
 800f058:	b009      	add	sp, #36	; 0x24
 800f05a:	ecbd 8b06 	vpop	{d8-d10}
 800f05e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f062:	f000 bcd7 	b.w	800fa14 <__math_uflow>
 800f066:	bf00      	nop
 800f068:	fff00000 	.word	0xfff00000
 800f06c:	7ff00000 	.word	0x7ff00000
 800f070:	433fffff 	.word	0x433fffff
 800f074:	3ff00000 	.word	0x3ff00000
 800f078:	3fefffff 	.word	0x3fefffff
 800f07c:	3fe00000 	.word	0x3fe00000
 800f080:	41e00000 	.word	0x41e00000
 800f084:	4b60      	ldr	r3, [pc, #384]	; (800f208 <__ieee754_pow+0x3f0>)
 800f086:	2200      	movs	r2, #0
 800f088:	f7f1 f8f6 	bl	8000278 <__aeabi_dsub>
 800f08c:	a354      	add	r3, pc, #336	; (adr r3, 800f1e0 <__ieee754_pow+0x3c8>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	4604      	mov	r4, r0
 800f094:	460d      	mov	r5, r1
 800f096:	f7f1 faa7 	bl	80005e8 <__aeabi_dmul>
 800f09a:	a353      	add	r3, pc, #332	; (adr r3, 800f1e8 <__ieee754_pow+0x3d0>)
 800f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a0:	4606      	mov	r6, r0
 800f0a2:	460f      	mov	r7, r1
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	4629      	mov	r1, r5
 800f0a8:	f7f1 fa9e 	bl	80005e8 <__aeabi_dmul>
 800f0ac:	4b57      	ldr	r3, [pc, #348]	; (800f20c <__ieee754_pow+0x3f4>)
 800f0ae:	4682      	mov	sl, r0
 800f0b0:	468b      	mov	fp, r1
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	f7f1 fa96 	bl	80005e8 <__aeabi_dmul>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	a14b      	add	r1, pc, #300	; (adr r1, 800f1f0 <__ieee754_pow+0x3d8>)
 800f0c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0c6:	f7f1 f8d7 	bl	8000278 <__aeabi_dsub>
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	462b      	mov	r3, r5
 800f0ce:	f7f1 fa8b 	bl	80005e8 <__aeabi_dmul>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	494d      	ldr	r1, [pc, #308]	; (800f210 <__ieee754_pow+0x3f8>)
 800f0da:	f7f1 f8cd 	bl	8000278 <__aeabi_dsub>
 800f0de:	4622      	mov	r2, r4
 800f0e0:	4680      	mov	r8, r0
 800f0e2:	4689      	mov	r9, r1
 800f0e4:	462b      	mov	r3, r5
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	f7f1 fa7d 	bl	80005e8 <__aeabi_dmul>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	4640      	mov	r0, r8
 800f0f4:	4649      	mov	r1, r9
 800f0f6:	f7f1 fa77 	bl	80005e8 <__aeabi_dmul>
 800f0fa:	a33f      	add	r3, pc, #252	; (adr r3, 800f1f8 <__ieee754_pow+0x3e0>)
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	f7f1 fa72 	bl	80005e8 <__aeabi_dmul>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4650      	mov	r0, sl
 800f10a:	4659      	mov	r1, fp
 800f10c:	f7f1 f8b4 	bl	8000278 <__aeabi_dsub>
 800f110:	4602      	mov	r2, r0
 800f112:	460b      	mov	r3, r1
 800f114:	4680      	mov	r8, r0
 800f116:	4689      	mov	r9, r1
 800f118:	4630      	mov	r0, r6
 800f11a:	4639      	mov	r1, r7
 800f11c:	f7f1 f8ae 	bl	800027c <__adddf3>
 800f120:	2000      	movs	r0, #0
 800f122:	4632      	mov	r2, r6
 800f124:	463b      	mov	r3, r7
 800f126:	4604      	mov	r4, r0
 800f128:	460d      	mov	r5, r1
 800f12a:	f7f1 f8a5 	bl	8000278 <__aeabi_dsub>
 800f12e:	4602      	mov	r2, r0
 800f130:	460b      	mov	r3, r1
 800f132:	4640      	mov	r0, r8
 800f134:	4649      	mov	r1, r9
 800f136:	f7f1 f89f 	bl	8000278 <__aeabi_dsub>
 800f13a:	9b04      	ldr	r3, [sp, #16]
 800f13c:	9a06      	ldr	r2, [sp, #24]
 800f13e:	3b01      	subs	r3, #1
 800f140:	4313      	orrs	r3, r2
 800f142:	4682      	mov	sl, r0
 800f144:	468b      	mov	fp, r1
 800f146:	f040 81e7 	bne.w	800f518 <__ieee754_pow+0x700>
 800f14a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f200 <__ieee754_pow+0x3e8>
 800f14e:	eeb0 8a47 	vmov.f32	s16, s14
 800f152:	eef0 8a67 	vmov.f32	s17, s15
 800f156:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f15a:	2600      	movs	r6, #0
 800f15c:	4632      	mov	r2, r6
 800f15e:	463b      	mov	r3, r7
 800f160:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f164:	f7f1 f888 	bl	8000278 <__aeabi_dsub>
 800f168:	4622      	mov	r2, r4
 800f16a:	462b      	mov	r3, r5
 800f16c:	f7f1 fa3c 	bl	80005e8 <__aeabi_dmul>
 800f170:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f174:	4680      	mov	r8, r0
 800f176:	4689      	mov	r9, r1
 800f178:	4650      	mov	r0, sl
 800f17a:	4659      	mov	r1, fp
 800f17c:	f7f1 fa34 	bl	80005e8 <__aeabi_dmul>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	4640      	mov	r0, r8
 800f186:	4649      	mov	r1, r9
 800f188:	f7f1 f878 	bl	800027c <__adddf3>
 800f18c:	4632      	mov	r2, r6
 800f18e:	463b      	mov	r3, r7
 800f190:	4680      	mov	r8, r0
 800f192:	4689      	mov	r9, r1
 800f194:	4620      	mov	r0, r4
 800f196:	4629      	mov	r1, r5
 800f198:	f7f1 fa26 	bl	80005e8 <__aeabi_dmul>
 800f19c:	460b      	mov	r3, r1
 800f19e:	4604      	mov	r4, r0
 800f1a0:	460d      	mov	r5, r1
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	4649      	mov	r1, r9
 800f1a6:	4640      	mov	r0, r8
 800f1a8:	f7f1 f868 	bl	800027c <__adddf3>
 800f1ac:	4b19      	ldr	r3, [pc, #100]	; (800f214 <__ieee754_pow+0x3fc>)
 800f1ae:	4299      	cmp	r1, r3
 800f1b0:	ec45 4b19 	vmov	d9, r4, r5
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	460f      	mov	r7, r1
 800f1b8:	468b      	mov	fp, r1
 800f1ba:	f340 82f1 	ble.w	800f7a0 <__ieee754_pow+0x988>
 800f1be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f1c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f1c6:	4303      	orrs	r3, r0
 800f1c8:	f000 81e4 	beq.w	800f594 <__ieee754_pow+0x77c>
 800f1cc:	ec51 0b18 	vmov	r0, r1, d8
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f7f1 fc7a 	bl	8000acc <__aeabi_dcmplt>
 800f1d8:	3800      	subs	r0, #0
 800f1da:	bf18      	it	ne
 800f1dc:	2001      	movne	r0, #1
 800f1de:	e72b      	b.n	800f038 <__ieee754_pow+0x220>
 800f1e0:	60000000 	.word	0x60000000
 800f1e4:	3ff71547 	.word	0x3ff71547
 800f1e8:	f85ddf44 	.word	0xf85ddf44
 800f1ec:	3e54ae0b 	.word	0x3e54ae0b
 800f1f0:	55555555 	.word	0x55555555
 800f1f4:	3fd55555 	.word	0x3fd55555
 800f1f8:	652b82fe 	.word	0x652b82fe
 800f1fc:	3ff71547 	.word	0x3ff71547
 800f200:	00000000 	.word	0x00000000
 800f204:	bff00000 	.word	0xbff00000
 800f208:	3ff00000 	.word	0x3ff00000
 800f20c:	3fd00000 	.word	0x3fd00000
 800f210:	3fe00000 	.word	0x3fe00000
 800f214:	408fffff 	.word	0x408fffff
 800f218:	4bd5      	ldr	r3, [pc, #852]	; (800f570 <__ieee754_pow+0x758>)
 800f21a:	402b      	ands	r3, r5
 800f21c:	2200      	movs	r2, #0
 800f21e:	b92b      	cbnz	r3, 800f22c <__ieee754_pow+0x414>
 800f220:	4bd4      	ldr	r3, [pc, #848]	; (800f574 <__ieee754_pow+0x75c>)
 800f222:	f7f1 f9e1 	bl	80005e8 <__aeabi_dmul>
 800f226:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f22a:	460c      	mov	r4, r1
 800f22c:	1523      	asrs	r3, r4, #20
 800f22e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f232:	4413      	add	r3, r2
 800f234:	9305      	str	r3, [sp, #20]
 800f236:	4bd0      	ldr	r3, [pc, #832]	; (800f578 <__ieee754_pow+0x760>)
 800f238:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f23c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f240:	429c      	cmp	r4, r3
 800f242:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f246:	dd08      	ble.n	800f25a <__ieee754_pow+0x442>
 800f248:	4bcc      	ldr	r3, [pc, #816]	; (800f57c <__ieee754_pow+0x764>)
 800f24a:	429c      	cmp	r4, r3
 800f24c:	f340 8162 	ble.w	800f514 <__ieee754_pow+0x6fc>
 800f250:	9b05      	ldr	r3, [sp, #20]
 800f252:	3301      	adds	r3, #1
 800f254:	9305      	str	r3, [sp, #20]
 800f256:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f25a:	2400      	movs	r4, #0
 800f25c:	00e3      	lsls	r3, r4, #3
 800f25e:	9307      	str	r3, [sp, #28]
 800f260:	4bc7      	ldr	r3, [pc, #796]	; (800f580 <__ieee754_pow+0x768>)
 800f262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f266:	ed93 7b00 	vldr	d7, [r3]
 800f26a:	4629      	mov	r1, r5
 800f26c:	ec53 2b17 	vmov	r2, r3, d7
 800f270:	eeb0 9a47 	vmov.f32	s18, s14
 800f274:	eef0 9a67 	vmov.f32	s19, s15
 800f278:	4682      	mov	sl, r0
 800f27a:	f7f0 fffd 	bl	8000278 <__aeabi_dsub>
 800f27e:	4652      	mov	r2, sl
 800f280:	4606      	mov	r6, r0
 800f282:	460f      	mov	r7, r1
 800f284:	462b      	mov	r3, r5
 800f286:	ec51 0b19 	vmov	r0, r1, d9
 800f28a:	f7f0 fff7 	bl	800027c <__adddf3>
 800f28e:	4602      	mov	r2, r0
 800f290:	460b      	mov	r3, r1
 800f292:	2000      	movs	r0, #0
 800f294:	49bb      	ldr	r1, [pc, #748]	; (800f584 <__ieee754_pow+0x76c>)
 800f296:	f7f1 fad1 	bl	800083c <__aeabi_ddiv>
 800f29a:	ec41 0b1a 	vmov	d10, r0, r1
 800f29e:	4602      	mov	r2, r0
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	4630      	mov	r0, r6
 800f2a4:	4639      	mov	r1, r7
 800f2a6:	f7f1 f99f 	bl	80005e8 <__aeabi_dmul>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2b0:	9302      	str	r3, [sp, #8]
 800f2b2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f2b6:	46ab      	mov	fp, r5
 800f2b8:	106d      	asrs	r5, r5, #1
 800f2ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f2be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f2c2:	ec41 0b18 	vmov	d8, r0, r1
 800f2c6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	4640      	mov	r0, r8
 800f2ce:	4649      	mov	r1, r9
 800f2d0:	4614      	mov	r4, r2
 800f2d2:	461d      	mov	r5, r3
 800f2d4:	f7f1 f988 	bl	80005e8 <__aeabi_dmul>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	4630      	mov	r0, r6
 800f2de:	4639      	mov	r1, r7
 800f2e0:	f7f0 ffca 	bl	8000278 <__aeabi_dsub>
 800f2e4:	ec53 2b19 	vmov	r2, r3, d9
 800f2e8:	4606      	mov	r6, r0
 800f2ea:	460f      	mov	r7, r1
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f7f0 ffc2 	bl	8000278 <__aeabi_dsub>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	4650      	mov	r0, sl
 800f2fa:	4659      	mov	r1, fp
 800f2fc:	f7f0 ffbc 	bl	8000278 <__aeabi_dsub>
 800f300:	4642      	mov	r2, r8
 800f302:	464b      	mov	r3, r9
 800f304:	f7f1 f970 	bl	80005e8 <__aeabi_dmul>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4630      	mov	r0, r6
 800f30e:	4639      	mov	r1, r7
 800f310:	f7f0 ffb2 	bl	8000278 <__aeabi_dsub>
 800f314:	ec53 2b1a 	vmov	r2, r3, d10
 800f318:	f7f1 f966 	bl	80005e8 <__aeabi_dmul>
 800f31c:	ec53 2b18 	vmov	r2, r3, d8
 800f320:	ec41 0b19 	vmov	d9, r0, r1
 800f324:	ec51 0b18 	vmov	r0, r1, d8
 800f328:	f7f1 f95e 	bl	80005e8 <__aeabi_dmul>
 800f32c:	a37c      	add	r3, pc, #496	; (adr r3, 800f520 <__ieee754_pow+0x708>)
 800f32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f332:	4604      	mov	r4, r0
 800f334:	460d      	mov	r5, r1
 800f336:	f7f1 f957 	bl	80005e8 <__aeabi_dmul>
 800f33a:	a37b      	add	r3, pc, #492	; (adr r3, 800f528 <__ieee754_pow+0x710>)
 800f33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f340:	f7f0 ff9c 	bl	800027c <__adddf3>
 800f344:	4622      	mov	r2, r4
 800f346:	462b      	mov	r3, r5
 800f348:	f7f1 f94e 	bl	80005e8 <__aeabi_dmul>
 800f34c:	a378      	add	r3, pc, #480	; (adr r3, 800f530 <__ieee754_pow+0x718>)
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	f7f0 ff93 	bl	800027c <__adddf3>
 800f356:	4622      	mov	r2, r4
 800f358:	462b      	mov	r3, r5
 800f35a:	f7f1 f945 	bl	80005e8 <__aeabi_dmul>
 800f35e:	a376      	add	r3, pc, #472	; (adr r3, 800f538 <__ieee754_pow+0x720>)
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	f7f0 ff8a 	bl	800027c <__adddf3>
 800f368:	4622      	mov	r2, r4
 800f36a:	462b      	mov	r3, r5
 800f36c:	f7f1 f93c 	bl	80005e8 <__aeabi_dmul>
 800f370:	a373      	add	r3, pc, #460	; (adr r3, 800f540 <__ieee754_pow+0x728>)
 800f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f376:	f7f0 ff81 	bl	800027c <__adddf3>
 800f37a:	4622      	mov	r2, r4
 800f37c:	462b      	mov	r3, r5
 800f37e:	f7f1 f933 	bl	80005e8 <__aeabi_dmul>
 800f382:	a371      	add	r3, pc, #452	; (adr r3, 800f548 <__ieee754_pow+0x730>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	f7f0 ff78 	bl	800027c <__adddf3>
 800f38c:	4622      	mov	r2, r4
 800f38e:	4606      	mov	r6, r0
 800f390:	460f      	mov	r7, r1
 800f392:	462b      	mov	r3, r5
 800f394:	4620      	mov	r0, r4
 800f396:	4629      	mov	r1, r5
 800f398:	f7f1 f926 	bl	80005e8 <__aeabi_dmul>
 800f39c:	4602      	mov	r2, r0
 800f39e:	460b      	mov	r3, r1
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f1 f920 	bl	80005e8 <__aeabi_dmul>
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	460d      	mov	r5, r1
 800f3ae:	464b      	mov	r3, r9
 800f3b0:	ec51 0b18 	vmov	r0, r1, d8
 800f3b4:	f7f0 ff62 	bl	800027c <__adddf3>
 800f3b8:	ec53 2b19 	vmov	r2, r3, d9
 800f3bc:	f7f1 f914 	bl	80005e8 <__aeabi_dmul>
 800f3c0:	4622      	mov	r2, r4
 800f3c2:	462b      	mov	r3, r5
 800f3c4:	f7f0 ff5a 	bl	800027c <__adddf3>
 800f3c8:	4642      	mov	r2, r8
 800f3ca:	4682      	mov	sl, r0
 800f3cc:	468b      	mov	fp, r1
 800f3ce:	464b      	mov	r3, r9
 800f3d0:	4640      	mov	r0, r8
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	f7f1 f908 	bl	80005e8 <__aeabi_dmul>
 800f3d8:	4b6b      	ldr	r3, [pc, #428]	; (800f588 <__ieee754_pow+0x770>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	4606      	mov	r6, r0
 800f3de:	460f      	mov	r7, r1
 800f3e0:	f7f0 ff4c 	bl	800027c <__adddf3>
 800f3e4:	4652      	mov	r2, sl
 800f3e6:	465b      	mov	r3, fp
 800f3e8:	f7f0 ff48 	bl	800027c <__adddf3>
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	460d      	mov	r5, r1
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	4640      	mov	r0, r8
 800f3f8:	4649      	mov	r1, r9
 800f3fa:	f7f1 f8f5 	bl	80005e8 <__aeabi_dmul>
 800f3fe:	4b62      	ldr	r3, [pc, #392]	; (800f588 <__ieee754_pow+0x770>)
 800f400:	4680      	mov	r8, r0
 800f402:	4689      	mov	r9, r1
 800f404:	2200      	movs	r2, #0
 800f406:	4620      	mov	r0, r4
 800f408:	4629      	mov	r1, r5
 800f40a:	f7f0 ff35 	bl	8000278 <__aeabi_dsub>
 800f40e:	4632      	mov	r2, r6
 800f410:	463b      	mov	r3, r7
 800f412:	f7f0 ff31 	bl	8000278 <__aeabi_dsub>
 800f416:	4602      	mov	r2, r0
 800f418:	460b      	mov	r3, r1
 800f41a:	4650      	mov	r0, sl
 800f41c:	4659      	mov	r1, fp
 800f41e:	f7f0 ff2b 	bl	8000278 <__aeabi_dsub>
 800f422:	ec53 2b18 	vmov	r2, r3, d8
 800f426:	f7f1 f8df 	bl	80005e8 <__aeabi_dmul>
 800f42a:	4622      	mov	r2, r4
 800f42c:	4606      	mov	r6, r0
 800f42e:	460f      	mov	r7, r1
 800f430:	462b      	mov	r3, r5
 800f432:	ec51 0b19 	vmov	r0, r1, d9
 800f436:	f7f1 f8d7 	bl	80005e8 <__aeabi_dmul>
 800f43a:	4602      	mov	r2, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	4630      	mov	r0, r6
 800f440:	4639      	mov	r1, r7
 800f442:	f7f0 ff1b 	bl	800027c <__adddf3>
 800f446:	4606      	mov	r6, r0
 800f448:	460f      	mov	r7, r1
 800f44a:	4602      	mov	r2, r0
 800f44c:	460b      	mov	r3, r1
 800f44e:	4640      	mov	r0, r8
 800f450:	4649      	mov	r1, r9
 800f452:	f7f0 ff13 	bl	800027c <__adddf3>
 800f456:	a33e      	add	r3, pc, #248	; (adr r3, 800f550 <__ieee754_pow+0x738>)
 800f458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45c:	2000      	movs	r0, #0
 800f45e:	4604      	mov	r4, r0
 800f460:	460d      	mov	r5, r1
 800f462:	f7f1 f8c1 	bl	80005e8 <__aeabi_dmul>
 800f466:	4642      	mov	r2, r8
 800f468:	ec41 0b18 	vmov	d8, r0, r1
 800f46c:	464b      	mov	r3, r9
 800f46e:	4620      	mov	r0, r4
 800f470:	4629      	mov	r1, r5
 800f472:	f7f0 ff01 	bl	8000278 <__aeabi_dsub>
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	4630      	mov	r0, r6
 800f47c:	4639      	mov	r1, r7
 800f47e:	f7f0 fefb 	bl	8000278 <__aeabi_dsub>
 800f482:	a335      	add	r3, pc, #212	; (adr r3, 800f558 <__ieee754_pow+0x740>)
 800f484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f488:	f7f1 f8ae 	bl	80005e8 <__aeabi_dmul>
 800f48c:	a334      	add	r3, pc, #208	; (adr r3, 800f560 <__ieee754_pow+0x748>)
 800f48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f492:	4606      	mov	r6, r0
 800f494:	460f      	mov	r7, r1
 800f496:	4620      	mov	r0, r4
 800f498:	4629      	mov	r1, r5
 800f49a:	f7f1 f8a5 	bl	80005e8 <__aeabi_dmul>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	4639      	mov	r1, r7
 800f4a6:	f7f0 fee9 	bl	800027c <__adddf3>
 800f4aa:	9a07      	ldr	r2, [sp, #28]
 800f4ac:	4b37      	ldr	r3, [pc, #220]	; (800f58c <__ieee754_pow+0x774>)
 800f4ae:	4413      	add	r3, r2
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	f7f0 fee2 	bl	800027c <__adddf3>
 800f4b8:	4682      	mov	sl, r0
 800f4ba:	9805      	ldr	r0, [sp, #20]
 800f4bc:	468b      	mov	fp, r1
 800f4be:	f7f1 f829 	bl	8000514 <__aeabi_i2d>
 800f4c2:	9a07      	ldr	r2, [sp, #28]
 800f4c4:	4b32      	ldr	r3, [pc, #200]	; (800f590 <__ieee754_pow+0x778>)
 800f4c6:	4413      	add	r3, r2
 800f4c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4cc:	4606      	mov	r6, r0
 800f4ce:	460f      	mov	r7, r1
 800f4d0:	4652      	mov	r2, sl
 800f4d2:	465b      	mov	r3, fp
 800f4d4:	ec51 0b18 	vmov	r0, r1, d8
 800f4d8:	f7f0 fed0 	bl	800027c <__adddf3>
 800f4dc:	4642      	mov	r2, r8
 800f4de:	464b      	mov	r3, r9
 800f4e0:	f7f0 fecc 	bl	800027c <__adddf3>
 800f4e4:	4632      	mov	r2, r6
 800f4e6:	463b      	mov	r3, r7
 800f4e8:	f7f0 fec8 	bl	800027c <__adddf3>
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	4632      	mov	r2, r6
 800f4f0:	463b      	mov	r3, r7
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	460d      	mov	r5, r1
 800f4f6:	f7f0 febf 	bl	8000278 <__aeabi_dsub>
 800f4fa:	4642      	mov	r2, r8
 800f4fc:	464b      	mov	r3, r9
 800f4fe:	f7f0 febb 	bl	8000278 <__aeabi_dsub>
 800f502:	ec53 2b18 	vmov	r2, r3, d8
 800f506:	f7f0 feb7 	bl	8000278 <__aeabi_dsub>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	4650      	mov	r0, sl
 800f510:	4659      	mov	r1, fp
 800f512:	e610      	b.n	800f136 <__ieee754_pow+0x31e>
 800f514:	2401      	movs	r4, #1
 800f516:	e6a1      	b.n	800f25c <__ieee754_pow+0x444>
 800f518:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f568 <__ieee754_pow+0x750>
 800f51c:	e617      	b.n	800f14e <__ieee754_pow+0x336>
 800f51e:	bf00      	nop
 800f520:	4a454eef 	.word	0x4a454eef
 800f524:	3fca7e28 	.word	0x3fca7e28
 800f528:	93c9db65 	.word	0x93c9db65
 800f52c:	3fcd864a 	.word	0x3fcd864a
 800f530:	a91d4101 	.word	0xa91d4101
 800f534:	3fd17460 	.word	0x3fd17460
 800f538:	518f264d 	.word	0x518f264d
 800f53c:	3fd55555 	.word	0x3fd55555
 800f540:	db6fabff 	.word	0xdb6fabff
 800f544:	3fdb6db6 	.word	0x3fdb6db6
 800f548:	33333303 	.word	0x33333303
 800f54c:	3fe33333 	.word	0x3fe33333
 800f550:	e0000000 	.word	0xe0000000
 800f554:	3feec709 	.word	0x3feec709
 800f558:	dc3a03fd 	.word	0xdc3a03fd
 800f55c:	3feec709 	.word	0x3feec709
 800f560:	145b01f5 	.word	0x145b01f5
 800f564:	be3e2fe0 	.word	0xbe3e2fe0
 800f568:	00000000 	.word	0x00000000
 800f56c:	3ff00000 	.word	0x3ff00000
 800f570:	7ff00000 	.word	0x7ff00000
 800f574:	43400000 	.word	0x43400000
 800f578:	0003988e 	.word	0x0003988e
 800f57c:	000bb679 	.word	0x000bb679
 800f580:	08010058 	.word	0x08010058
 800f584:	3ff00000 	.word	0x3ff00000
 800f588:	40080000 	.word	0x40080000
 800f58c:	08010078 	.word	0x08010078
 800f590:	08010068 	.word	0x08010068
 800f594:	a3b5      	add	r3, pc, #724	; (adr r3, 800f86c <__ieee754_pow+0xa54>)
 800f596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59a:	4640      	mov	r0, r8
 800f59c:	4649      	mov	r1, r9
 800f59e:	f7f0 fe6d 	bl	800027c <__adddf3>
 800f5a2:	4622      	mov	r2, r4
 800f5a4:	ec41 0b1a 	vmov	d10, r0, r1
 800f5a8:	462b      	mov	r3, r5
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f0 fe63 	bl	8000278 <__aeabi_dsub>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	ec51 0b1a 	vmov	r0, r1, d10
 800f5ba:	f7f1 faa5 	bl	8000b08 <__aeabi_dcmpgt>
 800f5be:	2800      	cmp	r0, #0
 800f5c0:	f47f ae04 	bne.w	800f1cc <__ieee754_pow+0x3b4>
 800f5c4:	4aa4      	ldr	r2, [pc, #656]	; (800f858 <__ieee754_pow+0xa40>)
 800f5c6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	f340 8108 	ble.w	800f7e0 <__ieee754_pow+0x9c8>
 800f5d0:	151b      	asrs	r3, r3, #20
 800f5d2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f5d6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f5da:	fa4a f303 	asr.w	r3, sl, r3
 800f5de:	445b      	add	r3, fp
 800f5e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f5e4:	4e9d      	ldr	r6, [pc, #628]	; (800f85c <__ieee754_pow+0xa44>)
 800f5e6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f5ea:	4116      	asrs	r6, r2
 800f5ec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f5f0:	2000      	movs	r0, #0
 800f5f2:	ea23 0106 	bic.w	r1, r3, r6
 800f5f6:	f1c2 0214 	rsb	r2, r2, #20
 800f5fa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f5fe:	fa4a fa02 	asr.w	sl, sl, r2
 800f602:	f1bb 0f00 	cmp.w	fp, #0
 800f606:	4602      	mov	r2, r0
 800f608:	460b      	mov	r3, r1
 800f60a:	4620      	mov	r0, r4
 800f60c:	4629      	mov	r1, r5
 800f60e:	bfb8      	it	lt
 800f610:	f1ca 0a00 	rsblt	sl, sl, #0
 800f614:	f7f0 fe30 	bl	8000278 <__aeabi_dsub>
 800f618:	ec41 0b19 	vmov	d9, r0, r1
 800f61c:	4642      	mov	r2, r8
 800f61e:	464b      	mov	r3, r9
 800f620:	ec51 0b19 	vmov	r0, r1, d9
 800f624:	f7f0 fe2a 	bl	800027c <__adddf3>
 800f628:	a37b      	add	r3, pc, #492	; (adr r3, 800f818 <__ieee754_pow+0xa00>)
 800f62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62e:	2000      	movs	r0, #0
 800f630:	4604      	mov	r4, r0
 800f632:	460d      	mov	r5, r1
 800f634:	f7f0 ffd8 	bl	80005e8 <__aeabi_dmul>
 800f638:	ec53 2b19 	vmov	r2, r3, d9
 800f63c:	4606      	mov	r6, r0
 800f63e:	460f      	mov	r7, r1
 800f640:	4620      	mov	r0, r4
 800f642:	4629      	mov	r1, r5
 800f644:	f7f0 fe18 	bl	8000278 <__aeabi_dsub>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4640      	mov	r0, r8
 800f64e:	4649      	mov	r1, r9
 800f650:	f7f0 fe12 	bl	8000278 <__aeabi_dsub>
 800f654:	a372      	add	r3, pc, #456	; (adr r3, 800f820 <__ieee754_pow+0xa08>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	f7f0 ffc5 	bl	80005e8 <__aeabi_dmul>
 800f65e:	a372      	add	r3, pc, #456	; (adr r3, 800f828 <__ieee754_pow+0xa10>)
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	4680      	mov	r8, r0
 800f666:	4689      	mov	r9, r1
 800f668:	4620      	mov	r0, r4
 800f66a:	4629      	mov	r1, r5
 800f66c:	f7f0 ffbc 	bl	80005e8 <__aeabi_dmul>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4640      	mov	r0, r8
 800f676:	4649      	mov	r1, r9
 800f678:	f7f0 fe00 	bl	800027c <__adddf3>
 800f67c:	4604      	mov	r4, r0
 800f67e:	460d      	mov	r5, r1
 800f680:	4602      	mov	r2, r0
 800f682:	460b      	mov	r3, r1
 800f684:	4630      	mov	r0, r6
 800f686:	4639      	mov	r1, r7
 800f688:	f7f0 fdf8 	bl	800027c <__adddf3>
 800f68c:	4632      	mov	r2, r6
 800f68e:	463b      	mov	r3, r7
 800f690:	4680      	mov	r8, r0
 800f692:	4689      	mov	r9, r1
 800f694:	f7f0 fdf0 	bl	8000278 <__aeabi_dsub>
 800f698:	4602      	mov	r2, r0
 800f69a:	460b      	mov	r3, r1
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f7f0 fdea 	bl	8000278 <__aeabi_dsub>
 800f6a4:	4642      	mov	r2, r8
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	460f      	mov	r7, r1
 800f6aa:	464b      	mov	r3, r9
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	4649      	mov	r1, r9
 800f6b0:	f7f0 ff9a 	bl	80005e8 <__aeabi_dmul>
 800f6b4:	a35e      	add	r3, pc, #376	; (adr r3, 800f830 <__ieee754_pow+0xa18>)
 800f6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ba:	4604      	mov	r4, r0
 800f6bc:	460d      	mov	r5, r1
 800f6be:	f7f0 ff93 	bl	80005e8 <__aeabi_dmul>
 800f6c2:	a35d      	add	r3, pc, #372	; (adr r3, 800f838 <__ieee754_pow+0xa20>)
 800f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c8:	f7f0 fdd6 	bl	8000278 <__aeabi_dsub>
 800f6cc:	4622      	mov	r2, r4
 800f6ce:	462b      	mov	r3, r5
 800f6d0:	f7f0 ff8a 	bl	80005e8 <__aeabi_dmul>
 800f6d4:	a35a      	add	r3, pc, #360	; (adr r3, 800f840 <__ieee754_pow+0xa28>)
 800f6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6da:	f7f0 fdcf 	bl	800027c <__adddf3>
 800f6de:	4622      	mov	r2, r4
 800f6e0:	462b      	mov	r3, r5
 800f6e2:	f7f0 ff81 	bl	80005e8 <__aeabi_dmul>
 800f6e6:	a358      	add	r3, pc, #352	; (adr r3, 800f848 <__ieee754_pow+0xa30>)
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	f7f0 fdc4 	bl	8000278 <__aeabi_dsub>
 800f6f0:	4622      	mov	r2, r4
 800f6f2:	462b      	mov	r3, r5
 800f6f4:	f7f0 ff78 	bl	80005e8 <__aeabi_dmul>
 800f6f8:	a355      	add	r3, pc, #340	; (adr r3, 800f850 <__ieee754_pow+0xa38>)
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	f7f0 fdbd 	bl	800027c <__adddf3>
 800f702:	4622      	mov	r2, r4
 800f704:	462b      	mov	r3, r5
 800f706:	f7f0 ff6f 	bl	80005e8 <__aeabi_dmul>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4640      	mov	r0, r8
 800f710:	4649      	mov	r1, r9
 800f712:	f7f0 fdb1 	bl	8000278 <__aeabi_dsub>
 800f716:	4604      	mov	r4, r0
 800f718:	460d      	mov	r5, r1
 800f71a:	4602      	mov	r2, r0
 800f71c:	460b      	mov	r3, r1
 800f71e:	4640      	mov	r0, r8
 800f720:	4649      	mov	r1, r9
 800f722:	f7f0 ff61 	bl	80005e8 <__aeabi_dmul>
 800f726:	2200      	movs	r2, #0
 800f728:	ec41 0b19 	vmov	d9, r0, r1
 800f72c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f730:	4620      	mov	r0, r4
 800f732:	4629      	mov	r1, r5
 800f734:	f7f0 fda0 	bl	8000278 <__aeabi_dsub>
 800f738:	4602      	mov	r2, r0
 800f73a:	460b      	mov	r3, r1
 800f73c:	ec51 0b19 	vmov	r0, r1, d9
 800f740:	f7f1 f87c 	bl	800083c <__aeabi_ddiv>
 800f744:	4632      	mov	r2, r6
 800f746:	4604      	mov	r4, r0
 800f748:	460d      	mov	r5, r1
 800f74a:	463b      	mov	r3, r7
 800f74c:	4640      	mov	r0, r8
 800f74e:	4649      	mov	r1, r9
 800f750:	f7f0 ff4a 	bl	80005e8 <__aeabi_dmul>
 800f754:	4632      	mov	r2, r6
 800f756:	463b      	mov	r3, r7
 800f758:	f7f0 fd90 	bl	800027c <__adddf3>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	4620      	mov	r0, r4
 800f762:	4629      	mov	r1, r5
 800f764:	f7f0 fd88 	bl	8000278 <__aeabi_dsub>
 800f768:	4642      	mov	r2, r8
 800f76a:	464b      	mov	r3, r9
 800f76c:	f7f0 fd84 	bl	8000278 <__aeabi_dsub>
 800f770:	460b      	mov	r3, r1
 800f772:	4602      	mov	r2, r0
 800f774:	493a      	ldr	r1, [pc, #232]	; (800f860 <__ieee754_pow+0xa48>)
 800f776:	2000      	movs	r0, #0
 800f778:	f7f0 fd7e 	bl	8000278 <__aeabi_dsub>
 800f77c:	ec41 0b10 	vmov	d0, r0, r1
 800f780:	ee10 3a90 	vmov	r3, s1
 800f784:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f78c:	da2b      	bge.n	800f7e6 <__ieee754_pow+0x9ce>
 800f78e:	4650      	mov	r0, sl
 800f790:	f000 f966 	bl	800fa60 <scalbn>
 800f794:	ec51 0b10 	vmov	r0, r1, d0
 800f798:	ec53 2b18 	vmov	r2, r3, d8
 800f79c:	f7ff bbed 	b.w	800ef7a <__ieee754_pow+0x162>
 800f7a0:	4b30      	ldr	r3, [pc, #192]	; (800f864 <__ieee754_pow+0xa4c>)
 800f7a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f7a6:	429e      	cmp	r6, r3
 800f7a8:	f77f af0c 	ble.w	800f5c4 <__ieee754_pow+0x7ac>
 800f7ac:	4b2e      	ldr	r3, [pc, #184]	; (800f868 <__ieee754_pow+0xa50>)
 800f7ae:	440b      	add	r3, r1
 800f7b0:	4303      	orrs	r3, r0
 800f7b2:	d009      	beq.n	800f7c8 <__ieee754_pow+0x9b0>
 800f7b4:	ec51 0b18 	vmov	r0, r1, d8
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	f7f1 f986 	bl	8000acc <__aeabi_dcmplt>
 800f7c0:	3800      	subs	r0, #0
 800f7c2:	bf18      	it	ne
 800f7c4:	2001      	movne	r0, #1
 800f7c6:	e447      	b.n	800f058 <__ieee754_pow+0x240>
 800f7c8:	4622      	mov	r2, r4
 800f7ca:	462b      	mov	r3, r5
 800f7cc:	f7f0 fd54 	bl	8000278 <__aeabi_dsub>
 800f7d0:	4642      	mov	r2, r8
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	f7f1 f98e 	bl	8000af4 <__aeabi_dcmpge>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	f43f aef3 	beq.w	800f5c4 <__ieee754_pow+0x7ac>
 800f7de:	e7e9      	b.n	800f7b4 <__ieee754_pow+0x99c>
 800f7e0:	f04f 0a00 	mov.w	sl, #0
 800f7e4:	e71a      	b.n	800f61c <__ieee754_pow+0x804>
 800f7e6:	ec51 0b10 	vmov	r0, r1, d0
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	e7d4      	b.n	800f798 <__ieee754_pow+0x980>
 800f7ee:	491c      	ldr	r1, [pc, #112]	; (800f860 <__ieee754_pow+0xa48>)
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	f7ff bb30 	b.w	800ee56 <__ieee754_pow+0x3e>
 800f7f6:	2000      	movs	r0, #0
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	f7ff bb2c 	b.w	800ee56 <__ieee754_pow+0x3e>
 800f7fe:	4630      	mov	r0, r6
 800f800:	4639      	mov	r1, r7
 800f802:	f7ff bb28 	b.w	800ee56 <__ieee754_pow+0x3e>
 800f806:	9204      	str	r2, [sp, #16]
 800f808:	f7ff bb7a 	b.w	800ef00 <__ieee754_pow+0xe8>
 800f80c:	2300      	movs	r3, #0
 800f80e:	f7ff bb64 	b.w	800eeda <__ieee754_pow+0xc2>
 800f812:	bf00      	nop
 800f814:	f3af 8000 	nop.w
 800f818:	00000000 	.word	0x00000000
 800f81c:	3fe62e43 	.word	0x3fe62e43
 800f820:	fefa39ef 	.word	0xfefa39ef
 800f824:	3fe62e42 	.word	0x3fe62e42
 800f828:	0ca86c39 	.word	0x0ca86c39
 800f82c:	be205c61 	.word	0xbe205c61
 800f830:	72bea4d0 	.word	0x72bea4d0
 800f834:	3e663769 	.word	0x3e663769
 800f838:	c5d26bf1 	.word	0xc5d26bf1
 800f83c:	3ebbbd41 	.word	0x3ebbbd41
 800f840:	af25de2c 	.word	0xaf25de2c
 800f844:	3f11566a 	.word	0x3f11566a
 800f848:	16bebd93 	.word	0x16bebd93
 800f84c:	3f66c16c 	.word	0x3f66c16c
 800f850:	5555553e 	.word	0x5555553e
 800f854:	3fc55555 	.word	0x3fc55555
 800f858:	3fe00000 	.word	0x3fe00000
 800f85c:	000fffff 	.word	0x000fffff
 800f860:	3ff00000 	.word	0x3ff00000
 800f864:	4090cbff 	.word	0x4090cbff
 800f868:	3f6f3400 	.word	0x3f6f3400
 800f86c:	652b82fe 	.word	0x652b82fe
 800f870:	3c971547 	.word	0x3c971547

0800f874 <__ieee754_sqrt>:
 800f874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f878:	ec55 4b10 	vmov	r4, r5, d0
 800f87c:	4e55      	ldr	r6, [pc, #340]	; (800f9d4 <__ieee754_sqrt+0x160>)
 800f87e:	43ae      	bics	r6, r5
 800f880:	ee10 0a10 	vmov	r0, s0
 800f884:	ee10 3a10 	vmov	r3, s0
 800f888:	462a      	mov	r2, r5
 800f88a:	4629      	mov	r1, r5
 800f88c:	d110      	bne.n	800f8b0 <__ieee754_sqrt+0x3c>
 800f88e:	ee10 2a10 	vmov	r2, s0
 800f892:	462b      	mov	r3, r5
 800f894:	f7f0 fea8 	bl	80005e8 <__aeabi_dmul>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	4620      	mov	r0, r4
 800f89e:	4629      	mov	r1, r5
 800f8a0:	f7f0 fcec 	bl	800027c <__adddf3>
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	460d      	mov	r5, r1
 800f8a8:	ec45 4b10 	vmov	d0, r4, r5
 800f8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b0:	2d00      	cmp	r5, #0
 800f8b2:	dc10      	bgt.n	800f8d6 <__ieee754_sqrt+0x62>
 800f8b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f8b8:	4330      	orrs	r0, r6
 800f8ba:	d0f5      	beq.n	800f8a8 <__ieee754_sqrt+0x34>
 800f8bc:	b15d      	cbz	r5, 800f8d6 <__ieee754_sqrt+0x62>
 800f8be:	ee10 2a10 	vmov	r2, s0
 800f8c2:	462b      	mov	r3, r5
 800f8c4:	ee10 0a10 	vmov	r0, s0
 800f8c8:	f7f0 fcd6 	bl	8000278 <__aeabi_dsub>
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	f7f0 ffb4 	bl	800083c <__aeabi_ddiv>
 800f8d4:	e7e6      	b.n	800f8a4 <__ieee754_sqrt+0x30>
 800f8d6:	1512      	asrs	r2, r2, #20
 800f8d8:	d074      	beq.n	800f9c4 <__ieee754_sqrt+0x150>
 800f8da:	07d4      	lsls	r4, r2, #31
 800f8dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f8e0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f8e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f8e8:	bf5e      	ittt	pl
 800f8ea:	0fda      	lsrpl	r2, r3, #31
 800f8ec:	005b      	lslpl	r3, r3, #1
 800f8ee:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f8f2:	2400      	movs	r4, #0
 800f8f4:	0fda      	lsrs	r2, r3, #31
 800f8f6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f8fa:	107f      	asrs	r7, r7, #1
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	2516      	movs	r5, #22
 800f900:	4620      	mov	r0, r4
 800f902:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f906:	1886      	adds	r6, r0, r2
 800f908:	428e      	cmp	r6, r1
 800f90a:	bfde      	ittt	le
 800f90c:	1b89      	suble	r1, r1, r6
 800f90e:	18b0      	addle	r0, r6, r2
 800f910:	18a4      	addle	r4, r4, r2
 800f912:	0049      	lsls	r1, r1, #1
 800f914:	3d01      	subs	r5, #1
 800f916:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f91a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f91e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f922:	d1f0      	bne.n	800f906 <__ieee754_sqrt+0x92>
 800f924:	462a      	mov	r2, r5
 800f926:	f04f 0e20 	mov.w	lr, #32
 800f92a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f92e:	4281      	cmp	r1, r0
 800f930:	eb06 0c05 	add.w	ip, r6, r5
 800f934:	dc02      	bgt.n	800f93c <__ieee754_sqrt+0xc8>
 800f936:	d113      	bne.n	800f960 <__ieee754_sqrt+0xec>
 800f938:	459c      	cmp	ip, r3
 800f93a:	d811      	bhi.n	800f960 <__ieee754_sqrt+0xec>
 800f93c:	f1bc 0f00 	cmp.w	ip, #0
 800f940:	eb0c 0506 	add.w	r5, ip, r6
 800f944:	da43      	bge.n	800f9ce <__ieee754_sqrt+0x15a>
 800f946:	2d00      	cmp	r5, #0
 800f948:	db41      	blt.n	800f9ce <__ieee754_sqrt+0x15a>
 800f94a:	f100 0801 	add.w	r8, r0, #1
 800f94e:	1a09      	subs	r1, r1, r0
 800f950:	459c      	cmp	ip, r3
 800f952:	bf88      	it	hi
 800f954:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f958:	eba3 030c 	sub.w	r3, r3, ip
 800f95c:	4432      	add	r2, r6
 800f95e:	4640      	mov	r0, r8
 800f960:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f964:	f1be 0e01 	subs.w	lr, lr, #1
 800f968:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f96c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f970:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f974:	d1db      	bne.n	800f92e <__ieee754_sqrt+0xba>
 800f976:	430b      	orrs	r3, r1
 800f978:	d006      	beq.n	800f988 <__ieee754_sqrt+0x114>
 800f97a:	1c50      	adds	r0, r2, #1
 800f97c:	bf13      	iteet	ne
 800f97e:	3201      	addne	r2, #1
 800f980:	3401      	addeq	r4, #1
 800f982:	4672      	moveq	r2, lr
 800f984:	f022 0201 	bicne.w	r2, r2, #1
 800f988:	1063      	asrs	r3, r4, #1
 800f98a:	0852      	lsrs	r2, r2, #1
 800f98c:	07e1      	lsls	r1, r4, #31
 800f98e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f992:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f996:	bf48      	it	mi
 800f998:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f99c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f9a0:	4614      	mov	r4, r2
 800f9a2:	e781      	b.n	800f8a8 <__ieee754_sqrt+0x34>
 800f9a4:	0ad9      	lsrs	r1, r3, #11
 800f9a6:	3815      	subs	r0, #21
 800f9a8:	055b      	lsls	r3, r3, #21
 800f9aa:	2900      	cmp	r1, #0
 800f9ac:	d0fa      	beq.n	800f9a4 <__ieee754_sqrt+0x130>
 800f9ae:	02cd      	lsls	r5, r1, #11
 800f9b0:	d50a      	bpl.n	800f9c8 <__ieee754_sqrt+0x154>
 800f9b2:	f1c2 0420 	rsb	r4, r2, #32
 800f9b6:	fa23 f404 	lsr.w	r4, r3, r4
 800f9ba:	1e55      	subs	r5, r2, #1
 800f9bc:	4093      	lsls	r3, r2
 800f9be:	4321      	orrs	r1, r4
 800f9c0:	1b42      	subs	r2, r0, r5
 800f9c2:	e78a      	b.n	800f8da <__ieee754_sqrt+0x66>
 800f9c4:	4610      	mov	r0, r2
 800f9c6:	e7f0      	b.n	800f9aa <__ieee754_sqrt+0x136>
 800f9c8:	0049      	lsls	r1, r1, #1
 800f9ca:	3201      	adds	r2, #1
 800f9cc:	e7ef      	b.n	800f9ae <__ieee754_sqrt+0x13a>
 800f9ce:	4680      	mov	r8, r0
 800f9d0:	e7bd      	b.n	800f94e <__ieee754_sqrt+0xda>
 800f9d2:	bf00      	nop
 800f9d4:	7ff00000 	.word	0x7ff00000

0800f9d8 <with_errno>:
 800f9d8:	b570      	push	{r4, r5, r6, lr}
 800f9da:	4604      	mov	r4, r0
 800f9dc:	460d      	mov	r5, r1
 800f9de:	4616      	mov	r6, r2
 800f9e0:	f7fd ffc6 	bl	800d970 <__errno>
 800f9e4:	4629      	mov	r1, r5
 800f9e6:	6006      	str	r6, [r0, #0]
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}

0800f9ec <xflow>:
 800f9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9ee:	4614      	mov	r4, r2
 800f9f0:	461d      	mov	r5, r3
 800f9f2:	b108      	cbz	r0, 800f9f8 <xflow+0xc>
 800f9f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f9f8:	e9cd 2300 	strd	r2, r3, [sp]
 800f9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa00:	4620      	mov	r0, r4
 800fa02:	4629      	mov	r1, r5
 800fa04:	f7f0 fdf0 	bl	80005e8 <__aeabi_dmul>
 800fa08:	2222      	movs	r2, #34	; 0x22
 800fa0a:	b003      	add	sp, #12
 800fa0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa10:	f7ff bfe2 	b.w	800f9d8 <with_errno>

0800fa14 <__math_uflow>:
 800fa14:	b508      	push	{r3, lr}
 800fa16:	2200      	movs	r2, #0
 800fa18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fa1c:	f7ff ffe6 	bl	800f9ec <xflow>
 800fa20:	ec41 0b10 	vmov	d0, r0, r1
 800fa24:	bd08      	pop	{r3, pc}

0800fa26 <__math_oflow>:
 800fa26:	b508      	push	{r3, lr}
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fa2e:	f7ff ffdd 	bl	800f9ec <xflow>
 800fa32:	ec41 0b10 	vmov	d0, r0, r1
 800fa36:	bd08      	pop	{r3, pc}

0800fa38 <fabs>:
 800fa38:	ec51 0b10 	vmov	r0, r1, d0
 800fa3c:	ee10 2a10 	vmov	r2, s0
 800fa40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa44:	ec43 2b10 	vmov	d0, r2, r3
 800fa48:	4770      	bx	lr

0800fa4a <finite>:
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	ed8d 0b00 	vstr	d0, [sp]
 800fa50:	9801      	ldr	r0, [sp, #4]
 800fa52:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800fa56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fa5a:	0fc0      	lsrs	r0, r0, #31
 800fa5c:	b002      	add	sp, #8
 800fa5e:	4770      	bx	lr

0800fa60 <scalbn>:
 800fa60:	b570      	push	{r4, r5, r6, lr}
 800fa62:	ec55 4b10 	vmov	r4, r5, d0
 800fa66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	462b      	mov	r3, r5
 800fa6e:	b99a      	cbnz	r2, 800fa98 <scalbn+0x38>
 800fa70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa74:	4323      	orrs	r3, r4
 800fa76:	d036      	beq.n	800fae6 <scalbn+0x86>
 800fa78:	4b39      	ldr	r3, [pc, #228]	; (800fb60 <scalbn+0x100>)
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	ee10 0a10 	vmov	r0, s0
 800fa80:	2200      	movs	r2, #0
 800fa82:	f7f0 fdb1 	bl	80005e8 <__aeabi_dmul>
 800fa86:	4b37      	ldr	r3, [pc, #220]	; (800fb64 <scalbn+0x104>)
 800fa88:	429e      	cmp	r6, r3
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	460d      	mov	r5, r1
 800fa8e:	da10      	bge.n	800fab2 <scalbn+0x52>
 800fa90:	a32b      	add	r3, pc, #172	; (adr r3, 800fb40 <scalbn+0xe0>)
 800fa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa96:	e03a      	b.n	800fb0e <scalbn+0xae>
 800fa98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fa9c:	428a      	cmp	r2, r1
 800fa9e:	d10c      	bne.n	800faba <scalbn+0x5a>
 800faa0:	ee10 2a10 	vmov	r2, s0
 800faa4:	4620      	mov	r0, r4
 800faa6:	4629      	mov	r1, r5
 800faa8:	f7f0 fbe8 	bl	800027c <__adddf3>
 800faac:	4604      	mov	r4, r0
 800faae:	460d      	mov	r5, r1
 800fab0:	e019      	b.n	800fae6 <scalbn+0x86>
 800fab2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fab6:	460b      	mov	r3, r1
 800fab8:	3a36      	subs	r2, #54	; 0x36
 800faba:	4432      	add	r2, r6
 800fabc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fac0:	428a      	cmp	r2, r1
 800fac2:	dd08      	ble.n	800fad6 <scalbn+0x76>
 800fac4:	2d00      	cmp	r5, #0
 800fac6:	a120      	add	r1, pc, #128	; (adr r1, 800fb48 <scalbn+0xe8>)
 800fac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800facc:	da1c      	bge.n	800fb08 <scalbn+0xa8>
 800face:	a120      	add	r1, pc, #128	; (adr r1, 800fb50 <scalbn+0xf0>)
 800fad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fad4:	e018      	b.n	800fb08 <scalbn+0xa8>
 800fad6:	2a00      	cmp	r2, #0
 800fad8:	dd08      	ble.n	800faec <scalbn+0x8c>
 800fada:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fade:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fae2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fae6:	ec45 4b10 	vmov	d0, r4, r5
 800faea:	bd70      	pop	{r4, r5, r6, pc}
 800faec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800faf0:	da19      	bge.n	800fb26 <scalbn+0xc6>
 800faf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800faf6:	429e      	cmp	r6, r3
 800faf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fafc:	dd0a      	ble.n	800fb14 <scalbn+0xb4>
 800fafe:	a112      	add	r1, pc, #72	; (adr r1, 800fb48 <scalbn+0xe8>)
 800fb00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1e2      	bne.n	800face <scalbn+0x6e>
 800fb08:	a30f      	add	r3, pc, #60	; (adr r3, 800fb48 <scalbn+0xe8>)
 800fb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0e:	f7f0 fd6b 	bl	80005e8 <__aeabi_dmul>
 800fb12:	e7cb      	b.n	800faac <scalbn+0x4c>
 800fb14:	a10a      	add	r1, pc, #40	; (adr r1, 800fb40 <scalbn+0xe0>)
 800fb16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d0b8      	beq.n	800fa90 <scalbn+0x30>
 800fb1e:	a10e      	add	r1, pc, #56	; (adr r1, 800fb58 <scalbn+0xf8>)
 800fb20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb24:	e7b4      	b.n	800fa90 <scalbn+0x30>
 800fb26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fb2a:	3236      	adds	r2, #54	; 0x36
 800fb2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fb30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fb34:	4620      	mov	r0, r4
 800fb36:	4b0c      	ldr	r3, [pc, #48]	; (800fb68 <scalbn+0x108>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	e7e8      	b.n	800fb0e <scalbn+0xae>
 800fb3c:	f3af 8000 	nop.w
 800fb40:	c2f8f359 	.word	0xc2f8f359
 800fb44:	01a56e1f 	.word	0x01a56e1f
 800fb48:	8800759c 	.word	0x8800759c
 800fb4c:	7e37e43c 	.word	0x7e37e43c
 800fb50:	8800759c 	.word	0x8800759c
 800fb54:	fe37e43c 	.word	0xfe37e43c
 800fb58:	c2f8f359 	.word	0xc2f8f359
 800fb5c:	81a56e1f 	.word	0x81a56e1f
 800fb60:	43500000 	.word	0x43500000
 800fb64:	ffff3cb0 	.word	0xffff3cb0
 800fb68:	3c900000 	.word	0x3c900000

0800fb6c <_init>:
 800fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6e:	bf00      	nop
 800fb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb72:	bc08      	pop	{r3}
 800fb74:	469e      	mov	lr, r3
 800fb76:	4770      	bx	lr

0800fb78 <_fini>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	bf00      	nop
 800fb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7e:	bc08      	pop	{r3}
 800fb80:	469e      	mov	lr, r3
 800fb82:	4770      	bx	lr
