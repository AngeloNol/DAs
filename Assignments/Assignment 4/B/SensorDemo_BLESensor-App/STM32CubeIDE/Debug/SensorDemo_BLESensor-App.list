
SensorDemo_BLESensor-App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdac  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  08010f3c  08010f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117a4  080117a4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  080117a4  080117a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117ac  080117ac  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117ac  080117ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080117b0  080117b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080117b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200000b0  08011864  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a48  08011864  00020a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_line   00022eb4  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00023147  00000000  00000000  00042f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004755  00000000  00000000  000660db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  0006a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fcfbb  00000000  00000000  0006c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001908  00000000  00000000  001692d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cd5d  00000000  00000000  0016abe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019793d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e30  00000000  00000000  00197990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200000b0 	.word	0x200000b0
 80041ac:	00000000 	.word	0x00000000
 80041b0:	08010f24 	.word	0x08010f24

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200000b4 	.word	0x200000b4
 80041cc:	08010f24 	.word	0x08010f24

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_drsub>:
 8004270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004274:	e002      	b.n	800427c <__adddf3>
 8004276:	bf00      	nop

08004278 <__aeabi_dsub>:
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800427c <__adddf3>:
 800427c:	b530      	push	{r4, r5, lr}
 800427e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004286:	ea94 0f05 	teq	r4, r5
 800428a:	bf08      	it	eq
 800428c:	ea90 0f02 	teqeq	r0, r2
 8004290:	bf1f      	itttt	ne
 8004292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800429a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800429e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042a2:	f000 80e2 	beq.w	800446a <__adddf3+0x1ee>
 80042a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ae:	bfb8      	it	lt
 80042b0:	426d      	neglt	r5, r5
 80042b2:	dd0c      	ble.n	80042ce <__adddf3+0x52>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea80 0202 	eor.w	r2, r0, r2
 80042ba:	ea81 0303 	eor.w	r3, r1, r3
 80042be:	ea82 0000 	eor.w	r0, r2, r0
 80042c2:	ea83 0101 	eor.w	r1, r3, r1
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	2d36      	cmp	r5, #54	; 0x36
 80042d0:	bf88      	it	hi
 80042d2:	bd30      	pophi	{r4, r5, pc}
 80042d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042e4:	d002      	beq.n	80042ec <__adddf3+0x70>
 80042e6:	4240      	negs	r0, r0
 80042e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042f8:	d002      	beq.n	8004300 <__adddf3+0x84>
 80042fa:	4252      	negs	r2, r2
 80042fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004300:	ea94 0f05 	teq	r4, r5
 8004304:	f000 80a7 	beq.w	8004456 <__adddf3+0x1da>
 8004308:	f1a4 0401 	sub.w	r4, r4, #1
 800430c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004310:	db0d      	blt.n	800432e <__adddf3+0xb2>
 8004312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004316:	fa22 f205 	lsr.w	r2, r2, r5
 800431a:	1880      	adds	r0, r0, r2
 800431c:	f141 0100 	adc.w	r1, r1, #0
 8004320:	fa03 f20e 	lsl.w	r2, r3, lr
 8004324:	1880      	adds	r0, r0, r2
 8004326:	fa43 f305 	asr.w	r3, r3, r5
 800432a:	4159      	adcs	r1, r3
 800432c:	e00e      	b.n	800434c <__adddf3+0xd0>
 800432e:	f1a5 0520 	sub.w	r5, r5, #32
 8004332:	f10e 0e20 	add.w	lr, lr, #32
 8004336:	2a01      	cmp	r2, #1
 8004338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800433c:	bf28      	it	cs
 800433e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004342:	fa43 f305 	asr.w	r3, r3, r5
 8004346:	18c0      	adds	r0, r0, r3
 8004348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800434c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004350:	d507      	bpl.n	8004362 <__adddf3+0xe6>
 8004352:	f04f 0e00 	mov.w	lr, #0
 8004356:	f1dc 0c00 	rsbs	ip, ip, #0
 800435a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800435e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004366:	d31b      	bcc.n	80043a0 <__adddf3+0x124>
 8004368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800436c:	d30c      	bcc.n	8004388 <__adddf3+0x10c>
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	ea5f 0030 	movs.w	r0, r0, rrx
 8004374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004378:	f104 0401 	add.w	r4, r4, #1
 800437c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004384:	f080 809a 	bcs.w	80044bc <__adddf3+0x240>
 8004388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800438c:	bf08      	it	eq
 800438e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004392:	f150 0000 	adcs.w	r0, r0, #0
 8004396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800439a:	ea41 0105 	orr.w	r1, r1, r5
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043a4:	4140      	adcs	r0, r0
 80043a6:	eb41 0101 	adc.w	r1, r1, r1
 80043aa:	3c01      	subs	r4, #1
 80043ac:	bf28      	it	cs
 80043ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80043b2:	d2e9      	bcs.n	8004388 <__adddf3+0x10c>
 80043b4:	f091 0f00 	teq	r1, #0
 80043b8:	bf04      	itt	eq
 80043ba:	4601      	moveq	r1, r0
 80043bc:	2000      	moveq	r0, #0
 80043be:	fab1 f381 	clz	r3, r1
 80043c2:	bf08      	it	eq
 80043c4:	3320      	addeq	r3, #32
 80043c6:	f1a3 030b 	sub.w	r3, r3, #11
 80043ca:	f1b3 0220 	subs.w	r2, r3, #32
 80043ce:	da0c      	bge.n	80043ea <__adddf3+0x16e>
 80043d0:	320c      	adds	r2, #12
 80043d2:	dd08      	ble.n	80043e6 <__adddf3+0x16a>
 80043d4:	f102 0c14 	add.w	ip, r2, #20
 80043d8:	f1c2 020c 	rsb	r2, r2, #12
 80043dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80043e0:	fa21 f102 	lsr.w	r1, r1, r2
 80043e4:	e00c      	b.n	8004400 <__adddf3+0x184>
 80043e6:	f102 0214 	add.w	r2, r2, #20
 80043ea:	bfd8      	it	le
 80043ec:	f1c2 0c20 	rsble	ip, r2, #32
 80043f0:	fa01 f102 	lsl.w	r1, r1, r2
 80043f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043f8:	bfdc      	itt	le
 80043fa:	ea41 010c 	orrle.w	r1, r1, ip
 80043fe:	4090      	lslle	r0, r2
 8004400:	1ae4      	subs	r4, r4, r3
 8004402:	bfa2      	ittt	ge
 8004404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004408:	4329      	orrge	r1, r5
 800440a:	bd30      	popge	{r4, r5, pc}
 800440c:	ea6f 0404 	mvn.w	r4, r4
 8004410:	3c1f      	subs	r4, #31
 8004412:	da1c      	bge.n	800444e <__adddf3+0x1d2>
 8004414:	340c      	adds	r4, #12
 8004416:	dc0e      	bgt.n	8004436 <__adddf3+0x1ba>
 8004418:	f104 0414 	add.w	r4, r4, #20
 800441c:	f1c4 0220 	rsb	r2, r4, #32
 8004420:	fa20 f004 	lsr.w	r0, r0, r4
 8004424:	fa01 f302 	lsl.w	r3, r1, r2
 8004428:	ea40 0003 	orr.w	r0, r0, r3
 800442c:	fa21 f304 	lsr.w	r3, r1, r4
 8004430:	ea45 0103 	orr.w	r1, r5, r3
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	f1c4 040c 	rsb	r4, r4, #12
 800443a:	f1c4 0220 	rsb	r2, r4, #32
 800443e:	fa20 f002 	lsr.w	r0, r0, r2
 8004442:	fa01 f304 	lsl.w	r3, r1, r4
 8004446:	ea40 0003 	orr.w	r0, r0, r3
 800444a:	4629      	mov	r1, r5
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	fa21 f004 	lsr.w	r0, r1, r4
 8004452:	4629      	mov	r1, r5
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	f094 0f00 	teq	r4, #0
 800445a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800445e:	bf06      	itte	eq
 8004460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004464:	3401      	addeq	r4, #1
 8004466:	3d01      	subne	r5, #1
 8004468:	e74e      	b.n	8004308 <__adddf3+0x8c>
 800446a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800446e:	bf18      	it	ne
 8004470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004474:	d029      	beq.n	80044ca <__adddf3+0x24e>
 8004476:	ea94 0f05 	teq	r4, r5
 800447a:	bf08      	it	eq
 800447c:	ea90 0f02 	teqeq	r0, r2
 8004480:	d005      	beq.n	800448e <__adddf3+0x212>
 8004482:	ea54 0c00 	orrs.w	ip, r4, r0
 8004486:	bf04      	itt	eq
 8004488:	4619      	moveq	r1, r3
 800448a:	4610      	moveq	r0, r2
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea91 0f03 	teq	r1, r3
 8004492:	bf1e      	ittt	ne
 8004494:	2100      	movne	r1, #0
 8004496:	2000      	movne	r0, #0
 8004498:	bd30      	popne	{r4, r5, pc}
 800449a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800449e:	d105      	bne.n	80044ac <__adddf3+0x230>
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	4149      	adcs	r1, r1
 80044a4:	bf28      	it	cs
 80044a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044b0:	bf3c      	itt	cc
 80044b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044b6:	bd30      	popcc	{r4, r5, pc}
 80044b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044ce:	bf1a      	itte	ne
 80044d0:	4619      	movne	r1, r3
 80044d2:	4610      	movne	r0, r2
 80044d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044d8:	bf1c      	itt	ne
 80044da:	460b      	movne	r3, r1
 80044dc:	4602      	movne	r2, r0
 80044de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044e2:	bf06      	itte	eq
 80044e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044e8:	ea91 0f03 	teqeq	r1, r3
 80044ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop

080044f4 <__aeabi_ui2d>:
 80044f4:	f090 0f00 	teq	r0, #0
 80044f8:	bf04      	itt	eq
 80044fa:	2100      	moveq	r1, #0
 80044fc:	4770      	bxeq	lr
 80044fe:	b530      	push	{r4, r5, lr}
 8004500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004508:	f04f 0500 	mov.w	r5, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	e750      	b.n	80043b4 <__adddf3+0x138>
 8004512:	bf00      	nop

08004514 <__aeabi_i2d>:
 8004514:	f090 0f00 	teq	r0, #0
 8004518:	bf04      	itt	eq
 800451a:	2100      	moveq	r1, #0
 800451c:	4770      	bxeq	lr
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800452c:	bf48      	it	mi
 800452e:	4240      	negmi	r0, r0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	e73e      	b.n	80043b4 <__adddf3+0x138>
 8004536:	bf00      	nop

08004538 <__aeabi_f2d>:
 8004538:	0042      	lsls	r2, r0, #1
 800453a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800453e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004546:	bf1f      	itttt	ne
 8004548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800454c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004554:	4770      	bxne	lr
 8004556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800455a:	bf08      	it	eq
 800455c:	4770      	bxeq	lr
 800455e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004562:	bf04      	itt	eq
 8004564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004568:	4770      	bxeq	lr
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004578:	e71c      	b.n	80043b4 <__adddf3+0x138>
 800457a:	bf00      	nop

0800457c <__aeabi_ul2d>:
 800457c:	ea50 0201 	orrs.w	r2, r0, r1
 8004580:	bf08      	it	eq
 8004582:	4770      	bxeq	lr
 8004584:	b530      	push	{r4, r5, lr}
 8004586:	f04f 0500 	mov.w	r5, #0
 800458a:	e00a      	b.n	80045a2 <__aeabi_l2d+0x16>

0800458c <__aeabi_l2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800459a:	d502      	bpl.n	80045a2 <__aeabi_l2d+0x16>
 800459c:	4240      	negs	r0, r0
 800459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045ae:	f43f aed8 	beq.w	8004362 <__adddf3+0xe6>
 80045b2:	f04f 0203 	mov.w	r2, #3
 80045b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ba:	bf18      	it	ne
 80045bc:	3203      	addne	r2, #3
 80045be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c2:	bf18      	it	ne
 80045c4:	3203      	addne	r2, #3
 80045c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ca:	f1c2 0320 	rsb	r3, r2, #32
 80045ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d2:	fa20 f002 	lsr.w	r0, r0, r2
 80045d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045da:	ea40 000e 	orr.w	r0, r0, lr
 80045de:	fa21 f102 	lsr.w	r1, r1, r2
 80045e2:	4414      	add	r4, r2
 80045e4:	e6bd      	b.n	8004362 <__adddf3+0xe6>
 80045e6:	bf00      	nop

080045e8 <__aeabi_d2f>:
 80045e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80045ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80045f0:	bf24      	itt	cs
 80045f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80045f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80045fa:	d90d      	bls.n	8004618 <__aeabi_d2f+0x30>
 80045fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004608:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800460c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004610:	bf08      	it	eq
 8004612:	f020 0001 	biceq.w	r0, r0, #1
 8004616:	4770      	bx	lr
 8004618:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800461c:	d121      	bne.n	8004662 <__aeabi_d2f+0x7a>
 800461e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004622:	bfbc      	itt	lt
 8004624:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004628:	4770      	bxlt	lr
 800462a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800462e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004632:	f1c2 0218 	rsb	r2, r2, #24
 8004636:	f1c2 0c20 	rsb	ip, r2, #32
 800463a:	fa10 f30c 	lsls.w	r3, r0, ip
 800463e:	fa20 f002 	lsr.w	r0, r0, r2
 8004642:	bf18      	it	ne
 8004644:	f040 0001 	orrne.w	r0, r0, #1
 8004648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800464c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004654:	ea40 000c 	orr.w	r0, r0, ip
 8004658:	fa23 f302 	lsr.w	r3, r3, r2
 800465c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004660:	e7cc      	b.n	80045fc <__aeabi_d2f+0x14>
 8004662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004666:	d107      	bne.n	8004678 <__aeabi_d2f+0x90>
 8004668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800466c:	bf1e      	ittt	ne
 800466e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004672:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004676:	4770      	bxne	lr
 8004678:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800467c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004680:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <__aeabi_uldivmod>:
 8004688:	b953      	cbnz	r3, 80046a0 <__aeabi_uldivmod+0x18>
 800468a:	b94a      	cbnz	r2, 80046a0 <__aeabi_uldivmod+0x18>
 800468c:	2900      	cmp	r1, #0
 800468e:	bf08      	it	eq
 8004690:	2800      	cmpeq	r0, #0
 8004692:	bf1c      	itt	ne
 8004694:	f04f 31ff 	movne.w	r1, #4294967295
 8004698:	f04f 30ff 	movne.w	r0, #4294967295
 800469c:	f000 b974 	b.w	8004988 <__aeabi_idiv0>
 80046a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80046a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80046a8:	f000 f806 	bl	80046b8 <__udivmoddi4>
 80046ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80046b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046b4:	b004      	add	sp, #16
 80046b6:	4770      	bx	lr

080046b8 <__udivmoddi4>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	9d08      	ldr	r5, [sp, #32]
 80046be:	4604      	mov	r4, r0
 80046c0:	468e      	mov	lr, r1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d14d      	bne.n	8004762 <__udivmoddi4+0xaa>
 80046c6:	428a      	cmp	r2, r1
 80046c8:	4694      	mov	ip, r2
 80046ca:	d969      	bls.n	80047a0 <__udivmoddi4+0xe8>
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	b152      	cbz	r2, 80046e8 <__udivmoddi4+0x30>
 80046d2:	fa01 f302 	lsl.w	r3, r1, r2
 80046d6:	f1c2 0120 	rsb	r1, r2, #32
 80046da:	fa20 f101 	lsr.w	r1, r0, r1
 80046de:	fa0c fc02 	lsl.w	ip, ip, r2
 80046e2:	ea41 0e03 	orr.w	lr, r1, r3
 80046e6:	4094      	lsls	r4, r2
 80046e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80046ec:	0c21      	lsrs	r1, r4, #16
 80046ee:	fbbe f6f8 	udiv	r6, lr, r8
 80046f2:	fa1f f78c 	uxth.w	r7, ip
 80046f6:	fb08 e316 	mls	r3, r8, r6, lr
 80046fa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80046fe:	fb06 f107 	mul.w	r1, r6, r7
 8004702:	4299      	cmp	r1, r3
 8004704:	d90a      	bls.n	800471c <__udivmoddi4+0x64>
 8004706:	eb1c 0303 	adds.w	r3, ip, r3
 800470a:	f106 30ff 	add.w	r0, r6, #4294967295
 800470e:	f080 811f 	bcs.w	8004950 <__udivmoddi4+0x298>
 8004712:	4299      	cmp	r1, r3
 8004714:	f240 811c 	bls.w	8004950 <__udivmoddi4+0x298>
 8004718:	3e02      	subs	r6, #2
 800471a:	4463      	add	r3, ip
 800471c:	1a5b      	subs	r3, r3, r1
 800471e:	b2a4      	uxth	r4, r4
 8004720:	fbb3 f0f8 	udiv	r0, r3, r8
 8004724:	fb08 3310 	mls	r3, r8, r0, r3
 8004728:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800472c:	fb00 f707 	mul.w	r7, r0, r7
 8004730:	42a7      	cmp	r7, r4
 8004732:	d90a      	bls.n	800474a <__udivmoddi4+0x92>
 8004734:	eb1c 0404 	adds.w	r4, ip, r4
 8004738:	f100 33ff 	add.w	r3, r0, #4294967295
 800473c:	f080 810a 	bcs.w	8004954 <__udivmoddi4+0x29c>
 8004740:	42a7      	cmp	r7, r4
 8004742:	f240 8107 	bls.w	8004954 <__udivmoddi4+0x29c>
 8004746:	4464      	add	r4, ip
 8004748:	3802      	subs	r0, #2
 800474a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800474e:	1be4      	subs	r4, r4, r7
 8004750:	2600      	movs	r6, #0
 8004752:	b11d      	cbz	r5, 800475c <__udivmoddi4+0xa4>
 8004754:	40d4      	lsrs	r4, r2
 8004756:	2300      	movs	r3, #0
 8004758:	e9c5 4300 	strd	r4, r3, [r5]
 800475c:	4631      	mov	r1, r6
 800475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004762:	428b      	cmp	r3, r1
 8004764:	d909      	bls.n	800477a <__udivmoddi4+0xc2>
 8004766:	2d00      	cmp	r5, #0
 8004768:	f000 80ef 	beq.w	800494a <__udivmoddi4+0x292>
 800476c:	2600      	movs	r6, #0
 800476e:	e9c5 0100 	strd	r0, r1, [r5]
 8004772:	4630      	mov	r0, r6
 8004774:	4631      	mov	r1, r6
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	fab3 f683 	clz	r6, r3
 800477e:	2e00      	cmp	r6, #0
 8004780:	d14a      	bne.n	8004818 <__udivmoddi4+0x160>
 8004782:	428b      	cmp	r3, r1
 8004784:	d302      	bcc.n	800478c <__udivmoddi4+0xd4>
 8004786:	4282      	cmp	r2, r0
 8004788:	f200 80f9 	bhi.w	800497e <__udivmoddi4+0x2c6>
 800478c:	1a84      	subs	r4, r0, r2
 800478e:	eb61 0303 	sbc.w	r3, r1, r3
 8004792:	2001      	movs	r0, #1
 8004794:	469e      	mov	lr, r3
 8004796:	2d00      	cmp	r5, #0
 8004798:	d0e0      	beq.n	800475c <__udivmoddi4+0xa4>
 800479a:	e9c5 4e00 	strd	r4, lr, [r5]
 800479e:	e7dd      	b.n	800475c <__udivmoddi4+0xa4>
 80047a0:	b902      	cbnz	r2, 80047a4 <__udivmoddi4+0xec>
 80047a2:	deff      	udf	#255	; 0xff
 80047a4:	fab2 f282 	clz	r2, r2
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	f040 8092 	bne.w	80048d2 <__udivmoddi4+0x21a>
 80047ae:	eba1 010c 	sub.w	r1, r1, ip
 80047b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80047b6:	fa1f fe8c 	uxth.w	lr, ip
 80047ba:	2601      	movs	r6, #1
 80047bc:	0c20      	lsrs	r0, r4, #16
 80047be:	fbb1 f3f7 	udiv	r3, r1, r7
 80047c2:	fb07 1113 	mls	r1, r7, r3, r1
 80047c6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80047ca:	fb0e f003 	mul.w	r0, lr, r3
 80047ce:	4288      	cmp	r0, r1
 80047d0:	d908      	bls.n	80047e4 <__udivmoddi4+0x12c>
 80047d2:	eb1c 0101 	adds.w	r1, ip, r1
 80047d6:	f103 38ff 	add.w	r8, r3, #4294967295
 80047da:	d202      	bcs.n	80047e2 <__udivmoddi4+0x12a>
 80047dc:	4288      	cmp	r0, r1
 80047de:	f200 80cb 	bhi.w	8004978 <__udivmoddi4+0x2c0>
 80047e2:	4643      	mov	r3, r8
 80047e4:	1a09      	subs	r1, r1, r0
 80047e6:	b2a4      	uxth	r4, r4
 80047e8:	fbb1 f0f7 	udiv	r0, r1, r7
 80047ec:	fb07 1110 	mls	r1, r7, r0, r1
 80047f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80047f4:	fb0e fe00 	mul.w	lr, lr, r0
 80047f8:	45a6      	cmp	lr, r4
 80047fa:	d908      	bls.n	800480e <__udivmoddi4+0x156>
 80047fc:	eb1c 0404 	adds.w	r4, ip, r4
 8004800:	f100 31ff 	add.w	r1, r0, #4294967295
 8004804:	d202      	bcs.n	800480c <__udivmoddi4+0x154>
 8004806:	45a6      	cmp	lr, r4
 8004808:	f200 80bb 	bhi.w	8004982 <__udivmoddi4+0x2ca>
 800480c:	4608      	mov	r0, r1
 800480e:	eba4 040e 	sub.w	r4, r4, lr
 8004812:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004816:	e79c      	b.n	8004752 <__udivmoddi4+0x9a>
 8004818:	f1c6 0720 	rsb	r7, r6, #32
 800481c:	40b3      	lsls	r3, r6
 800481e:	fa22 fc07 	lsr.w	ip, r2, r7
 8004822:	ea4c 0c03 	orr.w	ip, ip, r3
 8004826:	fa20 f407 	lsr.w	r4, r0, r7
 800482a:	fa01 f306 	lsl.w	r3, r1, r6
 800482e:	431c      	orrs	r4, r3
 8004830:	40f9      	lsrs	r1, r7
 8004832:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004836:	fa00 f306 	lsl.w	r3, r0, r6
 800483a:	fbb1 f8f9 	udiv	r8, r1, r9
 800483e:	0c20      	lsrs	r0, r4, #16
 8004840:	fa1f fe8c 	uxth.w	lr, ip
 8004844:	fb09 1118 	mls	r1, r9, r8, r1
 8004848:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800484c:	fb08 f00e 	mul.w	r0, r8, lr
 8004850:	4288      	cmp	r0, r1
 8004852:	fa02 f206 	lsl.w	r2, r2, r6
 8004856:	d90b      	bls.n	8004870 <__udivmoddi4+0x1b8>
 8004858:	eb1c 0101 	adds.w	r1, ip, r1
 800485c:	f108 3aff 	add.w	sl, r8, #4294967295
 8004860:	f080 8088 	bcs.w	8004974 <__udivmoddi4+0x2bc>
 8004864:	4288      	cmp	r0, r1
 8004866:	f240 8085 	bls.w	8004974 <__udivmoddi4+0x2bc>
 800486a:	f1a8 0802 	sub.w	r8, r8, #2
 800486e:	4461      	add	r1, ip
 8004870:	1a09      	subs	r1, r1, r0
 8004872:	b2a4      	uxth	r4, r4
 8004874:	fbb1 f0f9 	udiv	r0, r1, r9
 8004878:	fb09 1110 	mls	r1, r9, r0, r1
 800487c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004880:	fb00 fe0e 	mul.w	lr, r0, lr
 8004884:	458e      	cmp	lr, r1
 8004886:	d908      	bls.n	800489a <__udivmoddi4+0x1e2>
 8004888:	eb1c 0101 	adds.w	r1, ip, r1
 800488c:	f100 34ff 	add.w	r4, r0, #4294967295
 8004890:	d26c      	bcs.n	800496c <__udivmoddi4+0x2b4>
 8004892:	458e      	cmp	lr, r1
 8004894:	d96a      	bls.n	800496c <__udivmoddi4+0x2b4>
 8004896:	3802      	subs	r0, #2
 8004898:	4461      	add	r1, ip
 800489a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800489e:	fba0 9402 	umull	r9, r4, r0, r2
 80048a2:	eba1 010e 	sub.w	r1, r1, lr
 80048a6:	42a1      	cmp	r1, r4
 80048a8:	46c8      	mov	r8, r9
 80048aa:	46a6      	mov	lr, r4
 80048ac:	d356      	bcc.n	800495c <__udivmoddi4+0x2a4>
 80048ae:	d053      	beq.n	8004958 <__udivmoddi4+0x2a0>
 80048b0:	b15d      	cbz	r5, 80048ca <__udivmoddi4+0x212>
 80048b2:	ebb3 0208 	subs.w	r2, r3, r8
 80048b6:	eb61 010e 	sbc.w	r1, r1, lr
 80048ba:	fa01 f707 	lsl.w	r7, r1, r7
 80048be:	fa22 f306 	lsr.w	r3, r2, r6
 80048c2:	40f1      	lsrs	r1, r6
 80048c4:	431f      	orrs	r7, r3
 80048c6:	e9c5 7100 	strd	r7, r1, [r5]
 80048ca:	2600      	movs	r6, #0
 80048cc:	4631      	mov	r1, r6
 80048ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d2:	f1c2 0320 	rsb	r3, r2, #32
 80048d6:	40d8      	lsrs	r0, r3
 80048d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80048dc:	fa21 f303 	lsr.w	r3, r1, r3
 80048e0:	4091      	lsls	r1, r2
 80048e2:	4301      	orrs	r1, r0
 80048e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80048e8:	fa1f fe8c 	uxth.w	lr, ip
 80048ec:	fbb3 f0f7 	udiv	r0, r3, r7
 80048f0:	fb07 3610 	mls	r6, r7, r0, r3
 80048f4:	0c0b      	lsrs	r3, r1, #16
 80048f6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80048fa:	fb00 f60e 	mul.w	r6, r0, lr
 80048fe:	429e      	cmp	r6, r3
 8004900:	fa04 f402 	lsl.w	r4, r4, r2
 8004904:	d908      	bls.n	8004918 <__udivmoddi4+0x260>
 8004906:	eb1c 0303 	adds.w	r3, ip, r3
 800490a:	f100 38ff 	add.w	r8, r0, #4294967295
 800490e:	d22f      	bcs.n	8004970 <__udivmoddi4+0x2b8>
 8004910:	429e      	cmp	r6, r3
 8004912:	d92d      	bls.n	8004970 <__udivmoddi4+0x2b8>
 8004914:	3802      	subs	r0, #2
 8004916:	4463      	add	r3, ip
 8004918:	1b9b      	subs	r3, r3, r6
 800491a:	b289      	uxth	r1, r1
 800491c:	fbb3 f6f7 	udiv	r6, r3, r7
 8004920:	fb07 3316 	mls	r3, r7, r6, r3
 8004924:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004928:	fb06 f30e 	mul.w	r3, r6, lr
 800492c:	428b      	cmp	r3, r1
 800492e:	d908      	bls.n	8004942 <__udivmoddi4+0x28a>
 8004930:	eb1c 0101 	adds.w	r1, ip, r1
 8004934:	f106 38ff 	add.w	r8, r6, #4294967295
 8004938:	d216      	bcs.n	8004968 <__udivmoddi4+0x2b0>
 800493a:	428b      	cmp	r3, r1
 800493c:	d914      	bls.n	8004968 <__udivmoddi4+0x2b0>
 800493e:	3e02      	subs	r6, #2
 8004940:	4461      	add	r1, ip
 8004942:	1ac9      	subs	r1, r1, r3
 8004944:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8004948:	e738      	b.n	80047bc <__udivmoddi4+0x104>
 800494a:	462e      	mov	r6, r5
 800494c:	4628      	mov	r0, r5
 800494e:	e705      	b.n	800475c <__udivmoddi4+0xa4>
 8004950:	4606      	mov	r6, r0
 8004952:	e6e3      	b.n	800471c <__udivmoddi4+0x64>
 8004954:	4618      	mov	r0, r3
 8004956:	e6f8      	b.n	800474a <__udivmoddi4+0x92>
 8004958:	454b      	cmp	r3, r9
 800495a:	d2a9      	bcs.n	80048b0 <__udivmoddi4+0x1f8>
 800495c:	ebb9 0802 	subs.w	r8, r9, r2
 8004960:	eb64 0e0c 	sbc.w	lr, r4, ip
 8004964:	3801      	subs	r0, #1
 8004966:	e7a3      	b.n	80048b0 <__udivmoddi4+0x1f8>
 8004968:	4646      	mov	r6, r8
 800496a:	e7ea      	b.n	8004942 <__udivmoddi4+0x28a>
 800496c:	4620      	mov	r0, r4
 800496e:	e794      	b.n	800489a <__udivmoddi4+0x1e2>
 8004970:	4640      	mov	r0, r8
 8004972:	e7d1      	b.n	8004918 <__udivmoddi4+0x260>
 8004974:	46d0      	mov	r8, sl
 8004976:	e77b      	b.n	8004870 <__udivmoddi4+0x1b8>
 8004978:	3b02      	subs	r3, #2
 800497a:	4461      	add	r1, ip
 800497c:	e732      	b.n	80047e4 <__udivmoddi4+0x12c>
 800497e:	4630      	mov	r0, r6
 8004980:	e709      	b.n	8004796 <__udivmoddi4+0xde>
 8004982:	4464      	add	r4, ip
 8004984:	3802      	subs	r0, #2
 8004986:	e742      	b.n	800480e <__udivmoddi4+0x156>

08004988 <__aeabi_idiv0>:
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop

0800498c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800498c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004990:	f003 fed0 	bl	8008734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004994:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004996:	e003      	b.n	80049a0 <LoopCopyDataInit>

08004998 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800499a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800499c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800499e:	3104      	adds	r1, #4

080049a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80049a0:	480a      	ldr	r0, [pc, #40]	; (80049cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80049a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80049a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80049a8:	d3f6      	bcc.n	8004998 <CopyDataInit>
	ldr	r2, =_sbss
 80049aa:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80049ac:	e002      	b.n	80049b4 <LoopFillZerobss>

080049ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80049ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80049b0:	f842 3b04 	str.w	r3, [r2], #4

080049b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80049b4:	4b08      	ldr	r3, [pc, #32]	; (80049d8 <LoopForever+0x16>)
	cmp	r2, r3
 80049b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80049b8:	d3f9      	bcc.n	80049ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049ba:	f00a ff17 	bl	800f7ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049be:	f002 ffb0 	bl	8007922 <main>

080049c2 <LoopForever>:

LoopForever:
    b LoopForever
 80049c2:	e7fe      	b.n	80049c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049c4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80049c8:	080117b4 	.word	0x080117b4
	ldr	r0, =_sdata
 80049cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049d0:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 80049d4:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 80049d8:	20000a48 	.word	0x20000a48

080049dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049dc:	e7fe      	b.n	80049dc <ADC1_2_IRQHandler>
	...

080049e0 <CheckBootLoaderCompliance>:
 * @brief Function for Testing the BootLoader Compliance
 * @param None
 * @retval int8_t Return value for checking purpouse (0/1 == Ok/Error)
 */
int8_t CheckBootLoaderCompliance(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  OTA_PRINTF("Testing BootLoaderCompliance:\r\n");
 80049e4:	483b      	ldr	r0, [pc, #236]	; (8004ad4 <CheckBootLoaderCompliance+0xf4>)
 80049e6:	f00a ffc1 	bl	800f96c <puts>
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
              (uint16_t)(BootLoaderFeatures->Version>>16),
 80049ea:	4b3b      	ldr	r3, [pc, #236]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	b29b      	uxth	r3, r3
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
 80049f4:	4619      	mov	r1, r3
              (uint16_t)((BootLoaderFeatures->Version>>8)&0xFF),
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	b29b      	uxth	r3, r3
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
 8004a00:	b2da      	uxtb	r2, r3
              (uint16_t)(BootLoaderFeatures->Version    &0xFF));
 8004a02:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	b29b      	uxth	r3, r3
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4833      	ldr	r0, [pc, #204]	; (8004adc <CheckBootLoaderCompliance+0xfc>)
 8004a0e:	f00a ff27 	bl	800f860 <iprintf>

  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8004a12:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	bf14      	ite	ne
 8004a1e:	2301      	movne	r3, #1
 8004a20:	2300      	moveq	r3, #0
 8004a22:	b2da      	uxtb	r2, r3
     (((BootLoaderFeatures->Version>>8 )&0xFF)!=BL_VERSION_MINOR) |
 8004a24:	4b2c      	ldr	r3, [pc, #176]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b2db      	uxtb	r3, r3
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
      ((BootLoaderFeatures->Version     &0xFF)!=BL_VERSION_PATCH)) {
 8004a3e:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	bf14      	ite	ne
 8004a4a:	2301      	movne	r3, #1
 8004a4c:	2300      	moveq	r3, #0
 8004a4e:	b2db      	uxtb	r3, r3
     (((BootLoaderFeatures->Version>>8 )&0xFF)!=BL_VERSION_MINOR) |
 8004a50:	4313      	orrs	r3, r2
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <CheckBootLoaderCompliance+0x80>
    OTA_PRINTF("\tBL Version  Ko\r\n");
 8004a56:	4822      	ldr	r0, [pc, #136]	; (8004ae0 <CheckBootLoaderCompliance+0x100>)
 8004a58:	f00a ff88 	bl	800f96c <puts>
    return 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e036      	b.n	8004ace <CheckBootLoaderCompliance+0xee>
  } else {
    OTA_PRINTF("\tBL Version  Ok\r\n");
 8004a60:	4820      	ldr	r0, [pc, #128]	; (8004ae4 <CheckBootLoaderCompliance+0x104>)
 8004a62:	f00a ff83 	bl	800f96c <puts>
  }

  if(BootLoaderFeatures->MagicNum==OTA_MAGIC_NUM) {
 8004a66:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <CheckBootLoaderCompliance+0x108>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d110      	bne.n	8004a94 <CheckBootLoaderCompliance+0xb4>
    OTA_PRINTF("\tMagicNum    OK\r\n");
 8004a72:	481e      	ldr	r0, [pc, #120]	; (8004aec <CheckBootLoaderCompliance+0x10c>)
 8004a74:	f00a ff7a 	bl	800f96c <puts>
  } else {
    OTA_PRINTF("\tMagicNum    KO\r\n");
    return 0;
  }

  OTA_PRINTF("\tMaxSize =%lx\r\n", (long)BootLoaderFeatures->OTAMaxSize);
 8004a78:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	481b      	ldr	r0, [pc, #108]	; (8004af0 <CheckBootLoaderCompliance+0x110>)
 8004a82:	f00a feed 	bl	800f860 <iprintf>

  if(BootLoaderFeatures->OTAStartAdd==(OTA_ADDRESS_START-16)) {
 8004a86:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <CheckBootLoaderCompliance+0x114>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10f      	bne.n	8004ab2 <CheckBootLoaderCompliance+0xd2>
 8004a92:	e004      	b.n	8004a9e <CheckBootLoaderCompliance+0xbe>
    OTA_PRINTF("\tMagicNum    KO\r\n");
 8004a94:	4818      	ldr	r0, [pc, #96]	; (8004af8 <CheckBootLoaderCompliance+0x118>)
 8004a96:	f00a ff69 	bl	800f96c <puts>
    return 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e017      	b.n	8004ace <CheckBootLoaderCompliance+0xee>
    OTA_PRINTF("\tOTAStartAdd OK\r\n");
 8004a9e:	4817      	ldr	r0, [pc, #92]	; (8004afc <CheckBootLoaderCompliance+0x11c>)
 8004aa0:	f00a ff64 	bl	800f96c <puts>
  } else {
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
    return 0;
  }

  if(BootLoaderFeatures->OTADoneAdd==OTA_MAGIC_DONE_NUM_POS) {
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <CheckBootLoaderCompliance+0xf8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <CheckBootLoaderCompliance+0x120>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10a      	bne.n	8004ac6 <CheckBootLoaderCompliance+0xe6>
 8004ab0:	e004      	b.n	8004abc <CheckBootLoaderCompliance+0xdc>
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
 8004ab2:	4814      	ldr	r0, [pc, #80]	; (8004b04 <CheckBootLoaderCompliance+0x124>)
 8004ab4:	f00a ff5a 	bl	800f96c <puts>
    return 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e008      	b.n	8004ace <CheckBootLoaderCompliance+0xee>
    OTA_PRINTF("\tOTADoneAdd  OK\r\n");
 8004abc:	4812      	ldr	r0, [pc, #72]	; (8004b08 <CheckBootLoaderCompliance+0x128>)
 8004abe:	f00a ff55 	bl	800f96c <puts>
  } else {
    OTA_PRINTF("\tOTADoneAdd  KO\r\n");
    return 0;
  }

  return 1;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e003      	b.n	8004ace <CheckBootLoaderCompliance+0xee>
    OTA_PRINTF("\tOTADoneAdd  KO\r\n");
 8004ac6:	4811      	ldr	r0, [pc, #68]	; (8004b0c <CheckBootLoaderCompliance+0x12c>)
 8004ac8:	f00a ff50 	bl	800f96c <puts>
    return 0;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08010f3c 	.word	0x08010f3c
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	08010f5c 	.word	0x08010f5c
 8004ae0:	08010f74 	.word	0x08010f74
 8004ae4:	08010f88 	.word	0x08010f88
 8004ae8:	deadbeef 	.word	0xdeadbeef
 8004aec:	08010f9c 	.word	0x08010f9c
 8004af0:	08010fc4 	.word	0x08010fc4
 8004af4:	08080000 	.word	0x08080000
 8004af8:	08010fb0 	.word	0x08010fb0
 8004afc:	08010fd4 	.word	0x08010fd4
 8004b00:	08080008 	.word	0x08080008
 8004b04:	08010fe8 	.word	0x08010fe8
 8004b08:	08010ffc 	.word	0x08010ffc
 8004b0c:	08011010 	.word	0x08011010

08004b10 <UpdateFWBlueNRG>:
 * @param int32_t data_length length of the data
 * @param uint8_t WriteMagicNum 1/0 for writing or not the magic number
 * @retval int8_t Return value for checking purpouse (1/-1 == Ok/Error)
 */
int8_t UpdateFWBlueNRG(uint32_t *SizeOfUpdate,uint8_t * att_data, int32_t data_length,uint8_t WriteMagicNum)
{
 8004b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b14:	b094      	sub	sp, #80	; 0x50
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	70fb      	strb	r3, [r7, #3]
  int8_t ReturnValue=0;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  /* Save the Packed received */

  if(data_length>(*SizeOfUpdate)){
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d20d      	bcs.n	8004b4c <UpdateFWBlueNRG+0x3c>
    /* Too many bytes...Something wrong... necessity to send it again... */
    OTA_PRINTF("OTA something wrong data_length=%ld RemSizeOfUpdate=%ld....\r\nPlease Try again\r\n", (long)data_length, (long)(*SizeOfUpdate));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4876      	ldr	r0, [pc, #472]	; (8004d14 <UpdateFWBlueNRG+0x204>)
 8004b3a:	f00a fe91 	bl	800f860 <iprintf>
    ReturnValue = -1;
 8004b3e:	23ff      	movs	r3, #255	; 0xff
 8004b40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    /* Reset for Restarting again */
    *SizeOfUpdate=0;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e0db      	b.n	8004d04 <UpdateFWBlueNRG+0x1f4>
  } else {
    uint64_t ValueToWrite;
    int32_t Counter;
    /* Save the received OTA packed ad save it to flash */
    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8004b4c:	f004 fb36 	bl	80091bc <HAL_FLASH_Unlock>

    for(Counter=0;Counter<data_length;Counter+=8) {
 8004b50:	2300      	movs	r3, #0
 8004b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b54:	e020      	b.n	8004b98 <UpdateFWBlueNRG+0x88>
      memcpy((uint8_t*) &ValueToWrite,att_data+Counter,data_length-Counter+1);
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	18d1      	adds	r1, r2, r3
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	461a      	mov	r2, r3
 8004b66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f00a fe62 	bl	800f834 <memcpy>

      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WritingAddress,ValueToWrite)==HAL_OK) {
 8004b70:	4b69      	ldr	r3, [pc, #420]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b78:	2000      	movs	r0, #0
 8004b7a:	f004 fab3 	bl	80090e4 <HAL_FLASH_Program>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <UpdateFWBlueNRG+0x80>
       WritingAddress+=8;
 8004b84:	4b64      	ldr	r3, [pc, #400]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3308      	adds	r3, #8
 8004b8a:	4a63      	ldr	r2, [pc, #396]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e000      	b.n	8004b92 <UpdateFWBlueNRG+0x82>
      } else {
        /* Error occurred while writing data in Flash memory.
           User can add here some code to deal with this error
           FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
        OTA_ERROR_FUNCTION();
 8004b90:	e7fe      	b.n	8004b90 <UpdateFWBlueNRG+0x80>
    for(Counter=0;Counter<data_length;Counter+=8) {
 8004b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b94:	3308      	adds	r3, #8
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	dbda      	blt.n	8004b56 <UpdateFWBlueNRG+0x46>
      }
    }
    /* Reduce the remaining bytes for OTA completion */
    *SizeOfUpdate -= data_length;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

    if(*SizeOfUpdate==0) {
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 80a5 	bne.w	8004d00 <UpdateFWBlueNRG+0x1f0>
      /* We had received the whole firmware and we have saved it in Flash */
      OTA_PRINTF("OTA Update saved\r\n");
 8004bb6:	4859      	ldr	r0, [pc, #356]	; (8004d1c <UpdateFWBlueNRG+0x20c>)
 8004bb8:	f00a fed8 	bl	800f96c <puts>

      if(WriteMagicNum) {
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 809e 	beq.w	8004d00 <UpdateFWBlueNRG+0x1f0>
        uint32_t uwCRCValue = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44

        if(AspecteduwCRCValue) {
 8004bc8:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <UpdateFWBlueNRG+0x210>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d03e      	beq.n	8004c4e <UpdateFWBlueNRG+0x13e>
          /* Make the CRC integrity check */
          /* CRC handler declaration */
          CRC_HandleTypeDef   CrcHandle;

          /* Init CRC for OTA-integrity check */
          CrcHandle.Instance = CRC;
 8004bd0:	4b54      	ldr	r3, [pc, #336]	; (8004d24 <UpdateFWBlueNRG+0x214>)
 8004bd2:	617b      	str	r3, [r7, #20]
          /* The default polynomial is used */
          CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	763b      	strb	r3, [r7, #24]

          /* The default init value is used */
          CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	767b      	strb	r3, [r7, #25]

          /* The input data are not inverted */
          CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28

          /* The output data are not inverted */
          CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* The input data are 32-bit long words */
          CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8004be4:	2303      	movs	r3, #3
 8004be6:	637b      	str	r3, [r7, #52]	; 0x34

          if(HAL_CRC_GetState(&CrcHandle) != HAL_CRC_STATE_RESET) {
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4618      	mov	r0, r3
 8004bee:	f004 f8bf 	bl	8008d70 <HAL_CRC_GetState>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d004      	beq.n	8004c02 <UpdateFWBlueNRG+0xf2>
            HAL_CRC_DeInit(&CrcHandle);
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f004 f83b 	bl	8008c78 <HAL_CRC_DeInit>
          }

          if (HAL_CRC_Init(&CrcHandle) != HAL_OK) {
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 ffd2 	bl	8008bb0 <HAL_CRC_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d000      	beq.n	8004c14 <UpdateFWBlueNRG+0x104>
            /* Initialization Error */
            OTA_ERROR_FUNCTION();
 8004c12:	e7fe      	b.n	8004c12 <UpdateFWBlueNRG+0x102>
          } else {
            OTA_PRINTF("CRC  Initialized\n\r");
 8004c14:	4844      	ldr	r0, [pc, #272]	; (8004d28 <UpdateFWBlueNRG+0x218>)
 8004c16:	f00a fe23 	bl	800f860 <iprintf>
          }
          /* Compute the CRC */
          uwCRCValue = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)OTA_ADDRESS_START, SizeOfUpdateBlueFW>>2);
 8004c1a:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <UpdateFWBlueNRG+0x21c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	089a      	lsrs	r2, r3, #2
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	4942      	ldr	r1, [pc, #264]	; (8004d30 <UpdateFWBlueNRG+0x220>)
 8004c26:	4618      	mov	r0, r3
 8004c28:	f004 f856 	bl	8008cd8 <HAL_CRC_Calculate>
 8004c2c:	6478      	str	r0, [r7, #68]	; 0x44

          if(uwCRCValue==AspecteduwCRCValue) {
 8004c2e:	4b3c      	ldr	r3, [pc, #240]	; (8004d20 <UpdateFWBlueNRG+0x210>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d106      	bne.n	8004c46 <UpdateFWBlueNRG+0x136>
            ReturnValue=1;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            OTA_PRINTF("OTA CRC-checked\r\n");
 8004c3e:	483d      	ldr	r0, [pc, #244]	; (8004d34 <UpdateFWBlueNRG+0x224>)
 8004c40:	f00a fe94 	bl	800f96c <puts>
 8004c44:	e006      	b.n	8004c54 <UpdateFWBlueNRG+0x144>
          } else {
            OTA_PRINTF("OTA Error CRC-checking\r\n");
 8004c46:	483c      	ldr	r0, [pc, #240]	; (8004d38 <UpdateFWBlueNRG+0x228>)
 8004c48:	f00a fe90 	bl	800f96c <puts>
 8004c4c:	e002      	b.n	8004c54 <UpdateFWBlueNRG+0x144>
          }
        } else {
          ReturnValue=1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        }
        if(ReturnValue==1) {
 8004c54:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d143      	bne.n	8004ce4 <UpdateFWBlueNRG+0x1d4>
          /* We write the Magic number for making the OTA at the next Board reset and the size of Update*/
          WritingAddress = OTA_MAGIC_NUM_POS;
 8004c5c:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004c5e:	4a37      	ldr	r2, [pc, #220]	; (8004d3c <UpdateFWBlueNRG+0x22c>)
 8004c60:	601a      	str	r2, [r3, #0]
          ValueToWrite=(((uint64_t)SizeOfUpdateBlueFW)<<32)| (OTA_MAGIC_NUM);
 8004c62:	4b32      	ldr	r3, [pc, #200]	; (8004d2c <UpdateFWBlueNRG+0x21c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	469a      	mov	sl, r3
 8004c6a:	4693      	mov	fp, r2
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	4653      	mov	r3, sl
 8004c76:	2200      	movs	r2, #0
 8004c78:	f042 445e 	orr.w	r4, r2, #3724541952	; 0xde000000
 8004c7c:	f444 042d 	orr.w	r4, r4, #11337728	; 0xad0000
 8004c80:	f444 443e 	orr.w	r4, r4, #48640	; 0xbe00
 8004c84:	f044 04ef 	orr.w	r4, r4, #239	; 0xef
 8004c88:	461d      	mov	r5, r3
 8004c8a:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38

          if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WritingAddress,ValueToWrite)!=HAL_OK) {
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c96:	2000      	movs	r0, #0
 8004c98:	f004 fa24 	bl	80090e4 <HAL_FLASH_Program>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d000      	beq.n	8004ca4 <UpdateFWBlueNRG+0x194>
            /* Error occurred while writing data in Flash memory.
               User can add here some code to deal with this error
               FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
            OTA_ERROR_FUNCTION();
 8004ca2:	e7fe      	b.n	8004ca2 <UpdateFWBlueNRG+0x192>
          } else {
            WritingAddress = OTA_MAGIC_NUM_POS+8;
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004ca6:	4a26      	ldr	r2, [pc, #152]	; (8004d40 <UpdateFWBlueNRG+0x230>)
 8004ca8:	601a      	str	r2, [r3, #0]
            /* Destination WritingAddress and HeaderSize==0 */
            ValueToWrite=((((uint64_t)(BootLoaderFeatures->ProgStartAdd))<<32)| (0x00));
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <UpdateFWBlueNRG+0x234>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4698      	mov	r8, r3
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	4643      	mov	r3, r8
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WritingAddress,ValueToWrite)!=HAL_OK) {
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <UpdateFWBlueNRG+0x208>)
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f004 fa08 	bl	80090e4 <HAL_FLASH_Program>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d000      	beq.n	8004cdc <UpdateFWBlueNRG+0x1cc>
              /* Error occurred while writing data in Flash memory.
                 User can add here some code to deal with this error
                 FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
              OTA_ERROR_FUNCTION();
 8004cda:	e7fe      	b.n	8004cda <UpdateFWBlueNRG+0x1ca>
            } else {
              OTA_PRINTF("OTA will be installed at next board reset\r\n");
 8004cdc:	481a      	ldr	r0, [pc, #104]	; (8004d48 <UpdateFWBlueNRG+0x238>)
 8004cde:	f00a fe45 	bl	800f96c <puts>
 8004ce2:	e00d      	b.n	8004d00 <UpdateFWBlueNRG+0x1f0>
            }
          }
        } else {
          ReturnValue=-1;
 8004ce4:	23ff      	movs	r3, #255	; 0xff
 8004ce6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          if(AspecteduwCRCValue) {
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <UpdateFWBlueNRG+0x210>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d006      	beq.n	8004d00 <UpdateFWBlueNRG+0x1f0>
            OTA_PRINTF("Wrong CRC! Computed=%lx  expected=%lx ... Try again\r\n", (long)uwCRCValue, (long)AspecteduwCRCValue);
 8004cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <UpdateFWBlueNRG+0x210>)
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4814      	ldr	r0, [pc, #80]	; (8004d4c <UpdateFWBlueNRG+0x23c>)
 8004cfc:	f00a fdb0 	bl	800f860 <iprintf>
      }
    }

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8004d00:	f004 fa7e 	bl	8009200 <HAL_FLASH_Lock>
  }
  return ReturnValue;
 8004d04:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3750      	adds	r7, #80	; 0x50
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	08011024 	.word	0x08011024
 8004d18:	20000000 	.word	0x20000000
 8004d1c:	08011074 	.word	0x08011074
 8004d20:	200000d0 	.word	0x200000d0
 8004d24:	40023000 	.word	0x40023000
 8004d28:	08011088 	.word	0x08011088
 8004d2c:	200000cc 	.word	0x200000cc
 8004d30:	08080010 	.word	0x08080010
 8004d34:	0801109c 	.word	0x0801109c
 8004d38:	080110b0 	.word	0x080110b0
 8004d3c:	08080000 	.word	0x08080000
 8004d40:	08080008 	.word	0x08080008
 8004d44:	20000004 	.word	0x20000004
 8004d48:	080110c8 	.word	0x080110c8
 8004d4c:	080110f4 	.word	0x080110f4

08004d50 <StartUpdateFWBlueNRG>:
 * @param uint32_t SizeOfUpdate  size of the firmware image [bytes]
 * @param uint32_t uwCRCValue expected CRV value
 * @retval None
 */
void StartUpdateFWBlueNRG(uint32_t SizeOfUpdate, uint32_t uwCRCValue)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60fb      	str	r3, [r7, #12]
  OTA_PRINTF("Start FLASH Erase\r\n");
 8004d5e:	481b      	ldr	r0, [pc, #108]	; (8004dcc <StartUpdateFWBlueNRG+0x7c>)
 8004d60:	f00a fe04 	bl	800f96c <puts>

  SizeOfUpdateBlueFW = SizeOfUpdate;
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <StartUpdateFWBlueNRG+0x80>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6013      	str	r3, [r2, #0]
  AspecteduwCRCValue = uwCRCValue;
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <StartUpdateFWBlueNRG+0x84>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6013      	str	r3, [r2, #0]
  WritingAddress = OTA_ADDRESS_START;
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <StartUpdateFWBlueNRG+0x88>)
 8004d72:	4a1a      	ldr	r2, [pc, #104]	; (8004ddc <StartUpdateFWBlueNRG+0x8c>)
 8004d74:	601a      	str	r2, [r3, #0]

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
  EraseInitStruct.Banks       = GetBank(OTA_MAGIC_NUM_POS);
 8004d7a:	4819      	ldr	r0, [pc, #100]	; (8004de0 <StartUpdateFWBlueNRG+0x90>)
 8004d7c:	f003 fc8c 	bl	8008698 <GetBank>
 8004d80:	4603      	mov	r3, r0
 8004d82:	617b      	str	r3, [r7, #20]
  EraseInitStruct.Page        = GetPage(OTA_MAGIC_NUM_POS);
 8004d84:	4816      	ldr	r0, [pc, #88]	; (8004de0 <StartUpdateFWBlueNRG+0x90>)
 8004d86:	f003 fc45 	bl	8008614 <GetPage>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.NbPages     = (SizeOfUpdate+16+FLASH_PAGE_SIZE-1)/FLASH_PAGE_SIZE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f603 030f 	addw	r3, r3, #2063	; 0x80f
 8004d94:	0adb      	lsrs	r3, r3, #11
 8004d96:	61fb      	str	r3, [r7, #28]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8004d98:	f004 fa10 	bl	80091bc <HAL_FLASH_Unlock>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY) != 0) {
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
  }
#endif /* STM32L4R9xx */

  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK){
 8004d9c:	f107 020c 	add.w	r2, r7, #12
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f004 faec 	bl	8009384 <HAL_FLASHEx_Erase>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <StartUpdateFWBlueNRG+0x64>
    /* Error occurred while sector erase.
      User can add here some code to deal with this error.
      SectorError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
    OTA_ERROR_FUNCTION();
 8004db2:	e7fe      	b.n	8004db2 <StartUpdateFWBlueNRG+0x62>
  } else {
    OTA_PRINTF("End FLASH Erase %ld Pages of 4KB\r\n", (long)EraseInitStruct.NbPages);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4619      	mov	r1, r3
 8004db8:	480a      	ldr	r0, [pc, #40]	; (8004de4 <StartUpdateFWBlueNRG+0x94>)
 8004dba:	f00a fd51 	bl	800f860 <iprintf>
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8004dbe:	f004 fa1f 	bl	8009200 <HAL_FLASH_Lock>
}
 8004dc2:	bf00      	nop
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	0801112c 	.word	0x0801112c
 8004dd0:	200000cc 	.word	0x200000cc
 8004dd4:	200000d0 	.word	0x200000d0
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	08080010 	.word	0x08080010
 8004de0:	08080000 	.word	0x08080000
 8004de4:	08011140 	.word	0x08011140

08004de8 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8004dee:	f000 f829 	bl	8004e44 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8004df2:	2000      	movs	r0, #0
 8004df4:	f003 f902 	bl	8007ffc <BSP_PB_GetState>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <MX_BlueNRG_2_Init+0x44>)
 8004dfe:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8004e00:	2100      	movs	r1, #0
 8004e02:	480b      	ldr	r0, [pc, #44]	; (8004e30 <MX_BlueNRG_2_Init+0x48>)
 8004e04:	f00a f9dc 	bl	800f1c0 <hci_init>
  PRINT_DBG("\033[2J"); /* serial console clear screen */
  PRINT_DBG("\033[H");  /* serial console cursor to home */
  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8004e08:	f000 f82a 	bl	8004e60 <Sensor_DeviceInit>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <MX_BlueNRG_2_Init+0x36>
  {
    BSP_LED_On(LED2);
 8004e16:	2000      	movs	r0, #0
 8004e18:	f003 f81c 	bl	8007e54 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8004e1c:	e7fe      	b.n	8004e1c <MX_BlueNRG_2_Init+0x34>

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

#ifdef STM32L476xx
  /* Check the BootLoader Compliance */
  if (CheckBootLoaderCompliance()) {
 8004e1e:	f7ff fddf 	bl	80049e0 <CheckBootLoaderCompliance>
#endif /* STM32L476xx */

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000008 	.word	0x20000008
 8004e30:	08007c09 	.word	0x08007c09

08004e34 <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8004e38:	f00a fb3e 	bl	800f4b8 <hci_user_evt_proc>
  User_Process();
 8004e3c:	f000 f8b6 	bl	8004fac <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f003 f882 	bl	8007f54 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8004e50:	2000      	movs	r0, #0
 8004e52:	f002 ffed 	bl	8007e30 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f003 f92e 	bl	80080b8 <BSP_COM_Init>
}
 8004e5c:	bf00      	nop
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8004e66:	4a4e      	ldr	r2, [pc, #312]	; (8004fa0 <Sensor_DeviceInit+0x140>)
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e70:	6018      	str	r0, [r3, #0]
 8004e72:	3304      	adds	r3, #4
 8004e74:	8019      	strh	r1, [r3, #0]
 8004e76:	3302      	adds	r3, #2
 8004e78:	0c0a      	lsrs	r2, r1, #16
 8004e7a:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 8004e80:	f00a f81c 	bl	800eebc <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8004e84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e88:	f003 fd06 	bl	8008898 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8004e8c:	1d3a      	adds	r2, r7, #4
 8004e8e:	1dfb      	adds	r3, r7, #7
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fb10 	bl	80064b8 <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8004e98:	1cf9      	adds	r1, r7, #3
 8004e9a:	7dfb      	ldrb	r3, [r7, #23]
 8004e9c:	4a41      	ldr	r2, [pc, #260]	; (8004fa4 <Sensor_DeviceInit+0x144>)
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f008 fb7d 	bl	800d59e <aci_hal_read_config_data>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75bb      	strb	r3, [r7, #22]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8004ea8:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <Sensor_DeviceInit+0x144>)
 8004eaa:	795b      	ldrb	r3, [r3, #5]
 8004eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eb0:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb2:	d000      	beq.n	8004eb6 <Sensor_DeviceInit+0x56>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 8004eb4:	e7fe      	b.n	8004eb4 <Sensor_DeviceInit+0x54>
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	; (8004fa4 <Sensor_DeviceInit+0x144>)
 8004eba:	4619      	mov	r1, r3
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	f008 fae0 	bl	800d482 <aci_hal_write_config_data>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75bb      	strb	r3, [r7, #22]
  else {
    PRINT_DBG("aci_hal_write_config_data --> SUCCESS\r\n");
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f008 fbec 	bl	800d6a6 <aci_hal_set_tx_power_level>
  else {
    PRINT_DBG("aci_hal_set_tx_power_level --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8004ece:	f007 ff66 	bl	800cd9e <aci_gatt_init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS) {
 8004ed6:	7dbb      	ldrb	r3, [r7, #22]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <Sensor_DeviceInit+0x80>
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 8004edc:	7dbb      	ldrb	r3, [r7, #22]
 8004ede:	e05b      	b.n	8004f98 <Sensor_DeviceInit+0x138>
  else {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0x00, 0x07, &service_handle, &dev_name_char_handle,
 8004ee0:	f107 0214 	add.w	r2, r7, #20
 8004ee4:	f107 0310 	add.w	r3, r7, #16
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	f107 0312 	add.w	r3, r7, #18
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	2207      	movs	r2, #7
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f007 fda0 	bl	800ca3c <aci_gap_init>
 8004efc:	4603      	mov	r3, r0
 8004efe:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS) {
 8004f00:	7dbb      	ldrb	r3, [r7, #22]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <Sensor_DeviceInit+0xaa>
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 8004f06:	7dbb      	ldrb	r3, [r7, #22]
 8004f08:	e046      	b.n	8004f98 <Sensor_DeviceInit+0x138>
  else {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8004f0a:	8ab8      	ldrh	r0, [r7, #20]
 8004f0c:	8a79      	ldrh	r1, [r7, #18]
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2307      	movs	r3, #7
 8004f16:	2200      	movs	r2, #0
 8004f18:	f008 f949 	bl	800d1ae <aci_gatt_update_char_value>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if (ret != BLE_STATUS_SUCCESS) {
 8004f20:	7dbb      	ldrb	r3, [r7, #22]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <Sensor_DeviceInit+0xca>
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 8004f26:	7dbb      	ldrb	r3, [r7, #22]
 8004f28:	e036      	b.n	8004f98 <Sensor_DeviceInit+0x138>

  /*
   * Clear security database: this implies that each time the application is executed
   * the full bonding process is executed (with PassKey generation and setting).
   */
  ret = aci_gap_clear_security_db();
 8004f2a:	f007 ff0f 	bl	800cd4c <aci_gap_clear_security_db>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75bb      	strb	r3, [r7, #22]

  /*
   * Set the I/O capability otherwise the Central device (e.g. the smartphone) will
   * propose a PIN that will be accepted without any control.
   */
  if (aci_gap_set_io_capability(IO_CAP_DISPLAY_ONLY)==BLE_STATUS_SUCCESS) {
 8004f32:	2000      	movs	r0, #0
 8004f34:	f007 fbe8 	bl	800c708 <aci_gap_set_io_capability>
  } else {
    PRINT_DBG("Error Setting I/O Capability\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 8004f38:	2300      	movs	r3, #0
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <Sensor_DeviceInit+0x148>)
 8004f3e:	9303      	str	r3, [sp, #12]
 8004f40:	2301      	movs	r3, #1
 8004f42:	9302      	str	r3, [sp, #8]
 8004f44:	2310      	movs	r3, #16
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	2307      	movs	r3, #7
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2101      	movs	r1, #1
 8004f52:	2001      	movs	r0, #1
 8004f54:	f007 fc35 	bl	800c7c2 <aci_gap_set_authentication_requirement>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	75bb      	strb	r3, [r7, #22]
                                               16,
                                               DONOT_USE_FIXED_PIN_FOR_PAIRING,
                                               PERIPHERAL_PASS_KEY,
                                               0x00); /* - 0x00: Public Identity Address
                                                         - 0x01: Random (static) Identity Address */
  if (ret != BLE_STATUS_SUCCESS) {
 8004f5c:	7dbb      	ldrb	r3, [r7, #22]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <Sensor_DeviceInit+0x106>
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 8004f62:	7dbb      	ldrb	r3, [r7, #22]
 8004f64:	e018      	b.n	8004f98 <Sensor_DeviceInit+0x138>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 8004f66:	f001 fbab 	bl	80066c0 <Add_HWServW2ST_Service>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75bb      	strb	r3, [r7, #22]
  if (ret == BLE_STATUS_SUCCESS) {
 8004f6e:	7dbb      	ldrb	r3, [r7, #22]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d000      	beq.n	8004f76 <Sensor_DeviceInit+0x116>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 8004f74:	e7fe      	b.n	8004f74 <Sensor_DeviceInit+0x114>
  }

  ret = Add_SWServW2ST_Service();
 8004f76:	f001 fc7d 	bl	8006874 <Add_SWServW2ST_Service>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS) {
 8004f7e:	7dbb      	ldrb	r3, [r7, #22]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d000      	beq.n	8004f86 <Sensor_DeviceInit+0x126>
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
 8004f84:	e7fe      	b.n	8004f84 <Sensor_DeviceInit+0x124>
  }

#ifdef STM32L476xx
  ret = Add_ConsoleW2ST_Service();
 8004f86:	f001 fd05 	bl	8006994 <Add_ConsoleW2ST_Service>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS) {
 8004f8e:	7dbb      	ldrb	r3, [r7, #22]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d000      	beq.n	8004f96 <Sensor_DeviceInit+0x136>
     PRINT_DBG("BlueNRG2 Console service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding BlueNRG2 Console service: 0x%02x\r\n", ret);
     while(1);
 8004f94:	e7fe      	b.n	8004f94 <Sensor_DeviceInit+0x134>
  }

#endif /* STM32L476xx */
  return BLE_STATUS_SUCCESS;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	08011164 	.word	0x08011164
 8004fa4:	200000d4 	.word	0x200000d4
 8004fa8:	0001e240 	.word	0x0001e240

08004fac <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 8004fb2:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <User_Process+0x124>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8004fbc:	f002 fdb0 	bl	8007b20 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8004fc0:	4b43      	ldr	r3, [pc, #268]	; (80050d0 <User_Process+0x124>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
  }

  if ((connected) && (!pairing))
 8004fc6:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <User_Process+0x128>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00f      	beq.n	8004ff0 <User_Process+0x44>
 8004fd0:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <User_Process+0x12c>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <User_Process+0x44>
  {
    ret = aci_gap_slave_security_req(connection_handle);
 8004fda:	4b40      	ldr	r3, [pc, #256]	; (80050dc <User_Process+0x130>)
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f007 fdd8 	bl	800cb96 <aci_gap_slave_security_req>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
      PRINT_DBG("aci_gap_slave_security_req() failed:0x%02x\r\n", ret);
    }
    else {
      PRINT_DBG("aci_gap_slave_security_req --> SUCCESS\r\n");
    }
    pairing = TRUE;
 8004fea:	4b3b      	ldr	r3, [pc, #236]	; (80050d8 <User_Process+0x12c>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	701a      	strb	r2, [r3, #0]
    HAL_Delay(50);

    BSP_LED_Toggle(LED2);
#endif /* USE_BUTTON */

    if (paired)
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <User_Process+0x134>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d066      	beq.n	80050c8 <User_Process+0x11c>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8004ffa:	f003 fc41 	bl	8008880 <HAL_GetTick>
 8004ffe:	4603      	mov	r3, r0
 8005000:	4618      	mov	r0, r3
 8005002:	f00a fcbb 	bl	800f97c <srand>

      if (send_env) {
 8005006:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <User_Process+0x138>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d025      	beq.n	800505c <User_Process+0xb0>
        /* Update emulated Environmental data */
        Set_Random_Environmental_Values(&data_t, &data_p);
 8005010:	1d3a      	adds	r2, r7, #4
 8005012:	f107 0308 	add.w	r3, r7, #8
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f875 	bl	8005108 <Set_Random_Environmental_Values>
        Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800501e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005022:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80050e8 <User_Process+0x13c>
 8005026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800502a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800502e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005032:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800503a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800503e:	ee17 3a90 	vmov	r3, s15
 8005042:	b21b      	sxth	r3, r3
 8005044:	4619      	mov	r1, r3
 8005046:	ee16 0a90 	vmov	r0, s13
 800504a:	f001 fd75 	bl	8006b38 <Environmental_Update>
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 800504e:	2000      	movs	r0, #0
 8005050:	f002 ff2c 	bl	8007eac <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 8005054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005058:	f003 fc1e 	bl	8008898 <HAL_Delay>
#endif /* (!USE_BUTTON) */
      }

      if ((send_mot) || (send_quat)) {
 800505c:	4b23      	ldr	r3, [pc, #140]	; (80050ec <User_Process+0x140>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <User_Process+0xc4>
 8005066:	4b22      	ldr	r3, [pc, #136]	; (80050f0 <User_Process+0x144>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d02b      	beq.n	80050c8 <User_Process+0x11c>
        /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
        Set_Random_Motion_Values(counter);
 8005070:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <User_Process+0x148>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f000 f8c7 	bl	8005208 <Set_Random_Motion_Values>
        if (send_mot) {
 800507a:	4b1c      	ldr	r3, [pc, #112]	; (80050ec <User_Process+0x140>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <User_Process+0xe2>
          Acc_Update(&x_axes, &g_axes, &m_axes);
 8005084:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <User_Process+0x14c>)
 8005086:	491d      	ldr	r1, [pc, #116]	; (80050fc <User_Process+0x150>)
 8005088:	481d      	ldr	r0, [pc, #116]	; (8005100 <User_Process+0x154>)
 800508a:	f001 fd9b 	bl	8006bc4 <Acc_Update>
        }
        if (send_quat) {
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <User_Process+0x144>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <User_Process+0xf2>
          Quat_Update(&q_axes);
 8005098:	481a      	ldr	r0, [pc, #104]	; (8005104 <User_Process+0x158>)
 800509a:	f001 fe1d 	bl	8006cd8 <Quat_Update>
        }
        counter ++;
 800509e:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <User_Process+0x148>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <User_Process+0x148>)
 80050a6:	6013      	str	r3, [r2, #0]
        if (counter == 40) {
 80050a8:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <User_Process+0x148>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b28      	cmp	r3, #40	; 0x28
 80050ae:	d104      	bne.n	80050ba <User_Process+0x10e>
          counter = 0;
 80050b0:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <User_Process+0x148>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
          Reset_Motion_Values();
 80050b6:	f001 f915 	bl	80062e4 <Reset_Motion_Values>
        }
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f002 fef6 	bl	8007eac <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 80050c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050c4:	f003 fbe8 	bl	8008898 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif /* USE_BUTTON */
}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000009 	.word	0x20000009
 80050d4:	20000362 	.word	0x20000362
 80050d8:	20000363 	.word	0x20000363
 80050dc:	20000360 	.word	0x20000360
 80050e0:	20000364 	.word	0x20000364
 80050e4:	20000230 	.word	0x20000230
 80050e8:	42c80000 	.word	0x42c80000
 80050ec:	20000231 	.word	0x20000231
 80050f0:	20000232 	.word	0x20000232
 80050f4:	200000dc 	.word	0x200000dc
 80050f8:	20000380 	.word	0x20000380
 80050fc:	20000374 	.word	0x20000374
 8005100:	20000368 	.word	0x20000368
 8005104:	2000038c 	.word	0x2000038c

08005108 <Set_Random_Environmental_Values>:
 * @param  float pointer to temperature data
 * @param  float pointer to pressure data
 * @retval None
 */
static void Set_Random_Environmental_Values(float *data_t, float *data_p)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8005114:	f00a fc60 	bl	800f9d8 <rand>
 8005118:	4603      	mov	r3, r0
 800511a:	17da      	asrs	r2, r3, #31
 800511c:	469a      	mov	sl, r3
 800511e:	4693      	mov	fp, r2
 8005120:	4652      	mov	r2, sl
 8005122:	465b      	mov	r3, fp
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f04f 0100 	mov.w	r1, #0
 800512c:	0099      	lsls	r1, r3, #2
 800512e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005132:	0090      	lsls	r0, r2, #2
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	eb12 010a 	adds.w	r1, r2, sl
 800513c:	6039      	str	r1, [r7, #0]
 800513e:	eb43 030b 	adc.w	r3, r3, fp
 8005142:	607b      	str	r3, [r7, #4]
 8005144:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005150:	f7ff fa9a 	bl	8004688 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	f7ff fa0e 	bl	800457c <__aeabi_ul2d>
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	4b26      	ldr	r3, [pc, #152]	; (8005200 <Set_Random_Environmental_Values+0xf8>)
 8005166:	f7ff f889 	bl	800427c <__adddf3>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	f7ff fa39 	bl	80045e8 <__aeabi_d2f>
 8005176:	4602      	mov	r2, r0
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 800517c:	f00a fc2c 	bl	800f9d8 <rand>
 8005180:	4603      	mov	r3, r0
 8005182:	17da      	asrs	r2, r3, #31
 8005184:	4698      	mov	r8, r3
 8005186:	4691      	mov	r9, r2
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0099      	lsls	r1, r3, #2
 8005196:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800519a:	0090      	lsls	r0, r2, #2
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	eb12 0408 	adds.w	r4, r2, r8
 80051a4:	eb43 0509 	adc.w	r5, r3, r9
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	012b      	lsls	r3, r5, #4
 80051b2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80051b6:	0122      	lsls	r2, r4, #4
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	f7ff fa5e 	bl	8004688 <__aeabi_uldivmod>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	f7ff f9d2 	bl	800457c <__aeabi_ul2d>
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <Set_Random_Environmental_Values+0xfc>)
 80051de:	f7ff f84d 	bl	800427c <__adddf3>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7ff f9fd 	bl	80045e8 <__aeabi_d2f>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051fe:	bf00      	nop
 8005200:	403b0000 	.word	0x403b0000
 8005204:	408f4000 	.word	0x408f4000

08005208 <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 8005208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800520c:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8005210:	af00      	add	r7, sp, #0
 8005212:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 8005216:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800521a:	2b13      	cmp	r3, #19
 800521c:	f200 8426 	bhi.w	8005a6c <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005220:	f00a fbda 	bl	800f9d8 <rand>
 8005224:	4603      	mov	r3, r0
 8005226:	17da      	asrs	r2, r3, #31
 8005228:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800522c:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 8005230:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005234:	2200      	movs	r2, #0
 8005236:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800523a:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 800523e:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8005242:	462b      	mov	r3, r5
 8005244:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 8005248:	4652      	mov	r2, sl
 800524a:	fb02 f203 	mul.w	r2, r2, r3
 800524e:	465b      	mov	r3, fp
 8005250:	4621      	mov	r1, r4
 8005252:	fb01 f303 	mul.w	r3, r1, r3
 8005256:	4413      	add	r3, r2
 8005258:	4622      	mov	r2, r4
 800525a:	4651      	mov	r1, sl
 800525c:	fba2 8901 	umull	r8, r9, r2, r1
 8005260:	444b      	add	r3, r9
 8005262:	4699      	mov	r9, r3
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	66b9      	str	r1, [r7, #104]	; 0x68
 800526c:	415b      	adcs	r3, r3
 800526e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005270:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005274:	eb12 0108 	adds.w	r1, r2, r8
 8005278:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 800527c:	eb43 0309 	adc.w	r3, r3, r9
 8005280:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8005284:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8005290:	f7ff f9fa 	bl	8004688 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	f112 010a 	adds.w	r1, r2, #10
 800529c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80052a0:	f143 0300 	adc.w	r3, r3, #0
 80052a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052a8:	4bec      	ldr	r3, [pc, #944]	; (800565c <Set_Random_Motion_Values+0x454>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052b2:	4413      	add	r3, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	4be9      	ldr	r3, [pc, #932]	; (800565c <Set_Random_Motion_Values+0x454>)
 80052b8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80052ba:	f00a fb8d 	bl	800f9d8 <rand>
 80052be:	4603      	mov	r3, r0
 80052c0:	17da      	asrs	r2, r3, #31
 80052c2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80052c6:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 80052ca:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 80052d4:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 80052d8:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 80052dc:	462b      	mov	r3, r5
 80052de:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 80052e2:	4642      	mov	r2, r8
 80052e4:	fb02 f203 	mul.w	r2, r2, r3
 80052e8:	464b      	mov	r3, r9
 80052ea:	4621      	mov	r1, r4
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	4622      	mov	r2, r4
 80052f4:	4641      	mov	r1, r8
 80052f6:	fba2 1201 	umull	r1, r2, r2, r1
 80052fa:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80052fe:	460a      	mov	r2, r1
 8005300:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 8005304:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8005308:	4413      	add	r3, r2
 800530a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 800530e:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 8005312:	4622      	mov	r2, r4
 8005314:	462b      	mov	r3, r5
 8005316:	f04f 0000 	mov.w	r0, #0
 800531a:	f04f 0100 	mov.w	r1, #0
 800531e:	0099      	lsls	r1, r3, #2
 8005320:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005324:	0090      	lsls	r0, r2, #2
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4621      	mov	r1, r4
 800532c:	1851      	adds	r1, r2, r1
 800532e:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8005332:	4629      	mov	r1, r5
 8005334:	eb43 0101 	adc.w	r1, r3, r1
 8005338:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 800533c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8005348:	f7ff f99e 	bl	8004688 <__aeabi_uldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	f06f 0009 	mvn.w	r0, #9
 8005354:	f04f 31ff 	mov.w	r1, #4294967295
 8005358:	1a80      	subs	r0, r0, r2
 800535a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800535e:	eb61 0303 	sbc.w	r3, r1, r3
 8005362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005366:	4bbd      	ldr	r3, [pc, #756]	; (800565c <Set_Random_Motion_Values+0x454>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	461a      	mov	r2, r3
 800536c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005370:	4413      	add	r3, r2
 8005372:	461a      	mov	r2, r3
 8005374:	4bb9      	ldr	r3, [pc, #740]	; (800565c <Set_Random_Motion_Values+0x454>)
 8005376:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8005378:	f00a fb2e 	bl	800f9d8 <rand>
 800537c:	4603      	mov	r3, r0
 800537e:	17da      	asrs	r2, r3, #31
 8005380:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8005384:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 8005388:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8005392:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 8005396:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 800539a:	462b      	mov	r3, r5
 800539c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 80053a0:	4642      	mov	r2, r8
 80053a2:	fb02 f203 	mul.w	r2, r2, r3
 80053a6:	464b      	mov	r3, r9
 80053a8:	4621      	mov	r1, r4
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	4622      	mov	r2, r4
 80053b2:	4641      	mov	r1, r8
 80053b4:	fba2 1201 	umull	r1, r2, r2, r1
 80053b8:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 80053bc:	460a      	mov	r2, r1
 80053be:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 80053c2:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 80053c6:	4413      	add	r3, r2
 80053c8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80053cc:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 80053d0:	4622      	mov	r2, r4
 80053d2:	462b      	mov	r3, r5
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f04f 0100 	mov.w	r1, #0
 80053dc:	00d9      	lsls	r1, r3, #3
 80053de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053e2:	00d0      	lsls	r0, r2, #3
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4621      	mov	r1, r4
 80053ea:	1a51      	subs	r1, r2, r1
 80053ec:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 80053f0:	4629      	mov	r1, r5
 80053f2:	eb63 0301 	sbc.w	r3, r3, r1
 80053f6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80053fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 8005406:	f7ff f93f 	bl	8004688 <__aeabi_uldivmod>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	f112 010a 	adds.w	r1, r2, #10
 8005412:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005416:	f143 0300 	adc.w	r3, r3, #0
 800541a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800541e:	4b8f      	ldr	r3, [pc, #572]	; (800565c <Set_Random_Motion_Values+0x454>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	461a      	mov	r2, r3
 8005424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005428:	4413      	add	r3, r2
 800542a:	461a      	mov	r2, r3
 800542c:	4b8b      	ldr	r3, [pc, #556]	; (800565c <Set_Random_Motion_Values+0x454>)
 800542e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8005430:	f00a fad2 	bl	800f9d8 <rand>
 8005434:	4603      	mov	r3, r0
 8005436:	17da      	asrs	r2, r3, #31
 8005438:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800543c:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8005440:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005444:	2200      	movs	r2, #0
 8005446:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800544a:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 800544e:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8005452:	462b      	mov	r3, r5
 8005454:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 8005458:	4642      	mov	r2, r8
 800545a:	fb02 f203 	mul.w	r2, r2, r3
 800545e:	464b      	mov	r3, r9
 8005460:	4621      	mov	r1, r4
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	4622      	mov	r2, r4
 800546a:	4641      	mov	r1, r8
 800546c:	fba2 1201 	umull	r1, r2, r2, r1
 8005470:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8005474:	460a      	mov	r2, r1
 8005476:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 800547a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800547e:	4413      	add	r3, r2
 8005480:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8005484:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 8005488:	460b      	mov	r3, r1
 800548a:	18db      	adds	r3, r3, r3
 800548c:	663b      	str	r3, [r7, #96]	; 0x60
 800548e:	4613      	mov	r3, r2
 8005490:	eb42 0303 	adc.w	r3, r2, r3
 8005494:	667b      	str	r3, [r7, #100]	; 0x64
 8005496:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800549a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	f7ff f8f1 	bl	8004688 <__aeabi_uldivmod>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80054ae:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80054b2:	f143 0300 	adc.w	r3, r3, #0
 80054b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ba:	4b69      	ldr	r3, [pc, #420]	; (8005660 <Set_Random_Motion_Values+0x458>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054c4:	4413      	add	r3, r2
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b65      	ldr	r3, [pc, #404]	; (8005660 <Set_Random_Motion_Values+0x458>)
 80054ca:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80054cc:	f00a fa84 	bl	800f9d8 <rand>
 80054d0:	4603      	mov	r3, r0
 80054d2:	17da      	asrs	r2, r3, #31
 80054d4:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80054d8:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 80054dc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80054e0:	2200      	movs	r2, #0
 80054e2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80054e6:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 80054ea:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 80054ee:	462b      	mov	r3, r5
 80054f0:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 80054f4:	4642      	mov	r2, r8
 80054f6:	fb02 f203 	mul.w	r2, r2, r3
 80054fa:	464b      	mov	r3, r9
 80054fc:	4621      	mov	r1, r4
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	4622      	mov	r2, r4
 8005506:	4641      	mov	r1, r8
 8005508:	fba2 1201 	umull	r1, r2, r2, r1
 800550c:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8005510:	460a      	mov	r2, r1
 8005512:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 8005516:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800551a:	4413      	add	r3, r2
 800551c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8005520:	f04f 0000 	mov.w	r0, #0
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 800552c:	462b      	mov	r3, r5
 800552e:	0099      	lsls	r1, r3, #2
 8005530:	4623      	mov	r3, r4
 8005532:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8005536:	4623      	mov	r3, r4
 8005538:	0098      	lsls	r0, r3, #2
 800553a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	f7ff f8a1 	bl	8004688 <__aeabi_uldivmod>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800554e:	f04f 31ff 	mov.w	r1, #4294967295
 8005552:	1a80      	subs	r0, r0, r2
 8005554:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8005558:	eb61 0303 	sbc.w	r3, r1, r3
 800555c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005560:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <Set_Random_Motion_Values+0x458>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	461a      	mov	r2, r3
 8005566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800556a:	4413      	add	r3, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4b3c      	ldr	r3, [pc, #240]	; (8005660 <Set_Random_Motion_Values+0x458>)
 8005570:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8005572:	f00a fa31 	bl	800f9d8 <rand>
 8005576:	4603      	mov	r3, r0
 8005578:	17da      	asrs	r2, r3, #31
 800557a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800557e:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8005582:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005586:	2200      	movs	r2, #0
 8005588:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800558c:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8005590:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8005594:	462b      	mov	r3, r5
 8005596:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 800559a:	4642      	mov	r2, r8
 800559c:	fb02 f203 	mul.w	r2, r2, r3
 80055a0:	464b      	mov	r3, r9
 80055a2:	4621      	mov	r1, r4
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	4622      	mov	r2, r4
 80055ac:	4641      	mov	r1, r8
 80055ae:	fba2 1201 	umull	r1, r2, r2, r1
 80055b2:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80055b6:	460a      	mov	r2, r1
 80055b8:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 80055bc:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80055c0:	4413      	add	r3, r2
 80055c2:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80055c6:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 80055ca:	4622      	mov	r2, r4
 80055cc:	462b      	mov	r3, r5
 80055ce:	1891      	adds	r1, r2, r2
 80055d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80055d2:	415b      	adcs	r3, r3
 80055d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055da:	4621      	mov	r1, r4
 80055dc:	1851      	adds	r1, r2, r1
 80055de:	6539      	str	r1, [r7, #80]	; 0x50
 80055e0:	4629      	mov	r1, r5
 80055e2:	eb43 0101 	adc.w	r1, r3, r1
 80055e6:	6579      	str	r1, [r7, #84]	; 0x54
 80055e8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80055ec:	460b      	mov	r3, r1
 80055ee:	18db      	adds	r3, r3, r3
 80055f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f2:	4613      	mov	r3, r2
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055fa:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80055fe:	4618      	mov	r0, r3
 8005600:	4621      	mov	r1, r4
 8005602:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	f7ff f83d 	bl	8004688 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8005616:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800561a:	f143 0300 	adc.w	r3, r3, #0
 800561e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <Set_Random_Motion_Values+0x458>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	461a      	mov	r2, r3
 8005628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800562c:	4413      	add	r3, r2
 800562e:	461a      	mov	r2, r3
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <Set_Random_Motion_Values+0x458>)
 8005632:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005634:	f00a f9d0 	bl	800f9d8 <rand>
 8005638:	4603      	mov	r3, r0
 800563a:	17da      	asrs	r2, r3, #31
 800563c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8005640:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8005644:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005648:	2200      	movs	r2, #0
 800564a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 800564e:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 8005652:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8005656:	462b      	mov	r3, r5
 8005658:	e004      	b.n	8005664 <Set_Random_Motion_Values+0x45c>
 800565a:	bf00      	nop
 800565c:	20000368 	.word	0x20000368
 8005660:	20000374 	.word	0x20000374
 8005664:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 8005668:	4642      	mov	r2, r8
 800566a:	fb02 f203 	mul.w	r2, r2, r3
 800566e:	464b      	mov	r3, r9
 8005670:	4621      	mov	r1, r4
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	4622      	mov	r2, r4
 800567a:	4641      	mov	r1, r8
 800567c:	fba2 1201 	umull	r1, r2, r2, r1
 8005680:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8005684:	460a      	mov	r2, r1
 8005686:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 800568a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 800568e:	4413      	add	r3, r2
 8005690:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8005694:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8005698:	4622      	mov	r2, r4
 800569a:	462b      	mov	r3, r5
 800569c:	1891      	adds	r1, r2, r2
 800569e:	6439      	str	r1, [r7, #64]	; 0x40
 80056a0:	415b      	adcs	r3, r3
 80056a2:	647b      	str	r3, [r7, #68]	; 0x44
 80056a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056a8:	4621      	mov	r1, r4
 80056aa:	1851      	adds	r1, r2, r1
 80056ac:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80056b0:	4629      	mov	r1, r5
 80056b2:	eb43 0101 	adc.w	r1, r3, r1
 80056b6:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 80056ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 80056c6:	f7fe ffdf 	bl	8004688 <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	1cd1      	adds	r1, r2, #3
 80056d0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80056d4:	f143 0300 	adc.w	r3, r3, #0
 80056d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056dc:	4be1      	ldr	r3, [pc, #900]	; (8005a64 <Set_Random_Motion_Values+0x85c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056e6:	4413      	add	r3, r2
 80056e8:	461a      	mov	r2, r3
 80056ea:	4bde      	ldr	r3, [pc, #888]	; (8005a64 <Set_Random_Motion_Values+0x85c>)
 80056ec:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80056ee:	f00a f973 	bl	800f9d8 <rand>
 80056f2:	4603      	mov	r3, r0
 80056f4:	17da      	asrs	r2, r3, #31
 80056f6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80056fa:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 80056fe:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005702:	2200      	movs	r2, #0
 8005704:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8005708:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 800570c:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8005710:	462b      	mov	r3, r5
 8005712:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 8005716:	4642      	mov	r2, r8
 8005718:	fb02 f203 	mul.w	r2, r2, r3
 800571c:	464b      	mov	r3, r9
 800571e:	4621      	mov	r1, r4
 8005720:	fb01 f303 	mul.w	r3, r1, r3
 8005724:	4413      	add	r3, r2
 8005726:	4622      	mov	r2, r4
 8005728:	4641      	mov	r1, r8
 800572a:	fba2 1201 	umull	r1, r2, r2, r1
 800572e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8005732:	460a      	mov	r2, r1
 8005734:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 8005738:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 800573c:	4413      	add	r3, r2
 800573e:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 800574e:	462b      	mov	r3, r5
 8005750:	0099      	lsls	r1, r3, #2
 8005752:	4623      	mov	r3, r4
 8005754:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8005758:	4623      	mov	r3, r4
 800575a:	0098      	lsls	r0, r3, #2
 800575c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	f7fe ff90 	bl	8004688 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	f06f 0002 	mvn.w	r0, #2
 8005770:	f04f 31ff 	mov.w	r1, #4294967295
 8005774:	1a80      	subs	r0, r0, r2
 8005776:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800577a:	eb61 0303 	sbc.w	r3, r1, r3
 800577e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005782:	4bb8      	ldr	r3, [pc, #736]	; (8005a64 <Set_Random_Motion_Values+0x85c>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800578c:	4413      	add	r3, r2
 800578e:	461a      	mov	r2, r3
 8005790:	4bb4      	ldr	r3, [pc, #720]	; (8005a64 <Set_Random_Motion_Values+0x85c>)
 8005792:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8005794:	f00a f920 	bl	800f9d8 <rand>
 8005798:	4603      	mov	r3, r0
 800579a:	17da      	asrs	r2, r3, #31
 800579c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80057a0:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 80057a4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80057a8:	2200      	movs	r2, #0
 80057aa:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80057ae:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 80057b2:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80057b6:	462b      	mov	r3, r5
 80057b8:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 80057bc:	4642      	mov	r2, r8
 80057be:	fb02 f203 	mul.w	r2, r2, r3
 80057c2:	464b      	mov	r3, r9
 80057c4:	4621      	mov	r1, r4
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	4622      	mov	r2, r4
 80057ce:	4641      	mov	r1, r8
 80057d0:	fba2 1201 	umull	r1, r2, r2, r1
 80057d4:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 80057d8:	460a      	mov	r2, r1
 80057da:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 80057de:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80057e2:	4413      	add	r3, r2
 80057e4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80057e8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80057ec:	4622      	mov	r2, r4
 80057ee:	462b      	mov	r3, r5
 80057f0:	f04f 0000 	mov.w	r0, #0
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	0099      	lsls	r1, r3, #2
 80057fa:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80057fe:	0090      	lsls	r0, r2, #2
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4621      	mov	r1, r4
 8005806:	1851      	adds	r1, r2, r1
 8005808:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 800580c:	4629      	mov	r1, r5
 800580e:	eb43 0101 	adc.w	r1, r3, r1
 8005812:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8005816:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800581a:	f04f 0300 	mov.w	r3, #0
 800581e:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8005822:	f7fe ff31 	bl	8004688 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	1cd1      	adds	r1, r2, #3
 800582c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005830:	f143 0300 	adc.w	r3, r3, #0
 8005834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005838:	4b8a      	ldr	r3, [pc, #552]	; (8005a64 <Set_Random_Motion_Values+0x85c>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	461a      	mov	r2, r3
 800583e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005842:	4413      	add	r3, r2
 8005844:	461a      	mov	r2, r3
 8005846:	4b87      	ldr	r3, [pc, #540]	; (8005a64 <Set_Random_Motion_Values+0x85c>)
 8005848:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800584a:	f00a f8c5 	bl	800f9d8 <rand>
 800584e:	4603      	mov	r3, r0
 8005850:	17da      	asrs	r2, r3, #31
 8005852:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8005856:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 800585a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8005864:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 8005868:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 800586c:	462b      	mov	r3, r5
 800586e:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 8005872:	4642      	mov	r2, r8
 8005874:	fb02 f203 	mul.w	r2, r2, r3
 8005878:	464b      	mov	r3, r9
 800587a:	4621      	mov	r1, r4
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	4622      	mov	r2, r4
 8005884:	4641      	mov	r1, r8
 8005886:	fba2 1201 	umull	r1, r2, r2, r1
 800588a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 800588e:	460a      	mov	r2, r1
 8005890:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 8005894:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8005898:	4413      	add	r3, r2
 800589a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 800589e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 80058a2:	4622      	mov	r2, r4
 80058a4:	462b      	mov	r3, r5
 80058a6:	1891      	adds	r1, r2, r2
 80058a8:	63b9      	str	r1, [r7, #56]	; 0x38
 80058aa:	415b      	adcs	r3, r3
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058b2:	4621      	mov	r1, r4
 80058b4:	1851      	adds	r1, r2, r1
 80058b6:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80058ba:	4629      	mov	r1, r5
 80058bc:	eb43 0101 	adc.w	r1, r3, r1
 80058c0:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 80058c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 80058d0:	f7fe feda 	bl	8004688 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80058dc:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80058e0:	f143 0300 	adc.w	r3, r3, #0
 80058e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e8:	4b5f      	ldr	r3, [pc, #380]	; (8005a68 <Set_Random_Motion_Values+0x860>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b5c      	ldr	r3, [pc, #368]	; (8005a68 <Set_Random_Motion_Values+0x860>)
 80058f8:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80058fa:	f00a f86d 	bl	800f9d8 <rand>
 80058fe:	4603      	mov	r3, r0
 8005900:	17da      	asrs	r2, r3, #31
 8005902:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8005906:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 800590a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800590e:	2200      	movs	r2, #0
 8005910:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8005914:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8005918:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 800591c:	462b      	mov	r3, r5
 800591e:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 8005922:	4642      	mov	r2, r8
 8005924:	fb02 f203 	mul.w	r2, r2, r3
 8005928:	464b      	mov	r3, r9
 800592a:	4621      	mov	r1, r4
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	4413      	add	r3, r2
 8005932:	4622      	mov	r2, r4
 8005934:	4641      	mov	r1, r8
 8005936:	fba2 1201 	umull	r1, r2, r2, r1
 800593a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 800593e:	460a      	mov	r2, r1
 8005940:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 8005944:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8005948:	4413      	add	r3, r2
 800594a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 800594e:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	f04f 0000 	mov.w	r0, #0
 800595a:	f04f 0100 	mov.w	r1, #0
 800595e:	0099      	lsls	r1, r3, #2
 8005960:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005964:	0090      	lsls	r0, r2, #2
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4621      	mov	r1, r4
 800596c:	1851      	adds	r1, r2, r1
 800596e:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8005972:	4629      	mov	r1, r5
 8005974:	eb43 0101 	adc.w	r1, r3, r1
 8005978:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 800597c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8005988:	f7fe fe7e 	bl	8004688 <__aeabi_uldivmod>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8005994:	67b9      	str	r1, [r7, #120]	; 0x78
 8005996:	f143 0300 	adc.w	r3, r3, #0
 800599a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800599c:	4b32      	ldr	r3, [pc, #200]	; (8005a68 <Set_Random_Motion_Values+0x860>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	461a      	mov	r2, r3
 80059a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a4:	4413      	add	r3, r2
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b2f      	ldr	r3, [pc, #188]	; (8005a68 <Set_Random_Motion_Values+0x860>)
 80059aa:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80059ac:	f00a f814 	bl	800f9d8 <rand>
 80059b0:	4603      	mov	r3, r0
 80059b2:	17da      	asrs	r2, r3, #31
 80059b4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80059b8:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80059bc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80059c0:	2200      	movs	r2, #0
 80059c2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80059c6:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 80059ca:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80059ce:	462b      	mov	r3, r5
 80059d0:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 80059d4:	4642      	mov	r2, r8
 80059d6:	fb02 f203 	mul.w	r2, r2, r3
 80059da:	464b      	mov	r3, r9
 80059dc:	4621      	mov	r1, r4
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	4622      	mov	r2, r4
 80059e6:	4641      	mov	r1, r8
 80059e8:	fba2 1201 	umull	r1, r2, r2, r1
 80059ec:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 80059f0:	460a      	mov	r2, r1
 80059f2:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 80059f6:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80059fa:	4413      	add	r3, r2
 80059fc:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8005a00:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8005a04:	4622      	mov	r2, r4
 8005a06:	462b      	mov	r3, r5
 8005a08:	f04f 0000 	mov.w	r0, #0
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	00d9      	lsls	r1, r3, #3
 8005a12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a16:	00d0      	lsls	r0, r2, #3
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	1a51      	subs	r1, r2, r1
 8005a20:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8005a24:	4629      	mov	r1, r5
 8005a26:	eb63 0301 	sbc.w	r3, r3, r1
 8005a2a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8005a2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8005a3a:	f7fe fe25 	bl	8004688 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8005a46:	6739      	str	r1, [r7, #112]	; 0x70
 8005a48:	f143 0300 	adc.w	r3, r3, #0
 8005a4c:	677b      	str	r3, [r7, #116]	; 0x74
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <Set_Random_Motion_Values+0x860>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4b03      	ldr	r3, [pc, #12]	; (8005a68 <Set_Random_Motion_Values+0x860>)
 8005a5c:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8005a5e:	f000 bc37 	b.w	80062d0 <Set_Random_Motion_Values+0x10c8>
 8005a62:	bf00      	nop
 8005a64:	20000380 	.word	0x20000380
 8005a68:	2000038c 	.word	0x2000038c
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005a6c:	f009 ffb4 	bl	800f9d8 <rand>
 8005a70:	4603      	mov	r3, r0
 8005a72:	17da      	asrs	r2, r3, #31
 8005a74:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8005a78:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8005a7c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005a80:	2200      	movs	r2, #0
 8005a82:	469a      	mov	sl, r3
 8005a84:	4693      	mov	fp, r2
 8005a86:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	fb0a f203 	mul.w	r2, sl, r3
 8005a90:	4603      	mov	r3, r0
 8005a92:	fb03 f30b 	mul.w	r3, r3, fp
 8005a96:	4413      	add	r3, r2
 8005a98:	4602      	mov	r2, r0
 8005a9a:	fba2 450a 	umull	r4, r5, r2, sl
 8005a9e:	442b      	add	r3, r5
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
 8005aae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ab2:	1911      	adds	r1, r2, r4
 8005ab4:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8005ab8:	416b      	adcs	r3, r5
 8005aba:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8005abe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8005aca:	f7fe fddd 	bl	8004688 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	f06f 0009 	mvn.w	r0, #9
 8005ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8005ada:	1a80      	subs	r0, r0, r2
 8005adc:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8005ae0:	eb61 0303 	sbc.w	r3, r1, r3
 8005ae4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005ae8:	4beb      	ldr	r3, [pc, #940]	; (8005e98 <Set_Random_Motion_Values+0xc90>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005af2:	4413      	add	r3, r2
 8005af4:	461a      	mov	r2, r3
 8005af6:	4be8      	ldr	r3, [pc, #928]	; (8005e98 <Set_Random_Motion_Values+0xc90>)
 8005af8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8005afa:	f009 ff6d 	bl	800f9d8 <rand>
 8005afe:	4603      	mov	r3, r0
 8005b00:	17da      	asrs	r2, r3, #31
 8005b02:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005b06:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8005b0a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005b14:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8005b18:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 8005b22:	4642      	mov	r2, r8
 8005b24:	fb02 f203 	mul.w	r2, r2, r3
 8005b28:	464b      	mov	r3, r9
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	fb01 f303 	mul.w	r3, r1, r3
 8005b30:	4413      	add	r3, r2
 8005b32:	4622      	mov	r2, r4
 8005b34:	4641      	mov	r1, r8
 8005b36:	fba2 1201 	umull	r1, r2, r2, r1
 8005b3a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8005b3e:	460a      	mov	r2, r1
 8005b40:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8005b44:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8005b48:	4413      	add	r3, r2
 8005b4a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8005b4e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8005b52:	4622      	mov	r2, r4
 8005b54:	462b      	mov	r3, r5
 8005b56:	f04f 0000 	mov.w	r0, #0
 8005b5a:	f04f 0100 	mov.w	r1, #0
 8005b5e:	0099      	lsls	r1, r3, #2
 8005b60:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005b64:	0090      	lsls	r0, r2, #2
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	1851      	adds	r1, r2, r1
 8005b6e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8005b72:	4629      	mov	r1, r5
 8005b74:	eb43 0101 	adc.w	r1, r3, r1
 8005b78:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8005b7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8005b88:	f7fe fd7e 	bl	8004688 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	f112 010a 	adds.w	r1, r2, #10
 8005b94:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8005b98:	f143 0300 	adc.w	r3, r3, #0
 8005b9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ba0:	4bbd      	ldr	r3, [pc, #756]	; (8005e98 <Set_Random_Motion_Values+0xc90>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005baa:	4413      	add	r3, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	4bba      	ldr	r3, [pc, #744]	; (8005e98 <Set_Random_Motion_Values+0xc90>)
 8005bb0:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8005bb2:	f009 ff11 	bl	800f9d8 <rand>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	17da      	asrs	r2, r3, #31
 8005bba:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8005bbe:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8005bc2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8005bcc:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8005bd0:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8005bd4:	462b      	mov	r3, r5
 8005bd6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8005bda:	4642      	mov	r2, r8
 8005bdc:	fb02 f203 	mul.w	r2, r2, r3
 8005be0:	464b      	mov	r3, r9
 8005be2:	4621      	mov	r1, r4
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	4622      	mov	r2, r4
 8005bec:	4641      	mov	r1, r8
 8005bee:	fba2 1201 	umull	r1, r2, r2, r1
 8005bf2:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8005bf6:	460a      	mov	r2, r1
 8005bf8:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 8005bfc:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8005c00:	4413      	add	r3, r2
 8005c02:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8005c06:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	f04f 0000 	mov.w	r0, #0
 8005c12:	f04f 0100 	mov.w	r1, #0
 8005c16:	00d9      	lsls	r1, r3, #3
 8005c18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c1c:	00d0      	lsls	r0, r2, #3
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4621      	mov	r1, r4
 8005c24:	1a51      	subs	r1, r2, r1
 8005c26:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	eb63 0301 	sbc.w	r3, r3, r1
 8005c30:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005c34:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8005c40:	f7fe fd22 	bl	8004688 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	f06f 0009 	mvn.w	r0, #9
 8005c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c50:	1a80      	subs	r0, r0, r2
 8005c52:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8005c56:	eb61 0303 	sbc.w	r3, r1, r3
 8005c5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c5e:	4b8e      	ldr	r3, [pc, #568]	; (8005e98 <Set_Random_Motion_Values+0xc90>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c68:	4413      	add	r3, r2
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b8a      	ldr	r3, [pc, #552]	; (8005e98 <Set_Random_Motion_Values+0xc90>)
 8005c6e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8005c70:	f009 feb2 	bl	800f9d8 <rand>
 8005c74:	4603      	mov	r3, r0
 8005c76:	17da      	asrs	r2, r3, #31
 8005c78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005c7c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8005c80:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005c8a:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8005c8e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8005c92:	462b      	mov	r3, r5
 8005c94:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8005c98:	4642      	mov	r2, r8
 8005c9a:	fb02 f203 	mul.w	r2, r2, r3
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	4622      	mov	r2, r4
 8005caa:	4641      	mov	r1, r8
 8005cac:	fba2 1201 	umull	r1, r2, r2, r1
 8005cb0:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8005cb4:	460a      	mov	r2, r1
 8005cb6:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 8005cba:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8005cc4:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 8005cc8:	460b      	mov	r3, r1
 8005cca:	18db      	adds	r3, r3, r3
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cce:	4613      	mov	r3, r2
 8005cd0:	eb42 0303 	adc.w	r3, r2, r3
 8005cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005cda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	f7fe fcd1 	bl	8004688 <__aeabi_uldivmod>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8005cee:	f04f 31ff 	mov.w	r1, #4294967295
 8005cf2:	1a80      	subs	r0, r0, r2
 8005cf4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8005cf8:	eb61 0303 	sbc.w	r3, r1, r3
 8005cfc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d00:	4b66      	ldr	r3, [pc, #408]	; (8005e9c <Set_Random_Motion_Values+0xc94>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d0a:	4413      	add	r3, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b63      	ldr	r3, [pc, #396]	; (8005e9c <Set_Random_Motion_Values+0xc94>)
 8005d10:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8005d12:	f009 fe61 	bl	800f9d8 <rand>
 8005d16:	4603      	mov	r3, r0
 8005d18:	17da      	asrs	r2, r3, #31
 8005d1a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005d1e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005d22:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005d2c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8005d30:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8005d34:	462b      	mov	r3, r5
 8005d36:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	fb02 f203 	mul.w	r2, r2, r3
 8005d40:	464b      	mov	r3, r9
 8005d42:	4621      	mov	r1, r4
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	4413      	add	r3, r2
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4641      	mov	r1, r8
 8005d4e:	fba2 1201 	umull	r1, r2, r2, r1
 8005d52:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8005d56:	460a      	mov	r2, r1
 8005d58:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 8005d5c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005d60:	4413      	add	r3, r2
 8005d62:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005d66:	f04f 0000 	mov.w	r0, #0
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8005d72:	462b      	mov	r3, r5
 8005d74:	0099      	lsls	r1, r3, #2
 8005d76:	4623      	mov	r3, r4
 8005d78:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	0098      	lsls	r0, r3, #2
 8005d80:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	f7fe fc7e 	bl	8004688 <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8005d94:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8005d98:	f143 0300 	adc.w	r3, r3, #0
 8005d9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005da0:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <Set_Random_Motion_Values+0xc94>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005daa:	4413      	add	r3, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <Set_Random_Motion_Values+0xc94>)
 8005db0:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8005db2:	f009 fe11 	bl	800f9d8 <rand>
 8005db6:	4603      	mov	r3, r0
 8005db8:	17da      	asrs	r2, r3, #31
 8005dba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005dbe:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8005dc2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005dcc:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8005dd0:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8005dd4:	462b      	mov	r3, r5
 8005dd6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005dda:	4642      	mov	r2, r8
 8005ddc:	fb02 f203 	mul.w	r2, r2, r3
 8005de0:	464b      	mov	r3, r9
 8005de2:	4621      	mov	r1, r4
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	4622      	mov	r2, r4
 8005dec:	4641      	mov	r1, r8
 8005dee:	fba2 1201 	umull	r1, r2, r2, r1
 8005df2:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8005df6:	460a      	mov	r2, r1
 8005df8:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8005dfc:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8005e00:	4413      	add	r3, r2
 8005e02:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8005e06:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8005e0a:	4622      	mov	r2, r4
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	1891      	adds	r1, r2, r2
 8005e10:	6239      	str	r1, [r7, #32]
 8005e12:	415b      	adcs	r3, r3
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
 8005e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	1851      	adds	r1, r2, r1
 8005e1e:	61b9      	str	r1, [r7, #24]
 8005e20:	4629      	mov	r1, r5
 8005e22:	eb43 0101 	adc.w	r1, r3, r1
 8005e26:	61f9      	str	r1, [r7, #28]
 8005e28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	18db      	adds	r3, r3, r3
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	4613      	mov	r3, r2
 8005e34:	eb42 0303 	adc.w	r3, r2, r3
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	4621      	mov	r1, r4
 8005e42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005e46:	f04f 0300 	mov.w	r3, #0
 8005e4a:	f7fe fc1d 	bl	8004688 <__aeabi_uldivmod>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8005e56:	f04f 31ff 	mov.w	r1, #4294967295
 8005e5a:	1a80      	subs	r0, r0, r2
 8005e5c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8005e60:	eb61 0303 	sbc.w	r3, r1, r3
 8005e64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <Set_Random_Motion_Values+0xc94>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e72:	4413      	add	r3, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <Set_Random_Motion_Values+0xc94>)
 8005e78:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8005e7a:	f009 fdad 	bl	800f9d8 <rand>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	17da      	asrs	r2, r3, #31
 8005e82:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8005e86:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005e8a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005e94:	e004      	b.n	8005ea0 <Set_Random_Motion_Values+0xc98>
 8005e96:	bf00      	nop
 8005e98:	20000368 	.word	0x20000368
 8005e9c:	20000374 	.word	0x20000374
 8005ea0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8005ea4:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8005ea8:	462b      	mov	r3, r5
 8005eaa:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 8005eae:	4642      	mov	r2, r8
 8005eb0:	fb02 f203 	mul.w	r2, r2, r3
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	fba2 1201 	umull	r1, r2, r2, r1
 8005ec6:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8005eca:	460a      	mov	r2, r1
 8005ecc:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 8005ed0:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8005eda:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8005ede:	4622      	mov	r2, r4
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	00d9      	lsls	r1, r3, #3
 8005eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef0:	00d0      	lsls	r0, r2, #3
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4621      	mov	r1, r4
 8005ef8:	1a51      	subs	r1, r2, r1
 8005efa:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8005efe:	4629      	mov	r1, r5
 8005f00:	eb63 0301 	sbc.w	r3, r3, r1
 8005f04:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005f08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005f14:	f7fe fbb8 	bl	8004688 <__aeabi_uldivmod>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	f06f 0002 	mvn.w	r0, #2
 8005f20:	f04f 31ff 	mov.w	r1, #4294967295
 8005f24:	1a80      	subs	r0, r0, r2
 8005f26:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8005f2a:	eb61 0303 	sbc.w	r3, r1, r3
 8005f2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005f32:	4bea      	ldr	r3, [pc, #936]	; (80062dc <Set_Random_Motion_Values+0x10d4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f3c:	4413      	add	r3, r2
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4be6      	ldr	r3, [pc, #920]	; (80062dc <Set_Random_Motion_Values+0x10d4>)
 8005f42:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8005f44:	f009 fd48 	bl	800f9d8 <rand>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	17da      	asrs	r2, r3, #31
 8005f4c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005f50:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8005f54:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8005f5e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005f62:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8005f66:	462b      	mov	r3, r5
 8005f68:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	fb02 f203 	mul.w	r2, r2, r3
 8005f72:	464b      	mov	r3, r9
 8005f74:	4621      	mov	r1, r4
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4641      	mov	r1, r8
 8005f80:	fba2 1201 	umull	r1, r2, r2, r1
 8005f84:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8005f88:	460a      	mov	r2, r1
 8005f8a:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 8005f8e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8005f92:	4413      	add	r3, r2
 8005f94:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005f98:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f04f 0000 	mov.w	r0, #0
 8005fa4:	f04f 0100 	mov.w	r1, #0
 8005fa8:	00d9      	lsls	r1, r3, #3
 8005faa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fae:	00d0      	lsls	r0, r2, #3
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	1851      	adds	r1, r2, r1
 8005fb8:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	eb43 0101 	adc.w	r1, r3, r1
 8005fc2:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8005fc6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005fca:	f04f 0300 	mov.w	r3, #0
 8005fce:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005fd2:	f7fe fb59 	bl	8004688 <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	1cd1      	adds	r1, r2, #3
 8005fdc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005fe0:	f143 0300 	adc.w	r3, r3, #0
 8005fe4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005fe8:	4bbc      	ldr	r3, [pc, #752]	; (80062dc <Set_Random_Motion_Values+0x10d4>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ff2:	4413      	add	r3, r2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4bb9      	ldr	r3, [pc, #740]	; (80062dc <Set_Random_Motion_Values+0x10d4>)
 8005ff8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005ffa:	f009 fced 	bl	800f9d8 <rand>
 8005ffe:	4603      	mov	r3, r0
 8006000:	17da      	asrs	r2, r3, #31
 8006002:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006006:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800600a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006014:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8006018:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800601c:	462b      	mov	r3, r5
 800601e:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8006022:	4642      	mov	r2, r8
 8006024:	fb02 f203 	mul.w	r2, r2, r3
 8006028:	464b      	mov	r3, r9
 800602a:	4621      	mov	r1, r4
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	4622      	mov	r2, r4
 8006034:	4641      	mov	r1, r8
 8006036:	fba2 1201 	umull	r1, r2, r2, r1
 800603a:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 800603e:	460a      	mov	r2, r1
 8006040:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 8006044:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8006048:	4413      	add	r3, r2
 800604a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800604e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8006052:	4622      	mov	r2, r4
 8006054:	462b      	mov	r3, r5
 8006056:	1891      	adds	r1, r2, r2
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	415b      	adcs	r3, r3
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006062:	4621      	mov	r1, r4
 8006064:	1851      	adds	r1, r2, r1
 8006066:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800606a:	4629      	mov	r1, r5
 800606c:	eb43 0101 	adc.w	r1, r3, r1
 8006070:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8006074:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8006080:	f7fe fb02 	bl	8004688 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	f06f 0002 	mvn.w	r0, #2
 800608c:	f04f 31ff 	mov.w	r1, #4294967295
 8006090:	1a80      	subs	r0, r0, r2
 8006092:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8006096:	eb61 0303 	sbc.w	r3, r1, r3
 800609a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800609e:	4b8f      	ldr	r3, [pc, #572]	; (80062dc <Set_Random_Motion_Values+0x10d4>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a8:	4413      	add	r3, r2
 80060aa:	461a      	mov	r2, r3
 80060ac:	4b8b      	ldr	r3, [pc, #556]	; (80062dc <Set_Random_Motion_Values+0x10d4>)
 80060ae:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80060b0:	f009 fc92 	bl	800f9d8 <rand>
 80060b4:	4603      	mov	r3, r0
 80060b6:	17da      	asrs	r2, r3, #31
 80060b8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80060bc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80060c0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80060ca:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80060ce:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 80060d2:	462b      	mov	r3, r5
 80060d4:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 80060d8:	4642      	mov	r2, r8
 80060da:	fb02 f203 	mul.w	r2, r2, r3
 80060de:	464b      	mov	r3, r9
 80060e0:	4621      	mov	r1, r4
 80060e2:	fb01 f303 	mul.w	r3, r1, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	4622      	mov	r2, r4
 80060ea:	4641      	mov	r1, r8
 80060ec:	fba2 1201 	umull	r1, r2, r2, r1
 80060f0:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80060f4:	460a      	mov	r2, r1
 80060f6:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 80060fa:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 80060fe:	4413      	add	r3, r2
 8006100:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8006104:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8006108:	4622      	mov	r2, r4
 800610a:	462b      	mov	r3, r5
 800610c:	f04f 0000 	mov.w	r0, #0
 8006110:	f04f 0100 	mov.w	r1, #0
 8006114:	00d9      	lsls	r1, r3, #3
 8006116:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800611a:	00d0      	lsls	r0, r2, #3
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4621      	mov	r1, r4
 8006122:	1a51      	subs	r1, r2, r1
 8006124:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8006128:	4629      	mov	r1, r5
 800612a:	eb63 0301 	sbc.w	r3, r3, r1
 800612e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8006132:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800613e:	f7fe faa3 	bl	8004688 <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 800614a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800614e:	f143 0300 	adc.w	r3, r3, #0
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006156:	4b62      	ldr	r3, [pc, #392]	; (80062e0 <Set_Random_Motion_Values+0x10d8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006160:	4413      	add	r3, r2
 8006162:	461a      	mov	r2, r3
 8006164:	4b5e      	ldr	r3, [pc, #376]	; (80062e0 <Set_Random_Motion_Values+0x10d8>)
 8006166:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8006168:	f009 fc36 	bl	800f9d8 <rand>
 800616c:	4603      	mov	r3, r0
 800616e:	17da      	asrs	r2, r3, #31
 8006170:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006174:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8006178:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800617c:	2200      	movs	r2, #0
 800617e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006182:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8006186:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800618a:	462b      	mov	r3, r5
 800618c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8006190:	4642      	mov	r2, r8
 8006192:	fb02 f203 	mul.w	r2, r2, r3
 8006196:	464b      	mov	r3, r9
 8006198:	4621      	mov	r1, r4
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	4622      	mov	r2, r4
 80061a2:	4641      	mov	r1, r8
 80061a4:	fba2 1201 	umull	r1, r2, r2, r1
 80061a8:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 80061ac:	460a      	mov	r2, r1
 80061ae:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 80061b2:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80061b6:	4413      	add	r3, r2
 80061b8:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80061bc:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 80061c0:	4622      	mov	r2, r4
 80061c2:	462b      	mov	r3, r5
 80061c4:	1891      	adds	r1, r2, r2
 80061c6:	6039      	str	r1, [r7, #0]
 80061c8:	415b      	adcs	r3, r3
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d0:	4621      	mov	r1, r4
 80061d2:	1851      	adds	r1, r2, r1
 80061d4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80061d8:	4629      	mov	r1, r5
 80061da:	eb43 0101 	adc.w	r1, r3, r1
 80061de:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80061e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80061ee:	f7fe fa4b 	bl	8004688 <__aeabi_uldivmod>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 80061fa:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80061fe:	f143 0300 	adc.w	r3, r3, #0
 8006202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006206:	4b36      	ldr	r3, [pc, #216]	; (80062e0 <Set_Random_Motion_Values+0x10d8>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	461a      	mov	r2, r3
 800620c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	461a      	mov	r2, r3
 8006214:	4b32      	ldr	r3, [pc, #200]	; (80062e0 <Set_Random_Motion_Values+0x10d8>)
 8006216:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8006218:	f009 fbde 	bl	800f9d8 <rand>
 800621c:	4603      	mov	r3, r0
 800621e:	17da      	asrs	r2, r3, #31
 8006220:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006224:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8006228:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800622c:	2200      	movs	r2, #0
 800622e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006232:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8006236:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800623a:	462b      	mov	r3, r5
 800623c:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006240:	4642      	mov	r2, r8
 8006242:	fb02 f203 	mul.w	r2, r2, r3
 8006246:	464b      	mov	r3, r9
 8006248:	4621      	mov	r1, r4
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	4413      	add	r3, r2
 8006250:	4622      	mov	r2, r4
 8006252:	4641      	mov	r1, r8
 8006254:	fba2 1201 	umull	r1, r2, r2, r1
 8006258:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 800625c:	460a      	mov	r2, r1
 800625e:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8006262:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006266:	4413      	add	r3, r2
 8006268:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800626c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8006270:	4622      	mov	r2, r4
 8006272:	462b      	mov	r3, r5
 8006274:	f04f 0000 	mov.w	r0, #0
 8006278:	f04f 0100 	mov.w	r1, #0
 800627c:	0099      	lsls	r1, r3, #2
 800627e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006282:	0090      	lsls	r0, r2, #2
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4621      	mov	r1, r4
 800628a:	1851      	adds	r1, r2, r1
 800628c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006290:	4629      	mov	r1, r5
 8006292:	eb43 0101 	adc.w	r1, r3, r1
 8006296:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800629a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80062a6:	f7fe f9ef 	bl	8004688 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	f112 010a 	adds.w	r1, r2, #10
 80062b2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80062b6:	f143 0300 	adc.w	r3, r3, #0
 80062ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062be:	4b08      	ldr	r3, [pc, #32]	; (80062e0 <Set_Random_Motion_Values+0x10d8>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062c8:	4413      	add	r3, r2
 80062ca:	461a      	mov	r2, r3
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <Set_Random_Motion_Values+0x10d8>)
 80062ce:	609a      	str	r2, [r3, #8]
}
 80062d0:	bf00      	nop
 80062d2:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062dc:	20000380 	.word	0x20000380
 80062e0:	2000038c 	.word	0x2000038c

080062e4 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80062e8:	4b6e      	ldr	r3, [pc, #440]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	4b6e      	ldr	r3, [pc, #440]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 80062ee:	fb83 1302 	smull	r1, r3, r3, r2
 80062f2:	11d9      	asrs	r1, r3, #7
 80062f4:	17d3      	asrs	r3, r2, #31
 80062f6:	1acb      	subs	r3, r1, r3
 80062f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80062fc:	fb01 f303 	mul.w	r3, r1, r3
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d103      	bne.n	800630e <Reset_Motion_Values+0x2a>
 8006306:	4b67      	ldr	r3, [pc, #412]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	425b      	negs	r3, r3
 800630c:	e000      	b.n	8006310 <Reset_Motion_Values+0x2c>
 800630e:	230a      	movs	r3, #10
 8006310:	4a64      	ldr	r2, [pc, #400]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006312:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8006314:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 800631a:	fb83 1302 	smull	r1, r3, r3, r2
 800631e:	11d9      	asrs	r1, r3, #7
 8006320:	17d3      	asrs	r3, r2, #31
 8006322:	1acb      	subs	r3, r1, r3
 8006324:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d103      	bne.n	800633a <Reset_Motion_Values+0x56>
 8006332:	4b5c      	ldr	r3, [pc, #368]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	425b      	negs	r3, r3
 8006338:	e001      	b.n	800633e <Reset_Motion_Values+0x5a>
 800633a:	f06f 0309 	mvn.w	r3, #9
 800633e:	4a59      	ldr	r2, [pc, #356]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006340:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8006342:	4b58      	ldr	r3, [pc, #352]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	4b58      	ldr	r3, [pc, #352]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 8006348:	fb83 1302 	smull	r1, r3, r3, r2
 800634c:	11d9      	asrs	r1, r3, #7
 800634e:	17d3      	asrs	r3, r2, #31
 8006350:	1acb      	subs	r3, r1, r3
 8006352:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006356:	fb01 f303 	mul.w	r3, r1, r3
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <Reset_Motion_Values+0x84>
 8006360:	4b50      	ldr	r3, [pc, #320]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	425b      	negs	r3, r3
 8006366:	e000      	b.n	800636a <Reset_Motion_Values+0x86>
 8006368:	230a      	movs	r3, #10
 800636a:	4a4e      	ldr	r2, [pc, #312]	; (80064a4 <Reset_Motion_Values+0x1c0>)
 800636c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800636e:	4b4f      	ldr	r3, [pc, #316]	; (80064ac <Reset_Motion_Values+0x1c8>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b4d      	ldr	r3, [pc, #308]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 8006374:	fb83 1302 	smull	r1, r3, r3, r2
 8006378:	11d9      	asrs	r1, r3, #7
 800637a:	17d3      	asrs	r3, r2, #31
 800637c:	1acb      	subs	r3, r1, r3
 800637e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d103      	bne.n	8006394 <Reset_Motion_Values+0xb0>
 800638c:	4b47      	ldr	r3, [pc, #284]	; (80064ac <Reset_Motion_Values+0x1c8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	425b      	negs	r3, r3
 8006392:	e000      	b.n	8006396 <Reset_Motion_Values+0xb2>
 8006394:	2364      	movs	r3, #100	; 0x64
 8006396:	4a45      	ldr	r2, [pc, #276]	; (80064ac <Reset_Motion_Values+0x1c8>)
 8006398:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800639a:	4b44      	ldr	r3, [pc, #272]	; (80064ac <Reset_Motion_Values+0x1c8>)
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	4b42      	ldr	r3, [pc, #264]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 80063a0:	fb83 1302 	smull	r1, r3, r3, r2
 80063a4:	11d9      	asrs	r1, r3, #7
 80063a6:	17d3      	asrs	r3, r2, #31
 80063a8:	1acb      	subs	r3, r1, r3
 80063aa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d103      	bne.n	80063c0 <Reset_Motion_Values+0xdc>
 80063b8:	4b3c      	ldr	r3, [pc, #240]	; (80064ac <Reset_Motion_Values+0x1c8>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	425b      	negs	r3, r3
 80063be:	e001      	b.n	80063c4 <Reset_Motion_Values+0xe0>
 80063c0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80063c4:	4a39      	ldr	r2, [pc, #228]	; (80064ac <Reset_Motion_Values+0x1c8>)
 80063c6:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80063c8:	4b38      	ldr	r3, [pc, #224]	; (80064ac <Reset_Motion_Values+0x1c8>)
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 80063ce:	fb83 1302 	smull	r1, r3, r3, r2
 80063d2:	11d9      	asrs	r1, r3, #7
 80063d4:	17d3      	asrs	r3, r2, #31
 80063d6:	1acb      	subs	r3, r1, r3
 80063d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <Reset_Motion_Values+0x10a>
 80063e6:	4b31      	ldr	r3, [pc, #196]	; (80064ac <Reset_Motion_Values+0x1c8>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	425b      	negs	r3, r3
 80063ec:	e000      	b.n	80063f0 <Reset_Motion_Values+0x10c>
 80063ee:	2364      	movs	r3, #100	; 0x64
 80063f0:	4a2e      	ldr	r2, [pc, #184]	; (80064ac <Reset_Motion_Values+0x1c8>)
 80063f2:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80063f4:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <Reset_Motion_Values+0x1c8>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b2b      	ldr	r3, [pc, #172]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 80063fa:	fb83 1302 	smull	r1, r3, r3, r2
 80063fe:	11d9      	asrs	r1, r3, #7
 8006400:	17d3      	asrs	r3, r2, #31
 8006402:	1acb      	subs	r3, r1, r3
 8006404:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d103      	bne.n	800641a <Reset_Motion_Values+0x136>
 8006412:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <Reset_Motion_Values+0x1cc>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	425b      	negs	r3, r3
 8006418:	e000      	b.n	800641c <Reset_Motion_Values+0x138>
 800641a:	2303      	movs	r3, #3
 800641c:	4a24      	ldr	r2, [pc, #144]	; (80064b0 <Reset_Motion_Values+0x1cc>)
 800641e:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8006420:	4b22      	ldr	r3, [pc, #136]	; (80064ac <Reset_Motion_Values+0x1c8>)
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 8006426:	fb83 1302 	smull	r1, r3, r3, r2
 800642a:	11d9      	asrs	r1, r3, #7
 800642c:	17d3      	asrs	r3, r2, #31
 800642e:	1acb      	subs	r3, r1, r3
 8006430:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <Reset_Motion_Values+0x162>
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <Reset_Motion_Values+0x1cc>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	425b      	negs	r3, r3
 8006444:	e001      	b.n	800644a <Reset_Motion_Values+0x166>
 8006446:	f06f 0302 	mvn.w	r3, #2
 800644a:	4a19      	ldr	r2, [pc, #100]	; (80064b0 <Reset_Motion_Values+0x1cc>)
 800644c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800644e:	4b17      	ldr	r3, [pc, #92]	; (80064ac <Reset_Motion_Values+0x1c8>)
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <Reset_Motion_Values+0x1c4>)
 8006454:	fb83 1302 	smull	r1, r3, r3, r2
 8006458:	11d9      	asrs	r1, r3, #7
 800645a:	17d3      	asrs	r3, r2, #31
 800645c:	1acb      	subs	r3, r1, r3
 800645e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d103      	bne.n	8006474 <Reset_Motion_Values+0x190>
 800646c:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <Reset_Motion_Values+0x1cc>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	425b      	negs	r3, r3
 8006472:	e000      	b.n	8006476 <Reset_Motion_Values+0x192>
 8006474:	2303      	movs	r3, #3
 8006476:	4a0e      	ldr	r2, [pc, #56]	; (80064b0 <Reset_Motion_Values+0x1cc>)
 8006478:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800647a:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <Reset_Motion_Values+0x1d0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	425b      	negs	r3, r3
 8006480:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <Reset_Motion_Values+0x1d0>)
 8006482:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <Reset_Motion_Values+0x1d0>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	425b      	negs	r3, r3
 800648a:	4a0a      	ldr	r2, [pc, #40]	; (80064b4 <Reset_Motion_Values+0x1d0>)
 800648c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <Reset_Motion_Values+0x1d0>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	425b      	negs	r3, r3
 8006494:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <Reset_Motion_Values+0x1d0>)
 8006496:	6093      	str	r3, [r2, #8]
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000368 	.word	0x20000368
 80064a8:	10624dd3 	.word	0x10624dd3
 80064ac:	20000374 	.word	0x20000374
 80064b0:	20000380 	.word	0x20000380
 80064b4:	2000038c 	.word	0x2000038c

080064b8 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	af02      	add	r7, sp, #8
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 80064c2:	f107 0410 	add.w	r4, r7, #16
 80064c6:	f107 0215 	add.w	r2, r7, #21
 80064ca:	f107 0112 	add.w	r1, r7, #18
 80064ce:	f107 0016 	add.w	r0, r7, #22
 80064d2:	f107 030e 	add.w	r3, r7, #14
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	4623      	mov	r3, r4
 80064da:	f008 fd18 	bl	800ef0e <hci_read_local_version_information>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d126      	bne.n	8006536 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80064e8:	8a7b      	ldrh	r3, [r7, #18]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80064f4:	8a7b      	ldrh	r3, [r7, #18]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b21a      	sxth	r2, r3
 8006504:	89fb      	ldrh	r3, [r7, #14]
 8006506:	091b      	lsrs	r3, r3, #4
 8006508:	b29b      	uxth	r3, r3
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	b21b      	sxth	r3, r3
 800650e:	b2db      	uxtb	r3, r3
 8006510:	b21b      	sxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b21b      	sxth	r3, r3
 8006516:	b29a      	uxth	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b21a      	sxth	r2, r3
 8006522:	89fb      	ldrh	r3, [r7, #14]
 8006524:	b21b      	sxth	r3, r3
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	b21b      	sxth	r3, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	b21b      	sxth	r3, r3
 8006530:	b29a      	uxth	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
}
 8006538:	4618      	mov	r0, r3
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	bd90      	pop	{r4, r7, pc}

08006540 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	4603      	mov	r3, r0
 8006548:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800654a:	4b04      	ldr	r3, [pc, #16]	; (800655c <BSP_PB_Callback+0x1c>)
 800654c:	2201      	movs	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	200000da 	.word	0x200000da

08006560 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	4604      	mov	r4, r0
 8006568:	4608      	mov	r0, r1
 800656a:	4611      	mov	r1, r2
 800656c:	461a      	mov	r2, r3
 800656e:	4623      	mov	r3, r4
 8006570:	71fb      	strb	r3, [r7, #7]
 8006572:	4603      	mov	r3, r0
 8006574:	80bb      	strh	r3, [r7, #4]
 8006576:	460b      	mov	r3, r1
 8006578:	71bb      	strb	r3, [r7, #6]
 800657a:	4613      	mov	r3, r2
 800657c:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <hci_le_connection_complete_event+0x44>)
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
#if (!SECURE_PAIRING)
  pairing = TRUE;
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <hci_le_connection_complete_event+0x48>)
 8006586:	2201      	movs	r2, #1
 8006588:	701a      	strb	r2, [r3, #0]
  paired = TRUE;
 800658a:	4b08      	ldr	r3, [pc, #32]	; (80065ac <hci_le_connection_complete_event+0x4c>)
 800658c:	2201      	movs	r2, #1
 800658e:	701a      	strb	r2, [r3, #0]
#endif
  connection_handle = Connection_Handle;
 8006590:	4a07      	ldr	r2, [pc, #28]	; (80065b0 <hci_le_connection_complete_event+0x50>)
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	8013      	strh	r3, [r2, #0]

  PRINT_DBG("Connected (%02x %02x %02x %02x %02x %02x)\r\n", Peer_Address[5], Peer_Address[4], Peer_Address[3],
                                                             Peer_Address[2], Peer_Address[1], Peer_Address[0]);

  BSP_LED_Off(LED2); //activity led
 8006596:	2000      	movs	r0, #0
 8006598:	f001 fc72 	bl	8007e80 <BSP_LED_Off>
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd90      	pop	{r4, r7, pc}
 80065a4:	20000362 	.word	0x20000362
 80065a8:	20000363 	.word	0x20000363
 80065ac:	20000364 	.word	0x20000364
 80065b0:	20000360 	.word	0x20000360

080065b4 <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	71fb      	strb	r3, [r7, #7]
 80065be:	460b      	mov	r3, r1
 80065c0:	80bb      	strh	r3, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <hci_disconnection_complete_event+0x40>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
  pairing = FALSE;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <hci_disconnection_complete_event+0x44>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
  paired = FALSE;
 80065d2:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <hci_disconnection_complete_event+0x48>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]

  /* Make the device connectable again */
  set_connectable = TRUE;
 80065d8:	4b09      	ldr	r3, [pc, #36]	; (8006600 <hci_disconnection_complete_event+0x4c>)
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 80065de:	4b09      	ldr	r3, [pc, #36]	; (8006604 <hci_disconnection_complete_event+0x50>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected (0x%02x)\r\n", Reason);

  BSP_LED_On(LED2); //activity led
 80065e4:	2000      	movs	r0, #0
 80065e6:	f001 fc35 	bl	8007e54 <BSP_LED_On>
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000362 	.word	0x20000362
 80065f8:	20000363 	.word	0x20000363
 80065fc:	20000364 	.word	0x20000364
 8006600:	20000009 	.word	0x20000009
 8006604:	20000360 	.word	0x20000360

08006608 <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	4603      	mov	r3, r0
 8006610:	80fb      	strh	r3, [r7, #6]
 8006612:	460b      	mov	r3, r1
 8006614:	80bb      	strh	r3, [r7, #4]
 8006616:	4613      	mov	r3, r2
 8006618:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 800661a:	88bb      	ldrh	r3, [r7, #4]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fc0b 	bl	8006e38 <Read_Request_CB>
}
 8006622:	bf00      	nop
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attribute_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800662a:	b590      	push	{r4, r7, lr}
 800662c:	b085      	sub	sp, #20
 800662e:	af02      	add	r7, sp, #8
 8006630:	4604      	mov	r4, r0
 8006632:	4608      	mov	r0, r1
 8006634:	4611      	mov	r1, r2
 8006636:	461a      	mov	r2, r3
 8006638:	4623      	mov	r3, r4
 800663a:	80fb      	strh	r3, [r7, #6]
 800663c:	4603      	mov	r3, r0
 800663e:	80bb      	strh	r3, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	807b      	strh	r3, [r7, #2]
 8006644:	4613      	mov	r3, r2
 8006646:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_Request_CB(Connection_Handle, Attribute_Handle, Offset, Attr_Data_Length, Attr_Data);
 8006648:	883b      	ldrh	r3, [r7, #0]
 800664a:	b2dc      	uxtb	r4, r3
 800664c:	887a      	ldrh	r2, [r7, #2]
 800664e:	88b9      	ldrh	r1, [r7, #4]
 8006650:	88f8      	ldrh	r0, [r7, #6]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	4623      	mov	r3, r4
 8006658:	f000 fcc2 	bl	8006fe0 <Attribute_Modified_Request_CB>
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	bd90      	pop	{r4, r7, pc}

08006664 <aci_gap_pass_key_req_event>:
 *         aci_gap_pass_key_resp command.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pass_key_req_event(uint16_t Connection_Handle)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	80fb      	strh	r3, [r7, #6]
  uint8_t ret;

  ret = aci_gap_pass_key_resp(connection_handle, PERIPHERAL_PASS_KEY);
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <aci_gap_pass_key_req_event+0x24>)
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	4905      	ldr	r1, [pc, #20]	; (800668c <aci_gap_pass_key_req_event+0x28>)
 8006676:	4618      	mov	r0, r3
 8006678:	f006 f970 	bl	800c95c <aci_gap_pass_key_resp>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINT_DBG("aci_gap_pass_key_resp failed:0x%02x\r\n", ret);
  } else {
    PRINT_DBG("aci_gap_pass_key_resp OK\r\n");
  }
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000360 	.word	0x20000360
 800668c:	0001e240 	.word	0x0001e240

08006690 <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pairing_complete_event(uint16_t connection_handle, uint8_t status, uint8_t reason)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	80fb      	strh	r3, [r7, #6]
 800669a:	460b      	mov	r3, r1
 800669c:	717b      	strb	r3, [r7, #5]
 800669e:	4613      	mov	r3, r2
 80066a0:	713b      	strb	r3, [r7, #4]
  if (status == 0x02) { /* Pairing Failed */
 80066a2:	797b      	ldrb	r3, [r7, #5]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d002      	beq.n	80066ae <aci_gap_pairing_complete_event+0x1e>
    PRINT_DBG("aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason);
  }
  else {
    paired = TRUE;
 80066a8:	4b04      	ldr	r3, [pc, #16]	; (80066bc <aci_gap_pairing_complete_event+0x2c>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	701a      	strb	r2, [r3, #0]
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
  }
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000364 	.word	0x20000364

080066c0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b08d      	sub	sp, #52	; 0x34
 80066c4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 80066c6:	2305      	movs	r3, #5
 80066c8:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	461a      	mov	r2, r3
 80066ce:	0052      	lsls	r2, r2, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80066d8:	231b      	movs	r3, #27
 80066da:	713b      	strb	r3, [r7, #4]
 80066dc:	23c5      	movs	r3, #197	; 0xc5
 80066de:	717b      	strb	r3, [r7, #5]
 80066e0:	23d5      	movs	r3, #213	; 0xd5
 80066e2:	71bb      	strb	r3, [r7, #6]
 80066e4:	23a5      	movs	r3, #165	; 0xa5
 80066e6:	71fb      	strb	r3, [r7, #7]
 80066e8:	2302      	movs	r3, #2
 80066ea:	723b      	strb	r3, [r7, #8]
 80066ec:	2300      	movs	r3, #0
 80066ee:	727b      	strb	r3, [r7, #9]
 80066f0:	23b4      	movs	r3, #180	; 0xb4
 80066f2:	72bb      	strb	r3, [r7, #10]
 80066f4:	239a      	movs	r3, #154	; 0x9a
 80066f6:	72fb      	strb	r3, [r7, #11]
 80066f8:	23e1      	movs	r3, #225	; 0xe1
 80066fa:	733b      	strb	r3, [r7, #12]
 80066fc:	2311      	movs	r3, #17
 80066fe:	737b      	strb	r3, [r7, #13]
 8006700:	2301      	movs	r3, #1
 8006702:	73bb      	strb	r3, [r7, #14]
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
 8006708:	2300      	movs	r3, #0
 800670a:	743b      	strb	r3, [r7, #16]
 800670c:	2300      	movs	r3, #0
 800670e:	747b      	strb	r3, [r7, #17]
 8006710:	2300      	movs	r3, #0
 8006712:	74bb      	strb	r3, [r7, #18]
 8006714:	2300      	movs	r3, #0
 8006716:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8006718:	4b51      	ldr	r3, [pc, #324]	; (8006860 <Add_HWServW2ST_Service+0x1a0>)
 800671a:	461c      	mov	r4, r3
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	4a4f      	ldr	r2, [pc, #316]	; (8006864 <Add_HWServW2ST_Service+0x1a4>)
 8006728:	9200      	str	r2, [sp, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	494c      	ldr	r1, [pc, #304]	; (8006860 <Add_HWServW2ST_Service+0x1a0>)
 800672e:	2002      	movs	r0, #2
 8006730:	f006 fb5f 	bl	800cdf2 <aci_gatt_add_service>
 8006734:	4603      	mov	r3, r0
 8006736:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8006738:	7d7b      	ldrb	r3, [r7, #21]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 800673e:	2347      	movs	r3, #71	; 0x47
 8006740:	e08a      	b.n	8006858 <Add_HWServW2ST_Service+0x198>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8006742:	231b      	movs	r3, #27
 8006744:	713b      	strb	r3, [r7, #4]
 8006746:	23c5      	movs	r3, #197	; 0xc5
 8006748:	717b      	strb	r3, [r7, #5]
 800674a:	23d5      	movs	r3, #213	; 0xd5
 800674c:	71bb      	strb	r3, [r7, #6]
 800674e:	23a5      	movs	r3, #165	; 0xa5
 8006750:	71fb      	strb	r3, [r7, #7]
 8006752:	2302      	movs	r3, #2
 8006754:	723b      	strb	r3, [r7, #8]
 8006756:	2300      	movs	r3, #0
 8006758:	727b      	strb	r3, [r7, #9]
 800675a:	2336      	movs	r3, #54	; 0x36
 800675c:	72bb      	strb	r3, [r7, #10]
 800675e:	23ac      	movs	r3, #172	; 0xac
 8006760:	72fb      	strb	r3, [r7, #11]
 8006762:	23e1      	movs	r3, #225	; 0xe1
 8006764:	733b      	strb	r3, [r7, #12]
 8006766:	2311      	movs	r3, #17
 8006768:	737b      	strb	r3, [r7, #13]
 800676a:	2301      	movs	r3, #1
 800676c:	73bb      	strb	r3, [r7, #14]
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
 8006772:	2300      	movs	r3, #0
 8006774:	743b      	strb	r3, [r7, #16]
 8006776:	2300      	movs	r3, #0
 8006778:	747b      	strb	r3, [r7, #17]
 800677a:	2300      	movs	r3, #0
 800677c:	74bb      	strb	r3, [r7, #18]
 800677e:	2300      	movs	r3, #0
 8006780:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8006782:	7cbb      	ldrb	r3, [r7, #18]
 8006784:	f043 0304 	orr.w	r3, r3, #4
 8006788:	b2db      	uxtb	r3, r3
 800678a:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 800678c:	7cbb      	ldrb	r3, [r7, #18]
 800678e:	f043 0310 	orr.w	r3, r3, #16
 8006792:	b2db      	uxtb	r3, r3
 8006794:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006796:	4b34      	ldr	r3, [pc, #208]	; (8006868 <Add_HWServW2ST_Service+0x1a8>)
 8006798:	461c      	mov	r4, r3
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800679e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80067a2:	4b30      	ldr	r3, [pc, #192]	; (8006864 <Add_HWServW2ST_Service+0x1a4>)
 80067a4:	8818      	ldrh	r0, [r3, #0]
 80067a6:	4b31      	ldr	r3, [pc, #196]	; (800686c <Add_HWServW2ST_Service+0x1ac>)
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	2300      	movs	r3, #0
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	2310      	movs	r3, #16
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	2304      	movs	r3, #4
 80067b4:	9302      	str	r3, [sp, #8]
 80067b6:	2300      	movs	r3, #0
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	2312      	movs	r3, #18
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	2308      	movs	r3, #8
 80067c0:	4a29      	ldr	r2, [pc, #164]	; (8006868 <Add_HWServW2ST_Service+0x1a8>)
 80067c2:	2102      	movs	r1, #2
 80067c4:	f006 fbeb 	bl	800cf9e <aci_gatt_add_char>
 80067c8:	4603      	mov	r3, r0
 80067ca:	757b      	strb	r3, [r7, #21]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80067cc:	7d7b      	ldrb	r3, [r7, #21]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <Add_HWServW2ST_Service+0x116>
    return BLE_STATUS_ERROR;
 80067d2:	2347      	movs	r3, #71	; 0x47
 80067d4:	e040      	b.n	8006858 <Add_HWServW2ST_Service+0x198>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80067d6:	231b      	movs	r3, #27
 80067d8:	713b      	strb	r3, [r7, #4]
 80067da:	23c5      	movs	r3, #197	; 0xc5
 80067dc:	717b      	strb	r3, [r7, #5]
 80067de:	23d5      	movs	r3, #213	; 0xd5
 80067e0:	71bb      	strb	r3, [r7, #6]
 80067e2:	23a5      	movs	r3, #165	; 0xa5
 80067e4:	71fb      	strb	r3, [r7, #7]
 80067e6:	2302      	movs	r3, #2
 80067e8:	723b      	strb	r3, [r7, #8]
 80067ea:	2300      	movs	r3, #0
 80067ec:	727b      	strb	r3, [r7, #9]
 80067ee:	2336      	movs	r3, #54	; 0x36
 80067f0:	72bb      	strb	r3, [r7, #10]
 80067f2:	23ac      	movs	r3, #172	; 0xac
 80067f4:	72fb      	strb	r3, [r7, #11]
 80067f6:	23e1      	movs	r3, #225	; 0xe1
 80067f8:	733b      	strb	r3, [r7, #12]
 80067fa:	2311      	movs	r3, #17
 80067fc:	737b      	strb	r3, [r7, #13]
 80067fe:	2301      	movs	r3, #1
 8006800:	73bb      	strb	r3, [r7, #14]
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	2300      	movs	r3, #0
 8006808:	743b      	strb	r3, [r7, #16]
 800680a:	2300      	movs	r3, #0
 800680c:	747b      	strb	r3, [r7, #17]
 800680e:	23e0      	movs	r3, #224	; 0xe0
 8006810:	74bb      	strb	r3, [r7, #18]
 8006812:	2300      	movs	r3, #0
 8006814:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <Add_HWServW2ST_Service+0x1a8>)
 8006818:	461c      	mov	r4, r3
 800681a:	1d3b      	adds	r3, r7, #4
 800681c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800681e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8006822:	4b10      	ldr	r3, [pc, #64]	; (8006864 <Add_HWServW2ST_Service+0x1a4>)
 8006824:	8818      	ldrh	r0, [r3, #0]
 8006826:	4b12      	ldr	r3, [pc, #72]	; (8006870 <Add_HWServW2ST_Service+0x1b0>)
 8006828:	9305      	str	r3, [sp, #20]
 800682a:	2300      	movs	r3, #0
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	2310      	movs	r3, #16
 8006830:	9303      	str	r3, [sp, #12]
 8006832:	2304      	movs	r3, #4
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	2300      	movs	r3, #0
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	2310      	movs	r3, #16
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	2314      	movs	r3, #20
 8006840:	4a09      	ldr	r2, [pc, #36]	; (8006868 <Add_HWServW2ST_Service+0x1a8>)
 8006842:	2102      	movs	r1, #2
 8006844:	f006 fbab 	bl	800cf9e <aci_gatt_add_char>
 8006848:	4603      	mov	r3, r0
 800684a:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800684c:	7d7b      	ldrb	r3, [r7, #21]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <Add_HWServW2ST_Service+0x196>
    return BLE_STATUS_ERROR;
 8006852:	2347      	movs	r3, #71	; 0x47
 8006854:	e000      	b.n	8006858 <Add_HWServW2ST_Service+0x198>

  return BLE_STATUS_SUCCESS;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd90      	pop	{r4, r7, pc}
 8006860:	20000210 	.word	0x20000210
 8006864:	200000e0 	.word	0x200000e0
 8006868:	20000220 	.word	0x20000220
 800686c:	200000e2 	.word	0x200000e2
 8006870:	200000e4 	.word	0x200000e4

08006874 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8006874:	b590      	push	{r4, r7, lr}
 8006876:	b08d      	sub	sp, #52	; 0x34
 8006878:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	461a      	mov	r2, r3
 8006882:	0052      	lsls	r2, r2, #1
 8006884:	4413      	add	r3, r2
 8006886:	b2db      	uxtb	r3, r3
 8006888:	3301      	adds	r3, #1
 800688a:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 800688c:	231b      	movs	r3, #27
 800688e:	713b      	strb	r3, [r7, #4]
 8006890:	23c5      	movs	r3, #197	; 0xc5
 8006892:	717b      	strb	r3, [r7, #5]
 8006894:	23d5      	movs	r3, #213	; 0xd5
 8006896:	71bb      	strb	r3, [r7, #6]
 8006898:	23a5      	movs	r3, #165	; 0xa5
 800689a:	71fb      	strb	r3, [r7, #7]
 800689c:	2302      	movs	r3, #2
 800689e:	723b      	strb	r3, [r7, #8]
 80068a0:	2300      	movs	r3, #0
 80068a2:	727b      	strb	r3, [r7, #9]
 80068a4:	23b4      	movs	r3, #180	; 0xb4
 80068a6:	72bb      	strb	r3, [r7, #10]
 80068a8:	239a      	movs	r3, #154	; 0x9a
 80068aa:	72fb      	strb	r3, [r7, #11]
 80068ac:	23e1      	movs	r3, #225	; 0xe1
 80068ae:	733b      	strb	r3, [r7, #12]
 80068b0:	2311      	movs	r3, #17
 80068b2:	737b      	strb	r3, [r7, #13]
 80068b4:	2302      	movs	r3, #2
 80068b6:	73bb      	strb	r3, [r7, #14]
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
 80068bc:	2300      	movs	r3, #0
 80068be:	743b      	strb	r3, [r7, #16]
 80068c0:	2300      	movs	r3, #0
 80068c2:	747b      	strb	r3, [r7, #17]
 80068c4:	2300      	movs	r3, #0
 80068c6:	74bb      	strb	r3, [r7, #18]
 80068c8:	2300      	movs	r3, #0
 80068ca:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <Add_SWServW2ST_Service+0x110>)
 80068ce:	461c      	mov	r4, r3
 80068d0:	1d3b      	adds	r3, r7, #4
 80068d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80068d8:	7dbb      	ldrb	r3, [r7, #22]
 80068da:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <Add_SWServW2ST_Service+0x114>)
 80068dc:	9200      	str	r2, [sp, #0]
 80068de:	2201      	movs	r2, #1
 80068e0:	4928      	ldr	r1, [pc, #160]	; (8006984 <Add_SWServW2ST_Service+0x110>)
 80068e2:	2002      	movs	r0, #2
 80068e4:	f006 fa85 	bl	800cdf2 <aci_gatt_add_service>
 80068e8:	4603      	mov	r3, r0
 80068ea:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 80068ec:	7d7b      	ldrb	r3, [r7, #21]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d13f      	bne.n	8006972 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 80068f2:	231b      	movs	r3, #27
 80068f4:	713b      	strb	r3, [r7, #4]
 80068f6:	23c5      	movs	r3, #197	; 0xc5
 80068f8:	717b      	strb	r3, [r7, #5]
 80068fa:	23d5      	movs	r3, #213	; 0xd5
 80068fc:	71bb      	strb	r3, [r7, #6]
 80068fe:	23a5      	movs	r3, #165	; 0xa5
 8006900:	71fb      	strb	r3, [r7, #7]
 8006902:	2302      	movs	r3, #2
 8006904:	723b      	strb	r3, [r7, #8]
 8006906:	2300      	movs	r3, #0
 8006908:	727b      	strb	r3, [r7, #9]
 800690a:	2336      	movs	r3, #54	; 0x36
 800690c:	72bb      	strb	r3, [r7, #10]
 800690e:	23ac      	movs	r3, #172	; 0xac
 8006910:	72fb      	strb	r3, [r7, #11]
 8006912:	23e1      	movs	r3, #225	; 0xe1
 8006914:	733b      	strb	r3, [r7, #12]
 8006916:	2311      	movs	r3, #17
 8006918:	737b      	strb	r3, [r7, #13]
 800691a:	2301      	movs	r3, #1
 800691c:	73bb      	strb	r3, [r7, #14]
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
 8006922:	2300      	movs	r3, #0
 8006924:	743b      	strb	r3, [r7, #16]
 8006926:	2301      	movs	r3, #1
 8006928:	747b      	strb	r3, [r7, #17]
 800692a:	2300      	movs	r3, #0
 800692c:	74bb      	strb	r3, [r7, #18]
 800692e:	2300      	movs	r3, #0
 8006930:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006932:	4b16      	ldr	r3, [pc, #88]	; (800698c <Add_SWServW2ST_Service+0x118>)
 8006934:	461c      	mov	r4, r3
 8006936:	1d3b      	adds	r3, r7, #4
 8006938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800693a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 800693e:	4b12      	ldr	r3, [pc, #72]	; (8006988 <Add_SWServW2ST_Service+0x114>)
 8006940:	8818      	ldrh	r0, [r3, #0]
 8006942:	4b13      	ldr	r3, [pc, #76]	; (8006990 <Add_SWServW2ST_Service+0x11c>)
 8006944:	9305      	str	r3, [sp, #20]
 8006946:	2300      	movs	r3, #0
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	2310      	movs	r3, #16
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	2304      	movs	r3, #4
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	2300      	movs	r3, #0
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	2310      	movs	r3, #16
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	2308      	movs	r3, #8
 800695c:	4a0b      	ldr	r2, [pc, #44]	; (800698c <Add_SWServW2ST_Service+0x118>)
 800695e:	2102      	movs	r1, #2
 8006960:	f006 fb1d 	bl	800cf9e <aci_gatt_add_char>
 8006964:	4603      	mov	r3, r0
 8006966:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006968:	7d7b      	ldrb	r3, [r7, #21]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 800696e:	2300      	movs	r3, #0
 8006970:	e003      	b.n	800697a <Add_SWServW2ST_Service+0x106>
    goto fail;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8006976:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8006978:	2347      	movs	r3, #71	; 0x47
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd90      	pop	{r4, r7, pc}
 8006982:	bf00      	nop
 8006984:	20000210 	.word	0x20000210
 8006988:	200000e6 	.word	0x200000e6
 800698c:	20000220 	.word	0x20000220
 8006990:	200000e8 	.word	0x200000e8

08006994 <Add_ConsoleW2ST_Service>:
 * @brief  Add the Console service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConsoleW2ST_Service(void)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b08d      	sub	sp, #52	; 0x34
 8006998:	af06      	add	r7, sp, #24
  /* num of characteristics of this service */
  uint8_t char_number = 2;
 800699a:	2302      	movs	r3, #2
 800699c:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	461a      	mov	r2, r3
 80069a2:	0052      	lsls	r2, r2, #1
 80069a4:	4413      	add	r3, r2
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	3301      	adds	r3, #1
 80069aa:	75bb      	strb	r3, [r7, #22]
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONSOLE_SERVICE_UUID(uuid);
 80069ac:	231b      	movs	r3, #27
 80069ae:	713b      	strb	r3, [r7, #4]
 80069b0:	23c5      	movs	r3, #197	; 0xc5
 80069b2:	717b      	strb	r3, [r7, #5]
 80069b4:	23d5      	movs	r3, #213	; 0xd5
 80069b6:	71bb      	strb	r3, [r7, #6]
 80069b8:	23a5      	movs	r3, #165	; 0xa5
 80069ba:	71fb      	strb	r3, [r7, #7]
 80069bc:	2302      	movs	r3, #2
 80069be:	723b      	strb	r3, [r7, #8]
 80069c0:	2300      	movs	r3, #0
 80069c2:	727b      	strb	r3, [r7, #9]
 80069c4:	23b4      	movs	r3, #180	; 0xb4
 80069c6:	72bb      	strb	r3, [r7, #10]
 80069c8:	239a      	movs	r3, #154	; 0x9a
 80069ca:	72fb      	strb	r3, [r7, #11]
 80069cc:	23e1      	movs	r3, #225	; 0xe1
 80069ce:	733b      	strb	r3, [r7, #12]
 80069d0:	2311      	movs	r3, #17
 80069d2:	737b      	strb	r3, [r7, #13]
 80069d4:	230e      	movs	r3, #14
 80069d6:	73bb      	strb	r3, [r7, #14]
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	2300      	movs	r3, #0
 80069de:	743b      	strb	r3, [r7, #16]
 80069e0:	2300      	movs	r3, #0
 80069e2:	747b      	strb	r3, [r7, #17]
 80069e4:	2300      	movs	r3, #0
 80069e6:	74bb      	strb	r3, [r7, #18]
 80069e8:	2300      	movs	r3, #0
 80069ea:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80069ec:	4b4d      	ldr	r3, [pc, #308]	; (8006b24 <Add_ConsoleW2ST_Service+0x190>)
 80069ee:	461c      	mov	r4, r3
 80069f0:	1d3b      	adds	r3, r7, #4
 80069f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE,
 80069f8:	7dbb      	ldrb	r3, [r7, #22]
 80069fa:	4a4b      	ldr	r2, [pc, #300]	; (8006b28 <Add_ConsoleW2ST_Service+0x194>)
 80069fc:	9200      	str	r2, [sp, #0]
 80069fe:	2201      	movs	r2, #1
 8006a00:	4948      	ldr	r1, [pc, #288]	; (8006b24 <Add_ConsoleW2ST_Service+0x190>)
 8006a02:	2002      	movs	r0, #2
 8006a04:	f006 f9f5 	bl	800cdf2 <aci_gatt_add_service>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	757b      	strb	r3, [r7, #21]
                             max_attribute_records,
                             &ConsoleW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006a0c:	7d7b      	ldrb	r3, [r7, #21]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d17d      	bne.n	8006b0e <Add_ConsoleW2ST_Service+0x17a>
    goto fail;
  }

  COPY_TERM_CHAR_UUID(uuid);
 8006a12:	231b      	movs	r3, #27
 8006a14:	713b      	strb	r3, [r7, #4]
 8006a16:	23c5      	movs	r3, #197	; 0xc5
 8006a18:	717b      	strb	r3, [r7, #5]
 8006a1a:	23d5      	movs	r3, #213	; 0xd5
 8006a1c:	71bb      	strb	r3, [r7, #6]
 8006a1e:	23a5      	movs	r3, #165	; 0xa5
 8006a20:	71fb      	strb	r3, [r7, #7]
 8006a22:	2302      	movs	r3, #2
 8006a24:	723b      	strb	r3, [r7, #8]
 8006a26:	2300      	movs	r3, #0
 8006a28:	727b      	strb	r3, [r7, #9]
 8006a2a:	2336      	movs	r3, #54	; 0x36
 8006a2c:	72bb      	strb	r3, [r7, #10]
 8006a2e:	23ac      	movs	r3, #172	; 0xac
 8006a30:	72fb      	strb	r3, [r7, #11]
 8006a32:	23e1      	movs	r3, #225	; 0xe1
 8006a34:	733b      	strb	r3, [r7, #12]
 8006a36:	2311      	movs	r3, #17
 8006a38:	737b      	strb	r3, [r7, #13]
 8006a3a:	230e      	movs	r3, #14
 8006a3c:	73bb      	strb	r3, [r7, #14]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
 8006a42:	2301      	movs	r3, #1
 8006a44:	743b      	strb	r3, [r7, #16]
 8006a46:	2300      	movs	r3, #0
 8006a48:	747b      	strb	r3, [r7, #17]
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	74bb      	strb	r3, [r7, #18]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006a52:	4b36      	ldr	r3, [pc, #216]	; (8006b2c <Add_ConsoleW2ST_Service+0x198>)
 8006a54:	461c      	mov	r4, r3
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, &char_uuid, W2ST_MAX_CHAR_LEN,
 8006a5e:	4b32      	ldr	r3, [pc, #200]	; (8006b28 <Add_ConsoleW2ST_Service+0x194>)
 8006a60:	8818      	ldrh	r0, [r3, #0]
 8006a62:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <Add_ConsoleW2ST_Service+0x19c>)
 8006a64:	9305      	str	r3, [sp, #20]
 8006a66:	2301      	movs	r3, #1
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	2310      	movs	r3, #16
 8006a6c:	9303      	str	r3, [sp, #12]
 8006a6e:	2305      	movs	r3, #5
 8006a70:	9302      	str	r3, [sp, #8]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9301      	str	r3, [sp, #4]
 8006a76:	231e      	movs	r3, #30
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	2314      	movs	r3, #20
 8006a7c:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <Add_ConsoleW2ST_Service+0x198>)
 8006a7e:	2102      	movs	r1, #2
 8006a80:	f006 fa8d 	bl	800cf9e <aci_gatt_add_char>
 8006a84:	4603      	mov	r3, r0
 8006a86:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE | CHAR_PROP_READ ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &TermCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006a88:	7d7b      	ldrb	r3, [r7, #21]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d141      	bne.n	8006b12 <Add_ConsoleW2ST_Service+0x17e>
    goto fail;
  }

  COPY_STDERR_CHAR_UUID(uuid);
 8006a8e:	231b      	movs	r3, #27
 8006a90:	713b      	strb	r3, [r7, #4]
 8006a92:	23c5      	movs	r3, #197	; 0xc5
 8006a94:	717b      	strb	r3, [r7, #5]
 8006a96:	23d5      	movs	r3, #213	; 0xd5
 8006a98:	71bb      	strb	r3, [r7, #6]
 8006a9a:	23a5      	movs	r3, #165	; 0xa5
 8006a9c:	71fb      	strb	r3, [r7, #7]
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	723b      	strb	r3, [r7, #8]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	727b      	strb	r3, [r7, #9]
 8006aa6:	2336      	movs	r3, #54	; 0x36
 8006aa8:	72bb      	strb	r3, [r7, #10]
 8006aaa:	23ac      	movs	r3, #172	; 0xac
 8006aac:	72fb      	strb	r3, [r7, #11]
 8006aae:	23e1      	movs	r3, #225	; 0xe1
 8006ab0:	733b      	strb	r3, [r7, #12]
 8006ab2:	2311      	movs	r3, #17
 8006ab4:	737b      	strb	r3, [r7, #13]
 8006ab6:	230e      	movs	r3, #14
 8006ab8:	73bb      	strb	r3, [r7, #14]
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]
 8006abe:	2302      	movs	r3, #2
 8006ac0:	743b      	strb	r3, [r7, #16]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	747b      	strb	r3, [r7, #17]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	74bb      	strb	r3, [r7, #18]
 8006aca:	2300      	movs	r3, #0
 8006acc:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006ace:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <Add_ConsoleW2ST_Service+0x198>)
 8006ad0:	461c      	mov	r4, r3
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ad6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, &char_uuid, W2ST_MAX_CHAR_LEN,
 8006ada:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <Add_ConsoleW2ST_Service+0x194>)
 8006adc:	8818      	ldrh	r0, [r3, #0]
 8006ade:	4b15      	ldr	r3, [pc, #84]	; (8006b34 <Add_ConsoleW2ST_Service+0x1a0>)
 8006ae0:	9305      	str	r3, [sp, #20]
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	9304      	str	r3, [sp, #16]
 8006ae6:	2310      	movs	r3, #16
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	2304      	movs	r3, #4
 8006aec:	9302      	str	r3, [sp, #8]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	2312      	movs	r3, #18
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	2314      	movs	r3, #20
 8006af8:	4a0c      	ldr	r2, [pc, #48]	; (8006b2c <Add_ConsoleW2ST_Service+0x198>)
 8006afa:	2102      	movs	r1, #2
 8006afc:	f006 fa4f 	bl	800cf9e <aci_gatt_add_char>
 8006b00:	4603      	mov	r3, r0
 8006b02:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &StdErrCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006b04:	7d7b      	ldrb	r3, [r7, #21]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d105      	bne.n	8006b16 <Add_ConsoleW2ST_Service+0x182>
     goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e005      	b.n	8006b1a <Add_ConsoleW2ST_Service+0x186>
    goto fail;
 8006b0e:	bf00      	nop
 8006b10:	e002      	b.n	8006b18 <Add_ConsoleW2ST_Service+0x184>
    goto fail;
 8006b12:	bf00      	nop
 8006b14:	e000      	b.n	8006b18 <Add_ConsoleW2ST_Service+0x184>
     goto fail;
 8006b16:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8006b18:	2347      	movs	r3, #71	; 0x47
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20000210 	.word	0x20000210
 8006b28:	200000ea 	.word	0x200000ea
 8006b2c:	20000220 	.word	0x20000220
 8006b30:	200000ec 	.word	0x200000ec
 8006b34:	200000ee 	.word	0x200000ee

08006b38 <Environmental_Update>:
 * @param  int32_t pressure value
 * @param  int16_t temperature value
 * @retval tBleStatus Status
 */
tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8006b44:	f001 fe9c 	bl	8008880 <HAL_GetTick>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	08db      	lsrs	r3, r3, #3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	733b      	strb	r3, [r7, #12]
 8006b50:	f001 fe96 	bl	8008880 <HAL_GetTick>
 8006b54:	4603      	mov	r3, r0
 8006b56:	0adb      	lsrs	r3, r3, #11
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	73bb      	strb	r3, [r7, #14]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	121b      	asrs	r3, r3, #8
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	73fb      	strb	r3, [r7, #15]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	141b      	asrs	r3, r3, #16
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	743b      	strb	r3, [r7, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	161b      	asrs	r3, r3, #24
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8006b7a:	887b      	ldrh	r3, [r7, #2]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	74bb      	strb	r3, [r7, #18]
 8006b80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b84:	121b      	asrs	r3, r3, #8
 8006b86:	b21b      	sxth	r3, r3
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <Environmental_Update+0x84>)
 8006b8e:	8818      	ldrh	r0, [r3, #0]
 8006b90:	4b0b      	ldr	r3, [pc, #44]	; (8006bc0 <Environmental_Update+0x88>)
 8006b92:	8819      	ldrh	r1, [r3, #0]
 8006b94:	f107 030c 	add.w	r3, r7, #12
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f006 fb06 	bl	800d1ae <aci_gatt_update_char_value>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <Environmental_Update+0x78>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006bac:	2347      	movs	r3, #71	; 0x47
 8006bae:	e000      	b.n	8006bb2 <Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200000e0 	.word	0x200000e0
 8006bc0:	200000e2 	.word	0x200000e2

08006bc4 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8006bd0:	f001 fe56 	bl	8008880 <HAL_GetTick>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	08db      	lsrs	r3, r3, #3
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	743b      	strb	r3, [r7, #16]
 8006bdc:	f001 fe50 	bl	8008880 <HAL_GetTick>
 8006be0:	4603      	mov	r3, r0
 8006be2:	0adb      	lsrs	r3, r3, #11
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	425b      	negs	r3, r3
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	74bb      	strb	r3, [r7, #18]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	121b      	asrs	r3, r3, #8
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	753b      	strb	r3, [r7, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	121b      	asrs	r3, r3, #8
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	425b      	negs	r3, r3
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	75bb      	strb	r3, [r7, #22]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	425b      	negs	r3, r3
 8006c24:	121b      	asrs	r3, r3, #8
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	763b      	strb	r3, [r7, #24]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	121b      	asrs	r3, r3, #8
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	76bb      	strb	r3, [r7, #26]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	121b      	asrs	r3, r3, #8
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	773b      	strb	r3, [r7, #28]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	121b      	asrs	r3, r3, #8
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	77bb      	strb	r3, [r7, #30]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	121b      	asrs	r3, r3, #8
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f887 3020 	strb.w	r3, [r7, #32]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	121b      	asrs	r3, r3, #8
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	121b      	asrs	r3, r3, #8
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <Acc_Update+0x10c>)
 8006ca0:	8818      	ldrh	r0, [r3, #0]
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <Acc_Update+0x110>)
 8006ca4:	8819      	ldrh	r1, [r3, #0]
 8006ca6:	f107 0310 	add.w	r3, r7, #16
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2314      	movs	r3, #20
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f006 fa7d 	bl	800d1ae <aci_gatt_update_char_value>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8006cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <Acc_Update+0x102>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006cc2:	2347      	movs	r3, #71	; 0x47
 8006cc4:	e000      	b.n	8006cc8 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3728      	adds	r7, #40	; 0x28
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	200000e0 	.word	0x200000e0
 8006cd4:	200000e4 	.word	0x200000e4

08006cd8 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8006ce0:	f001 fdce 	bl	8008880 <HAL_GetTick>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	08db      	lsrs	r3, r3, #3
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	733b      	strb	r3, [r7, #12]
 8006cec:	f001 fdc8 	bl	8008880 <HAL_GetTick>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	0adb      	lsrs	r3, r3, #11
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	73bb      	strb	r3, [r7, #14]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	121b      	asrs	r3, r3, #8
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	743b      	strb	r3, [r7, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	121b      	asrs	r3, r3, #8
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	74bb      	strb	r3, [r7, #18]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	121b      	asrs	r3, r3, #8
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <Quat_Update+0x84>)
 8006d30:	8818      	ldrh	r0, [r3, #0]
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <Quat_Update+0x88>)
 8006d34:	8819      	ldrh	r1, [r3, #0]
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f006 fa35 	bl	800d1ae <aci_gatt_update_char_value>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <Quat_Update+0x7a>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006d4e:	2347      	movs	r3, #71	; 0x47
 8006d50:	e000      	b.n	8006d54 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3718      	adds	r7, #24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	200000e6 	.word	0x200000e6
 8006d60:	200000e8 	.word	0x200000e8

08006d64 <Term_Update>:
 * @param  uint8_t    *data string to write
 * @param  uint8_t    length length of string to write
 * @retval tBleStatus Status
 */
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;

  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_MAX_CHAR_LEN){
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e02d      	b.n	8006dd2 <Term_Update+0x6e>
    DataToSend = (length-Offset);
 8006d76:	78fa      	ldrb	r2, [r7, #3]
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_MAX_CHAR_LEN) ?  W2ST_MAX_CHAR_LEN : DataToSend;
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b14      	cmp	r3, #20
 8006d82:	bf28      	it	cs
 8006d84:	2314      	movcs	r3, #20
 8006d86:	73bb      	strb	r3, [r7, #14]

    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	7bba      	ldrb	r2, [r7, #14]
 8006d90:	4619      	mov	r1, r3
 8006d92:	4814      	ldr	r0, [pc, #80]	; (8006de4 <Term_Update+0x80>)
 8006d94:	f008 fd4e 	bl	800f834 <memcpy>
    LastTermLen = DataToSend;
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <Term_Update+0x84>)
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	7013      	strb	r3, [r2, #0]

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 8006d9e:	4b13      	ldr	r3, [pc, #76]	; (8006dec <Term_Update+0x88>)
 8006da0:	8818      	ldrh	r0, [r3, #0]
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <Term_Update+0x8c>)
 8006da4:	8819      	ldrh	r1, [r3, #0]
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	4413      	add	r3, r2
 8006dac:	7bba      	ldrb	r2, [r7, #14]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4613      	mov	r3, r2
 8006db2:	2200      	movs	r2, #0
 8006db4:	f006 f9fb 	bl	800d1ae <aci_gatt_update_char_value>
 8006db8:	4603      	mov	r3, r0
 8006dba:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS) {
 8006dbc:	7b7b      	ldrb	r3, [r7, #13]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <Term_Update+0x62>
        PRINT_DBG("Term_Update: Error Updating Stdout Char\r\n");
      return BLE_STATUS_ERROR;
 8006dc2:	2347      	movs	r3, #71	; 0x47
 8006dc4:	e00a      	b.n	8006ddc <Term_Update+0x78>
    }
    HAL_Delay(20);
 8006dc6:	2014      	movs	r0, #20
 8006dc8:	f001 fd66 	bl	8008898 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_MAX_CHAR_LEN){
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	73fb      	strb	r3, [r7, #15]
 8006dd2:	7bfa      	ldrb	r2, [r7, #15]
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d3cd      	bcc.n	8006d76 <Term_Update+0x12>
  }

  return BLE_STATUS_SUCCESS;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	200001f8 	.word	0x200001f8
 8006de8:	2000020c 	.word	0x2000020c
 8006dec:	200000ea 	.word	0x200000ea
 8006df0:	200000ec 	.word	0x200000ec

08006df4 <Term_Update_AfterRead>:
 * @brief  Update Terminal characteristic value after a read request
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Term_Update_AfterRead(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af02      	add	r7, sp, #8
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <Term_Update_AfterRead+0x34>)
 8006dfc:	8818      	ldrh	r0, [r3, #0]
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <Term_Update_AfterRead+0x38>)
 8006e00:	8819      	ldrh	r1, [r3, #0]
 8006e02:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <Term_Update_AfterRead+0x3c>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <Term_Update_AfterRead+0x40>)
 8006e08:	9200      	str	r2, [sp, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f006 f9cf 	bl	800d1ae <aci_gatt_update_char_value>
 8006e10:	4603      	mov	r3, r0
 8006e12:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) {
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <Term_Update_AfterRead+0x2a>
    return BLE_STATUS_ERROR;
 8006e1a:	2347      	movs	r3, #71	; 0x47
 8006e1c:	e000      	b.n	8006e20 <Term_Update_AfterRead+0x2c>
  }

  return BLE_STATUS_SUCCESS;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	200000ea 	.word	0x200000ea
 8006e2c:	200000ec 	.word	0x200000ec
 8006e30:	2000020c 	.word	0x2000020c
 8006e34:	200001f8 	.word	0x200001f8

08006e38 <Read_Request_CB>:
 *
 * @param  Handle of the characteristic to update
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 8006e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e3c:	b08e      	sub	sp, #56	; 0x38
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	4603      	mov	r3, r0
 8006e42:	84fb      	strh	r3, [r7, #38]	; 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8006e44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e46:	4b5c      	ldr	r3, [pc, #368]	; (8006fb8 <Read_Request_CB+0x180>)
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d105      	bne.n	8006e5c <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8006e50:	4a5a      	ldr	r2, [pc, #360]	; (8006fbc <Read_Request_CB+0x184>)
 8006e52:	495b      	ldr	r1, [pc, #364]	; (8006fc0 <Read_Request_CB+0x188>)
 8006e54:	485b      	ldr	r0, [pc, #364]	; (8006fc4 <Read_Request_CB+0x18c>)
 8006e56:	f7ff feb5 	bl	8006bc4 <Acc_Update>
 8006e5a:	e09a      	b.n	8006f92 <Read_Request_CB+0x15a>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8006e5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e5e:	4b5a      	ldr	r3, [pc, #360]	; (8006fc8 <Read_Request_CB+0x190>)
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	429a      	cmp	r2, r3
 8006e66:	f040 808c 	bne.w	8006f82 <Read_Request_CB+0x14a>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8006e6a:	f008 fdb5 	bl	800f9d8 <rand>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	17da      	asrs	r2, r3, #31
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	61fa      	str	r2, [r7, #28]
 8006e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e7a:	f04f 0000 	mov.w	r0, #0
 8006e7e:	f04f 0100 	mov.w	r1, #0
 8006e82:	0099      	lsls	r1, r3, #2
 8006e84:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006e88:	0090      	lsls	r0, r2, #2
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	69b9      	ldr	r1, [r7, #24]
 8006e90:	1851      	adds	r1, r2, r1
 8006e92:	6139      	str	r1, [r7, #16]
 8006e94:	69f9      	ldr	r1, [r7, #28]
 8006e96:	eb43 0101 	adc.w	r1, r3, r1
 8006e9a:	6179      	str	r1, [r7, #20]
 8006e9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006ea8:	f7fd fbee 	bl	8004688 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f7fd fb62 	bl	800457c <__aeabi_ul2d>
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	4b43      	ldr	r3, [pc, #268]	; (8006fcc <Read_Request_CB+0x194>)
 8006ebe:	f7fd f9dd 	bl	800427c <__adddf3>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4619      	mov	r1, r3
 8006eca:	f7fd fb8d 	bl	80045e8 <__aeabi_d2f>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8006ed2:	f008 fd81 	bl	800f9d8 <rand>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	17da      	asrs	r2, r3, #31
 8006eda:	4698      	mov	r8, r3
 8006edc:	4691      	mov	r9, r2
 8006ede:	4642      	mov	r2, r8
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	1891      	adds	r1, r2, r2
 8006ee4:	6039      	str	r1, [r7, #0]
 8006ee6:	415b      	adcs	r3, r3
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eee:	eb12 0408 	adds.w	r4, r2, r8
 8006ef2:	eb43 0509 	adc.w	r5, r3, r9
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	016b      	lsls	r3, r5, #5
 8006f00:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006f04:	0162      	lsls	r2, r4, #5
 8006f06:	eb14 0a02 	adds.w	sl, r4, r2
 8006f0a:	eb45 0b03 	adc.w	fp, r5, r3
 8006f0e:	eb1a 0308 	adds.w	r3, sl, r8
 8006f12:	60bb      	str	r3, [r7, #8]
 8006f14:	eb4b 0309 	adc.w	r3, fp, r9
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f26:	f7fd fbaf 	bl	8004688 <__aeabi_uldivmod>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4619      	mov	r1, r3
 8006f32:	f7fd fb23 	bl	800457c <__aeabi_ul2d>
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <Read_Request_CB+0x198>)
 8006f3c:	f7fd f99e 	bl	800427c <__adddf3>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4610      	mov	r0, r2
 8006f46:	4619      	mov	r1, r3
 8006f48:	f7fd fb4e 	bl	80045e8 <__aeabi_d2f>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	633b      	str	r3, [r7, #48]	; 0x30
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8006f50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006f54:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006fd4 <Read_Request_CB+0x19c>
 8006f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f5c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8006f60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006f64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f70:	ee17 3a90 	vmov	r3, s15
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	4619      	mov	r1, r3
 8006f78:	ee16 0a90 	vmov	r0, s13
 8006f7c:	f7ff fddc 	bl	8006b38 <Environmental_Update>
 8006f80:	e007      	b.n	8006f92 <Read_Request_CB+0x15a>
  }
#ifdef STM32L476xx
  else if (handle == TermCharHandle + 1) {
 8006f82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f84:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <Read_Request_CB+0x1a0>)
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d101      	bne.n	8006f92 <Read_Request_CB+0x15a>
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 8006f8e:	f7ff ff31 	bl	8006df4 <Term_Update_AfterRead>
  }
#endif /* STM32L476xx */

  if(connection_handle !=0)
 8006f92:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <Read_Request_CB+0x1a4>)
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d008      	beq.n	8006fae <Read_Request_CB+0x176>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8006f9c:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <Read_Request_CB+0x1a4>)
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f006 f9b5 	bl	800d312 <aci_gatt_allow_read>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8006fae:	bf00      	nop
 8006fb0:	3738      	adds	r7, #56	; 0x38
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fb8:	200000e4 	.word	0x200000e4
 8006fbc:	20000380 	.word	0x20000380
 8006fc0:	20000374 	.word	0x20000374
 8006fc4:	20000368 	.word	0x20000368
 8006fc8:	200000e2 	.word	0x200000e2
 8006fcc:	403b0000 	.word	0x403b0000
 8006fd0:	408f4000 	.word	0x408f4000
 8006fd4:	42c80000 	.word	0x42c80000
 8006fd8:	200000ec 	.word	0x200000ec
 8006fdc:	20000360 	.word	0x20000360

08006fe0 <Attribute_Modified_Request_CB>:
 * @param  uint8_t  *att_data attribute data
 * @param  uint8_t  data_length length of the data
 * @retval None
 */
void Attribute_Modified_Request_CB(uint16_t Connection_Handle, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 8006fe0:	b590      	push	{r4, r7, lr}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	4623      	mov	r3, r4
 8006ff0:	80fb      	strh	r3, [r7, #6]
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	80bb      	strh	r3, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	807b      	strh	r3, [r7, #2]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	707b      	strb	r3, [r7, #1]
  if(attr_handle == EnvironmentalCharHandle + 2) {
 8006ffe:	88ba      	ldrh	r2, [r7, #4]
 8007000:	4b48      	ldr	r3, [pc, #288]	; (8007124 <Attribute_Modified_Request_CB+0x144>)
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	3302      	adds	r3, #2
 8007006:	429a      	cmp	r2, r3
 8007008:	d10f      	bne.n	800702a <Attribute_Modified_Request_CB+0x4a>
    if (att_data[0] == 1) {
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d103      	bne.n	800701a <Attribute_Modified_Request_CB+0x3a>
      send_env = TRUE;
 8007012:	4b45      	ldr	r3, [pc, #276]	; (8007128 <Attribute_Modified_Request_CB+0x148>)
 8007014:	2201      	movs	r2, #1
 8007016:	701a      	strb	r2, [r3, #0]
    if (SendBackData) {
      Term_Update(att_data,data_length);
    }
  }
#endif /* STM32L476xx */
}
 8007018:	e07f      	b.n	800711a <Attribute_Modified_Request_CB+0x13a>
    } else if (att_data[0] == 0){
 800701a:	6a3b      	ldr	r3, [r7, #32]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d17b      	bne.n	800711a <Attribute_Modified_Request_CB+0x13a>
      send_env = FALSE;
 8007022:	4b41      	ldr	r3, [pc, #260]	; (8007128 <Attribute_Modified_Request_CB+0x148>)
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
}
 8007028:	e077      	b.n	800711a <Attribute_Modified_Request_CB+0x13a>
  else if (attr_handle == AccGyroMagCharHandle +2) {
 800702a:	88ba      	ldrh	r2, [r7, #4]
 800702c:	4b3f      	ldr	r3, [pc, #252]	; (800712c <Attribute_Modified_Request_CB+0x14c>)
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	3302      	adds	r3, #2
 8007032:	429a      	cmp	r2, r3
 8007034:	d10f      	bne.n	8007056 <Attribute_Modified_Request_CB+0x76>
    if (att_data[0] == 1) {
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d103      	bne.n	8007046 <Attribute_Modified_Request_CB+0x66>
      send_mot = TRUE;
 800703e:	4b3c      	ldr	r3, [pc, #240]	; (8007130 <Attribute_Modified_Request_CB+0x150>)
 8007040:	2201      	movs	r2, #1
 8007042:	701a      	strb	r2, [r3, #0]
}
 8007044:	e069      	b.n	800711a <Attribute_Modified_Request_CB+0x13a>
    } else if (att_data[0] == 0){
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d165      	bne.n	800711a <Attribute_Modified_Request_CB+0x13a>
      send_mot = FALSE;
 800704e:	4b38      	ldr	r3, [pc, #224]	; (8007130 <Attribute_Modified_Request_CB+0x150>)
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
}
 8007054:	e061      	b.n	800711a <Attribute_Modified_Request_CB+0x13a>
  else if (attr_handle == QuaternionsCharHandle +2) {
 8007056:	88ba      	ldrh	r2, [r7, #4]
 8007058:	4b36      	ldr	r3, [pc, #216]	; (8007134 <Attribute_Modified_Request_CB+0x154>)
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	3302      	adds	r3, #2
 800705e:	429a      	cmp	r2, r3
 8007060:	d10f      	bne.n	8007082 <Attribute_Modified_Request_CB+0xa2>
    if (att_data[0] == 1) {
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d103      	bne.n	8007072 <Attribute_Modified_Request_CB+0x92>
      send_quat = TRUE;
 800706a:	4b33      	ldr	r3, [pc, #204]	; (8007138 <Attribute_Modified_Request_CB+0x158>)
 800706c:	2201      	movs	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]
}
 8007070:	e053      	b.n	800711a <Attribute_Modified_Request_CB+0x13a>
    } else if (att_data[0] == 0){
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d14f      	bne.n	800711a <Attribute_Modified_Request_CB+0x13a>
      send_quat = FALSE;
 800707a:	4b2f      	ldr	r3, [pc, #188]	; (8007138 <Attribute_Modified_Request_CB+0x158>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
}
 8007080:	e04b      	b.n	800711a <Attribute_Modified_Request_CB+0x13a>
  else if (attr_handle == TermCharHandle + 1) {
 8007082:	88ba      	ldrh	r2, [r7, #4]
 8007084:	4b2d      	ldr	r3, [pc, #180]	; (800713c <Attribute_Modified_Request_CB+0x15c>)
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	3301      	adds	r3, #1
 800708a:	429a      	cmp	r2, r3
 800708c:	d145      	bne.n	800711a <Attribute_Modified_Request_CB+0x13a>
    uint32_t SendBackData =1; /* By default Answer with the same message received */
 800708e:	2301      	movs	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
    if (SizeOfUpdateBlueFW != 0) {
 8007092:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <Attribute_Modified_Request_CB+0x160>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d031      	beq.n	80070fe <Attribute_Modified_Request_CB+0x11e>
      int8_t RetValue = UpdateFWBlueNRG(&SizeOfUpdateBlueFW, att_data, data_length, 1);
 800709a:	787a      	ldrb	r2, [r7, #1]
 800709c:	2301      	movs	r3, #1
 800709e:	6a39      	ldr	r1, [r7, #32]
 80070a0:	4827      	ldr	r0, [pc, #156]	; (8007140 <Attribute_Modified_Request_CB+0x160>)
 80070a2:	f7fd fd35 	bl	8004b10 <UpdateFWBlueNRG>
 80070a6:	4603      	mov	r3, r0
 80070a8:	72fb      	strb	r3, [r7, #11]
      if (RetValue != 0) {
 80070aa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d022      	beq.n	80070f8 <Attribute_Modified_Request_CB+0x118>
        MCR_FAST_TERM_UPDATE_FOR_OTA(((uint8_t *)&RetValue));
 80070b2:	4b24      	ldr	r3, [pc, #144]	; (8007144 <Attribute_Modified_Request_CB+0x164>)
 80070b4:	8818      	ldrh	r0, [r3, #0]
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <Attribute_Modified_Request_CB+0x15c>)
 80070b8:	8819      	ldrh	r1, [r3, #0]
 80070ba:	f107 030b 	add.w	r3, r7, #11
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2301      	movs	r3, #1
 80070c2:	2200      	movs	r2, #0
 80070c4:	f006 f873 	bl	800d1ae <aci_gatt_update_char_value>
        if (RetValue == 1) {
 80070c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d113      	bne.n	80070f8 <Attribute_Modified_Request_CB+0x118>
          BytesToWrite = sprintf((char *)BufferToWrite, "The Board will restart in 5 seconds\r\n");
 80070d0:	491d      	ldr	r1, [pc, #116]	; (8007148 <Attribute_Modified_Request_CB+0x168>)
 80070d2:	481e      	ldr	r0, [pc, #120]	; (800714c <Attribute_Modified_Request_CB+0x16c>)
 80070d4:	f008 fcbe 	bl	800fa54 <siprintf>
 80070d8:	4603      	mov	r3, r0
 80070da:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <Attribute_Modified_Request_CB+0x170>)
 80070dc:	6013      	str	r3, [r2, #0]
          Term_Update(BufferToWrite,BytesToWrite);
 80070de:	4b1c      	ldr	r3, [pc, #112]	; (8007150 <Attribute_Modified_Request_CB+0x170>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4619      	mov	r1, r3
 80070e6:	4819      	ldr	r0, [pc, #100]	; (800714c <Attribute_Modified_Request_CB+0x16c>)
 80070e8:	f7ff fe3c 	bl	8006d64 <Term_Update>
          HAL_Delay(5000);
 80070ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80070f0:	f001 fbd2 	bl	8008898 <HAL_Delay>
          HAL_NVIC_SystemReset();
 80070f4:	f001 fd4b 	bl	8008b8e <HAL_NVIC_SystemReset>
      SendBackData = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e005      	b.n	800710a <Attribute_Modified_Request_CB+0x12a>
      SendBackData = DebugConsoleCommandParsing(att_data,data_length);
 80070fe:	787b      	ldrb	r3, [r7, #1]
 8007100:	4619      	mov	r1, r3
 8007102:	6a38      	ldr	r0, [r7, #32]
 8007104:	f000 f826 	bl	8007154 <DebugConsoleCommandParsing>
 8007108:	60f8      	str	r0, [r7, #12]
    if (SendBackData) {
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <Attribute_Modified_Request_CB+0x13a>
      Term_Update(att_data,data_length);
 8007110:	787b      	ldrb	r3, [r7, #1]
 8007112:	4619      	mov	r1, r3
 8007114:	6a38      	ldr	r0, [r7, #32]
 8007116:	f7ff fe25 	bl	8006d64 <Term_Update>
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bd90      	pop	{r4, r7, pc}
 8007122:	bf00      	nop
 8007124:	200000e2 	.word	0x200000e2
 8007128:	20000230 	.word	0x20000230
 800712c:	200000e4 	.word	0x200000e4
 8007130:	20000231 	.word	0x20000231
 8007134:	200000e8 	.word	0x200000e8
 8007138:	20000232 	.word	0x20000232
 800713c:	200000ec 	.word	0x200000ec
 8007140:	200000f0 	.word	0x200000f0
 8007144:	200000ea 	.word	0x200000ea
 8007148:	0801116c 	.word	0x0801116c
 800714c:	200000f4 	.word	0x200000f4
 8007150:	200001f4 	.word	0x200001f4

08007154 <DebugConsoleCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t DebugConsoleCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8007154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007156:	b08d      	sub	sp, #52	; 0x34
 8007158:	af04      	add	r7, sp, #16
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  uint32_t SendBackData = 1;
 8007160:	2301      	movs	r3, #1
 8007162:	61fb      	str	r3, [r7, #28]

  /* Help Command */
  if(!strncmp("help",(char *)(att_data),4)) {
 8007164:	2204      	movs	r2, #4
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	489b      	ldr	r0, [pc, #620]	; (80073d8 <DebugConsoleCommandParsing+0x284>)
 800716a:	f008 fc93 	bl	800fa94 <strncmp>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d110      	bne.n	8007196 <DebugConsoleCommandParsing+0x42>
    /* Print Legend */
    SendBackData=0;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]

    BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n"
 8007178:	4998      	ldr	r1, [pc, #608]	; (80073dc <DebugConsoleCommandParsing+0x288>)
 800717a:	4899      	ldr	r0, [pc, #612]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 800717c:	f008 fc6a 	bl	800fa54 <siprintf>
 8007180:	4603      	mov	r3, r0
 8007182:	4a98      	ldr	r2, [pc, #608]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007184:	6013      	str	r3, [r2, #0]
                          "info -> System Info\r\n"
                          "versionFw  -> FW Version\r\n"
                          "versionBle -> Ble Version\r\n");
    Term_Update(BufferToWrite,BytesToWrite);
 8007186:	4b97      	ldr	r3, [pc, #604]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	4619      	mov	r1, r3
 800718e:	4894      	ldr	r0, [pc, #592]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 8007190:	f7ff fde8 	bl	8006d64 <Term_Update>
 8007194:	e16d      	b.n	8007472 <DebugConsoleCommandParsing+0x31e>
  }
  else if (!strncmp("versionFw",(char *)(att_data),9)) {
 8007196:	2209      	movs	r2, #9
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	4893      	ldr	r0, [pc, #588]	; (80073e8 <DebugConsoleCommandParsing+0x294>)
 800719c:	f008 fc7a 	bl	800fa94 <strncmp>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d118      	bne.n	80071d8 <DebugConsoleCommandParsing+0x84>
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%s_%c.%c.%c\r\n",
 80071a6:	2332      	movs	r3, #50	; 0x32
 80071a8:	9302      	str	r3, [sp, #8]
 80071aa:	2332      	movs	r3, #50	; 0x32
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	2333      	movs	r3, #51	; 0x33
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	4b8e      	ldr	r3, [pc, #568]	; (80073ec <DebugConsoleCommandParsing+0x298>)
 80071b4:	4a8e      	ldr	r2, [pc, #568]	; (80073f0 <DebugConsoleCommandParsing+0x29c>)
 80071b6:	498f      	ldr	r1, [pc, #572]	; (80073f4 <DebugConsoleCommandParsing+0x2a0>)
 80071b8:	4889      	ldr	r0, [pc, #548]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 80071ba:	f008 fc4b 	bl	800fa54 <siprintf>
 80071be:	4603      	mov	r3, r0
 80071c0:	4a88      	ldr	r2, [pc, #544]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 80071c2:	6013      	str	r3, [r2, #0]
                            ,BLUENRG_PACKAGENAME,
                             PACK_VERSION_MAJOR,
                             PACK_VERSION_MINOR,
                             PACK_VERSION_PATCH);

    Term_Update(BufferToWrite,BytesToWrite);
 80071c4:	4b87      	ldr	r3, [pc, #540]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	4619      	mov	r1, r3
 80071cc:	4884      	ldr	r0, [pc, #528]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 80071ce:	f7ff fdc9 	bl	8006d64 <Term_Update>
    SendBackData=0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61fb      	str	r3, [r7, #28]
 80071d6:	e14c      	b.n	8007472 <DebugConsoleCommandParsing+0x31e>

  }
  else if (!strncmp("info",(char *)(att_data),4)) {
 80071d8:	2204      	movs	r2, #4
 80071da:	6879      	ldr	r1, [r7, #4]
 80071dc:	4886      	ldr	r0, [pc, #536]	; (80073f8 <DebugConsoleCommandParsing+0x2a4>)
 80071de:	f008 fc59 	bl	800fa94 <strncmp>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d143      	bne.n	8007270 <DebugConsoleCommandParsing+0x11c>
    SendBackData=0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61fb      	str	r3, [r7, #28]

    BytesToWrite = sprintf((char *)BufferToWrite,
 80071ec:	2332      	movs	r3, #50	; 0x32
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	2332      	movs	r3, #50	; 0x32
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2333      	movs	r3, #51	; 0x33
 80071f6:	4a7d      	ldr	r2, [pc, #500]	; (80073ec <DebugConsoleCommandParsing+0x298>)
 80071f8:	4980      	ldr	r1, [pc, #512]	; (80073fc <DebugConsoleCommandParsing+0x2a8>)
 80071fa:	4879      	ldr	r0, [pc, #484]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 80071fc:	f008 fc2a 	bl	800fa54 <siprintf>
 8007200:	4603      	mov	r3, r0
 8007202:	4a78      	ldr	r2, [pc, #480]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007204:	6013      	str	r3, [r2, #0]
                           "\tVersion %c.%c.%c\r\n"
                           "\tSTM32L476RG-Nucleo board"
                           "\r\n",
                           BLUENRG_PACKAGENAME,
                           PACK_VERSION_MAJOR, PACK_VERSION_MINOR, PACK_VERSION_PATCH);
    Term_Update(BufferToWrite, BytesToWrite);
 8007206:	4b77      	ldr	r3, [pc, #476]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	4619      	mov	r1, r3
 800720e:	4874      	ldr	r0, [pc, #464]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 8007210:	f7ff fda8 	bl	8006d64 <Term_Update>
#elif defined (__CC_ARM)
                           " (KEIL)\r\n",
#elif defined (__GNUC__)
                           " (STM32CubeIDE)\r\n",
#endif
                           (uint16_t)((HAL_GetHalVersion() >>24)),
 8007214:	f001 fb64 	bl	80088e0 <HAL_GetHalVersion>
 8007218:	4603      	mov	r3, r0
 800721a:	0e1b      	lsrs	r3, r3, #24
 800721c:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 800721e:	461e      	mov	r6, r3
                           (uint16_t)((HAL_GetHalVersion() >>16)&0xFF),
 8007220:	f001 fb5e 	bl	80088e0 <HAL_GetHalVersion>
 8007224:	4603      	mov	r3, r0
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 800722a:	b2dd      	uxtb	r5, r3
                           (uint16_t)((HAL_GetHalVersion() >> 8)&0xFF),
 800722c:	f001 fb58 	bl	80088e0 <HAL_GetHalVersion>
 8007230:	4603      	mov	r3, r0
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 8007236:	b2dc      	uxtb	r4, r3
                           (uint16_t)((HAL_GetHalVersion()     )&0xFF),
 8007238:	f001 fb52 	bl	80088e0 <HAL_GetHalVersion>
 800723c:	4603      	mov	r3, r0
 800723e:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 8007240:	b2db      	uxtb	r3, r3
 8007242:	4a6f      	ldr	r2, [pc, #444]	; (8007400 <DebugConsoleCommandParsing+0x2ac>)
 8007244:	9203      	str	r2, [sp, #12]
 8007246:	4a6f      	ldr	r2, [pc, #444]	; (8007404 <DebugConsoleCommandParsing+0x2b0>)
 8007248:	9202      	str	r2, [sp, #8]
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	9400      	str	r4, [sp, #0]
 800724e:	462b      	mov	r3, r5
 8007250:	4632      	mov	r2, r6
 8007252:	496d      	ldr	r1, [pc, #436]	; (8007408 <DebugConsoleCommandParsing+0x2b4>)
 8007254:	4862      	ldr	r0, [pc, #392]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 8007256:	f008 fbfd 	bl	800fa54 <siprintf>
 800725a:	4603      	mov	r3, r0
 800725c:	4a61      	ldr	r2, [pc, #388]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 800725e:	6013      	str	r3, [r2, #0]
                           __DATE__,__TIME__);
    Term_Update(BufferToWrite,BytesToWrite);
 8007260:	4b60      	ldr	r3, [pc, #384]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	4619      	mov	r1, r3
 8007268:	485d      	ldr	r0, [pc, #372]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 800726a:	f7ff fd7b 	bl	8006d64 <Term_Update>
 800726e:	e100      	b.n	8007472 <DebugConsoleCommandParsing+0x31e>
  }
  else if (!strncmp("upgradeFw", (char *)(att_data), 9)) {
 8007270:	2209      	movs	r2, #9
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	4865      	ldr	r0, [pc, #404]	; (800740c <DebugConsoleCommandParsing+0x2b8>)
 8007276:	f008 fc0d 	bl	800fa94 <strncmp>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	f040 8092 	bne.w	80073a6 <DebugConsoleCommandParsing+0x252>
    uint32_t uwCRCValue;
    uint8_t *PointerByte = (uint8_t*) &SizeOfUpdateBlueFW;
 8007282:	4b63      	ldr	r3, [pc, #396]	; (8007410 <DebugConsoleCommandParsing+0x2bc>)
 8007284:	61bb      	str	r3, [r7, #24]

    SizeOfUpdateBlueFW = atoi((char *)(att_data + 9));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3309      	adds	r3, #9
 800728a:	4618      	mov	r0, r3
 800728c:	f008 faa3 	bl	800f7d6 <atoi>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	4b5e      	ldr	r3, [pc, #376]	; (8007410 <DebugConsoleCommandParsing+0x2bc>)
 8007296:	601a      	str	r2, [r3, #0]
    PointerByte[0] = att_data[ 9];
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	7a5a      	ldrb	r2, [r3, #9]
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	701a      	strb	r2, [r3, #0]
    PointerByte[1] = att_data[10];
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	3301      	adds	r3, #1
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7a92      	ldrb	r2, [r2, #10]
 80072a8:	701a      	strb	r2, [r3, #0]
    PointerByte[2] = att_data[11];
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3302      	adds	r3, #2
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	7ad2      	ldrb	r2, [r2, #11]
 80072b2:	701a      	strb	r2, [r3, #0]
    PointerByte[3] = att_data[12];
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	3303      	adds	r3, #3
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	7b12      	ldrb	r2, [r2, #12]
 80072bc:	701a      	strb	r2, [r3, #0]

    /* Check the Maximum Possible OTA size */
    if (SizeOfUpdateBlueFW > OTA_MAX_PROG_SIZE) {
 80072be:	4b54      	ldr	r3, [pc, #336]	; (8007410 <DebugConsoleCommandParsing+0x2bc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a54      	ldr	r2, [pc, #336]	; (8007414 <DebugConsoleCommandParsing+0x2c0>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d923      	bls.n	8007310 <DebugConsoleCommandParsing+0x1bc>
      PRINT_DBG("OTA %s SIZE=%ld > %d Max Allowed\r\n", BLUENRG_PACKAGENAME, (long)(SizeOfUpdateBlueFW), OTA_MAX_PROG_SIZE);
      /* Answer with a wrong CRC value for signaling the problem to BlueMS application */
      PointerByte[0] = att_data[13];
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	7b5a      	ldrb	r2, [r3, #13]
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	701a      	strb	r2, [r3, #0]
      PointerByte[1] = (att_data[14]!=0) ? 0 : 1; /* In order to be sure to have a wrong CRC */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	330e      	adds	r3, #14
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bf0c      	ite	eq
 80072da:	2301      	moveq	r3, #1
 80072dc:	2300      	movne	r3, #0
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	3301      	adds	r3, #1
 80072e4:	701a      	strb	r2, [r3, #0]
      PointerByte[2] = att_data[15];
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3302      	adds	r3, #2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	7bd2      	ldrb	r2, [r2, #15]
 80072ee:	701a      	strb	r2, [r3, #0]
      PointerByte[3] = att_data[16];
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	3303      	adds	r3, #3
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	7c12      	ldrb	r2, [r2, #16]
 80072f8:	701a      	strb	r2, [r3, #0]
      BytesToWrite = 4;
 80072fa:	4b3a      	ldr	r3, [pc, #232]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 80072fc:	2204      	movs	r2, #4
 80072fe:	601a      	str	r2, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8007300:	4b38      	ldr	r3, [pc, #224]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	b2db      	uxtb	r3, r3
 8007306:	4619      	mov	r1, r3
 8007308:	4835      	ldr	r0, [pc, #212]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 800730a:	f7ff fd2b 	bl	8006d64 <Term_Update>
 800730e:	e047      	b.n	80073a0 <DebugConsoleCommandParsing+0x24c>
    }
    else {
      PointerByte = (uint8_t*) &uwCRCValue;
 8007310:	f107 0310 	add.w	r3, r7, #16
 8007314:	61bb      	str	r3, [r7, #24]
      PointerByte[0] = att_data[13];
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	7b5a      	ldrb	r2, [r3, #13]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	701a      	strb	r2, [r3, #0]
      PointerByte[1] = att_data[14];
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	3301      	adds	r3, #1
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	7b92      	ldrb	r2, [r2, #14]
 8007326:	701a      	strb	r2, [r3, #0]
      PointerByte[2] = att_data[15];
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	3302      	adds	r3, #2
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7bd2      	ldrb	r2, [r2, #15]
 8007330:	701a      	strb	r2, [r3, #0]
      PointerByte[3] = att_data[16];
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	3303      	adds	r3, #3
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	7c12      	ldrb	r2, [r2, #16]
 800733a:	701a      	strb	r2, [r3, #0]

      PRINT_DBG("OTA %s SIZE=%ld uwCRCValue=%lx\r\n", BLUENRG_PACKAGENAME, (long)(SizeOfUpdateBlueFW), (long)(uwCRCValue));

      /* Reset the Flash */
      StartUpdateFWBlueNRG(SizeOfUpdateBlueFW, uwCRCValue);
 800733c:	4b34      	ldr	r3, [pc, #208]	; (8007410 <DebugConsoleCommandParsing+0x2bc>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f7fd fd03 	bl	8004d50 <StartUpdateFWBlueNRG>

      /* Reduce the connection interval */
      {
        int ret = aci_l2cap_connection_parameter_update_req(connection_handle,
 800734a:	4b33      	ldr	r3, [pc, #204]	; (8007418 <DebugConsoleCommandParsing+0x2c4>)
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b298      	uxth	r0, r3
 8007350:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	220a      	movs	r2, #10
 800735a:	210a      	movs	r1, #10
 800735c:	f006 fa13 	bl	800d786 <aci_l2cap_connection_parameter_update_req>
 8007360:	4603      	mov	r3, r0
 8007362:	617b      	str	r3, [r7, #20]
                                                            10  /* interval_min  */,
                                                            10  /* interval_max  */,
                                                            0   /* slave_latency */,
                                                            400 /* timeout_multiplier */);
        /* Go to infinite loop if there is one error */
        if (ret != BLE_STATUS_SUCCESS) {
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d000      	beq.n	800736c <DebugConsoleCommandParsing+0x218>
          while (1) {
 800736a:	e7fe      	b.n	800736a <DebugConsoleCommandParsing+0x216>
          }
        }
      }

      /* Signal that we are ready sending back the CRV value*/
      BufferToWrite[0] = PointerByte[0];
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 8007372:	701a      	strb	r2, [r3, #0]
      BufferToWrite[1] = PointerByte[1];
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	785a      	ldrb	r2, [r3, #1]
 8007378:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 800737a:	705a      	strb	r2, [r3, #1]
      BufferToWrite[2] = PointerByte[2];
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	789a      	ldrb	r2, [r3, #2]
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 8007382:	709a      	strb	r2, [r3, #2]
      BufferToWrite[3] = PointerByte[3];
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	78da      	ldrb	r2, [r3, #3]
 8007388:	4b15      	ldr	r3, [pc, #84]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 800738a:	70da      	strb	r2, [r3, #3]
      BytesToWrite = 4;
 800738c:	4b15      	ldr	r3, [pc, #84]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 800738e:	2204      	movs	r2, #4
 8007390:	601a      	str	r2, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <DebugConsoleCommandParsing+0x290>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	4619      	mov	r1, r3
 800739a:	4811      	ldr	r0, [pc, #68]	; (80073e0 <DebugConsoleCommandParsing+0x28c>)
 800739c:	f7ff fce2 	bl	8006d64 <Term_Update>
    }

    SendBackData=0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
 80073a4:	e065      	b.n	8007472 <DebugConsoleCommandParsing+0x31e>
  }
  else if (!strncmp("versionBle",(char *)(att_data),10)) {
 80073a6:	220a      	movs	r2, #10
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	481c      	ldr	r0, [pc, #112]	; (800741c <DebugConsoleCommandParsing+0x2c8>)
 80073ac:	f008 fb72 	bl	800fa94 <strncmp>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d15d      	bne.n	8007472 <DebugConsoleCommandParsing+0x31e>
    uint8_t  hwVersion = 0x00;
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
    uint16_t fwVersion = 0x0000;
 80073ba:	2300      	movs	r3, #0
 80073bc:	81bb      	strh	r3, [r7, #12]
    /* get the BlueNRG HW and FW versions */
    getBlueNRG2_Version(&hwVersion, &fwVersion);
 80073be:	f107 020c 	add.w	r2, r7, #12
 80073c2:	f107 030f 	add.w	r3, r7, #15
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 f85f 	bl	800748c <getBlueNRG2_Version>
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
                           (hwVersion > 0x30) ? "BlueNRG-MS" : "BlueNRG",
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 80073d0:	2b30      	cmp	r3, #48	; 0x30
 80073d2:	d927      	bls.n	8007424 <DebugConsoleCommandParsing+0x2d0>
 80073d4:	4912      	ldr	r1, [pc, #72]	; (8007420 <DebugConsoleCommandParsing+0x2cc>)
 80073d6:	e026      	b.n	8007426 <DebugConsoleCommandParsing+0x2d2>
 80073d8:	08011194 	.word	0x08011194
 80073dc:	0801119c 	.word	0x0801119c
 80073e0:	200000f4 	.word	0x200000f4
 80073e4:	200001f4 	.word	0x200001f4
 80073e8:	080111f4 	.word	0x080111f4
 80073ec:	08011200 	.word	0x08011200
 80073f0:	0801120c 	.word	0x0801120c
 80073f4:	08011214 	.word	0x08011214
 80073f8:	08011228 	.word	0x08011228
 80073fc:	08011230 	.word	0x08011230
 8007400:	080112b4 	.word	0x080112b4
 8007404:	080112c0 	.word	0x080112c0
 8007408:	0801127c 	.word	0x0801127c
 800740c:	080112cc 	.word	0x080112cc
 8007410:	200000f0 	.word	0x200000f0
 8007414:	0007bff8 	.word	0x0007bff8
 8007418:	20000360 	.word	0x20000360
 800741c:	080112d8 	.word	0x080112d8
 8007420:	080112e4 	.word	0x080112e4
 8007424:	4915      	ldr	r1, [pc, #84]	; (800747c <DebugConsoleCommandParsing+0x328>)
 8007426:	89bb      	ldrh	r3, [r7, #12]
 8007428:	0a1b      	lsrs	r3, r3, #8
 800742a:	b29b      	uxth	r3, r3
 800742c:	4618      	mov	r0, r3
 800742e:	89bb      	ldrh	r3, [r7, #12]
 8007430:	091b      	lsrs	r3, r3, #4
 8007432:	b29b      	uxth	r3, r3
 8007434:	f003 020f 	and.w	r2, r3, #15
                           (fwVersion>>8),
                           (fwVersion>>4)&0xF,
                           (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 8007438:	7bfb      	ldrb	r3, [r7, #15]
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 800743a:	2b30      	cmp	r3, #48	; 0x30
 800743c:	d904      	bls.n	8007448 <DebugConsoleCommandParsing+0x2f4>
                           (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 800743e:	89bb      	ldrh	r3, [r7, #12]
 8007440:	f003 030f 	and.w	r3, r3, #15
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8007444:	3360      	adds	r3, #96	; 0x60
 8007446:	e000      	b.n	800744a <DebugConsoleCommandParsing+0x2f6>
 8007448:	2361      	movs	r3, #97	; 0x61
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	9200      	str	r2, [sp, #0]
 800744e:	4603      	mov	r3, r0
 8007450:	460a      	mov	r2, r1
 8007452:	490b      	ldr	r1, [pc, #44]	; (8007480 <DebugConsoleCommandParsing+0x32c>)
 8007454:	480b      	ldr	r0, [pc, #44]	; (8007484 <DebugConsoleCommandParsing+0x330>)
 8007456:	f008 fafd 	bl	800fa54 <siprintf>
 800745a:	4603      	mov	r3, r0
 800745c:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <DebugConsoleCommandParsing+0x334>)
 800745e:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8007460:	4b09      	ldr	r3, [pc, #36]	; (8007488 <DebugConsoleCommandParsing+0x334>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	4619      	mov	r1, r3
 8007468:	4806      	ldr	r0, [pc, #24]	; (8007484 <DebugConsoleCommandParsing+0x330>)
 800746a:	f7ff fc7b 	bl	8006d64 <Term_Update>
    SendBackData=0;
 800746e:	2300      	movs	r3, #0
 8007470:	61fb      	str	r3, [r7, #28]
  }

  return SendBackData;
 8007472:	69fb      	ldr	r3, [r7, #28]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3724      	adds	r7, #36	; 0x24
 8007478:	46bd      	mov	sp, r7
 800747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747c:	080112f0 	.word	0x080112f0
 8007480:	080112f8 	.word	0x080112f8
 8007484:	200000f4 	.word	0x200000f4
 8007488:	200001f4 	.word	0x200001f4

0800748c <getBlueNRG2_Version>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
static uint8_t getBlueNRG2_Version(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800748c:	b590      	push	{r4, r7, lr}
 800748e:	b091      	sub	sp, #68	; 0x44
 8007490:	af08      	add	r7, sp, #32
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;
  uint8_t DTM_version_major, DTM_version_minor, DTM_version_patch, DTM_variant, BTLE_Stack_version_major, BTLE_Stack_version_minor, BTLE_Stack_version_patch, BTLE_Stack_development;
  uint16_t DTM_Build_Number, BTLE_Stack_variant, BTLE_Stack_Build_Number;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 8007496:	f107 0418 	add.w	r4, r7, #24
 800749a:	f107 021d 	add.w	r2, r7, #29
 800749e:	f107 011a 	add.w	r1, r7, #26
 80074a2:	f107 001e 	add.w	r0, r7, #30
 80074a6:	f107 0316 	add.w	r3, r7, #22
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	4623      	mov	r3, r4
 80074ae:	f007 fd2e 	bl	800ef0e <hci_read_local_version_information>
 80074b2:	4603      	mov	r3, r0
 80074b4:	77fb      	strb	r3, [r7, #31]
				              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80074b6:	7ffb      	ldrb	r3, [r7, #31]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <getBlueNRG2_Version+0x3c>
    *hwVersion = hci_revision >> 8;
 80074bc:	8b7b      	ldrh	r3, [r7, #26]
 80074be:	0a1b      	lsrs	r3, r3, #8
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	701a      	strb	r2, [r3, #0]
  }
  else {
    PRINT_DBG("Error= %x \r\n", status);
  }

  status = aci_hal_get_firmware_details(&DTM_version_major,
 80074c8:	f107 0412 	add.w	r4, r7, #18
 80074cc:	f107 0213 	add.w	r2, r7, #19
 80074d0:	f107 0114 	add.w	r1, r7, #20
 80074d4:	f107 0015 	add.w	r0, r7, #21
 80074d8:	f107 0308 	add.w	r3, r7, #8
 80074dc:	9306      	str	r3, [sp, #24]
 80074de:	f107 030a 	add.w	r3, r7, #10
 80074e2:	9305      	str	r3, [sp, #20]
 80074e4:	f107 030e 	add.w	r3, r7, #14
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	f107 030f 	add.w	r3, r7, #15
 80074ee:	9303      	str	r3, [sp, #12]
 80074f0:	f107 0310 	add.w	r3, r7, #16
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	f107 0311 	add.w	r3, r7, #17
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	f107 030c 	add.w	r3, r7, #12
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	4623      	mov	r3, r4
 8007504:	f005 ff63 	bl	800d3ce <aci_hal_get_firmware_details>
 8007508:	4603      	mov	r3, r0
 800750a:	77fb      	strb	r3, [r7, #31]
                                        &BTLE_Stack_version_patch,
                                        &BTLE_Stack_development,
                                        &BTLE_Stack_variant,
                                        &BTLE_Stack_Build_Number);

  if (status == BLE_STATUS_SUCCESS) {
 800750c:	7ffb      	ldrb	r3, [r7, #31]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d118      	bne.n	8007544 <getBlueNRG2_Version+0xb8>
    *fwVersion = BTLE_Stack_version_major  << 8;  // Major Version Number
 8007512:	7c7b      	ldrb	r3, [r7, #17]
 8007514:	b29b      	uxth	r3, r3
 8007516:	021b      	lsls	r3, r3, #8
 8007518:	b29a      	uxth	r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	801a      	strh	r2, [r3, #0]
    *fwVersion |= BTLE_Stack_version_minor << 4;  // Minor Version Number
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b21a      	sxth	r2, r3
 8007524:	7c3b      	ldrb	r3, [r7, #16]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	b21b      	sxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b21b      	sxth	r3, r3
 800752e:	b29a      	uxth	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	801a      	strh	r2, [r3, #0]
    *fwVersion |= BTLE_Stack_version_patch;       // Patch Version Number
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	881a      	ldrh	r2, [r3, #0]
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	b29b      	uxth	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b29a      	uxth	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	801a      	strh	r2, [r3, #0]
  }
  else {
    PRINT_DBG("Error= %x \r\n", status);
  }

  return status;
 8007544:	7ffb      	ldrb	r3, [r7, #31]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3724      	adds	r7, #36	; 0x24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd90      	pop	{r4, r7, pc}

0800754e <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8007552:	2006      	movs	r0, #6
 8007554:	f001 faff 	bl	8008b56 <HAL_NVIC_EnableIRQ>
}
 8007558:	bf00      	nop
 800755a:	bd80      	pop	{r7, pc}

0800755c <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8007560:	2006      	movs	r0, #6
 8007562:	f001 fb06 	bl	8008b72 <HAL_NVIC_DisableIRQ>
}
 8007566:	bf00      	nop
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007574:	4b22      	ldr	r3, [pc, #136]	; (8007600 <HCI_TL_SPI_Init+0x94>)
 8007576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007578:	4a21      	ldr	r2, [pc, #132]	; (8007600 <HCI_TL_SPI_Init+0x94>)
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007580:	4b1f      	ldr	r3, [pc, #124]	; (8007600 <HCI_TL_SPI_Init+0x94>)
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	60bb      	str	r3, [r7, #8]
 800758a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800758c:	2301      	movs	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007590:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4619      	mov	r1, r3
 80075a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075a4:	f002 f832 	bl	800960c <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80075a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075ae:	2301      	movs	r3, #1
 80075b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075b6:	2300      	movs	r3, #0
 80075b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80075ba:	f107 030c 	add.w	r3, r7, #12
 80075be:	4619      	mov	r1, r3
 80075c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075c4:	f002 f822 	bl	800960c <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80075c8:	2302      	movs	r3, #2
 80075ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80075cc:	2301      	movs	r3, #1
 80075ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d4:	2300      	movs	r3, #0
 80075d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	4619      	mov	r1, r3
 80075de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075e2:	f002 f813 	bl	800960c <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80075e6:	2201      	movs	r2, #1
 80075e8:	2102      	movs	r1, #2
 80075ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075ee:	f002 fac3 	bl	8009b78 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80075f2:	f000 fe4d 	bl	8008290 <BSP_SPI1_Init>
 80075f6:	4603      	mov	r3, r0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3720      	adds	r7, #32
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40021000 	.word	0x40021000

08007604 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8007608:	2101      	movs	r1, #1
 800760a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800760e:	f002 f9a7 	bl	8009960 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8007612:	2102      	movs	r1, #2
 8007614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007618:	f002 f9a2 	bl	8009960 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800761c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007624:	f002 f99c 	bl	8009960 <HAL_GPIO_DeInit>
  return 0;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	bd80      	pop	{r7, pc}

0800762e <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007632:	2201      	movs	r2, #1
 8007634:	2102      	movs	r1, #2
 8007636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800763a:	f002 fa9d 	bl	8009b78 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800763e:	2200      	movs	r2, #0
 8007640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007648:	f002 fa96 	bl	8009b78 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800764c:	2005      	movs	r0, #5
 800764e:	f001 f923 	bl	8008898 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8007652:	2201      	movs	r2, #1
 8007654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800765c:	f002 fa8c 	bl	8009b78 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8007660:	2005      	movs	r0, #5
 8007662:	f001 f919 	bl	8008898 <HAL_Delay>
  return 0;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}

0800766c <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 800767c:	2300      	movs	r3, #0
 800767e:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8007680:	4a32      	ldr	r2, [pc, #200]	; (800774c <HCI_TL_SPI_Receive+0xe0>)
 8007682:	f107 0310 	add.w	r3, r7, #16
 8007686:	e892 0003 	ldmia.w	r2, {r0, r1}
 800768a:	6018      	str	r0, [r3, #0]
 800768c:	3304      	adds	r3, #4
 800768e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8007690:	f7ff ff64 	bl	800755c <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8007694:	2200      	movs	r2, #0
 8007696:	2102      	movs	r1, #2
 8007698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800769c:	f002 fa6c 	bl	8009b78 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80076a0:	f107 0108 	add.w	r1, r7, #8
 80076a4:	f107 0310 	add.w	r3, r7, #16
 80076a8:	2205      	movs	r2, #5
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fe20 	bl	80082f0 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80076b0:	7b3b      	ldrb	r3, [r7, #12]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	b21a      	sxth	r2, r3
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	b21b      	sxth	r3, r3
 80076ba:	4313      	orrs	r3, r2
 80076bc:	b21b      	sxth	r3, r3
 80076be:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80076c0:	8bfb      	ldrh	r3, [r7, #30]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01e      	beq.n	8007704 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80076c6:	8bfa      	ldrh	r2, [r7, #30]
 80076c8:	887b      	ldrh	r3, [r7, #2]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d901      	bls.n	80076d2 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80076ce:	887b      	ldrh	r3, [r7, #2]
 80076d0:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80076d2:	2300      	movs	r3, #0
 80076d4:	777b      	strb	r3, [r7, #29]
 80076d6:	e010      	b.n	80076fa <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80076d8:	f107 0116 	add.w	r1, r7, #22
 80076dc:	f107 0317 	add.w	r3, r7, #23
 80076e0:	2201      	movs	r2, #1
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fe04 	bl	80082f0 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80076e8:	7f7b      	ldrb	r3, [r7, #29]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	4413      	add	r3, r2
 80076ee:	7dba      	ldrb	r2, [r7, #22]
 80076f0:	b2d2      	uxtb	r2, r2
 80076f2:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80076f4:	7f7b      	ldrb	r3, [r7, #29]
 80076f6:	3301      	adds	r3, #1
 80076f8:	777b      	strb	r3, [r7, #29]
 80076fa:	7f7b      	ldrb	r3, [r7, #29]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	8bfa      	ldrh	r2, [r7, #30]
 8007700:	429a      	cmp	r2, r3
 8007702:	d8e9      	bhi.n	80076d8 <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8007704:	f001 f8bc 	bl	8008880 <HAL_GetTick>
 8007708:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800770a:	e007      	b.n	800771c <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800770c:	2101      	movs	r1, #1
 800770e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007712:	f002 fa19 	bl	8009b48 <HAL_GPIO_ReadPin>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d008      	beq.n	800772e <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800771c:	f001 f8b0 	bl	8008880 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800772a:	d3ef      	bcc.n	800770c <HCI_TL_SPI_Receive+0xa0>
 800772c:	e000      	b.n	8007730 <HCI_TL_SPI_Receive+0xc4>
      break;
 800772e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8007730:	f7ff ff0d 	bl	800754e <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007734:	2201      	movs	r2, #1
 8007736:	2102      	movs	r1, #2
 8007738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800773c:	f002 fa1c 	bl	8009b78 <HAL_GPIO_WritePin>

  return len;
 8007740:	7f7b      	ldrb	r3, [r7, #29]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	08011308 	.word	0x08011308

08007750 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800775c:	4a41      	ldr	r2, [pc, #260]	; (8007864 <HCI_TL_SPI_Send+0x114>)
 800775e:	f107 0314 	add.w	r3, r7, #20
 8007762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007766:	6018      	str	r0, [r3, #0]
 8007768:	3304      	adds	r3, #4
 800776a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800776c:	f001 f888 	bl	8008880 <HAL_GetTick>
 8007770:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8007772:	f7ff fef3 	bl	800755c <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 8007776:	f001 f883 	bl	8008880 <HAL_GetTick>
 800777a:	61f8      	str	r0, [r7, #28]

    result = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8007780:	2200      	movs	r2, #0
 8007782:	2102      	movs	r1, #2
 8007784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007788:	f002 f9f6 	bl	8009b78 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 800778c:	e00a      	b.n	80077a4 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 800778e:	f001 f877 	bl	8008880 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b64      	cmp	r3, #100	; 0x64
 800779a:	d903      	bls.n	80077a4 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 800779c:	f06f 0302 	mvn.w	r3, #2
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80077a2:	e004      	b.n	80077ae <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80077a4:	f000 f862 	bl	800786c <IsDataAvailable>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0ef      	beq.n	800778e <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	f113 0f03 	cmn.w	r3, #3
 80077b4:	d106      	bne.n	80077c4 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80077b6:	2201      	movs	r2, #1
 80077b8:	2102      	movs	r1, #2
 80077ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077be:	f002 f9db 	bl	8009b78 <HAL_GPIO_WritePin>
      break;
 80077c2:	e031      	b.n	8007828 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80077c4:	f107 010c 	add.w	r1, r7, #12
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	2205      	movs	r2, #5
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fd8e 	bl	80082f0 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	b21a      	sxth	r2, r3
 80077da:	7b7b      	ldrb	r3, [r7, #13]
 80077dc:	b21b      	sxth	r3, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	b21b      	sxth	r3, r3
 80077e2:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80077e4:	8b7a      	ldrh	r2, [r7, #26]
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d306      	bcc.n	80077fa <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80077ec:	887b      	ldrh	r3, [r7, #2]
 80077ee:	461a      	mov	r2, r3
 80077f0:	491d      	ldr	r1, [pc, #116]	; (8007868 <HCI_TL_SPI_Send+0x118>)
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fd7c 	bl	80082f0 <BSP_SPI1_SendRecv>
 80077f8:	e002      	b.n	8007800 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80077fa:	f06f 0301 	mvn.w	r3, #1
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007800:	2201      	movs	r2, #1
 8007802:	2102      	movs	r1, #2
 8007804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007808:	f002 f9b6 	bl	8009b78 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800780c:	f001 f838 	bl	8008880 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b64      	cmp	r3, #100	; 0x64
 8007818:	d903      	bls.n	8007822 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 800781a:	f06f 0302 	mvn.w	r3, #2
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007820:	e002      	b.n	8007828 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	dba6      	blt.n	8007776 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8007828:	f001 f82a 	bl	8008880 <HAL_GetTick>
 800782c:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800782e:	e007      	b.n	8007840 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8007830:	2101      	movs	r1, #1
 8007832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007836:	f002 f987 	bl	8009b48 <HAL_GPIO_ReadPin>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8007840:	f001 f81e 	bl	8008880 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800784e:	d3ef      	bcc.n	8007830 <HCI_TL_SPI_Send+0xe0>
 8007850:	e000      	b.n	8007854 <HCI_TL_SPI_Send+0x104>
      break;
 8007852:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8007854:	f7ff fe7b 	bl	800754e <HCI_TL_SPI_Enable_IRQ>

  return result;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	08011310 	.word	0x08011310
 8007868:	2000023c 	.word	0x2000023c

0800786c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8007870:	2101      	movs	r1, #1
 8007872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007876:	f002 f967 	bl	8009b48 <HAL_GPIO_ReadPin>
 800787a:	4603      	mov	r3, r0
 800787c:	2b01      	cmp	r3, #1
 800787e:	bf0c      	ite	eq
 8007880:	2301      	moveq	r3, #1
 8007882:	2300      	movne	r3, #0
 8007884:	b2db      	uxtb	r3, r3
}
 8007886:	4618      	mov	r0, r3
 8007888:	bd80      	pop	{r7, pc}
	...

0800788c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8007892:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <hci_tl_lowlevel_init+0x54>)
 8007894:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8007896:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <hci_tl_lowlevel_init+0x58>)
 8007898:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <hci_tl_lowlevel_init+0x5c>)
 800789c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <hci_tl_lowlevel_init+0x60>)
 80078a0:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <hci_tl_lowlevel_init+0x64>)
 80078a4:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80078a6:	4b13      	ldr	r3, [pc, #76]	; (80078f4 <hci_tl_lowlevel_init+0x68>)
 80078a8:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80078aa:	1d3b      	adds	r3, r7, #4
 80078ac:	4618      	mov	r0, r3
 80078ae:	f007 fcc9 	bl	800f244 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80078b2:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80078b6:	4810      	ldr	r0, [pc, #64]	; (80078f8 <hci_tl_lowlevel_init+0x6c>)
 80078b8:	f001 fbd0 	bl	800905c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80078bc:	4a0f      	ldr	r2, [pc, #60]	; (80078fc <hci_tl_lowlevel_init+0x70>)
 80078be:	2100      	movs	r1, #0
 80078c0:	480d      	ldr	r0, [pc, #52]	; (80078f8 <hci_tl_lowlevel_init+0x6c>)
 80078c2:	f001 fbb1 	bl	8009028 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80078c6:	2200      	movs	r2, #0
 80078c8:	2100      	movs	r1, #0
 80078ca:	2006      	movs	r0, #6
 80078cc:	f001 f927 	bl	8008b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80078d0:	2006      	movs	r0, #6
 80078d2:	f001 f940 	bl	8008b56 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80078d6:	bf00      	nop
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	0800756d 	.word	0x0800756d
 80078e4:	08007605 	.word	0x08007605
 80078e8:	08007751 	.word	0x08007751
 80078ec:	0800766d 	.word	0x0800766d
 80078f0:	0800762f 	.word	0x0800762f
 80078f4:	08008331 	.word	0x08008331
 80078f8:	20000234 	.word	0x20000234
 80078fc:	08007901 	.word	0x08007901

08007900 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8007904:	e005      	b.n	8007912 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8007906:	2000      	movs	r0, #0
 8007908:	f007 fe02 	bl	800f510 <hci_notify_asynch_evt>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d105      	bne.n	800791e <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8007912:	f7ff ffab 	bl	800786c <IsDataAvailable>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f4      	bne.n	8007906 <hci_tl_lowlevel_isr+0x6>
 800791c:	e000      	b.n	8007920 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800791e:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8007920:	bd80      	pop	{r7, pc}

08007922 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007926:	f000 ff3b 	bl	80087a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800792a:	f000 f809 	bl	8007940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800792e:	f000 f87b 	bl	8007a28 <MX_GPIO_Init>
  MX_CRC_Init();
 8007932:	f000 f857 	bl	80079e4 <MX_CRC_Init>
  MX_BlueNRG_2_Init();
 8007936:	f7fd fa57 	bl	8004de8 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 800793a:	f7fd fa7b 	bl	8004e34 <MX_BlueNRG_2_Process>
 800793e:	e7fc      	b.n	800793a <main+0x18>

08007940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b096      	sub	sp, #88	; 0x58
 8007944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007946:	f107 0314 	add.w	r3, r7, #20
 800794a:	2244      	movs	r2, #68	; 0x44
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f007 ff7e 	bl	800f850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007954:	463b      	mov	r3, r7
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	605a      	str	r2, [r3, #4]
 800795c:	609a      	str	r2, [r3, #8]
 800795e:	60da      	str	r2, [r3, #12]
 8007960:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007962:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007966:	f002 f947 	bl	8009bf8 <HAL_PWREx_ControlVoltageScaling>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007970:	f000 f8d0 	bl	8007b14 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007974:	2302      	movs	r3, #2
 8007976:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800797c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800797e:	2310      	movs	r3, #16
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007982:	2302      	movs	r3, #2
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007986:	2302      	movs	r3, #2
 8007988:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800798a:	2301      	movs	r3, #1
 800798c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800798e:	2308      	movs	r3, #8
 8007990:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007992:	2307      	movs	r3, #7
 8007994:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007996:	2302      	movs	r3, #2
 8007998:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800799a:	2302      	movs	r3, #2
 800799c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800799e:	f107 0314 	add.w	r3, r7, #20
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 f97e 	bl	8009ca4 <HAL_RCC_OscConfig>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80079ae:	f000 f8b1 	bl	8007b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079b2:	230f      	movs	r3, #15
 80079b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079b6:	2303      	movs	r3, #3
 80079b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80079c6:	463b      	mov	r3, r7
 80079c8:	2103      	movs	r1, #3
 80079ca:	4618      	mov	r0, r3
 80079cc:	f002 fd52 	bl	800a474 <HAL_RCC_ClockConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80079d6:	f000 f89d 	bl	8007b14 <Error_Handler>
  }
}
 80079da:	bf00      	nop
 80079dc:	3758      	adds	r7, #88	; 0x58
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <MX_CRC_Init+0x3c>)
 80079ea:	4a0e      	ldr	r2, [pc, #56]	; (8007a24 <MX_CRC_Init+0x40>)
 80079ec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80079ee:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <MX_CRC_Init+0x3c>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80079f4:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <MX_CRC_Init+0x3c>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80079fa:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <MX_CRC_Init+0x3c>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <MX_CRC_Init+0x3c>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007a06:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <MX_CRC_Init+0x3c>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007a0c:	4804      	ldr	r0, [pc, #16]	; (8007a20 <MX_CRC_Init+0x3c>)
 8007a0e:	f001 f8cf 	bl	8008bb0 <HAL_CRC_Init>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8007a18:	f000 f87c 	bl	8007b14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007a1c:	bf00      	nop
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	2000033c 	.word	0x2000033c
 8007a24:	40023000 	.word	0x40023000

08007a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a2e:	f107 0314 	add.w	r3, r7, #20
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	609a      	str	r2, [r3, #8]
 8007a3a:	60da      	str	r2, [r3, #12]
 8007a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a3e:	4b34      	ldr	r3, [pc, #208]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	4a33      	ldr	r2, [pc, #204]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a44:	f043 0304 	orr.w	r3, r3, #4
 8007a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a4a:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	f003 0304 	and.w	r3, r3, #4
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a56:	4b2e      	ldr	r3, [pc, #184]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5a:	4a2d      	ldr	r2, [pc, #180]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a62:	4b2b      	ldr	r3, [pc, #172]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a6e:	4b28      	ldr	r3, [pc, #160]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a72:	4a27      	ldr	r2, [pc, #156]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a74:	f043 0301 	orr.w	r3, r3, #1
 8007a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a7a:	4b25      	ldr	r3, [pc, #148]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	60bb      	str	r3, [r7, #8]
 8007a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a86:	4b22      	ldr	r3, [pc, #136]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8a:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a8c:	f043 0302 	orr.w	r3, r3, #2
 8007a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a92:	4b1f      	ldr	r3, [pc, #124]	; (8007b10 <MX_GPIO_Init+0xe8>)
 8007a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	607b      	str	r3, [r7, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aa8:	f002 f866 	bl	8009b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aba:	f107 0314 	add.w	r3, r7, #20
 8007abe:	4619      	mov	r1, r3
 8007ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ac4:	f001 fda2 	bl	800960c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8007ac8:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	4619      	mov	r1, r3
 8007ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ae4:	f001 fd92 	bl	800960c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2100      	movs	r1, #0
 8007aec:	2006      	movs	r0, #6
 8007aee:	f001 f816 	bl	8008b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007af2:	2006      	movs	r0, #6
 8007af4:	f001 f82f 	bl	8008b56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007af8:	2200      	movs	r2, #0
 8007afa:	2100      	movs	r1, #0
 8007afc:	2028      	movs	r0, #40	; 0x28
 8007afe:	f001 f80e 	bl	8008b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007b02:	2028      	movs	r0, #40	; 0x28
 8007b04:	f001 f827 	bl	8008b56 <HAL_NVIC_EnableIRQ>

}
 8007b08:	bf00      	nop
 8007b0a:	3728      	adds	r7, #40	; 0x28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	40021000 	.word	0x40021000

08007b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007b18:	b672      	cpsid	i
}
 8007b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007b1c:	e7fe      	b.n	8007b1c <Error_Handler+0x8>
	...

08007b20 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b092      	sub	sp, #72	; 0x48
 8007b24:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8007b26:	4a36      	ldr	r2, [pc, #216]	; (8007c00 <Set_DeviceConnectable+0xe0>)
 8007b28:	f107 031c 	add.w	r3, r7, #28
 8007b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b30:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8007b34:	2302      	movs	r3, #2
 8007b36:	703b      	strb	r3, [r7, #0]
 8007b38:	230a      	movs	r3, #10
 8007b3a:	707b      	strb	r3, [r7, #1]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	70bb      	strb	r3, [r7, #2]
 8007b40:	2308      	movs	r3, #8
 8007b42:	70fb      	strb	r3, [r7, #3]
 8007b44:	2309      	movs	r3, #9
 8007b46:	713b      	strb	r3, [r7, #4]
 8007b48:	2342      	movs	r3, #66	; 0x42
 8007b4a:	717b      	strb	r3, [r7, #5]
 8007b4c:	236c      	movs	r3, #108	; 0x6c
 8007b4e:	71bb      	strb	r3, [r7, #6]
 8007b50:	2375      	movs	r3, #117	; 0x75
 8007b52:	71fb      	strb	r3, [r7, #7]
 8007b54:	2365      	movs	r3, #101	; 0x65
 8007b56:	723b      	strb	r3, [r7, #8]
 8007b58:	234e      	movs	r3, #78	; 0x4e
 8007b5a:	727b      	strb	r3, [r7, #9]
 8007b5c:	2352      	movs	r3, #82	; 0x52
 8007b5e:	72bb      	strb	r3, [r7, #10]
 8007b60:	2347      	movs	r3, #71	; 0x47
 8007b62:	72fb      	strb	r3, [r7, #11]
 8007b64:	230d      	movs	r3, #13
 8007b66:	733b      	strb	r3, [r7, #12]
 8007b68:	23ff      	movs	r3, #255	; 0xff
 8007b6a:	737b      	strb	r3, [r7, #13]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	73bb      	strb	r3, [r7, #14]
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	73fb      	strb	r3, [r7, #15]
 8007b74:	2300      	movs	r3, #0
 8007b76:	743b      	strb	r3, [r7, #16]
 8007b78:	23f4      	movs	r3, #244	; 0xf4
 8007b7a:	747b      	strb	r3, [r7, #17]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	74bb      	strb	r3, [r7, #18]
 8007b80:	2300      	movs	r3, #0
 8007b82:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8007b84:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <Set_DeviceConnectable+0xe4>)
 8007b86:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8007b88:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8007b8a:	4b1e      	ldr	r3, [pc, #120]	; (8007c04 <Set_DeviceConnectable+0xe4>)
 8007b8c:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8007b8e:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8007b90:	4b1c      	ldr	r3, [pc, #112]	; (8007c04 <Set_DeviceConnectable+0xe4>)
 8007b92:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8007b94:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8007b96:	4b1b      	ldr	r3, [pc, #108]	; (8007c04 <Set_DeviceConnectable+0xe4>)
 8007b98:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8007b9a:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8007b9c:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <Set_DeviceConnectable+0xe4>)
 8007b9e:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8007ba0:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8007ba2:	4b18      	ldr	r3, [pc, #96]	; (8007c04 <Set_DeviceConnectable+0xe4>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8007ba6:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8007ba8:	7cbb      	ldrb	r3, [r7, #18]
 8007baa:	f043 0301 	orr.w	r3, r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f007 f9f0 	bl	800ef9a <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9305      	str	r3, [sp, #20]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	f107 031c 	add.w	r3, r7, #28
 8007bce:	9302      	str	r3, [sp, #8]
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007be2:	2000      	movs	r0, #0
 8007be4:	f004 fc8d 	bl	800c502 <aci_gap_set_discoverable>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 PUBLIC_ADDR,
                                 NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8007bee:	463b      	mov	r3, r7
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	201a      	movs	r0, #26
 8007bf4:	f005 f82f 	bl	800cc56 <aci_gap_update_adv_data>
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else {
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3728      	adds	r7, #40	; 0x28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	08011318 	.word	0x08011318
 8007c04:	200000d4 	.word	0x200000d4

08007c08 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d163      	bne.n	8007ce4 <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b3e      	cmp	r3, #62	; 0x3e
 8007c28:	d11e      	bne.n	8007c68 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	e014      	b.n	8007c60 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	492b      	ldr	r1, [pc, #172]	; (8007cec <APP_UserEvtRx+0xe4>)
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d108      	bne.n	8007c5a <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8007c48:	4a28      	ldr	r2, [pc, #160]	; (8007cec <APP_UserEvtRx+0xe4>)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	4413      	add	r3, r2
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	3201      	adds	r2, #1
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61fb      	str	r3, [r7, #28]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	2b09      	cmp	r3, #9
 8007c64:	d9e7      	bls.n	8007c36 <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8007c66:	e03d      	b.n	8007ce4 <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2bff      	cmp	r3, #255	; 0xff
 8007c6e:	d11e      	bne.n	8007cae <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3302      	adds	r3, #2
 8007c74:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e014      	b.n	8007ca6 <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	491b      	ldr	r1, [pc, #108]	; (8007cf0 <APP_UserEvtRx+0xe8>)
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d108      	bne.n	8007ca0 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8007c8e:	4a18      	ldr	r2, [pc, #96]	; (8007cf0 <APP_UserEvtRx+0xe8>)
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	4413      	add	r3, r2
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	3202      	adds	r2, #2
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8007caa:	d9e7      	bls.n	8007c7c <APP_UserEvtRx+0x74>
}
 8007cac:	e01a      	b.n	8007ce4 <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e014      	b.n	8007cde <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	490e      	ldr	r1, [pc, #56]	; (8007cf4 <APP_UserEvtRx+0xec>)
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d108      	bne.n	8007cd8 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 8007cc6:	4a0b      	ldr	r2, [pc, #44]	; (8007cf4 <APP_UserEvtRx+0xec>)
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4413      	add	r3, r2
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	3202      	adds	r2, #2
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	2b06      	cmp	r3, #6
 8007ce2:	d9e7      	bls.n	8007cb4 <APP_UserEvtRx+0xac>
}
 8007ce4:	bf00      	nop
 8007ce6:	3720      	adds	r7, #32
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	080113b4 	.word	0x080113b4
 8007cf0:	08011404 	.word	0x08011404
 8007cf4:	0801137c 	.word	0x0801137c

08007cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cfe:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <HAL_MspInit+0x44>)
 8007d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d02:	4a0e      	ldr	r2, [pc, #56]	; (8007d3c <HAL_MspInit+0x44>)
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	6613      	str	r3, [r2, #96]	; 0x60
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <HAL_MspInit+0x44>)
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	607b      	str	r3, [r7, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <HAL_MspInit+0x44>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1a:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <HAL_MspInit+0x44>)
 8007d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d20:	6593      	str	r3, [r2, #88]	; 0x58
 8007d22:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <HAL_MspInit+0x44>)
 8007d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40021000 	.word	0x40021000

08007d40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a0a      	ldr	r2, [pc, #40]	; (8007d78 <HAL_CRC_MspInit+0x38>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d10b      	bne.n	8007d6a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <HAL_CRC_MspInit+0x3c>)
 8007d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d56:	4a09      	ldr	r2, [pc, #36]	; (8007d7c <HAL_CRC_MspInit+0x3c>)
 8007d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d5c:	6493      	str	r3, [r2, #72]	; 0x48
 8007d5e:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <HAL_CRC_MspInit+0x3c>)
 8007d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	40023000 	.word	0x40023000
 8007d7c:	40021000 	.word	0x40021000

08007d80 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a07      	ldr	r2, [pc, #28]	; (8007dac <HAL_CRC_MspDeInit+0x2c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d105      	bne.n	8007d9e <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <HAL_CRC_MspDeInit+0x30>)
 8007d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d96:	4a06      	ldr	r2, [pc, #24]	; (8007db0 <HAL_CRC_MspDeInit+0x30>)
 8007d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9c:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40023000 	.word	0x40023000
 8007db0:	40021000 	.word	0x40021000

08007db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007db8:	e7fe      	b.n	8007db8 <NMI_Handler+0x4>

08007dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007dbe:	e7fe      	b.n	8007dbe <HardFault_Handler+0x4>

08007dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007dc4:	e7fe      	b.n	8007dc4 <MemManage_Handler+0x4>

08007dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dca:	e7fe      	b.n	8007dca <BusFault_Handler+0x4>

08007dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007dd0:	e7fe      	b.n	8007dd0 <UsageFault_Handler+0x4>

08007dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007dd6:	bf00      	nop
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007de4:	bf00      	nop
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007dee:	b480      	push	{r7}
 8007df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007df2:	bf00      	nop
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e00:	f000 fd2a 	bl	8008858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e04:	bf00      	nop
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8007e0c:	4802      	ldr	r0, [pc, #8]	; (8007e18 <EXTI0_IRQHandler+0x10>)
 8007e0e:	f001 f939 	bl	8009084 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007e12:	bf00      	nop
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000234 	.word	0x20000234

08007e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8007e20:	4802      	ldr	r0, [pc, #8]	; (8007e2c <EXTI15_10_IRQHandler+0x10>)
 8007e22:	f001 f92f 	bl	8009084 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000014 	.word	0x20000014

08007e30 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <BSP_LED_Init+0x20>)
 8007e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e42:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	08011320 	.word	0x08011320

08007e54 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4a06      	ldr	r2, [pc, #24]	; (8007e7c <BSP_LED_On+0x28>)
 8007e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e66:	2120      	movs	r1, #32
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f001 fe84 	bl	8009b78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000000c 	.word	0x2000000c

08007e80 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	4a06      	ldr	r2, [pc, #24]	; (8007ea8 <BSP_LED_Off+0x28>)
 8007e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e92:	2120      	movs	r1, #32
 8007e94:	2200      	movs	r2, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 fe6e 	bl	8009b78 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	2000000c 	.word	0x2000000c

08007eac <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	4a06      	ldr	r2, [pc, #24]	; (8007ed4 <BSP_LED_Toggle+0x28>)
 8007eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fe70 	bl	8009ba8 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	2000000c 	.word	0x2000000c

08007ed8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ede:	4b1c      	ldr	r3, [pc, #112]	; (8007f50 <LED_USER_GPIO_Init+0x78>)
 8007ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <LED_USER_GPIO_Init+0x78>)
 8007ee4:	f043 0301 	orr.w	r3, r3, #1
 8007ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007eea:	4b19      	ldr	r3, [pc, #100]	; (8007f50 <LED_USER_GPIO_Init+0x78>)
 8007eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	60bb      	str	r3, [r7, #8]
 8007ef4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef6:	f107 030c 	add.w	r3, r7, #12
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]
 8007efe:	605a      	str	r2, [r3, #4]
 8007f00:	609a      	str	r2, [r3, #8]
 8007f02:	60da      	str	r2, [r3, #12]
 8007f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <LED_USER_GPIO_Init+0x78>)
 8007f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f0a:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <LED_USER_GPIO_Init+0x78>)
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f12:	4b0f      	ldr	r3, [pc, #60]	; (8007f50 <LED_USER_GPIO_Init+0x78>)
 8007f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	607b      	str	r3, [r7, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2120      	movs	r1, #32
 8007f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f26:	f001 fe27 	bl	8009b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8007f2a:	2320      	movs	r3, #32
 8007f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8007f3a:	f107 030c 	add.w	r3, r7, #12
 8007f3e:	4619      	mov	r1, r3
 8007f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f44:	f001 fb62 	bl	800960c <HAL_GPIO_Init>

}
 8007f48:	bf00      	nop
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	40021000 	.word	0x40021000

08007f54 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	71fb      	strb	r3, [r7, #7]
 8007f60:	4613      	mov	r3, r2
 8007f62:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	4a1f      	ldr	r2, [pc, #124]	; (8007fe8 <BSP_PB_Init+0x94>)
 8007f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f70:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8007f72:	79bb      	ldrb	r3, [r7, #6]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d132      	bne.n	8007fde <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	4a1b      	ldr	r2, [pc, #108]	; (8007fec <BSP_PB_Init+0x98>)
 8007f7e:	441a      	add	r2, r3
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	491b      	ldr	r1, [pc, #108]	; (8007ff0 <BSP_PB_Init+0x9c>)
 8007f84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	f001 f866 	bl	800905c <HAL_EXTI_GetHandle>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007f96:	f06f 0303 	mvn.w	r3, #3
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	e01f      	b.n	8007fde <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	4a12      	ldr	r2, [pc, #72]	; (8007fec <BSP_PB_Init+0x98>)
 8007fa4:	1898      	adds	r0, r3, r2
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	4a12      	ldr	r2, [pc, #72]	; (8007ff4 <BSP_PB_Init+0xa0>)
 8007faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f001 f839 	bl	8009028 <HAL_EXTI_RegisterCallback>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007fbc:	f06f 0303 	mvn.w	r3, #3
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e00c      	b.n	8007fde <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8007fc4:	2028      	movs	r0, #40	; 0x28
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	4a0b      	ldr	r2, [pc, #44]	; (8007ff8 <BSP_PB_Init+0xa4>)
 8007fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f000 fda4 	bl	8008b1e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8007fd6:	2328      	movs	r3, #40	; 0x28
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fdbc 	bl	8008b56 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8007fde:	68fb      	ldr	r3, [r7, #12]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	08011324 	.word	0x08011324
 8007fec:	20000014 	.word	0x20000014
 8007ff0:	08011328 	.word	0x08011328
 8007ff4:	0801132c 	.word	0x0801132c
 8007ff8:	08011330 	.word	0x08011330

08007ffc <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	4a09      	ldr	r2, [pc, #36]	; (8008030 <BSP_PB_GetState+0x34>)
 800800a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008012:	4611      	mov	r1, r2
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fd97 	bl	8009b48 <HAL_GPIO_ReadPin>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bf0c      	ite	eq
 8008020:	2301      	moveq	r3, #1
 8008022:	2300      	movne	r3, #0
 8008024:	b2db      	uxtb	r3, r3
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000010 	.word	0x20000010

08008034 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008038:	2000      	movs	r0, #0
 800803a:	f7fe fa81 	bl	8006540 <BSP_PB_Callback>
}
 800803e:	bf00      	nop
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800804a:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <BUTTON_USER_GPIO_Init+0x6c>)
 800804c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <BUTTON_USER_GPIO_Init+0x6c>)
 8008050:	f043 0304 	orr.w	r3, r3, #4
 8008054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008056:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <BUTTON_USER_GPIO_Init+0x6c>)
 8008058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805a:	f003 0304 	and.w	r3, r3, #4
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008062:	f107 030c 	add.w	r3, r7, #12
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	605a      	str	r2, [r3, #4]
 800806c:	609a      	str	r2, [r3, #8]
 800806e:	60da      	str	r2, [r3, #12]
 8008070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <BUTTON_USER_GPIO_Init+0x6c>)
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	4a0e      	ldr	r2, [pc, #56]	; (80080b0 <BUTTON_USER_GPIO_Init+0x6c>)
 8008078:	f043 0304 	orr.w	r3, r3, #4
 800807c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <BUTTON_USER_GPIO_Init+0x6c>)
 8008080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	607b      	str	r3, [r7, #4]
 8008088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800808a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800808e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008090:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	4619      	mov	r1, r3
 80080a0:	4804      	ldr	r0, [pc, #16]	; (80080b4 <BUTTON_USER_GPIO_Init+0x70>)
 80080a2:	f001 fab3 	bl	800960c <HAL_GPIO_Init>

}
 80080a6:	bf00      	nop
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40021000 	.word	0x40021000
 80080b4:	48000800 	.word	0x48000800

080080b8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80080c6:	79fb      	ldrb	r3, [r7, #7]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d903      	bls.n	80080d4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80080cc:	f06f 0301 	mvn.w	r3, #1
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e025      	b.n	8008120 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	79fa      	ldrb	r2, [r7, #7]
 80080d8:	4914      	ldr	r1, [pc, #80]	; (800812c <BSP_COM_Init+0x74>)
 80080da:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80080de:	4814      	ldr	r0, [pc, #80]	; (8008130 <BSP_COM_Init+0x78>)
 80080e0:	4613      	mov	r3, r2
 80080e2:	015b      	lsls	r3, r3, #5
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4403      	add	r3, r0
 80080ea:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	4613      	mov	r3, r2
 80080f0:	015b      	lsls	r3, r3, #5
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4a0e      	ldr	r2, [pc, #56]	; (8008130 <BSP_COM_Init+0x78>)
 80080f8:	4413      	add	r3, r2
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f86a 	bl	80081d4 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8008100:	79fa      	ldrb	r2, [r7, #7]
 8008102:	4613      	mov	r3, r2
 8008104:	015b      	lsls	r3, r3, #5
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4a09      	ldr	r2, [pc, #36]	; (8008130 <BSP_COM_Init+0x78>)
 800810c:	4413      	add	r3, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f810 	bl	8008134 <MX_USART2_UART_Init>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800811a:	f06f 0303 	mvn.w	r3, #3
 800811e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008120:	68fb      	ldr	r3, [r7, #12]
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	2000001c 	.word	0x2000001c
 8008130:	20000398 	.word	0x20000398

08008134 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a15      	ldr	r2, [pc, #84]	; (8008198 <MX_USART2_UART_Init+0x64>)
 8008144:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800814c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	220c      	movs	r2, #12
 8008164:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f003 fc6c 	bl	800ba5c <HAL_UART_Init>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800818e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40004400 	.word	0x40004400

0800819c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80081a4:	4b09      	ldr	r3, [pc, #36]	; (80081cc <__io_putchar+0x30>)
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	461a      	mov	r2, r3
 80081aa:	4613      	mov	r3, r2
 80081ac:	015b      	lsls	r3, r3, #5
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <__io_putchar+0x34>)
 80081b4:	1898      	adds	r0, r3, r2
 80081b6:	1d39      	adds	r1, r7, #4
 80081b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081bc:	2201      	movs	r2, #1
 80081be:	f003 fca5 	bl	800bb0c <HAL_UART_Transmit>
  return ch;
 80081c2:	687b      	ldr	r3, [r7, #4]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	2000041c 	.word	0x2000041c
 80081d0:	20000398 	.word	0x20000398

080081d4 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b0ac      	sub	sp, #176	; 0xb0
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80081dc:	f107 0314 	add.w	r3, r7, #20
 80081e0:	2288      	movs	r2, #136	; 0x88
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f007 fb33 	bl	800f850 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80081ea:	2302      	movs	r3, #2
 80081ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80081ee:	2300      	movs	r3, #0
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	4618      	mov	r0, r3
 80081f8:	f002 fb42 	bl	800a880 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80081fc:	4b23      	ldr	r3, [pc, #140]	; (800828c <USART2_MspInit+0xb8>)
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	4a22      	ldr	r2, [pc, #136]	; (800828c <USART2_MspInit+0xb8>)
 8008202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008206:	6593      	str	r3, [r2, #88]	; 0x58
 8008208:	4b20      	ldr	r3, [pc, #128]	; (800828c <USART2_MspInit+0xb8>)
 800820a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008214:	4b1d      	ldr	r3, [pc, #116]	; (800828c <USART2_MspInit+0xb8>)
 8008216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008218:	4a1c      	ldr	r2, [pc, #112]	; (800828c <USART2_MspInit+0xb8>)
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008220:	4b1a      	ldr	r3, [pc, #104]	; (800828c <USART2_MspInit+0xb8>)
 8008222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800822c:	2304      	movs	r3, #4
 800822e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008232:	2302      	movs	r3, #2
 8008234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008238:	2300      	movs	r3, #0
 800823a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800823e:	2300      	movs	r3, #0
 8008240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008244:	2307      	movs	r3, #7
 8008246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800824a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800824e:	4619      	mov	r1, r3
 8008250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008254:	f001 f9da 	bl	800960c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008258:	2308      	movs	r3, #8
 800825a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800825e:	2302      	movs	r3, #2
 8008260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800826a:	2300      	movs	r3, #0
 800826c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008270:	2307      	movs	r3, #7
 8008272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8008276:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800827a:	4619      	mov	r1, r3
 800827c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008280:	f001 f9c4 	bl	800960c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008284:	bf00      	nop
 8008286:	37b0      	adds	r7, #176	; 0xb0
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	40021000 	.word	0x40021000

08008290 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8008296:	2300      	movs	r3, #0
 8008298:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <BSP_SPI1_Init+0x54>)
 800829c:	4a12      	ldr	r2, [pc, #72]	; (80082e8 <BSP_SPI1_Init+0x58>)
 800829e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80082a0:	4b12      	ldr	r3, [pc, #72]	; (80082ec <BSP_SPI1_Init+0x5c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	4911      	ldr	r1, [pc, #68]	; (80082ec <BSP_SPI1_Init+0x5c>)
 80082a8:	600a      	str	r2, [r1, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d114      	bne.n	80082d8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80082ae:	480d      	ldr	r0, [pc, #52]	; (80082e4 <BSP_SPI1_Init+0x54>)
 80082b0:	f003 fa62 	bl	800b778 <HAL_SPI_GetState>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10e      	bne.n	80082d8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80082ba:	480a      	ldr	r0, [pc, #40]	; (80082e4 <BSP_SPI1_Init+0x54>)
 80082bc:	f000 f882 	bl	80083c4 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d108      	bne.n	80082d8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80082c6:	4807      	ldr	r0, [pc, #28]	; (80082e4 <BSP_SPI1_Init+0x54>)
 80082c8:	f000 f83a 	bl	8008340 <MX_SPI1_Init>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80082d2:	f06f 0307 	mvn.w	r3, #7
 80082d6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80082d8:	687b      	ldr	r3, [r7, #4]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000420 	.word	0x20000420
 80082e8:	40013000 	.word	0x40013000
 80082ec:	20000484 	.word	0x20000484

080082f0 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af02      	add	r7, sp, #8
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	4613      	mov	r3, r2
 80082fc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008308:	9200      	str	r2, [sp, #0]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	68f9      	ldr	r1, [r7, #12]
 800830e:	4807      	ldr	r0, [pc, #28]	; (800832c <BSP_SPI1_SendRecv+0x3c>)
 8008310:	f003 f81f 	bl	800b352 <HAL_SPI_TransmitReceive>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800831a:	f06f 0305 	mvn.w	r3, #5
 800831e:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8008320:	697b      	ldr	r3, [r7, #20]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000420 	.word	0x20000420

08008330 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008334:	f000 faa4 	bl	8008880 <HAL_GetTick>
 8008338:	4603      	mov	r3, r0
}
 800833a:	4618      	mov	r0, r3
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <MX_SPI1_Init+0x80>)
 8008350:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008358:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008366:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800837a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2228      	movs	r2, #40	; 0x28
 8008380:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2207      	movs	r2, #7
 8008398:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 ff26 	bl	800b1f8 <HAL_SPI_Init>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	40013000 	.word	0x40013000

080083c4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	; 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80083cc:	4b2c      	ldr	r3, [pc, #176]	; (8008480 <SPI1_MspInit+0xbc>)
 80083ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d0:	4a2b      	ldr	r2, [pc, #172]	; (8008480 <SPI1_MspInit+0xbc>)
 80083d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083d6:	6613      	str	r3, [r2, #96]	; 0x60
 80083d8:	4b29      	ldr	r3, [pc, #164]	; (8008480 <SPI1_MspInit+0xbc>)
 80083da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083e0:	613b      	str	r3, [r7, #16]
 80083e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083e4:	4b26      	ldr	r3, [pc, #152]	; (8008480 <SPI1_MspInit+0xbc>)
 80083e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e8:	4a25      	ldr	r2, [pc, #148]	; (8008480 <SPI1_MspInit+0xbc>)
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083f0:	4b23      	ldr	r3, [pc, #140]	; (8008480 <SPI1_MspInit+0xbc>)
 80083f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
 80083fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083fc:	4b20      	ldr	r3, [pc, #128]	; (8008480 <SPI1_MspInit+0xbc>)
 80083fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008400:	4a1f      	ldr	r2, [pc, #124]	; (8008480 <SPI1_MspInit+0xbc>)
 8008402:	f043 0302 	orr.w	r3, r3, #2
 8008406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008408:	4b1d      	ldr	r3, [pc, #116]	; (8008480 <SPI1_MspInit+0xbc>)
 800840a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8008414:	2340      	movs	r3, #64	; 0x40
 8008416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008418:	2302      	movs	r3, #2
 800841a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008420:	2303      	movs	r3, #3
 8008422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8008424:	2305      	movs	r3, #5
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8008428:	f107 0314 	add.w	r3, r7, #20
 800842c:	4619      	mov	r1, r3
 800842e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008432:	f001 f8eb 	bl	800960c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8008436:	2380      	movs	r3, #128	; 0x80
 8008438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800843a:	2302      	movs	r3, #2
 800843c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843e:	2300      	movs	r3, #0
 8008440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008442:	2303      	movs	r3, #3
 8008444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8008446:	2305      	movs	r3, #5
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800844a:	f107 0314 	add.w	r3, r7, #20
 800844e:	4619      	mov	r1, r3
 8008450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008454:	f001 f8da 	bl	800960c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8008458:	2308      	movs	r3, #8
 800845a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845c:	2302      	movs	r3, #2
 800845e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008460:	2300      	movs	r3, #0
 8008462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008464:	2303      	movs	r3, #3
 8008466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8008468:	2305      	movs	r3, #5
 800846a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800846c:	f107 0314 	add.w	r3, r7, #20
 8008470:	4619      	mov	r1, r3
 8008472:	4804      	ldr	r0, [pc, #16]	; (8008484 <SPI1_MspInit+0xc0>)
 8008474:	f001 f8ca 	bl	800960c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8008478:	bf00      	nop
 800847a:	3728      	adds	r7, #40	; 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	40021000 	.word	0x40021000
 8008484:	48000400 	.word	0x48000400

08008488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0
	return 1;
 800848c:	2301      	movs	r3, #1
}
 800848e:	4618      	mov	r0, r3
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <_kill>:

int _kill(int pid, int sig)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80084a2:	f007 f99d 	bl	800f7e0 <__errno>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2216      	movs	r2, #22
 80084aa:	601a      	str	r2, [r3, #0]
	return -1;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <_exit>:

void _exit (int status)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80084c0:	f04f 31ff 	mov.w	r1, #4294967295
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff ffe7 	bl	8008498 <_kill>
	while (1) {}		/* Make sure we hang here */
 80084ca:	e7fe      	b.n	80084ca <_exit+0x12>

080084cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e00a      	b.n	80084f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80084de:	f3af 8000 	nop.w
 80084e2:	4601      	mov	r1, r0
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	60ba      	str	r2, [r7, #8]
 80084ea:	b2ca      	uxtb	r2, r1
 80084ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	3301      	adds	r3, #1
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	dbf0      	blt.n	80084de <_read+0x12>
	}

return len;
 80084fc:	687b      	ldr	r3, [r7, #4]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b086      	sub	sp, #24
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	e009      	b.n	800852c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	60ba      	str	r2, [r7, #8]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff fe3b 	bl	800819c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3301      	adds	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	dbf1      	blt.n	8008518 <_write+0x12>
	}
	return len;
 8008534:	687b      	ldr	r3, [r7, #4]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <_close>:

int _close(int file)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
	return -1;
 8008546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800854a:	4618      	mov	r0, r3
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008566:	605a      	str	r2, [r3, #4]
	return 0;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <_isatty>:

int _isatty(int file)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
	return 1;
 800857e:	2301      	movs	r3, #1
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
	return 0;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
	...

080085a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085b0:	4a14      	ldr	r2, [pc, #80]	; (8008604 <_sbrk+0x5c>)
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <_sbrk+0x60>)
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085bc:	4b13      	ldr	r3, [pc, #76]	; (800860c <_sbrk+0x64>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085c4:	4b11      	ldr	r3, [pc, #68]	; (800860c <_sbrk+0x64>)
 80085c6:	4a12      	ldr	r2, [pc, #72]	; (8008610 <_sbrk+0x68>)
 80085c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <_sbrk+0x64>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d207      	bcs.n	80085e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085d8:	f007 f902 	bl	800f7e0 <__errno>
 80085dc:	4603      	mov	r3, r0
 80085de:	220c      	movs	r2, #12
 80085e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295
 80085e6:	e009      	b.n	80085fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085e8:	4b08      	ldr	r3, [pc, #32]	; (800860c <_sbrk+0x64>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085ee:	4b07      	ldr	r3, [pc, #28]	; (800860c <_sbrk+0x64>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	4a05      	ldr	r2, [pc, #20]	; (800860c <_sbrk+0x64>)
 80085f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80085fa:	68fb      	ldr	r3, [r7, #12]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	20018000 	.word	0x20018000
 8008608:	00000400 	.word	0x00000400
 800860c:	20000488 	.word	0x20000488
 8008610:	20000a48 	.word	0x20000a48

08008614 <GetPage>:
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
uint32_t GetPage(uint32_t Addr)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8008620:	4b1a      	ldr	r3, [pc, #104]	; (800868c <GetPage+0x78>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800862a:	4293      	cmp	r3, r2
 800862c:	d008      	beq.n	8008640 <GetPage+0x2c>
 800862e:	4b17      	ldr	r3, [pc, #92]	; (800868c <GetPage+0x78>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	029b      	lsls	r3, r3, #10
 8008634:	085a      	lsrs	r2, r3, #1
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <GetPage+0x7c>)
 8008638:	4013      	ands	r3, r2
 800863a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800863e:	e000      	b.n	8008642 <GetPage+0x2e>
 8008640:	4b14      	ldr	r3, [pc, #80]	; (8008694 <GetPage+0x80>)
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4293      	cmp	r3, r2
 8008646:	d905      	bls.n	8008654 <GetPage+0x40>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800864e:	0adb      	lsrs	r3, r3, #11
 8008650:	60fb      	str	r3, [r7, #12]
 8008652:	e014      	b.n	800867e <GetPage+0x6a>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8008654:	4b0d      	ldr	r3, [pc, #52]	; (800868c <GetPage+0x78>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	b29b      	uxth	r3, r3
 800865a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800865e:	4293      	cmp	r3, r2
 8008660:	d008      	beq.n	8008674 <GetPage+0x60>
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <GetPage+0x78>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	085a      	lsrs	r2, r3, #1
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <GetPage+0x7c>)
 800866c:	4013      	ands	r3, r2
 800866e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008672:	e000      	b.n	8008676 <GetPage+0x62>
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <GetPage+0x80>)
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	0adb      	lsrs	r3, r3, #11
 800867c:	60fb      	str	r3, [r7, #12]
  }

  return page;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	1fff75e0 	.word	0x1fff75e0
 8008690:	01fffe00 	.word	0x01fffe00
 8008694:	08080000 	.word	0x08080000

08008698 <GetBank>:
 * @brief  Gets the bank of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The bank of a given address
 */
uint32_t GetBank(uint32_t Addr)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 80086a4:	4b1f      	ldr	r3, [pc, #124]	; (8008724 <GetBank+0x8c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d119      	bne.n	80086e4 <GetBank+0x4c>
  {
    /* No Bank swap */
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80086b0:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <GetBank+0x90>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d008      	beq.n	80086d0 <GetBank+0x38>
 80086be:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <GetBank+0x90>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	085a      	lsrs	r2, r3, #1
 80086c6:	4b19      	ldr	r3, [pc, #100]	; (800872c <GetBank+0x94>)
 80086c8:	4013      	ands	r3, r2
 80086ca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80086ce:	e000      	b.n	80086d2 <GetBank+0x3a>
 80086d0:	4b17      	ldr	r3, [pc, #92]	; (8008730 <GetBank+0x98>)
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d902      	bls.n	80086de <GetBank+0x46>
    {
      bank = FLASH_BANK_1;
 80086d8:	2301      	movs	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e01b      	b.n	8008716 <GetBank+0x7e>
    }
    else
    {
      bank = FLASH_BANK_2;
 80086de:	2302      	movs	r3, #2
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	e018      	b.n	8008716 <GetBank+0x7e>
    }
  }
  else
  {
    /* Bank swap */
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80086e4:	4b10      	ldr	r3, [pc, #64]	; (8008728 <GetBank+0x90>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d008      	beq.n	8008704 <GetBank+0x6c>
 80086f2:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <GetBank+0x90>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	029b      	lsls	r3, r3, #10
 80086f8:	085a      	lsrs	r2, r3, #1
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <GetBank+0x94>)
 80086fc:	4013      	ands	r3, r2
 80086fe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008702:	e000      	b.n	8008706 <GetBank+0x6e>
 8008704:	4b0a      	ldr	r3, [pc, #40]	; (8008730 <GetBank+0x98>)
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4293      	cmp	r3, r2
 800870a:	d902      	bls.n	8008712 <GetBank+0x7a>
    {
      bank = FLASH_BANK_2;
 800870c:	2302      	movs	r3, #2
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e001      	b.n	8008716 <GetBank+0x7e>
    }
    else
    {
      bank = FLASH_BANK_1;
 8008712:	2301      	movs	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
    }
  }

  return bank;
 8008716:	68fb      	ldr	r3, [r7, #12]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	40010000 	.word	0x40010000
 8008728:	1fff75e0 	.word	0x1fff75e0
 800872c:	01fffe00 	.word	0x01fffe00
 8008730:	08080000 	.word	0x08080000

08008734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8008738:	4b16      	ldr	r3, [pc, #88]	; (8008794 <SystemInit+0x60>)
 800873a:	4a17      	ldr	r2, [pc, #92]	; (8008798 <SystemInit+0x64>)
 800873c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800873e:	4b15      	ldr	r3, [pc, #84]	; (8008794 <SystemInit+0x60>)
 8008740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008744:	4a13      	ldr	r2, [pc, #76]	; (8008794 <SystemInit+0x60>)
 8008746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800874a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800874e:	4b13      	ldr	r3, [pc, #76]	; (800879c <SystemInit+0x68>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a12      	ldr	r2, [pc, #72]	; (800879c <SystemInit+0x68>)
 8008754:	f043 0301 	orr.w	r3, r3, #1
 8008758:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800875a:	4b10      	ldr	r3, [pc, #64]	; (800879c <SystemInit+0x68>)
 800875c:	2200      	movs	r2, #0
 800875e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008760:	4b0e      	ldr	r3, [pc, #56]	; (800879c <SystemInit+0x68>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a0d      	ldr	r2, [pc, #52]	; (800879c <SystemInit+0x68>)
 8008766:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800876a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800876e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <SystemInit+0x68>)
 8008772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008776:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008778:	4b08      	ldr	r3, [pc, #32]	; (800879c <SystemInit+0x68>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a07      	ldr	r2, [pc, #28]	; (800879c <SystemInit+0x68>)
 800877e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008782:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008784:	4b05      	ldr	r3, [pc, #20]	; (800879c <SystemInit+0x68>)
 8008786:	2200      	movs	r2, #0
 8008788:	619a      	str	r2, [r3, #24]
}
 800878a:	bf00      	nop
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	e000ed00 	.word	0xe000ed00
 8008798:	08004000 	.word	0x08004000
 800879c:	40021000 	.word	0x40021000

080087a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <HAL_Init+0x3c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <HAL_Init+0x3c>)
 80087b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087b6:	2003      	movs	r0, #3
 80087b8:	f000 f9a6 	bl	8008b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80087bc:	2000      	movs	r0, #0
 80087be:	f000 f80f 	bl	80087e0 <HAL_InitTick>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	71fb      	strb	r3, [r7, #7]
 80087cc:	e001      	b.n	80087d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80087ce:	f7ff fa93 	bl	8007cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80087d2:	79fb      	ldrb	r3, [r7, #7]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	40022000 	.word	0x40022000

080087e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80087ec:	4b17      	ldr	r3, [pc, #92]	; (800884c <HAL_InitTick+0x6c>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d023      	beq.n	800883c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80087f4:	4b16      	ldr	r3, [pc, #88]	; (8008850 <HAL_InitTick+0x70>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	4b14      	ldr	r3, [pc, #80]	; (800884c <HAL_InitTick+0x6c>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	4619      	mov	r1, r3
 80087fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008802:	fbb3 f3f1 	udiv	r3, r3, r1
 8008806:	fbb2 f3f3 	udiv	r3, r2, r3
 800880a:	4618      	mov	r0, r3
 800880c:	f000 f9c3 	bl	8008b96 <HAL_SYSTICK_Config>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10f      	bne.n	8008836 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b0f      	cmp	r3, #15
 800881a:	d809      	bhi.n	8008830 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800881c:	2200      	movs	r2, #0
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	f000 f97b 	bl	8008b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008828:	4a0a      	ldr	r2, [pc, #40]	; (8008854 <HAL_InitTick+0x74>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6013      	str	r3, [r2, #0]
 800882e:	e007      	b.n	8008840 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
 8008834:	e004      	b.n	8008840 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
 800883a:	e001      	b.n	8008840 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000028 	.word	0x20000028
 8008850:	20000020 	.word	0x20000020
 8008854:	20000024 	.word	0x20000024

08008858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <HAL_IncTick+0x20>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <HAL_IncTick+0x24>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4413      	add	r3, r2
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <HAL_IncTick+0x24>)
 800886a:	6013      	str	r3, [r2, #0]
}
 800886c:	bf00      	nop
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	20000028 	.word	0x20000028
 800887c:	2000048c 	.word	0x2000048c

08008880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  return uwTick;
 8008884:	4b03      	ldr	r3, [pc, #12]	; (8008894 <HAL_GetTick+0x14>)
 8008886:	681b      	ldr	r3, [r3, #0]
}
 8008888:	4618      	mov	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	2000048c 	.word	0x2000048c

08008898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80088a0:	f7ff ffee 	bl	8008880 <HAL_GetTick>
 80088a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b0:	d005      	beq.n	80088be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80088b2:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <HAL_Delay+0x44>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80088be:	bf00      	nop
 80088c0:	f7ff ffde 	bl	8008880 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d8f7      	bhi.n	80088c0 <HAL_Delay+0x28>
  {
  }
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	20000028 	.word	0x20000028

080088e0 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 80088e4:	4b02      	ldr	r3, [pc, #8]	; (80088f0 <HAL_GetHalVersion+0x10>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	010d0200 	.word	0x010d0200

080088f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008904:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <__NVIC_SetPriorityGrouping+0x44>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008910:	4013      	ands	r3, r2
 8008912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800891c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008926:	4a04      	ldr	r2, [pc, #16]	; (8008938 <__NVIC_SetPriorityGrouping+0x44>)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	60d3      	str	r3, [r2, #12]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	e000ed00 	.word	0xe000ed00

0800893c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008940:	4b04      	ldr	r3, [pc, #16]	; (8008954 <__NVIC_GetPriorityGrouping+0x18>)
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	0a1b      	lsrs	r3, r3, #8
 8008946:	f003 0307 	and.w	r3, r3, #7
}
 800894a:	4618      	mov	r0, r3
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	e000ed00 	.word	0xe000ed00

08008958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008966:	2b00      	cmp	r3, #0
 8008968:	db0b      	blt.n	8008982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	f003 021f 	and.w	r2, r3, #31
 8008970:	4907      	ldr	r1, [pc, #28]	; (8008990 <__NVIC_EnableIRQ+0x38>)
 8008972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	2001      	movs	r0, #1
 800897a:	fa00 f202 	lsl.w	r2, r0, r2
 800897e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	e000e100 	.word	0xe000e100

08008994 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800899e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	db12      	blt.n	80089cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	f003 021f 	and.w	r2, r3, #31
 80089ac:	490a      	ldr	r1, [pc, #40]	; (80089d8 <__NVIC_DisableIRQ+0x44>)
 80089ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	2001      	movs	r0, #1
 80089b6:	fa00 f202 	lsl.w	r2, r0, r2
 80089ba:	3320      	adds	r3, #32
 80089bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80089c0:	f3bf 8f4f 	dsb	sy
}
 80089c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089c6:	f3bf 8f6f 	isb	sy
}
 80089ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	e000e100 	.word	0xe000e100

080089dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80089e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	db0a      	blt.n	8008a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	490c      	ldr	r1, [pc, #48]	; (8008a28 <__NVIC_SetPriority+0x4c>)
 80089f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089fa:	0112      	lsls	r2, r2, #4
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	440b      	add	r3, r1
 8008a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008a04:	e00a      	b.n	8008a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	4908      	ldr	r1, [pc, #32]	; (8008a2c <__NVIC_SetPriority+0x50>)
 8008a0c:	79fb      	ldrb	r3, [r7, #7]
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	3b04      	subs	r3, #4
 8008a14:	0112      	lsls	r2, r2, #4
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	440b      	add	r3, r1
 8008a1a:	761a      	strb	r2, [r3, #24]
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	e000e100 	.word	0xe000e100
 8008a2c:	e000ed00 	.word	0xe000ed00

08008a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b089      	sub	sp, #36	; 0x24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f1c3 0307 	rsb	r3, r3, #7
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	bf28      	it	cs
 8008a4e:	2304      	movcs	r3, #4
 8008a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	d902      	bls.n	8008a60 <NVIC_EncodePriority+0x30>
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3b03      	subs	r3, #3
 8008a5e:	e000      	b.n	8008a62 <NVIC_EncodePriority+0x32>
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a64:	f04f 32ff 	mov.w	r2, #4294967295
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43da      	mvns	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	401a      	ands	r2, r3
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a78:	f04f 31ff 	mov.w	r1, #4294967295
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a82:	43d9      	mvns	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a88:	4313      	orrs	r3, r2
         );
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3724      	adds	r7, #36	; 0x24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008a9c:	f3bf 8f4f 	dsb	sy
}
 8008aa0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008aa2:	4b06      	ldr	r3, [pc, #24]	; (8008abc <__NVIC_SystemReset+0x24>)
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008aaa:	4904      	ldr	r1, [pc, #16]	; (8008abc <__NVIC_SystemReset+0x24>)
 8008aac:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <__NVIC_SystemReset+0x28>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008ab2:	f3bf 8f4f 	dsb	sy
}
 8008ab6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <__NVIC_SystemReset+0x20>
 8008abc:	e000ed00 	.word	0xe000ed00
 8008ac0:	05fa0004 	.word	0x05fa0004

08008ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ad4:	d301      	bcc.n	8008ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e00f      	b.n	8008afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ada:	4a0a      	ldr	r2, [pc, #40]	; (8008b04 <SysTick_Config+0x40>)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ae2:	210f      	movs	r1, #15
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	f7ff ff78 	bl	80089dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <SysTick_Config+0x40>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008af2:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <SysTick_Config+0x40>)
 8008af4:	2207      	movs	r2, #7
 8008af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000e010 	.word	0xe000e010

08008b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff feef 	bl	80088f4 <__NVIC_SetPriorityGrouping>
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b086      	sub	sp, #24
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	4603      	mov	r3, r0
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008b30:	f7ff ff04 	bl	800893c <__NVIC_GetPriorityGrouping>
 8008b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	68b9      	ldr	r1, [r7, #8]
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff ff78 	bl	8008a30 <NVIC_EncodePriority>
 8008b40:	4602      	mov	r2, r0
 8008b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b46:	4611      	mov	r1, r2
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff ff47 	bl	80089dc <__NVIC_SetPriority>
}
 8008b4e:	bf00      	nop
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b082      	sub	sp, #8
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff fef7 	bl	8008958 <__NVIC_EnableIRQ>
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	4603      	mov	r3, r0
 8008b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff ff07 	bl	8008994 <__NVIC_DisableIRQ>
}
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008b92:	f7ff ff81 	bl	8008a98 <__NVIC_SystemReset>

08008b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff ff90 	bl	8008ac4 <SysTick_Config>
 8008ba4:	4603      	mov	r3, r0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e054      	b.n	8008c6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7f5b      	ldrb	r3, [r3, #29]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d105      	bne.n	8008bd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff f8b4 	bl	8007d40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	791b      	ldrb	r3, [r3, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10c      	bne.n	8008c00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a22      	ldr	r2, [pc, #136]	; (8008c74 <HAL_CRC_Init+0xc4>)
 8008bec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0218 	bic.w	r2, r2, #24
 8008bfc:	609a      	str	r2, [r3, #8]
 8008bfe:	e00c      	b.n	8008c1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6899      	ldr	r1, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f986 	bl	8008f1c <HAL_CRCEx_Polynomial_Set>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e028      	b.n	8008c6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	795b      	ldrb	r3, [r3, #5]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2a:	611a      	str	r2, [r3, #16]
 8008c2c:	e004      	b.n	8008c38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	6912      	ldr	r2, [r2, #16]
 8008c36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695a      	ldr	r2, [r3, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	04c11db7 	.word	0x04c11db7

08008c78 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e022      	b.n	8008cd0 <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7f5b      	ldrb	r3, [r3, #29]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d101      	bne.n	8008c98 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8008c94:	2302      	movs	r3, #2
 8008c96:	e01b      	b.n	8008cd0 <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0201 	orr.w	r2, r2, #1
 8008cac:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff f85f 	bl	8007d80 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2202      	movs	r2, #2
 8008cec:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6a1b      	ldr	r3, [r3, #32]
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d006      	beq.n	8008d14 <HAL_CRC_Calculate+0x3c>
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d829      	bhi.n	8008d5e <HAL_CRC_Calculate+0x86>
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d019      	beq.n	8008d42 <HAL_CRC_Calculate+0x6a>
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d01e      	beq.n	8008d50 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8008d12:	e024      	b.n	8008d5e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	e00a      	b.n	8008d30 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6812      	ldr	r2, [r2, #0]
 8008d28:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d3f0      	bcc.n	8008d1a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	613b      	str	r3, [r7, #16]
      break;
 8008d40:	e00e      	b.n	8008d60 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 f81f 	bl	8008d8a <CRC_Handle_8>
 8008d4c:	6138      	str	r0, [r7, #16]
      break;
 8008d4e:	e007      	b.n	8008d60 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f8a6 	bl	8008ea6 <CRC_Handle_16>
 8008d5a:	6138      	str	r0, [r7, #16]
      break;
 8008d5c:	e000      	b.n	8008d60 <HAL_CRC_Calculate+0x88>
      break;
 8008d5e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008d66:	693b      	ldr	r3, [r7, #16]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7f5b      	ldrb	r3, [r3, #29]
 8008d7c:	b2db      	uxtb	r3, r3
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b089      	sub	sp, #36	; 0x24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008d96:	2300      	movs	r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	e023      	b.n	8008de4 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	4413      	add	r3, r2
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	3301      	adds	r3, #1
 8008dae:	68b9      	ldr	r1, [r7, #8]
 8008db0:	440b      	add	r3, r1
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008db6:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	68b9      	ldr	r1, [r7, #8]
 8008dc0:	440b      	add	r3, r1
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008dc6:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	3303      	adds	r3, #3
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	440b      	add	r3, r1
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008dda:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008ddc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	3301      	adds	r3, #1
 8008de2:	61fb      	str	r3, [r7, #28]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	089b      	lsrs	r3, r3, #2
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d3d6      	bcc.n	8008d9c <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f003 0303 	and.w	r3, r3, #3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d04d      	beq.n	8008e94 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f003 0303 	and.w	r3, r3, #3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d107      	bne.n	8008e12 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4413      	add	r3, r2
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	6812      	ldr	r2, [r2, #0]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d116      	bne.n	8008e4a <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	4413      	add	r3, r2
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	b21a      	sxth	r2, r3
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	3301      	adds	r3, #1
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	440b      	add	r3, r1
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	b21b      	sxth	r3, r3
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	b21b      	sxth	r3, r3
 8008e3c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	8b7a      	ldrh	r2, [r7, #26]
 8008e48:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f003 0303 	and.w	r3, r3, #3
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d11f      	bne.n	8008e94 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	b21a      	sxth	r2, r3
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	3301      	adds	r3, #1
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	440b      	add	r3, r1
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b21b      	sxth	r3, r3
 8008e70:	4313      	orrs	r3, r2
 8008e72:	b21b      	sxth	r3, r3
 8008e74:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	8b7a      	ldrh	r2, [r7, #26]
 8008e80:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	3302      	adds	r3, #2
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3724      	adds	r7, #36	; 0x24
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b087      	sub	sp, #28
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	e013      	b.n	8008ee0 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	041a      	lsls	r2, r3, #16
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	3302      	adds	r3, #2
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	440b      	add	r3, r1
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	3301      	adds	r3, #1
 8008ede:	617b      	str	r3, [r7, #20]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d3e6      	bcc.n	8008eb8 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d009      	beq.n	8008f08 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	881a      	ldrh	r2, [r3, #0]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	371c      	adds	r7, #28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
	...

08008f1c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008f2c:	231f      	movs	r3, #31
 8008f2e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008f30:	bf00      	nop
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	613a      	str	r2, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d009      	beq.n	8008f50 <HAL_CRCEx_Polynomial_Set+0x34>
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f003 031f 	and.w	r3, r3, #31
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0f0      	beq.n	8008f32 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b18      	cmp	r3, #24
 8008f54:	d846      	bhi.n	8008fe4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <HAL_CRCEx_Polynomial_Set+0x40>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008feb 	.word	0x08008feb
 8008f60:	08008fe5 	.word	0x08008fe5
 8008f64:	08008fe5 	.word	0x08008fe5
 8008f68:	08008fe5 	.word	0x08008fe5
 8008f6c:	08008fe5 	.word	0x08008fe5
 8008f70:	08008fe5 	.word	0x08008fe5
 8008f74:	08008fe5 	.word	0x08008fe5
 8008f78:	08008fe5 	.word	0x08008fe5
 8008f7c:	08008fd9 	.word	0x08008fd9
 8008f80:	08008fe5 	.word	0x08008fe5
 8008f84:	08008fe5 	.word	0x08008fe5
 8008f88:	08008fe5 	.word	0x08008fe5
 8008f8c:	08008fe5 	.word	0x08008fe5
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008fe5 	.word	0x08008fe5
 8008f98:	08008fe5 	.word	0x08008fe5
 8008f9c:	08008fcd 	.word	0x08008fcd
 8008fa0:	08008fe5 	.word	0x08008fe5
 8008fa4:	08008fe5 	.word	0x08008fe5
 8008fa8:	08008fe5 	.word	0x08008fe5
 8008fac:	08008fe5 	.word	0x08008fe5
 8008fb0:	08008fe5 	.word	0x08008fe5
 8008fb4:	08008fe5 	.word	0x08008fe5
 8008fb8:	08008fe5 	.word	0x08008fe5
 8008fbc:	08008fc1 	.word	0x08008fc1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2b06      	cmp	r3, #6
 8008fc4:	d913      	bls.n	8008fee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008fca:	e010      	b.n	8008fee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2b07      	cmp	r3, #7
 8008fd0:	d90f      	bls.n	8008ff2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008fd6:	e00c      	b.n	8008ff2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	2b0f      	cmp	r3, #15
 8008fdc:	d90b      	bls.n	8008ff6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008fe2:	e008      	b.n	8008ff6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fe8:	e006      	b.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008fea:	bf00      	nop
 8008fec:	e004      	b.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008fee:	bf00      	nop
 8008ff0:	e002      	b.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8008ff6:	bf00      	nop
  }
  if (status == HAL_OK)
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10d      	bne.n	800901a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f023 0118 	bic.w	r1, r3, #24
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	430a      	orrs	r2, r1
 8009018:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
}
 800901c:	4618      	mov	r0, r3
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	460b      	mov	r3, r1
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800903a:	7afb      	ldrb	r3, [r7, #11]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d103      	bne.n	8009048 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	605a      	str	r2, [r3, #4]
      break;
 8009046:	e002      	b.n	800904e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
      break;
 800904c:	bf00      	nop
  }

  return status;
 800904e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009050:	4618      	mov	r0, r3
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e003      	b.n	8009078 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009076:	2300      	movs	r3, #0
  }
}
 8009078:	4618      	mov	r0, r3
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	0c1b      	lsrs	r3, r3, #16
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2201      	movs	r2, #1
 80090a2:	fa02 f303 	lsl.w	r3, r2, r3
 80090a6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <HAL_EXTI_IRQHandler+0x5c>)
 80090ae:	4413      	add	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	4013      	ands	r3, r2
 80090ba:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d009      	beq.n	80090d6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4798      	blx	r3
    }
  }
}
 80090d6:	bf00      	nop
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40010414 	.word	0x40010414

080090e4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80090f6:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <HAL_FLASH_Program+0xd0>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_FLASH_Program+0x1e>
 80090fe:	2302      	movs	r3, #2
 8009100:	e053      	b.n	80091aa <HAL_FLASH_Program+0xc6>
 8009102:	4b2c      	ldr	r3, [pc, #176]	; (80091b4 <HAL_FLASH_Program+0xd0>)
 8009104:	2201      	movs	r2, #1
 8009106:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800910c:	f000 f888 	bl	8009220 <FLASH_WaitForLastOperation>
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d143      	bne.n	80091a2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800911a:	4b26      	ldr	r3, [pc, #152]	; (80091b4 <HAL_FLASH_Program+0xd0>)
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009120:	4b25      	ldr	r3, [pc, #148]	; (80091b8 <HAL_FLASH_Program+0xd4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800912c:	4b22      	ldr	r3, [pc, #136]	; (80091b8 <HAL_FLASH_Program+0xd4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a21      	ldr	r2, [pc, #132]	; (80091b8 <HAL_FLASH_Program+0xd4>)
 8009132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009136:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009138:	4b1e      	ldr	r3, [pc, #120]	; (80091b4 <HAL_FLASH_Program+0xd0>)
 800913a:	2202      	movs	r2, #2
 800913c:	771a      	strb	r2, [r3, #28]
 800913e:	e002      	b.n	8009146 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <HAL_FLASH_Program+0xd0>)
 8009142:	2200      	movs	r2, #0
 8009144:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d107      	bne.n	800915c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800914c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009150:	68b8      	ldr	r0, [r7, #8]
 8009152:	f000 f8bb 	bl	80092cc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009156:	2301      	movs	r3, #1
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	e010      	b.n	800917e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d002      	beq.n	8009168 <HAL_FLASH_Program+0x84>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d10a      	bne.n	800917e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	4619      	mov	r1, r3
 800916c:	68b8      	ldr	r0, [r7, #8]
 800916e:	f000 f8d3 	bl	8009318 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b02      	cmp	r3, #2
 8009176:	d102      	bne.n	800917e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009178:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800917c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800917e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009182:	f000 f84d 	bl	8009220 <FLASH_WaitForLastOperation>
 8009186:	4603      	mov	r3, r0
 8009188:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d006      	beq.n	800919e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <HAL_FLASH_Program+0xd4>)
 8009192:	695a      	ldr	r2, [r3, #20]
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	43db      	mvns	r3, r3
 8009198:	4907      	ldr	r1, [pc, #28]	; (80091b8 <HAL_FLASH_Program+0xd4>)
 800919a:	4013      	ands	r3, r2
 800919c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800919e:	f000 f9eb 	bl	8009578 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80091a2:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <HAL_FLASH_Program+0xd0>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]

  return status;
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	2000002c 	.word	0x2000002c
 80091b8:	40022000 	.word	0x40022000

080091bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80091c6:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <HAL_FLASH_Unlock+0x38>)
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	da0b      	bge.n	80091e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80091ce:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <HAL_FLASH_Unlock+0x38>)
 80091d0:	4a09      	ldr	r2, [pc, #36]	; (80091f8 <HAL_FLASH_Unlock+0x3c>)
 80091d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80091d4:	4b07      	ldr	r3, [pc, #28]	; (80091f4 <HAL_FLASH_Unlock+0x38>)
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <HAL_FLASH_Unlock+0x40>)
 80091d8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80091da:	4b06      	ldr	r3, [pc, #24]	; (80091f4 <HAL_FLASH_Unlock+0x38>)
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da01      	bge.n	80091e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80091e6:	79fb      	ldrb	r3, [r7, #7]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	40022000 	.word	0x40022000
 80091f8:	45670123 	.word	0x45670123
 80091fc:	cdef89ab 	.word	0xcdef89ab

08009200 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009204:	4b05      	ldr	r3, [pc, #20]	; (800921c <HAL_FLASH_Lock+0x1c>)
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	4a04      	ldr	r2, [pc, #16]	; (800921c <HAL_FLASH_Lock+0x1c>)
 800920a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800920e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	40022000 	.word	0x40022000

08009220 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009228:	f7ff fb2a 	bl	8008880 <HAL_GetTick>
 800922c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800922e:	e00d      	b.n	800924c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009236:	d009      	beq.n	800924c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8009238:	f7ff fb22 	bl	8008880 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d801      	bhi.n	800924c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e037      	b.n	80092bc <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800924c:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1eb      	bne.n	8009230 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009258:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8009260:	4013      	ands	r3, r2
 8009262:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d01e      	beq.n	80092a8 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800926a:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <FLASH_WaitForLastOperation+0xa8>)
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4313      	orrs	r3, r2
 8009272:	4a15      	ldr	r2, [pc, #84]	; (80092c8 <FLASH_WaitForLastOperation+0xa8>)
 8009274:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d007      	beq.n	8009290 <FLASH_WaitForLastOperation+0x70>
 8009280:	4b10      	ldr	r3, [pc, #64]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800928a:	490e      	ldr	r1, [pc, #56]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 800928c:	4313      	orrs	r3, r2
 800928e:	618b      	str	r3, [r1, #24]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d004      	beq.n	80092a4 <FLASH_WaitForLastOperation+0x84>
 800929a:	4a0a      	ldr	r2, [pc, #40]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80092a2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e009      	b.n	80092bc <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80092a8:	4b06      	ldr	r3, [pc, #24]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d002      	beq.n	80092ba <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80092b4:	4b03      	ldr	r3, [pc, #12]	; (80092c4 <FLASH_WaitForLastOperation+0xa4>)
 80092b6:	2201      	movs	r2, #1
 80092b8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	40022000 	.word	0x40022000
 80092c8:	2000002c 	.word	0x2000002c

080092cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <FLASH_Program_DoubleWord+0x48>)
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	4a0d      	ldr	r2, [pc, #52]	; (8009314 <FLASH_Program_DoubleWord+0x48>)
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80092ea:	f3bf 8f6f 	isb	sy
}
 80092ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80092f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092f4:	f04f 0200 	mov.w	r2, #0
 80092f8:	f04f 0300 	mov.w	r3, #0
 80092fc:	000a      	movs	r2, r1
 80092fe:	2300      	movs	r3, #0
 8009300:	68f9      	ldr	r1, [r7, #12]
 8009302:	3104      	adds	r1, #4
 8009304:	4613      	mov	r3, r2
 8009306:	600b      	str	r3, [r1, #0]
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	40022000 	.word	0x40022000

08009318 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009318:	b480      	push	{r7}
 800931a:	b089      	sub	sp, #36	; 0x24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009322:	2340      	movs	r3, #64	; 0x40
 8009324:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800932e:	4b14      	ldr	r3, [pc, #80]	; (8009380 <FLASH_Program_Fast+0x68>)
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	4a13      	ldr	r2, [pc, #76]	; (8009380 <FLASH_Program_Fast+0x68>)
 8009334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009338:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800933a:	f3ef 8310 	mrs	r3, PRIMASK
 800933e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009340:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8009342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009344:	b672      	cpsid	i
}
 8009346:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	3304      	adds	r3, #4
 8009354:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	3304      	adds	r3, #4
 800935a:	617b      	str	r3, [r7, #20]
    row_index--;
 800935c:	7ffb      	ldrb	r3, [r7, #31]
 800935e:	3b01      	subs	r3, #1
 8009360:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8009362:	7ffb      	ldrb	r3, [r7, #31]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1ef      	bne.n	8009348 <FLASH_Program_Fast+0x30>
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f383 8810 	msr	PRIMASK, r3
}
 8009372:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8009374:	bf00      	nop
 8009376:	3724      	adds	r7, #36	; 0x24
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	40022000 	.word	0x40022000

08009384 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800938e:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_FLASHEx_Erase+0x16>
 8009396:	2302      	movs	r3, #2
 8009398:	e087      	b.n	80094aa <HAL_FLASHEx_Erase+0x126>
 800939a:	4b46      	ldr	r3, [pc, #280]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 800939c:	2201      	movs	r2, #1
 800939e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80093a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80093a4:	f7ff ff3c 	bl	8009220 <FLASH_WaitForLastOperation>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d177      	bne.n	80094a2 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80093b2:	4b40      	ldr	r3, [pc, #256]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80093b8:	4b3f      	ldr	r3, [pc, #252]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d013      	beq.n	80093ec <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80093c4:	4b3c      	ldr	r3, [pc, #240]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80093d0:	4b39      	ldr	r3, [pc, #228]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a38      	ldr	r2, [pc, #224]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093da:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80093dc:	4b35      	ldr	r3, [pc, #212]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 80093de:	2203      	movs	r2, #3
 80093e0:	771a      	strb	r2, [r3, #28]
 80093e2:	e016      	b.n	8009412 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80093e4:	4b33      	ldr	r3, [pc, #204]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	771a      	strb	r2, [r3, #28]
 80093ea:	e012      	b.n	8009412 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80093ec:	4b32      	ldr	r3, [pc, #200]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d009      	beq.n	800940c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80093f8:	4b2f      	ldr	r3, [pc, #188]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a2e      	ldr	r2, [pc, #184]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 80093fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009402:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009404:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 8009406:	2202      	movs	r2, #2
 8009408:	771a      	strb	r2, [r3, #28]
 800940a:	e002      	b.n	8009412 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800940c:	4b29      	ldr	r3, [pc, #164]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 800940e:	2200      	movs	r2, #0
 8009410:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d113      	bne.n	8009442 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 f84c 	bl	80094bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009428:	f7ff fefa 	bl	8009220 <FLASH_WaitForLastOperation>
 800942c:	4603      	mov	r3, r0
 800942e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8009430:	4b21      	ldr	r3, [pc, #132]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	4a20      	ldr	r2, [pc, #128]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 8009436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800943a:	f023 0304 	bic.w	r3, r3, #4
 800943e:	6153      	str	r3, [r2, #20]
 8009440:	e02d      	b.n	800949e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f04f 32ff 	mov.w	r2, #4294967295
 8009448:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	60bb      	str	r3, [r7, #8]
 8009450:	e01d      	b.n	800948e <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	4619      	mov	r1, r3
 8009458:	68b8      	ldr	r0, [r7, #8]
 800945a:	f000 f857 	bl	800950c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800945e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009462:	f7ff fedd 	bl	8009220 <FLASH_WaitForLastOperation>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800946a:	4b13      	ldr	r3, [pc, #76]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	4a12      	ldr	r2, [pc, #72]	; (80094b8 <HAL_FLASHEx_Erase+0x134>)
 8009470:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009474:	f023 0302 	bic.w	r3, r3, #2
 8009478:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	601a      	str	r2, [r3, #0]
          break;
 8009486:	e00a      	b.n	800949e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	3301      	adds	r3, #1
 800948c:	60bb      	str	r3, [r7, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689a      	ldr	r2, [r3, #8]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	4413      	add	r3, r2
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	429a      	cmp	r2, r3
 800949c:	d3d9      	bcc.n	8009452 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800949e:	f000 f86b 	bl	8009578 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80094a2:	4b04      	ldr	r3, [pc, #16]	; (80094b4 <HAL_FLASHEx_Erase+0x130>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]

  return status;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	2000002c 	.word	0x2000002c
 80094b8:	40022000 	.word	0x40022000

080094bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f003 0301 	and.w	r3, r3, #1
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80094ce:	4b0e      	ldr	r3, [pc, #56]	; (8009508 <FLASH_MassErase+0x4c>)
 80094d0:	695b      	ldr	r3, [r3, #20]
 80094d2:	4a0d      	ldr	r2, [pc, #52]	; (8009508 <FLASH_MassErase+0x4c>)
 80094d4:	f043 0304 	orr.w	r3, r3, #4
 80094d8:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80094e4:	4b08      	ldr	r3, [pc, #32]	; (8009508 <FLASH_MassErase+0x4c>)
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	4a07      	ldr	r2, [pc, #28]	; (8009508 <FLASH_MassErase+0x4c>)
 80094ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ee:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <FLASH_MassErase+0x4c>)
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	4a04      	ldr	r2, [pc, #16]	; (8009508 <FLASH_MassErase+0x4c>)
 80094f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094fa:	6153      	str	r3, [r2, #20]
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	40022000 	.word	0x40022000

0800950c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d006      	beq.n	800952e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8009520:	4b14      	ldr	r3, [pc, #80]	; (8009574 <FLASH_PageErase+0x68>)
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	4a13      	ldr	r2, [pc, #76]	; (8009574 <FLASH_PageErase+0x68>)
 8009526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800952a:	6153      	str	r3, [r2, #20]
 800952c:	e005      	b.n	800953a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800952e:	4b11      	ldr	r3, [pc, #68]	; (8009574 <FLASH_PageErase+0x68>)
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	4a10      	ldr	r2, [pc, #64]	; (8009574 <FLASH_PageErase+0x68>)
 8009534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009538:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800953a:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <FLASH_PageErase+0x68>)
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800954a:	490a      	ldr	r1, [pc, #40]	; (8009574 <FLASH_PageErase+0x68>)
 800954c:	4313      	orrs	r3, r2
 800954e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009550:	4b08      	ldr	r3, [pc, #32]	; (8009574 <FLASH_PageErase+0x68>)
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	4a07      	ldr	r2, [pc, #28]	; (8009574 <FLASH_PageErase+0x68>)
 8009556:	f043 0302 	orr.w	r3, r3, #2
 800955a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800955c:	4b05      	ldr	r3, [pc, #20]	; (8009574 <FLASH_PageErase+0x68>)
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	4a04      	ldr	r2, [pc, #16]	; (8009574 <FLASH_PageErase+0x68>)
 8009562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009566:	6153      	str	r3, [r2, #20]
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	40022000 	.word	0x40022000

08009578 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800957e:	4b21      	ldr	r3, [pc, #132]	; (8009604 <FLASH_FlushCaches+0x8c>)
 8009580:	7f1b      	ldrb	r3, [r3, #28]
 8009582:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d002      	beq.n	8009590 <FLASH_FlushCaches+0x18>
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	2b03      	cmp	r3, #3
 800958e:	d117      	bne.n	80095c0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009590:	4b1d      	ldr	r3, [pc, #116]	; (8009608 <FLASH_FlushCaches+0x90>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a1c      	ldr	r2, [pc, #112]	; (8009608 <FLASH_FlushCaches+0x90>)
 8009596:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800959a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800959c:	4b1a      	ldr	r3, [pc, #104]	; (8009608 <FLASH_FlushCaches+0x90>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a19      	ldr	r2, [pc, #100]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	4b17      	ldr	r3, [pc, #92]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a16      	ldr	r2, [pc, #88]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80095b4:	4b14      	ldr	r3, [pc, #80]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a13      	ldr	r2, [pc, #76]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d002      	beq.n	80095cc <FLASH_FlushCaches+0x54>
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	d111      	bne.n	80095f0 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a0d      	ldr	r2, [pc, #52]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095d6:	6013      	str	r3, [r2, #0]
 80095d8:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a0a      	ldr	r2, [pc, #40]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80095e4:	4b08      	ldr	r3, [pc, #32]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a07      	ldr	r2, [pc, #28]	; (8009608 <FLASH_FlushCaches+0x90>)
 80095ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095ee:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <FLASH_FlushCaches+0x8c>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	771a      	strb	r2, [r3, #28]
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	2000002c 	.word	0x2000002c
 8009608:	40022000 	.word	0x40022000

0800960c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800961a:	e17f      	b.n	800991c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	2101      	movs	r1, #1
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	fa01 f303 	lsl.w	r3, r1, r3
 8009628:	4013      	ands	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 8171 	beq.w	8009916 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	2b01      	cmp	r3, #1
 800963e:	d005      	beq.n	800964c <HAL_GPIO_Init+0x40>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b02      	cmp	r3, #2
 800964a:	d130      	bne.n	80096ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	2203      	movs	r2, #3
 8009658:	fa02 f303 	lsl.w	r3, r2, r3
 800965c:	43db      	mvns	r3, r3
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4013      	ands	r3, r2
 8009662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	fa02 f303 	lsl.w	r3, r2, r3
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009682:	2201      	movs	r2, #1
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	fa02 f303 	lsl.w	r3, r2, r3
 800968a:	43db      	mvns	r3, r3
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	4013      	ands	r3, r2
 8009690:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	091b      	lsrs	r3, r3, #4
 8009698:	f003 0201 	and.w	r2, r3, #1
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d118      	bne.n	80096ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80096c0:	2201      	movs	r2, #1
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4013      	ands	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	08db      	lsrs	r3, r3, #3
 80096d6:	f003 0201 	and.w	r2, r3, #1
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	fa02 f303 	lsl.w	r3, r2, r3
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d017      	beq.n	8009728 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	2203      	movs	r2, #3
 8009704:	fa02 f303 	lsl.w	r3, r2, r3
 8009708:	43db      	mvns	r3, r3
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4013      	ands	r3, r2
 800970e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	005b      	lsls	r3, r3, #1
 8009718:	fa02 f303 	lsl.w	r3, r2, r3
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	4313      	orrs	r3, r2
 8009720:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	2b02      	cmp	r3, #2
 8009732:	d123      	bne.n	800977c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	08da      	lsrs	r2, r3, #3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3208      	adds	r2, #8
 800973c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009740:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	220f      	movs	r2, #15
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	43db      	mvns	r3, r3
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	4013      	ands	r3, r2
 8009756:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	691a      	ldr	r2, [r3, #16]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f003 0307 	and.w	r3, r3, #7
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	fa02 f303 	lsl.w	r3, r2, r3
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	08da      	lsrs	r2, r3, #3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3208      	adds	r2, #8
 8009776:	6939      	ldr	r1, [r7, #16]
 8009778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	2203      	movs	r2, #3
 8009788:	fa02 f303 	lsl.w	r3, r2, r3
 800978c:	43db      	mvns	r3, r3
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4013      	ands	r3, r2
 8009792:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f003 0203 	and.w	r2, r3, #3
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	fa02 f303 	lsl.w	r3, r2, r3
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 80ac 	beq.w	8009916 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097be:	4b5f      	ldr	r3, [pc, #380]	; (800993c <HAL_GPIO_Init+0x330>)
 80097c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c2:	4a5e      	ldr	r2, [pc, #376]	; (800993c <HAL_GPIO_Init+0x330>)
 80097c4:	f043 0301 	orr.w	r3, r3, #1
 80097c8:	6613      	str	r3, [r2, #96]	; 0x60
 80097ca:	4b5c      	ldr	r3, [pc, #368]	; (800993c <HAL_GPIO_Init+0x330>)
 80097cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	60bb      	str	r3, [r7, #8]
 80097d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80097d6:	4a5a      	ldr	r2, [pc, #360]	; (8009940 <HAL_GPIO_Init+0x334>)
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	089b      	lsrs	r3, r3, #2
 80097dc:	3302      	adds	r3, #2
 80097de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	220f      	movs	r2, #15
 80097ee:	fa02 f303 	lsl.w	r3, r2, r3
 80097f2:	43db      	mvns	r3, r3
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4013      	ands	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009800:	d025      	beq.n	800984e <HAL_GPIO_Init+0x242>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a4f      	ldr	r2, [pc, #316]	; (8009944 <HAL_GPIO_Init+0x338>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d01f      	beq.n	800984a <HAL_GPIO_Init+0x23e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a4e      	ldr	r2, [pc, #312]	; (8009948 <HAL_GPIO_Init+0x33c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d019      	beq.n	8009846 <HAL_GPIO_Init+0x23a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a4d      	ldr	r2, [pc, #308]	; (800994c <HAL_GPIO_Init+0x340>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d013      	beq.n	8009842 <HAL_GPIO_Init+0x236>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a4c      	ldr	r2, [pc, #304]	; (8009950 <HAL_GPIO_Init+0x344>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00d      	beq.n	800983e <HAL_GPIO_Init+0x232>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a4b      	ldr	r2, [pc, #300]	; (8009954 <HAL_GPIO_Init+0x348>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d007      	beq.n	800983a <HAL_GPIO_Init+0x22e>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a4a      	ldr	r2, [pc, #296]	; (8009958 <HAL_GPIO_Init+0x34c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d101      	bne.n	8009836 <HAL_GPIO_Init+0x22a>
 8009832:	2306      	movs	r3, #6
 8009834:	e00c      	b.n	8009850 <HAL_GPIO_Init+0x244>
 8009836:	2307      	movs	r3, #7
 8009838:	e00a      	b.n	8009850 <HAL_GPIO_Init+0x244>
 800983a:	2305      	movs	r3, #5
 800983c:	e008      	b.n	8009850 <HAL_GPIO_Init+0x244>
 800983e:	2304      	movs	r3, #4
 8009840:	e006      	b.n	8009850 <HAL_GPIO_Init+0x244>
 8009842:	2303      	movs	r3, #3
 8009844:	e004      	b.n	8009850 <HAL_GPIO_Init+0x244>
 8009846:	2302      	movs	r3, #2
 8009848:	e002      	b.n	8009850 <HAL_GPIO_Init+0x244>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <HAL_GPIO_Init+0x244>
 800984e:	2300      	movs	r3, #0
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	f002 0203 	and.w	r2, r2, #3
 8009856:	0092      	lsls	r2, r2, #2
 8009858:	4093      	lsls	r3, r2
 800985a:	693a      	ldr	r2, [r7, #16]
 800985c:	4313      	orrs	r3, r2
 800985e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009860:	4937      	ldr	r1, [pc, #220]	; (8009940 <HAL_GPIO_Init+0x334>)
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	089b      	lsrs	r3, r3, #2
 8009866:	3302      	adds	r3, #2
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800986e:	4b3b      	ldr	r3, [pc, #236]	; (800995c <HAL_GPIO_Init+0x350>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	43db      	mvns	r3, r3
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4013      	ands	r3, r2
 800987c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009892:	4a32      	ldr	r2, [pc, #200]	; (800995c <HAL_GPIO_Init+0x350>)
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009898:	4b30      	ldr	r3, [pc, #192]	; (800995c <HAL_GPIO_Init+0x350>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	43db      	mvns	r3, r3
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	4013      	ands	r3, r2
 80098a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098bc:	4a27      	ldr	r2, [pc, #156]	; (800995c <HAL_GPIO_Init+0x350>)
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80098c2:	4b26      	ldr	r3, [pc, #152]	; (800995c <HAL_GPIO_Init+0x350>)
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	43db      	mvns	r3, r3
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4013      	ands	r3, r2
 80098d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80098e6:	4a1d      	ldr	r2, [pc, #116]	; (800995c <HAL_GPIO_Init+0x350>)
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80098ec:	4b1b      	ldr	r3, [pc, #108]	; (800995c <HAL_GPIO_Init+0x350>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	43db      	mvns	r3, r3
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4013      	ands	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009910:	4a12      	ldr	r2, [pc, #72]	; (800995c <HAL_GPIO_Init+0x350>)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	3301      	adds	r3, #1
 800991a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	fa22 f303 	lsr.w	r3, r2, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	f47f ae78 	bne.w	800961c <HAL_GPIO_Init+0x10>
  }
}
 800992c:	bf00      	nop
 800992e:	bf00      	nop
 8009930:	371c      	adds	r7, #28
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40021000 	.word	0x40021000
 8009940:	40010000 	.word	0x40010000
 8009944:	48000400 	.word	0x48000400
 8009948:	48000800 	.word	0x48000800
 800994c:	48000c00 	.word	0x48000c00
 8009950:	48001000 	.word	0x48001000
 8009954:	48001400 	.word	0x48001400
 8009958:	48001800 	.word	0x48001800
 800995c:	40010400 	.word	0x40010400

08009960 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800996a:	2300      	movs	r3, #0
 800996c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800996e:	e0cd      	b.n	8009b0c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009970:	2201      	movs	r2, #1
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	4013      	ands	r3, r2
 800997c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80c0 	beq.w	8009b06 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009986:	4a68      	ldr	r2, [pc, #416]	; (8009b28 <HAL_GPIO_DeInit+0x1c8>)
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	089b      	lsrs	r3, r3, #2
 800998c:	3302      	adds	r3, #2
 800998e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009992:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	220f      	movs	r2, #15
 800999e:	fa02 f303 	lsl.w	r3, r2, r3
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4013      	ands	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80099ae:	d025      	beq.n	80099fc <HAL_GPIO_DeInit+0x9c>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a5e      	ldr	r2, [pc, #376]	; (8009b2c <HAL_GPIO_DeInit+0x1cc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d01f      	beq.n	80099f8 <HAL_GPIO_DeInit+0x98>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a5d      	ldr	r2, [pc, #372]	; (8009b30 <HAL_GPIO_DeInit+0x1d0>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d019      	beq.n	80099f4 <HAL_GPIO_DeInit+0x94>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a5c      	ldr	r2, [pc, #368]	; (8009b34 <HAL_GPIO_DeInit+0x1d4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d013      	beq.n	80099f0 <HAL_GPIO_DeInit+0x90>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a5b      	ldr	r2, [pc, #364]	; (8009b38 <HAL_GPIO_DeInit+0x1d8>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00d      	beq.n	80099ec <HAL_GPIO_DeInit+0x8c>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a5a      	ldr	r2, [pc, #360]	; (8009b3c <HAL_GPIO_DeInit+0x1dc>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d007      	beq.n	80099e8 <HAL_GPIO_DeInit+0x88>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a59      	ldr	r2, [pc, #356]	; (8009b40 <HAL_GPIO_DeInit+0x1e0>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d101      	bne.n	80099e4 <HAL_GPIO_DeInit+0x84>
 80099e0:	2306      	movs	r3, #6
 80099e2:	e00c      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099e4:	2307      	movs	r3, #7
 80099e6:	e00a      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099e8:	2305      	movs	r3, #5
 80099ea:	e008      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099ec:	2304      	movs	r3, #4
 80099ee:	e006      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099f0:	2303      	movs	r3, #3
 80099f2:	e004      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e002      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099f8:	2301      	movs	r3, #1
 80099fa:	e000      	b.n	80099fe <HAL_GPIO_DeInit+0x9e>
 80099fc:	2300      	movs	r3, #0
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	f002 0203 	and.w	r2, r2, #3
 8009a04:	0092      	lsls	r2, r2, #2
 8009a06:	4093      	lsls	r3, r2
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d132      	bne.n	8009a74 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009a0e:	4b4d      	ldr	r3, [pc, #308]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	43db      	mvns	r3, r3
 8009a16:	494b      	ldr	r1, [pc, #300]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009a1c:	4b49      	ldr	r3, [pc, #292]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	43db      	mvns	r3, r3
 8009a24:	4947      	ldr	r1, [pc, #284]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a26:	4013      	ands	r3, r2
 8009a28:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8009a2a:	4b46      	ldr	r3, [pc, #280]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	43db      	mvns	r3, r3
 8009a32:	4944      	ldr	r1, [pc, #272]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a34:	4013      	ands	r3, r2
 8009a36:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8009a38:	4b42      	ldr	r3, [pc, #264]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	43db      	mvns	r3, r3
 8009a40:	4940      	ldr	r1, [pc, #256]	; (8009b44 <HAL_GPIO_DeInit+0x1e4>)
 8009a42:	4013      	ands	r3, r2
 8009a44:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	220f      	movs	r2, #15
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009a56:	4a34      	ldr	r2, [pc, #208]	; (8009b28 <HAL_GPIO_DeInit+0x1c8>)
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	089b      	lsrs	r3, r3, #2
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	43da      	mvns	r2, r3
 8009a66:	4830      	ldr	r0, [pc, #192]	; (8009b28 <HAL_GPIO_DeInit+0x1c8>)
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	089b      	lsrs	r3, r3, #2
 8009a6c:	400a      	ands	r2, r1
 8009a6e:	3302      	adds	r3, #2
 8009a70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	2103      	movs	r1, #3
 8009a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	08da      	lsrs	r2, r3, #3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3208      	adds	r2, #8
 8009a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	220f      	movs	r2, #15
 8009a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	697a      	ldr	r2, [r7, #20]
 8009aa6:	08d2      	lsrs	r2, r2, #3
 8009aa8:	4019      	ands	r1, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3208      	adds	r2, #8
 8009aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689a      	ldr	r2, [r3, #8]
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	2103      	movs	r1, #3
 8009abc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ac0:	43db      	mvns	r3, r3
 8009ac2:	401a      	ands	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	2101      	movs	r1, #1
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad4:	43db      	mvns	r3, r3
 8009ad6:	401a      	ands	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68da      	ldr	r2, [r3, #12]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	2103      	movs	r1, #3
 8009ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aea:	43db      	mvns	r3, r3
 8009aec:	401a      	ands	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	2101      	movs	r1, #1
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	43db      	mvns	r3, r3
 8009b00:	401a      	ands	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f47f af2b 	bne.w	8009970 <HAL_GPIO_DeInit+0x10>
  }
}
 8009b1a:	bf00      	nop
 8009b1c:	bf00      	nop
 8009b1e:	371c      	adds	r7, #28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	40010000 	.word	0x40010000
 8009b2c:	48000400 	.word	0x48000400
 8009b30:	48000800 	.word	0x48000800
 8009b34:	48000c00 	.word	0x48000c00
 8009b38:	48001000 	.word	0x48001000
 8009b3c:	48001400 	.word	0x48001400
 8009b40:	48001800 	.word	0x48001800
 8009b44:	40010400 	.word	0x40010400

08009b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	691a      	ldr	r2, [r3, #16]
 8009b58:	887b      	ldrh	r3, [r7, #2]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]
 8009b64:	e001      	b.n	8009b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	807b      	strh	r3, [r7, #2]
 8009b84:	4613      	mov	r3, r2
 8009b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b88:	787b      	ldrb	r3, [r7, #1]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009b8e:	887a      	ldrh	r2, [r7, #2]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009b94:	e002      	b.n	8009b9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009b96:	887a      	ldrh	r2, [r7, #2]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009bba:	887a      	ldrh	r2, [r7, #2]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	041a      	lsls	r2, r3, #16
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	43d9      	mvns	r1, r3
 8009bc6:	887b      	ldrh	r3, [r7, #2]
 8009bc8:	400b      	ands	r3, r1
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	619a      	str	r2, [r3, #24]
}
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40007000 	.word	0x40007000

08009bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c06:	d130      	bne.n	8009c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c08:	4b23      	ldr	r3, [pc, #140]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c14:	d038      	beq.n	8009c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009c16:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009c26:	4b1d      	ldr	r3, [pc, #116]	; (8009c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2232      	movs	r2, #50	; 0x32
 8009c2c:	fb02 f303 	mul.w	r3, r2, r3
 8009c30:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009c32:	fba2 2303 	umull	r2, r3, r2, r3
 8009c36:	0c9b      	lsrs	r3, r3, #18
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c3c:	e002      	b.n	8009c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009c44:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c50:	d102      	bne.n	8009c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1f2      	bne.n	8009c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c58:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c64:	d110      	bne.n	8009c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e00f      	b.n	8009c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c76:	d007      	beq.n	8009c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009c78:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c80:	4a05      	ldr	r2, [pc, #20]	; (8009c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	40007000 	.word	0x40007000
 8009c9c:	20000020 	.word	0x20000020
 8009ca0:	431bde83 	.word	0x431bde83

08009ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e3d8      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cb6:	4b97      	ldr	r3, [pc, #604]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f003 030c 	and.w	r3, r3, #12
 8009cbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cc0:	4b94      	ldr	r3, [pc, #592]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	f003 0303 	and.w	r3, r3, #3
 8009cc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0310 	and.w	r3, r3, #16
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 80e4 	beq.w	8009ea0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d007      	beq.n	8009cee <HAL_RCC_OscConfig+0x4a>
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2b0c      	cmp	r3, #12
 8009ce2:	f040 808b 	bne.w	8009dfc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	f040 8087 	bne.w	8009dfc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009cee:	4b89      	ldr	r3, [pc, #548]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <HAL_RCC_OscConfig+0x62>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e3b0      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1a      	ldr	r2, [r3, #32]
 8009d0a:	4b82      	ldr	r3, [pc, #520]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0308 	and.w	r3, r3, #8
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <HAL_RCC_OscConfig+0x7c>
 8009d16:	4b7f      	ldr	r3, [pc, #508]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d1e:	e005      	b.n	8009d2c <HAL_RCC_OscConfig+0x88>
 8009d20:	4b7c      	ldr	r3, [pc, #496]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d26:	091b      	lsrs	r3, r3, #4
 8009d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d223      	bcs.n	8009d78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fd43 	bl	800a7c0 <RCC_SetFlashLatencyFromMSIRange>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e391      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d44:	4b73      	ldr	r3, [pc, #460]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a72      	ldr	r2, [pc, #456]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d4a:	f043 0308 	orr.w	r3, r3, #8
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	4b70      	ldr	r3, [pc, #448]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	496d      	ldr	r1, [pc, #436]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d62:	4b6c      	ldr	r3, [pc, #432]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	021b      	lsls	r3, r3, #8
 8009d70:	4968      	ldr	r1, [pc, #416]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	604b      	str	r3, [r1, #4]
 8009d76:	e025      	b.n	8009dc4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d78:	4b66      	ldr	r3, [pc, #408]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a65      	ldr	r2, [pc, #404]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d7e:	f043 0308 	orr.w	r3, r3, #8
 8009d82:	6013      	str	r3, [r2, #0]
 8009d84:	4b63      	ldr	r3, [pc, #396]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	4960      	ldr	r1, [pc, #384]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d96:	4b5f      	ldr	r3, [pc, #380]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	495b      	ldr	r1, [pc, #364]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d109      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 fd03 	bl	800a7c0 <RCC_SetFlashLatencyFromMSIRange>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e351      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009dc4:	f000 fc38 	bl	800a638 <HAL_RCC_GetSysClockFreq>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	4b52      	ldr	r3, [pc, #328]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	091b      	lsrs	r3, r3, #4
 8009dd0:	f003 030f 	and.w	r3, r3, #15
 8009dd4:	4950      	ldr	r1, [pc, #320]	; (8009f18 <HAL_RCC_OscConfig+0x274>)
 8009dd6:	5ccb      	ldrb	r3, [r1, r3]
 8009dd8:	f003 031f 	and.w	r3, r3, #31
 8009ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8009de0:	4a4e      	ldr	r2, [pc, #312]	; (8009f1c <HAL_RCC_OscConfig+0x278>)
 8009de2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009de4:	4b4e      	ldr	r3, [pc, #312]	; (8009f20 <HAL_RCC_OscConfig+0x27c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f7fe fcf9 	bl	80087e0 <HAL_InitTick>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d052      	beq.n	8009e9e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
 8009dfa:	e335      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d032      	beq.n	8009e6a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009e04:	4b43      	ldr	r3, [pc, #268]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a42      	ldr	r2, [pc, #264]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e0a:	f043 0301 	orr.w	r3, r3, #1
 8009e0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e10:	f7fe fd36 	bl	8008880 <HAL_GetTick>
 8009e14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e16:	e008      	b.n	8009e2a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e18:	f7fe fd32 	bl	8008880 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e31e      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009e2a:	4b3a      	ldr	r3, [pc, #232]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f0      	beq.n	8009e18 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e36:	4b37      	ldr	r3, [pc, #220]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a36      	ldr	r2, [pc, #216]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e3c:	f043 0308 	orr.w	r3, r3, #8
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	4b34      	ldr	r3, [pc, #208]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	4931      	ldr	r1, [pc, #196]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e54:	4b2f      	ldr	r3, [pc, #188]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	492c      	ldr	r1, [pc, #176]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e64:	4313      	orrs	r3, r2
 8009e66:	604b      	str	r3, [r1, #4]
 8009e68:	e01a      	b.n	8009ea0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009e6a:	4b2a      	ldr	r3, [pc, #168]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a29      	ldr	r2, [pc, #164]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e70:	f023 0301 	bic.w	r3, r3, #1
 8009e74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009e76:	f7fe fd03 	bl	8008880 <HAL_GetTick>
 8009e7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e7c:	e008      	b.n	8009e90 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e7e:	f7fe fcff 	bl	8008880 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d901      	bls.n	8009e90 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e2eb      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e90:	4b20      	ldr	r3, [pc, #128]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1f0      	bne.n	8009e7e <HAL_RCC_OscConfig+0x1da>
 8009e9c:	e000      	b.n	8009ea0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009e9e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d074      	beq.n	8009f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b08      	cmp	r3, #8
 8009eb0:	d005      	beq.n	8009ebe <HAL_RCC_OscConfig+0x21a>
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	2b0c      	cmp	r3, #12
 8009eb6:	d10e      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d10b      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ebe:	4b15      	ldr	r3, [pc, #84]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d064      	beq.n	8009f94 <HAL_RCC_OscConfig+0x2f0>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d160      	bne.n	8009f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e2c8      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ede:	d106      	bne.n	8009eee <HAL_RCC_OscConfig+0x24a>
 8009ee0:	4b0c      	ldr	r3, [pc, #48]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a0b      	ldr	r2, [pc, #44]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	e026      	b.n	8009f3c <HAL_RCC_OscConfig+0x298>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ef6:	d115      	bne.n	8009f24 <HAL_RCC_OscConfig+0x280>
 8009ef8:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a05      	ldr	r2, [pc, #20]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	4b03      	ldr	r3, [pc, #12]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a02      	ldr	r2, [pc, #8]	; (8009f14 <HAL_RCC_OscConfig+0x270>)
 8009f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	e014      	b.n	8009f3c <HAL_RCC_OscConfig+0x298>
 8009f12:	bf00      	nop
 8009f14:	40021000 	.word	0x40021000
 8009f18:	08011334 	.word	0x08011334
 8009f1c:	20000020 	.word	0x20000020
 8009f20:	20000024 	.word	0x20000024
 8009f24:	4ba0      	ldr	r3, [pc, #640]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a9f      	ldr	r2, [pc, #636]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	4b9d      	ldr	r3, [pc, #628]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a9c      	ldr	r2, [pc, #624]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d013      	beq.n	8009f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f44:	f7fe fc9c 	bl	8008880 <HAL_GetTick>
 8009f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f4a:	e008      	b.n	8009f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f4c:	f7fe fc98 	bl	8008880 <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	2b64      	cmp	r3, #100	; 0x64
 8009f58:	d901      	bls.n	8009f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e284      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f5e:	4b92      	ldr	r3, [pc, #584]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0f0      	beq.n	8009f4c <HAL_RCC_OscConfig+0x2a8>
 8009f6a:	e014      	b.n	8009f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6c:	f7fe fc88 	bl	8008880 <HAL_GetTick>
 8009f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f74:	f7fe fc84 	bl	8008880 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b64      	cmp	r3, #100	; 0x64
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e270      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f86:	4b88      	ldr	r3, [pc, #544]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f0      	bne.n	8009f74 <HAL_RCC_OscConfig+0x2d0>
 8009f92:	e000      	b.n	8009f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d060      	beq.n	800a064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d005      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x310>
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	2b0c      	cmp	r3, #12
 8009fac:	d119      	bne.n	8009fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d116      	bne.n	8009fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fb4:	4b7c      	ldr	r3, [pc, #496]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <HAL_RCC_OscConfig+0x328>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e24d      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fcc:	4b76      	ldr	r3, [pc, #472]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	061b      	lsls	r3, r3, #24
 8009fda:	4973      	ldr	r1, [pc, #460]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fe0:	e040      	b.n	800a064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d023      	beq.n	800a032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009fea:	4b6f      	ldr	r3, [pc, #444]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a6e      	ldr	r2, [pc, #440]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 8009ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff6:	f7fe fc43 	bl	8008880 <HAL_GetTick>
 8009ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ffc:	e008      	b.n	800a010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ffe:	f7fe fc3f 	bl	8008880 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e22b      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a010:	4b65      	ldr	r3, [pc, #404]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0f0      	beq.n	8009ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a01c:	4b62      	ldr	r3, [pc, #392]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	495f      	ldr	r1, [pc, #380]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	604b      	str	r3, [r1, #4]
 800a030:	e018      	b.n	800a064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a032:	4b5d      	ldr	r3, [pc, #372]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a5c      	ldr	r2, [pc, #368]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a03c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03e:	f7fe fc1f 	bl	8008880 <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a046:	f7fe fc1b 	bl	8008880 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e207      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a058:	4b53      	ldr	r3, [pc, #332]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f0      	bne.n	800a046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0308 	and.w	r3, r3, #8
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d03c      	beq.n	800a0ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	695b      	ldr	r3, [r3, #20]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d01c      	beq.n	800a0b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a078:	4b4b      	ldr	r3, [pc, #300]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a07a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a07e:	4a4a      	ldr	r2, [pc, #296]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a080:	f043 0301 	orr.w	r3, r3, #1
 800a084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a088:	f7fe fbfa 	bl	8008880 <HAL_GetTick>
 800a08c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a090:	f7fe fbf6 	bl	8008880 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e1e2      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0a2:	4b41      	ldr	r3, [pc, #260]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a0a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0ef      	beq.n	800a090 <HAL_RCC_OscConfig+0x3ec>
 800a0b0:	e01b      	b.n	800a0ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0b2:	4b3d      	ldr	r3, [pc, #244]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a0b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0b8:	4a3b      	ldr	r2, [pc, #236]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a0ba:	f023 0301 	bic.w	r3, r3, #1
 800a0be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c2:	f7fe fbdd 	bl	8008880 <HAL_GetTick>
 800a0c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0c8:	e008      	b.n	800a0dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0ca:	f7fe fbd9 	bl	8008880 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d901      	bls.n	800a0dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e1c5      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a0dc:	4b32      	ldr	r3, [pc, #200]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a0de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1ef      	bne.n	800a0ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f000 80a6 	beq.w	800a244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10d      	bne.n	800a124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a108:	4b27      	ldr	r3, [pc, #156]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a10c:	4a26      	ldr	r2, [pc, #152]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a112:	6593      	str	r3, [r2, #88]	; 0x58
 800a114:	4b24      	ldr	r3, [pc, #144]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a11c:	60bb      	str	r3, [r7, #8]
 800a11e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a120:	2301      	movs	r3, #1
 800a122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a124:	4b21      	ldr	r3, [pc, #132]	; (800a1ac <HAL_RCC_OscConfig+0x508>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d118      	bne.n	800a162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a130:	4b1e      	ldr	r3, [pc, #120]	; (800a1ac <HAL_RCC_OscConfig+0x508>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1d      	ldr	r2, [pc, #116]	; (800a1ac <HAL_RCC_OscConfig+0x508>)
 800a136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a13a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a13c:	f7fe fba0 	bl	8008880 <HAL_GetTick>
 800a140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a142:	e008      	b.n	800a156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a144:	f7fe fb9c 	bl	8008880 <HAL_GetTick>
 800a148:	4602      	mov	r2, r0
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d901      	bls.n	800a156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e188      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a156:	4b15      	ldr	r3, [pc, #84]	; (800a1ac <HAL_RCC_OscConfig+0x508>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0f0      	beq.n	800a144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d108      	bne.n	800a17c <HAL_RCC_OscConfig+0x4d8>
 800a16a:	4b0f      	ldr	r3, [pc, #60]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a170:	4a0d      	ldr	r2, [pc, #52]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a17a:	e029      	b.n	800a1d0 <HAL_RCC_OscConfig+0x52c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	2b05      	cmp	r3, #5
 800a182:	d115      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x50c>
 800a184:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18a:	4a07      	ldr	r2, [pc, #28]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a18c:	f043 0304 	orr.w	r3, r3, #4
 800a190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a194:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a19a:	4a03      	ldr	r2, [pc, #12]	; (800a1a8 <HAL_RCC_OscConfig+0x504>)
 800a19c:	f043 0301 	orr.w	r3, r3, #1
 800a1a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1a4:	e014      	b.n	800a1d0 <HAL_RCC_OscConfig+0x52c>
 800a1a6:	bf00      	nop
 800a1a8:	40021000 	.word	0x40021000
 800a1ac:	40007000 	.word	0x40007000
 800a1b0:	4b91      	ldr	r3, [pc, #580]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b6:	4a90      	ldr	r2, [pc, #576]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a1b8:	f023 0301 	bic.w	r3, r3, #1
 800a1bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a1c0:	4b8d      	ldr	r3, [pc, #564]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a1c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c6:	4a8c      	ldr	r2, [pc, #560]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a1c8:	f023 0304 	bic.w	r3, r3, #4
 800a1cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d016      	beq.n	800a206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1d8:	f7fe fb52 	bl	8008880 <HAL_GetTick>
 800a1dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1de:	e00a      	b.n	800a1f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e0:	f7fe fb4e 	bl	8008880 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d901      	bls.n	800a1f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e138      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a1f6:	4b80      	ldr	r3, [pc, #512]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a1f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0ed      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x53c>
 800a204:	e015      	b.n	800a232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a206:	f7fe fb3b 	bl	8008880 <HAL_GetTick>
 800a20a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a20c:	e00a      	b.n	800a224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a20e:	f7fe fb37 	bl	8008880 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d901      	bls.n	800a224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e121      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a224:	4b74      	ldr	r3, [pc, #464]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1ed      	bne.n	800a20e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a232:	7ffb      	ldrb	r3, [r7, #31]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d105      	bne.n	800a244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a238:	4b6f      	ldr	r3, [pc, #444]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23c:	4a6e      	ldr	r2, [pc, #440]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a23e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a242:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 810c 	beq.w	800a466 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	2b02      	cmp	r3, #2
 800a254:	f040 80d4 	bne.w	800a400 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a258:	4b67      	ldr	r3, [pc, #412]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f003 0203 	and.w	r2, r3, #3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	429a      	cmp	r2, r3
 800a26a:	d130      	bne.n	800a2ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a276:	3b01      	subs	r3, #1
 800a278:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d127      	bne.n	800a2ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a288:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d11f      	bne.n	800a2ce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a298:	2a07      	cmp	r2, #7
 800a29a:	bf14      	ite	ne
 800a29c:	2201      	movne	r2, #1
 800a29e:	2200      	moveq	r2, #0
 800a2a0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d113      	bne.n	800a2ce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b0:	085b      	lsrs	r3, r3, #1
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d109      	bne.n	800a2ce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c4:	085b      	lsrs	r3, r3, #1
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d06e      	beq.n	800a3ac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b0c      	cmp	r3, #12
 800a2d2:	d069      	beq.n	800a3a8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a2d4:	4b48      	ldr	r3, [pc, #288]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d105      	bne.n	800a2ec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a2e0:	4b45      	ldr	r3, [pc, #276]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e0bb      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a2f0:	4b41      	ldr	r3, [pc, #260]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a40      	ldr	r2, [pc, #256]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a2f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2fa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a2fc:	f7fe fac0 	bl	8008880 <HAL_GetTick>
 800a300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a302:	e008      	b.n	800a316 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a304:	f7fe fabc 	bl	8008880 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e0a8      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a316:	4b38      	ldr	r3, [pc, #224]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1f0      	bne.n	800a304 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a322:	4b35      	ldr	r3, [pc, #212]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	4b35      	ldr	r3, [pc, #212]	; (800a3fc <HAL_RCC_OscConfig+0x758>)
 800a328:	4013      	ands	r3, r2
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a332:	3a01      	subs	r2, #1
 800a334:	0112      	lsls	r2, r2, #4
 800a336:	4311      	orrs	r1, r2
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a33c:	0212      	lsls	r2, r2, #8
 800a33e:	4311      	orrs	r1, r2
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a344:	0852      	lsrs	r2, r2, #1
 800a346:	3a01      	subs	r2, #1
 800a348:	0552      	lsls	r2, r2, #21
 800a34a:	4311      	orrs	r1, r2
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a350:	0852      	lsrs	r2, r2, #1
 800a352:	3a01      	subs	r2, #1
 800a354:	0652      	lsls	r2, r2, #25
 800a356:	4311      	orrs	r1, r2
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a35c:	0912      	lsrs	r2, r2, #4
 800a35e:	0452      	lsls	r2, r2, #17
 800a360:	430a      	orrs	r2, r1
 800a362:	4925      	ldr	r1, [pc, #148]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a364:	4313      	orrs	r3, r2
 800a366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a368:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a22      	ldr	r2, [pc, #136]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a36e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a374:	4b20      	ldr	r3, [pc, #128]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	4a1f      	ldr	r2, [pc, #124]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a37a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a37e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a380:	f7fe fa7e 	bl	8008880 <HAL_GetTick>
 800a384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a386:	e008      	b.n	800a39a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a388:	f7fe fa7a 	bl	8008880 <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	2b02      	cmp	r3, #2
 800a394:	d901      	bls.n	800a39a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	e066      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a39a:	4b17      	ldr	r3, [pc, #92]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0f0      	beq.n	800a388 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a3a6:	e05e      	b.n	800a466 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e05d      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3ac:	4b12      	ldr	r3, [pc, #72]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d156      	bne.n	800a466 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a3b8:	4b0f      	ldr	r3, [pc, #60]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a0e      	ldr	r2, [pc, #56]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a3be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a3c4:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	4a0b      	ldr	r2, [pc, #44]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a3ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a3d0:	f7fe fa56 	bl	8008880 <HAL_GetTick>
 800a3d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3d6:	e008      	b.n	800a3ea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3d8:	f7fe fa52 	bl	8008880 <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d901      	bls.n	800a3ea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e03e      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3ea:	4b03      	ldr	r3, [pc, #12]	; (800a3f8 <HAL_RCC_OscConfig+0x754>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0f0      	beq.n	800a3d8 <HAL_RCC_OscConfig+0x734>
 800a3f6:	e036      	b.n	800a466 <HAL_RCC_OscConfig+0x7c2>
 800a3f8:	40021000 	.word	0x40021000
 800a3fc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	2b0c      	cmp	r3, #12
 800a404:	d02d      	beq.n	800a462 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a19      	ldr	r2, [pc, #100]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a40c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a410:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800a412:	4b17      	ldr	r3, [pc, #92]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d105      	bne.n	800a42a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a41e:	4b14      	ldr	r3, [pc, #80]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	4a13      	ldr	r2, [pc, #76]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a424:	f023 0303 	bic.w	r3, r3, #3
 800a428:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	4a10      	ldr	r2, [pc, #64]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a430:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a438:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a43a:	f7fe fa21 	bl	8008880 <HAL_GetTick>
 800a43e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a440:	e008      	b.n	800a454 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a442:	f7fe fa1d 	bl	8008880 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d901      	bls.n	800a454 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	e009      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a454:	4b06      	ldr	r3, [pc, #24]	; (800a470 <HAL_RCC_OscConfig+0x7cc>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1f0      	bne.n	800a442 <HAL_RCC_OscConfig+0x79e>
 800a460:	e001      	b.n	800a466 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e000      	b.n	800a468 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	40021000 	.word	0x40021000

0800a474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0c8      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a488:	4b66      	ldr	r3, [pc, #408]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0307 	and.w	r3, r3, #7
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	d910      	bls.n	800a4b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a496:	4b63      	ldr	r3, [pc, #396]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f023 0207 	bic.w	r2, r3, #7
 800a49e:	4961      	ldr	r1, [pc, #388]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4a6:	4b5f      	ldr	r3, [pc, #380]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 0307 	and.w	r3, r3, #7
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d001      	beq.n	800a4b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e0b0      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d04c      	beq.n	800a55e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b03      	cmp	r3, #3
 800a4ca:	d107      	bne.n	800a4dc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4cc:	4b56      	ldr	r3, [pc, #344]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d121      	bne.n	800a51c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e09e      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d107      	bne.n	800a4f4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4e4:	4b50      	ldr	r3, [pc, #320]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d115      	bne.n	800a51c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e092      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d107      	bne.n	800a50c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a4fc:	4b4a      	ldr	r3, [pc, #296]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0302 	and.w	r3, r3, #2
 800a504:	2b00      	cmp	r3, #0
 800a506:	d109      	bne.n	800a51c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e086      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a50c:	4b46      	ldr	r3, [pc, #280]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a514:	2b00      	cmp	r3, #0
 800a516:	d101      	bne.n	800a51c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e07e      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a51c:	4b42      	ldr	r3, [pc, #264]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f023 0203 	bic.w	r2, r3, #3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	493f      	ldr	r1, [pc, #252]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a52e:	f7fe f9a7 	bl	8008880 <HAL_GetTick>
 800a532:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a534:	e00a      	b.n	800a54c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a536:	f7fe f9a3 	bl	8008880 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	f241 3288 	movw	r2, #5000	; 0x1388
 800a544:	4293      	cmp	r3, r2
 800a546:	d901      	bls.n	800a54c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e066      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a54c:	4b36      	ldr	r3, [pc, #216]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f003 020c 	and.w	r2, r3, #12
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d1eb      	bne.n	800a536 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a56a:	4b2f      	ldr	r3, [pc, #188]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	492c      	ldr	r1, [pc, #176]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a57c:	4b29      	ldr	r3, [pc, #164]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0307 	and.w	r3, r3, #7
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d210      	bcs.n	800a5ac <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a58a:	4b26      	ldr	r3, [pc, #152]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f023 0207 	bic.w	r2, r3, #7
 800a592:	4924      	ldr	r1, [pc, #144]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	4313      	orrs	r3, r2
 800a598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a59a:	4b22      	ldr	r3, [pc, #136]	; (800a624 <HAL_RCC_ClockConfig+0x1b0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d001      	beq.n	800a5ac <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e036      	b.n	800a61a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0304 	and.w	r3, r3, #4
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d008      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5b8:	4b1b      	ldr	r3, [pc, #108]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	4918      	ldr	r1, [pc, #96]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d009      	beq.n	800a5ea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5d6:	4b14      	ldr	r3, [pc, #80]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	4910      	ldr	r1, [pc, #64]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a5ea:	f000 f825 	bl	800a638 <HAL_RCC_GetSysClockFreq>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <HAL_RCC_ClockConfig+0x1b4>)
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	091b      	lsrs	r3, r3, #4
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	490c      	ldr	r1, [pc, #48]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a5fc:	5ccb      	ldrb	r3, [r1, r3]
 800a5fe:	f003 031f 	and.w	r3, r3, #31
 800a602:	fa22 f303 	lsr.w	r3, r2, r3
 800a606:	4a0a      	ldr	r2, [pc, #40]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a60a:	4b0a      	ldr	r3, [pc, #40]	; (800a634 <HAL_RCC_ClockConfig+0x1c0>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe f8e6 	bl	80087e0 <HAL_InitTick>
 800a614:	4603      	mov	r3, r0
 800a616:	72fb      	strb	r3, [r7, #11]

  return status;
 800a618:	7afb      	ldrb	r3, [r7, #11]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	40022000 	.word	0x40022000
 800a628:	40021000 	.word	0x40021000
 800a62c:	08011334 	.word	0x08011334
 800a630:	20000020 	.word	0x20000020
 800a634:	20000024 	.word	0x20000024

0800a638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a638:	b480      	push	{r7}
 800a63a:	b089      	sub	sp, #36	; 0x24
 800a63c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	2300      	movs	r3, #0
 800a644:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a646:	4b3e      	ldr	r3, [pc, #248]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f003 030c 	and.w	r3, r3, #12
 800a64e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a650:	4b3b      	ldr	r3, [pc, #236]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0303 	and.w	r3, r3, #3
 800a658:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <HAL_RCC_GetSysClockFreq+0x34>
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2b0c      	cmp	r3, #12
 800a664:	d121      	bne.n	800a6aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d11e      	bne.n	800a6aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a66c:	4b34      	ldr	r3, [pc, #208]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d107      	bne.n	800a688 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a678:	4b31      	ldr	r3, [pc, #196]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a67a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	f003 030f 	and.w	r3, r3, #15
 800a684:	61fb      	str	r3, [r7, #28]
 800a686:	e005      	b.n	800a694 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a688:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	091b      	lsrs	r3, r3, #4
 800a68e:	f003 030f 	and.w	r3, r3, #15
 800a692:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a694:	4a2b      	ldr	r2, [pc, #172]	; (800a744 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a69c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10d      	bne.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6a8:	e00a      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d102      	bne.n	800a6b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a6b0:	4b25      	ldr	r3, [pc, #148]	; (800a748 <HAL_RCC_GetSysClockFreq+0x110>)
 800a6b2:	61bb      	str	r3, [r7, #24]
 800a6b4:	e004      	b.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d101      	bne.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6bc:	4b23      	ldr	r3, [pc, #140]	; (800a74c <HAL_RCC_GetSysClockFreq+0x114>)
 800a6be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	2b0c      	cmp	r3, #12
 800a6c4:	d134      	bne.n	800a730 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6c6:	4b1e      	ldr	r3, [pc, #120]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d003      	beq.n	800a6de <HAL_RCC_GetSysClockFreq+0xa6>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	d003      	beq.n	800a6e4 <HAL_RCC_GetSysClockFreq+0xac>
 800a6dc:	e005      	b.n	800a6ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a6de:	4b1a      	ldr	r3, [pc, #104]	; (800a748 <HAL_RCC_GetSysClockFreq+0x110>)
 800a6e0:	617b      	str	r3, [r7, #20]
      break;
 800a6e2:	e005      	b.n	800a6f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a6e4:	4b19      	ldr	r3, [pc, #100]	; (800a74c <HAL_RCC_GetSysClockFreq+0x114>)
 800a6e6:	617b      	str	r3, [r7, #20]
      break;
 800a6e8:	e002      	b.n	800a6f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	617b      	str	r3, [r7, #20]
      break;
 800a6ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6f0:	4b13      	ldr	r3, [pc, #76]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	091b      	lsrs	r3, r3, #4
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a6fe:	4b10      	ldr	r3, [pc, #64]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	fb03 f202 	mul.w	r2, r3, r2
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	fbb2 f3f3 	udiv	r3, r2, r3
 800a714:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a716:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <HAL_RCC_GetSysClockFreq+0x108>)
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	0e5b      	lsrs	r3, r3, #25
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	3301      	adds	r3, #1
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a730:	69bb      	ldr	r3, [r7, #24]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3724      	adds	r7, #36	; 0x24
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40021000 	.word	0x40021000
 800a744:	0801134c 	.word	0x0801134c
 800a748:	00f42400 	.word	0x00f42400
 800a74c:	007a1200 	.word	0x007a1200

0800a750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a754:	4b03      	ldr	r3, [pc, #12]	; (800a764 <HAL_RCC_GetHCLKFreq+0x14>)
 800a756:	681b      	ldr	r3, [r3, #0]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000020 	.word	0x20000020

0800a768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a76c:	f7ff fff0 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a770:	4602      	mov	r2, r0
 800a772:	4b06      	ldr	r3, [pc, #24]	; (800a78c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	0a1b      	lsrs	r3, r3, #8
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	4904      	ldr	r1, [pc, #16]	; (800a790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a77e:	5ccb      	ldrb	r3, [r1, r3]
 800a780:	f003 031f 	and.w	r3, r3, #31
 800a784:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a788:	4618      	mov	r0, r3
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	40021000 	.word	0x40021000
 800a790:	08011344 	.word	0x08011344

0800a794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a798:	f7ff ffda 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a79c:	4602      	mov	r2, r0
 800a79e:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	0adb      	lsrs	r3, r3, #11
 800a7a4:	f003 0307 	and.w	r3, r3, #7
 800a7a8:	4904      	ldr	r1, [pc, #16]	; (800a7bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7aa:	5ccb      	ldrb	r3, [r1, r3]
 800a7ac:	f003 031f 	and.w	r3, r3, #31
 800a7b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	40021000 	.word	0x40021000
 800a7bc:	08011344 	.word	0x08011344

0800a7c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a7cc:	4b2a      	ldr	r3, [pc, #168]	; (800a878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a7d8:	f7ff fa00 	bl	8009bdc <HAL_PWREx_GetVoltageRange>
 800a7dc:	6178      	str	r0, [r7, #20]
 800a7de:	e014      	b.n	800a80a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a7e0:	4b25      	ldr	r3, [pc, #148]	; (800a878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e4:	4a24      	ldr	r2, [pc, #144]	; (800a878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ea:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ec:	4b22      	ldr	r3, [pc, #136]	; (800a878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a7f8:	f7ff f9f0 	bl	8009bdc <HAL_PWREx_GetVoltageRange>
 800a7fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a7fe:	4b1e      	ldr	r3, [pc, #120]	; (800a878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a802:	4a1d      	ldr	r2, [pc, #116]	; (800a878 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a808:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a810:	d10b      	bne.n	800a82a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b80      	cmp	r3, #128	; 0x80
 800a816:	d919      	bls.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2ba0      	cmp	r3, #160	; 0xa0
 800a81c:	d902      	bls.n	800a824 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a81e:	2302      	movs	r3, #2
 800a820:	613b      	str	r3, [r7, #16]
 800a822:	e013      	b.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a824:	2301      	movs	r3, #1
 800a826:	613b      	str	r3, [r7, #16]
 800a828:	e010      	b.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2b80      	cmp	r3, #128	; 0x80
 800a82e:	d902      	bls.n	800a836 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a830:	2303      	movs	r3, #3
 800a832:	613b      	str	r3, [r7, #16]
 800a834:	e00a      	b.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b80      	cmp	r3, #128	; 0x80
 800a83a:	d102      	bne.n	800a842 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a83c:	2302      	movs	r3, #2
 800a83e:	613b      	str	r3, [r7, #16]
 800a840:	e004      	b.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b70      	cmp	r3, #112	; 0x70
 800a846:	d101      	bne.n	800a84c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a848:	2301      	movs	r3, #1
 800a84a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a84c:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f023 0207 	bic.w	r2, r3, #7
 800a854:	4909      	ldr	r1, [pc, #36]	; (800a87c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	4313      	orrs	r3, r2
 800a85a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a85c:	4b07      	ldr	r3, [pc, #28]	; (800a87c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0307 	and.w	r3, r3, #7
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	429a      	cmp	r2, r3
 800a868:	d001      	beq.n	800a86e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	40021000 	.word	0x40021000
 800a87c:	40022000 	.word	0x40022000

0800a880 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a888:	2300      	movs	r3, #0
 800a88a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a88c:	2300      	movs	r3, #0
 800a88e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d041      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8a4:	d02a      	beq.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a8a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8aa:	d824      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a8ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8b0:	d008      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a8b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8b6:	d81e      	bhi.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00a      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a8bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8c0:	d010      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8c2:	e018      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a8c4:	4b86      	ldr	r3, [pc, #536]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	4a85      	ldr	r2, [pc, #532]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a8ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8d0:	e015      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f000 fabb 	bl	800ae54 <RCCEx_PLLSAI1_Config>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8e2:	e00c      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3320      	adds	r3, #32
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fba6 	bl	800b03c <RCCEx_PLLSAI2_Config>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8f4:	e003      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	74fb      	strb	r3, [r7, #19]
      break;
 800a8fa:	e000      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a8fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8fe:	7cfb      	ldrb	r3, [r7, #19]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10b      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a904:	4b76      	ldr	r3, [pc, #472]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a912:	4973      	ldr	r1, [pc, #460]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a914:	4313      	orrs	r3, r2
 800a916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a91a:	e001      	b.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a91c:	7cfb      	ldrb	r3, [r7, #19]
 800a91e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d041      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a934:	d02a      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a93a:	d824      	bhi.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a93c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a940:	d008      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a946:	d81e      	bhi.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a94c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a950:	d010      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a952:	e018      	b.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a954:	4b62      	ldr	r3, [pc, #392]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	4a61      	ldr	r2, [pc, #388]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a95a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a95e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a960:	e015      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3304      	adds	r3, #4
 800a966:	2100      	movs	r1, #0
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fa73 	bl	800ae54 <RCCEx_PLLSAI1_Config>
 800a96e:	4603      	mov	r3, r0
 800a970:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a972:	e00c      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	3320      	adds	r3, #32
 800a978:	2100      	movs	r1, #0
 800a97a:	4618      	mov	r0, r3
 800a97c:	f000 fb5e 	bl	800b03c <RCCEx_PLLSAI2_Config>
 800a980:	4603      	mov	r3, r0
 800a982:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a984:	e003      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	74fb      	strb	r3, [r7, #19]
      break;
 800a98a:	e000      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a98c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a98e:	7cfb      	ldrb	r3, [r7, #19]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10b      	bne.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a994:	4b52      	ldr	r3, [pc, #328]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9a2:	494f      	ldr	r1, [pc, #316]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a9aa:	e001      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ac:	7cfb      	ldrb	r3, [r7, #19]
 800a9ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80a0 	beq.w	800aafe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a9c2:	4b47      	ldr	r3, [pc, #284]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e000      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00d      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a9d8:	4b41      	ldr	r3, [pc, #260]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9dc:	4a40      	ldr	r2, [pc, #256]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9e2:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e4:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9ec:	60bb      	str	r3, [r7, #8]
 800a9ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f4:	4b3b      	ldr	r3, [pc, #236]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a3a      	ldr	r2, [pc, #232]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a9fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aa00:	f7fd ff3e 	bl	8008880 <HAL_GetTick>
 800aa04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aa06:	e009      	b.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa08:	f7fd ff3a 	bl	8008880 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d902      	bls.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	74fb      	strb	r3, [r7, #19]
        break;
 800aa1a:	e005      	b.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800aa1c:	4b31      	ldr	r3, [pc, #196]	; (800aae4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0ef      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800aa28:	7cfb      	ldrb	r3, [r7, #19]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d15c      	bne.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aa2e:	4b2c      	ldr	r3, [pc, #176]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01f      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d019      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aa4c:	4b24      	ldr	r3, [pc, #144]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aa58:	4b21      	ldr	r3, [pc, #132]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa5e:	4a20      	ldr	r2, [pc, #128]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aa68:	4b1d      	ldr	r3, [pc, #116]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa6e:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800aa78:	4a19      	ldr	r2, [pc, #100]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d016      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa8a:	f7fd fef9 	bl	8008880 <HAL_GetTick>
 800aa8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa90:	e00b      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa92:	f7fd fef5 	bl	8008880 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d902      	bls.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	74fb      	strb	r3, [r7, #19]
            break;
 800aaa8:	e006      	b.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aaac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab0:	f003 0302 	and.w	r3, r3, #2
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d0ec      	beq.n	800aa92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800aab8:	7cfb      	ldrb	r3, [r7, #19]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10c      	bne.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aabe:	4b08      	ldr	r3, [pc, #32]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aace:	4904      	ldr	r1, [pc, #16]	; (800aae0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800aad0:	4313      	orrs	r3, r2
 800aad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aad6:	e009      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aad8:	7cfb      	ldrb	r3, [r7, #19]
 800aada:	74bb      	strb	r3, [r7, #18]
 800aadc:	e006      	b.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800aade:	bf00      	nop
 800aae0:	40021000 	.word	0x40021000
 800aae4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae8:	7cfb      	ldrb	r3, [r7, #19]
 800aaea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aaec:	7c7b      	ldrb	r3, [r7, #17]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d105      	bne.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaf2:	4b9e      	ldr	r3, [pc, #632]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaf6:	4a9d      	ldr	r2, [pc, #628]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aaf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aafc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ab0a:	4b98      	ldr	r3, [pc, #608]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab10:	f023 0203 	bic.w	r2, r3, #3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	4994      	ldr	r1, [pc, #592]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00a      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ab2c:	4b8f      	ldr	r3, [pc, #572]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab32:	f023 020c 	bic.w	r2, r3, #12
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	498c      	ldr	r1, [pc, #560]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ab4e:	4b87      	ldr	r3, [pc, #540]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5c:	4983      	ldr	r1, [pc, #524]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0308 	and.w	r3, r3, #8
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00a      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ab70:	4b7e      	ldr	r3, [pc, #504]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7e:	497b      	ldr	r1, [pc, #492]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0310 	and.w	r3, r3, #16
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ab92:	4b76      	ldr	r3, [pc, #472]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba0:	4972      	ldr	r1, [pc, #456]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0320 	and.w	r3, r3, #32
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00a      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800abb4:	4b6d      	ldr	r3, [pc, #436]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abc2:	496a      	ldr	r1, [pc, #424]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800abd6:	4b65      	ldr	r3, [pc, #404]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe4:	4961      	ldr	r1, [pc, #388]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00a      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800abf8:	4b5c      	ldr	r3, [pc, #368]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800abfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac06:	4959      	ldr	r1, [pc, #356]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac1a:	4b54      	ldr	r3, [pc, #336]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac28:	4950      	ldr	r1, [pc, #320]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac3c:	4b4b      	ldr	r3, [pc, #300]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4a:	4948      	ldr	r1, [pc, #288]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac5e:	4b43      	ldr	r3, [pc, #268]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6c:	493f      	ldr	r1, [pc, #252]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d028      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac80:	4b3a      	ldr	r3, [pc, #232]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8e:	4937      	ldr	r1, [pc, #220]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac9e:	d106      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aca0:	4b32      	ldr	r3, [pc, #200]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	4a31      	ldr	r2, [pc, #196]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acaa:	60d3      	str	r3, [r2, #12]
 800acac:	e011      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acb6:	d10c      	bne.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3304      	adds	r3, #4
 800acbc:	2101      	movs	r1, #1
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 f8c8 	bl	800ae54 <RCCEx_PLLSAI1_Config>
 800acc4:	4603      	mov	r3, r0
 800acc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800acc8:	7cfb      	ldrb	r3, [r7, #19]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800acce:	7cfb      	ldrb	r3, [r7, #19]
 800acd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d028      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800acde:	4b23      	ldr	r3, [pc, #140]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acec:	491f      	ldr	r1, [pc, #124]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800acee:	4313      	orrs	r3, r2
 800acf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acfc:	d106      	bne.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800acfe:	4b1b      	ldr	r3, [pc, #108]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	4a1a      	ldr	r2, [pc, #104]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ad04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad08:	60d3      	str	r3, [r2, #12]
 800ad0a:	e011      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad14:	d10c      	bne.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 f899 	bl	800ae54 <RCCEx_PLLSAI1_Config>
 800ad22:	4603      	mov	r3, r0
 800ad24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad26:	7cfb      	ldrb	r3, [r7, #19]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800ad2c:	7cfb      	ldrb	r3, [r7, #19]
 800ad2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d02b      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad3c:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ad3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad4a:	4908      	ldr	r1, [pc, #32]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad5a:	d109      	bne.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ad5c:	4b03      	ldr	r3, [pc, #12]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	4a02      	ldr	r2, [pc, #8]	; (800ad6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ad62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad66:	60d3      	str	r3, [r2, #12]
 800ad68:	e014      	b.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800ad6a:	bf00      	nop
 800ad6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad78:	d10c      	bne.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	2101      	movs	r1, #1
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 f867 	bl	800ae54 <RCCEx_PLLSAI1_Config>
 800ad86:	4603      	mov	r3, r0
 800ad88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ad8a:	7cfb      	ldrb	r3, [r7, #19]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800ad90:	7cfb      	ldrb	r3, [r7, #19]
 800ad92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d02f      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ada0:	4b2b      	ldr	r3, [pc, #172]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ada2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adae:	4928      	ldr	r1, [pc, #160]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adbe:	d10d      	bne.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3304      	adds	r3, #4
 800adc4:	2102      	movs	r1, #2
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 f844 	bl	800ae54 <RCCEx_PLLSAI1_Config>
 800adcc:	4603      	mov	r3, r0
 800adce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800add0:	7cfb      	ldrb	r3, [r7, #19]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d014      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800add6:	7cfb      	ldrb	r3, [r7, #19]
 800add8:	74bb      	strb	r3, [r7, #18]
 800adda:	e011      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ade0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade4:	d10c      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3320      	adds	r3, #32
 800adea:	2102      	movs	r1, #2
 800adec:	4618      	mov	r0, r3
 800adee:	f000 f925 	bl	800b03c <RCCEx_PLLSAI2_Config>
 800adf2:	4603      	mov	r3, r0
 800adf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800adf6:	7cfb      	ldrb	r3, [r7, #19]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800adfc:	7cfb      	ldrb	r3, [r7, #19]
 800adfe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00a      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae0c:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ae0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1a:	490d      	ldr	r1, [pc, #52]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae2e:	4b08      	ldr	r3, [pc, #32]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ae30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae3e:	4904      	ldr	r1, [pc, #16]	; (800ae50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ae40:	4313      	orrs	r3, r2
 800ae42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ae46:	7cbb      	ldrb	r3, [r7, #18]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3718      	adds	r7, #24
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	40021000 	.word	0x40021000

0800ae54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b084      	sub	sp, #16
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ae62:	4b75      	ldr	r3, [pc, #468]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	f003 0303 	and.w	r3, r3, #3
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d018      	beq.n	800aea0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ae6e:	4b72      	ldr	r3, [pc, #456]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f003 0203 	and.w	r2, r3, #3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d10d      	bne.n	800ae9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
       ||
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d009      	beq.n	800ae9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ae86:	4b6c      	ldr	r3, [pc, #432]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	091b      	lsrs	r3, r3, #4
 800ae8c:	f003 0307 	and.w	r3, r3, #7
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
       ||
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d047      	beq.n	800af2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	73fb      	strb	r3, [r7, #15]
 800ae9e:	e044      	b.n	800af2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d018      	beq.n	800aeda <RCCEx_PLLSAI1_Config+0x86>
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d825      	bhi.n	800aef8 <RCCEx_PLLSAI1_Config+0xa4>
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d002      	beq.n	800aeb6 <RCCEx_PLLSAI1_Config+0x62>
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d009      	beq.n	800aec8 <RCCEx_PLLSAI1_Config+0x74>
 800aeb4:	e020      	b.n	800aef8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800aeb6:	4b60      	ldr	r3, [pc, #384]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0302 	and.w	r3, r3, #2
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d11d      	bne.n	800aefe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aec6:	e01a      	b.n	800aefe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800aec8:	4b5b      	ldr	r3, [pc, #364]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d116      	bne.n	800af02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aed8:	e013      	b.n	800af02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800aeda:	4b57      	ldr	r3, [pc, #348]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10f      	bne.n	800af06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800aee6:	4b54      	ldr	r3, [pc, #336]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d109      	bne.n	800af06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aef6:	e006      	b.n	800af06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	73fb      	strb	r3, [r7, #15]
      break;
 800aefc:	e004      	b.n	800af08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800aefe:	bf00      	nop
 800af00:	e002      	b.n	800af08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800af02:	bf00      	nop
 800af04:	e000      	b.n	800af08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800af06:	bf00      	nop
    }

    if(status == HAL_OK)
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d10d      	bne.n	800af2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800af0e:	4b4a      	ldr	r3, [pc, #296]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6819      	ldr	r1, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	3b01      	subs	r3, #1
 800af20:	011b      	lsls	r3, r3, #4
 800af22:	430b      	orrs	r3, r1
 800af24:	4944      	ldr	r1, [pc, #272]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af26:	4313      	orrs	r3, r2
 800af28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800af2a:	7bfb      	ldrb	r3, [r7, #15]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d17d      	bne.n	800b02c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800af30:	4b41      	ldr	r3, [pc, #260]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a40      	ldr	r2, [pc, #256]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af3c:	f7fd fca0 	bl	8008880 <HAL_GetTick>
 800af40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af42:	e009      	b.n	800af58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800af44:	f7fd fc9c 	bl	8008880 <HAL_GetTick>
 800af48:	4602      	mov	r2, r0
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d902      	bls.n	800af58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	73fb      	strb	r3, [r7, #15]
        break;
 800af56:	e005      	b.n	800af64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800af58:	4b37      	ldr	r3, [pc, #220]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1ef      	bne.n	800af44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d160      	bne.n	800b02c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d111      	bne.n	800af94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af70:	4b31      	ldr	r3, [pc, #196]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800af78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	6892      	ldr	r2, [r2, #8]
 800af80:	0211      	lsls	r1, r2, #8
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	68d2      	ldr	r2, [r2, #12]
 800af86:	0912      	lsrs	r2, r2, #4
 800af88:	0452      	lsls	r2, r2, #17
 800af8a:	430a      	orrs	r2, r1
 800af8c:	492a      	ldr	r1, [pc, #168]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	610b      	str	r3, [r1, #16]
 800af92:	e027      	b.n	800afe4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d112      	bne.n	800afc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800af9a:	4b27      	ldr	r3, [pc, #156]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800afa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	6892      	ldr	r2, [r2, #8]
 800afaa:	0211      	lsls	r1, r2, #8
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6912      	ldr	r2, [r2, #16]
 800afb0:	0852      	lsrs	r2, r2, #1
 800afb2:	3a01      	subs	r2, #1
 800afb4:	0552      	lsls	r2, r2, #21
 800afb6:	430a      	orrs	r2, r1
 800afb8:	491f      	ldr	r1, [pc, #124]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800afba:	4313      	orrs	r3, r2
 800afbc:	610b      	str	r3, [r1, #16]
 800afbe:	e011      	b.n	800afe4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800afc0:	4b1d      	ldr	r3, [pc, #116]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800afc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	6892      	ldr	r2, [r2, #8]
 800afd0:	0211      	lsls	r1, r2, #8
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	6952      	ldr	r2, [r2, #20]
 800afd6:	0852      	lsrs	r2, r2, #1
 800afd8:	3a01      	subs	r2, #1
 800afda:	0652      	lsls	r2, r2, #25
 800afdc:	430a      	orrs	r2, r1
 800afde:	4916      	ldr	r1, [pc, #88]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800afe4:	4b14      	ldr	r3, [pc, #80]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a13      	ldr	r2, [pc, #76]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800afea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800afee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aff0:	f7fd fc46 	bl	8008880 <HAL_GetTick>
 800aff4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800aff6:	e009      	b.n	800b00c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800aff8:	f7fd fc42 	bl	8008880 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	2b02      	cmp	r3, #2
 800b004:	d902      	bls.n	800b00c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	73fb      	strb	r3, [r7, #15]
          break;
 800b00a:	e005      	b.n	800b018 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b00c:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0ef      	beq.n	800aff8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b01e:	4b06      	ldr	r3, [pc, #24]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	4904      	ldr	r1, [pc, #16]	; (800b038 <RCCEx_PLLSAI1_Config+0x1e4>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	40021000 	.word	0x40021000

0800b03c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b046:	2300      	movs	r3, #0
 800b048:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b04a:	4b6a      	ldr	r3, [pc, #424]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f003 0303 	and.w	r3, r3, #3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d018      	beq.n	800b088 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b056:	4b67      	ldr	r3, [pc, #412]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	f003 0203 	and.w	r2, r3, #3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	429a      	cmp	r2, r3
 800b064:	d10d      	bne.n	800b082 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
       ||
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b06e:	4b61      	ldr	r3, [pc, #388]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	091b      	lsrs	r3, r3, #4
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
       ||
 800b07e:	429a      	cmp	r2, r3
 800b080:	d047      	beq.n	800b112 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	73fb      	strb	r3, [r7, #15]
 800b086:	e044      	b.n	800b112 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b03      	cmp	r3, #3
 800b08e:	d018      	beq.n	800b0c2 <RCCEx_PLLSAI2_Config+0x86>
 800b090:	2b03      	cmp	r3, #3
 800b092:	d825      	bhi.n	800b0e0 <RCCEx_PLLSAI2_Config+0xa4>
 800b094:	2b01      	cmp	r3, #1
 800b096:	d002      	beq.n	800b09e <RCCEx_PLLSAI2_Config+0x62>
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d009      	beq.n	800b0b0 <RCCEx_PLLSAI2_Config+0x74>
 800b09c:	e020      	b.n	800b0e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b09e:	4b55      	ldr	r3, [pc, #340]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d11d      	bne.n	800b0e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0ae:	e01a      	b.n	800b0e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b0b0:	4b50      	ldr	r3, [pc, #320]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d116      	bne.n	800b0ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b0c0:	e013      	b.n	800b0ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b0c2:	4b4c      	ldr	r3, [pc, #304]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10f      	bne.n	800b0ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b0ce:	4b49      	ldr	r3, [pc, #292]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d109      	bne.n	800b0ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b0de:	e006      	b.n	800b0ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e4:	e004      	b.n	800b0f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b0e6:	bf00      	nop
 800b0e8:	e002      	b.n	800b0f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b0ea:	bf00      	nop
 800b0ec:	e000      	b.n	800b0f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800b0ee:	bf00      	nop
    }

    if(status == HAL_OK)
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d10d      	bne.n	800b112 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b0f6:	4b3f      	ldr	r3, [pc, #252]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	3b01      	subs	r3, #1
 800b108:	011b      	lsls	r3, r3, #4
 800b10a:	430b      	orrs	r3, r1
 800b10c:	4939      	ldr	r1, [pc, #228]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d167      	bne.n	800b1e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800b118:	4b36      	ldr	r3, [pc, #216]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a35      	ldr	r2, [pc, #212]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b11e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b124:	f7fd fbac 	bl	8008880 <HAL_GetTick>
 800b128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b12a:	e009      	b.n	800b140 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b12c:	f7fd fba8 	bl	8008880 <HAL_GetTick>
 800b130:	4602      	mov	r2, r0
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b02      	cmp	r3, #2
 800b138:	d902      	bls.n	800b140 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	73fb      	strb	r3, [r7, #15]
        break;
 800b13e:	e005      	b.n	800b14c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800b140:	4b2c      	ldr	r3, [pc, #176]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1ef      	bne.n	800b12c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d14a      	bne.n	800b1e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d111      	bne.n	800b17c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b158:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b15a:	695b      	ldr	r3, [r3, #20]
 800b15c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	6892      	ldr	r2, [r2, #8]
 800b168:	0211      	lsls	r1, r2, #8
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	68d2      	ldr	r2, [r2, #12]
 800b16e:	0912      	lsrs	r2, r2, #4
 800b170:	0452      	lsls	r2, r2, #17
 800b172:	430a      	orrs	r2, r1
 800b174:	491f      	ldr	r1, [pc, #124]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b176:	4313      	orrs	r3, r2
 800b178:	614b      	str	r3, [r1, #20]
 800b17a:	e011      	b.n	800b1a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800b17c:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	6892      	ldr	r2, [r2, #8]
 800b18c:	0211      	lsls	r1, r2, #8
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	6912      	ldr	r2, [r2, #16]
 800b192:	0852      	lsrs	r2, r2, #1
 800b194:	3a01      	subs	r2, #1
 800b196:	0652      	lsls	r2, r2, #25
 800b198:	430a      	orrs	r2, r1
 800b19a:	4916      	ldr	r1, [pc, #88]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800b1a0:	4b14      	ldr	r3, [pc, #80]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a13      	ldr	r2, [pc, #76]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b1a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1ac:	f7fd fb68 	bl	8008880 <HAL_GetTick>
 800b1b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b1b2:	e009      	b.n	800b1c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800b1b4:	f7fd fb64 	bl	8008880 <HAL_GetTick>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d902      	bls.n	800b1c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800b1c2:	2303      	movs	r3, #3
 800b1c4:	73fb      	strb	r3, [r7, #15]
          break;
 800b1c6:	e005      	b.n	800b1d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0ef      	beq.n	800b1b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800b1da:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b1dc:	695a      	ldr	r2, [r3, #20]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	695b      	ldr	r3, [r3, #20]
 800b1e2:	4904      	ldr	r1, [pc, #16]	; (800b1f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	40021000 	.word	0x40021000

0800b1f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e095      	b.n	800b336 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d108      	bne.n	800b224 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b21a:	d009      	beq.n	800b230 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	61da      	str	r2, [r3, #28]
 800b222:	e005      	b.n	800b230 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f877 	bl	800b33e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b270:	d902      	bls.n	800b278 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e002      	b.n	800b27e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b27c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b286:	d007      	beq.n	800b298 <HAL_SPI_Init+0xa0>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	68db      	ldr	r3, [r3, #12]
 800b28c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b290:	d002      	beq.n	800b298 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	f003 0302 	and.w	r3, r3, #2
 800b2b2:	431a      	orrs	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	f003 0301 	and.w	r3, r3, #1
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2d0:	431a      	orrs	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2da:	ea42 0103 	orr.w	r1, r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	0c1b      	lsrs	r3, r3, #16
 800b2f4:	f003 0204 	and.w	r2, r3, #4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	f003 0308 	and.w	r3, r3, #8
 800b30a:	431a      	orrs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b314:	ea42 0103 	orr.w	r1, r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	430a      	orrs	r2, r1
 800b324:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b08a      	sub	sp, #40	; 0x28
 800b356:	af00      	add	r7, sp, #0
 800b358:	60f8      	str	r0, [r7, #12]
 800b35a:	60b9      	str	r1, [r7, #8]
 800b35c:	607a      	str	r2, [r7, #4]
 800b35e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b360:	2301      	movs	r3, #1
 800b362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b370:	2b01      	cmp	r3, #1
 800b372:	d101      	bne.n	800b378 <HAL_SPI_TransmitReceive+0x26>
 800b374:	2302      	movs	r3, #2
 800b376:	e1fb      	b.n	800b770 <HAL_SPI_TransmitReceive+0x41e>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b380:	f7fd fa7e 	bl	8008880 <HAL_GetTick>
 800b384:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b38c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b394:	887b      	ldrh	r3, [r7, #2]
 800b396:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800b398:	887b      	ldrh	r3, [r7, #2]
 800b39a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b39c:	7efb      	ldrb	r3, [r7, #27]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d00e      	beq.n	800b3c0 <HAL_SPI_TransmitReceive+0x6e>
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3a8:	d106      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <HAL_SPI_TransmitReceive+0x66>
 800b3b2:	7efb      	ldrb	r3, [r7, #27]
 800b3b4:	2b04      	cmp	r3, #4
 800b3b6:	d003      	beq.n	800b3c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b3be:	e1cd      	b.n	800b75c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d005      	beq.n	800b3d2 <HAL_SPI_TransmitReceive+0x80>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <HAL_SPI_TransmitReceive+0x80>
 800b3cc:	887b      	ldrh	r3, [r7, #2]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d103      	bne.n	800b3da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800b3d8:	e1c0      	b.n	800b75c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d003      	beq.n	800b3ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2205      	movs	r2, #5
 800b3ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	887a      	ldrh	r2, [r7, #2]
 800b3fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	887a      	ldrh	r2, [r7, #2]
 800b406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	887a      	ldrh	r2, [r7, #2]
 800b414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	887a      	ldrh	r2, [r7, #2]
 800b41a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b430:	d802      	bhi.n	800b438 <HAL_SPI_TransmitReceive+0xe6>
 800b432:	8a3b      	ldrh	r3, [r7, #16]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d908      	bls.n	800b44a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b446:	605a      	str	r2, [r3, #4]
 800b448:	e007      	b.n	800b45a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685a      	ldr	r2, [r3, #4]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b458:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b464:	2b40      	cmp	r3, #64	; 0x40
 800b466:	d007      	beq.n	800b478 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b480:	d97c      	bls.n	800b57c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d002      	beq.n	800b490 <HAL_SPI_TransmitReceive+0x13e>
 800b48a:	8a7b      	ldrh	r3, [r7, #18]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d169      	bne.n	800b564 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b494:	881a      	ldrh	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	1c9a      	adds	r2, r3, #2
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4b4:	e056      	b.n	800b564 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f003 0302 	and.w	r3, r3, #2
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d11b      	bne.n	800b4fc <HAL_SPI_TransmitReceive+0x1aa>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d016      	beq.n	800b4fc <HAL_SPI_TransmitReceive+0x1aa>
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d113      	bne.n	800b4fc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	881a      	ldrh	r2, [r3, #0]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e4:	1c9a      	adds	r2, r3, #2
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b01      	cmp	r3, #1
 800b508:	d11c      	bne.n	800b544 <HAL_SPI_TransmitReceive+0x1f2>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b510:	b29b      	uxth	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d016      	beq.n	800b544 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68da      	ldr	r2, [r3, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b520:	b292      	uxth	r2, r2
 800b522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b528:	1c9a      	adds	r2, r3, #2
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b534:	b29b      	uxth	r3, r3
 800b536:	3b01      	subs	r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b540:	2301      	movs	r3, #1
 800b542:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b544:	f7fd f99c 	bl	8008880 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b550:	429a      	cmp	r2, r3
 800b552:	d807      	bhi.n	800b564 <HAL_SPI_TransmitReceive+0x212>
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55a:	d003      	beq.n	800b564 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800b55c:	2303      	movs	r3, #3
 800b55e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b562:	e0fb      	b.n	800b75c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b568:	b29b      	uxth	r3, r3
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1a3      	bne.n	800b4b6 <HAL_SPI_TransmitReceive+0x164>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b574:	b29b      	uxth	r3, r3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d19d      	bne.n	800b4b6 <HAL_SPI_TransmitReceive+0x164>
 800b57a:	e0df      	b.n	800b73c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <HAL_SPI_TransmitReceive+0x23a>
 800b584:	8a7b      	ldrh	r3, [r7, #18]
 800b586:	2b01      	cmp	r3, #1
 800b588:	f040 80cb 	bne.w	800b722 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b590:	b29b      	uxth	r3, r3
 800b592:	2b01      	cmp	r3, #1
 800b594:	d912      	bls.n	800b5bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	881a      	ldrh	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a6:	1c9a      	adds	r2, r3, #2
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	3b02      	subs	r3, #2
 800b5b4:	b29a      	uxth	r2, r3
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5ba:	e0b2      	b.n	800b722 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	7812      	ldrb	r2, [r2, #0]
 800b5c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5e2:	e09e      	b.n	800b722 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f003 0302 	and.w	r3, r3, #2
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d134      	bne.n	800b65c <HAL_SPI_TransmitReceive+0x30a>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d02f      	beq.n	800b65c <HAL_SPI_TransmitReceive+0x30a>
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d12c      	bne.n	800b65c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b606:	b29b      	uxth	r3, r3
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d912      	bls.n	800b632 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b610:	881a      	ldrh	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61c:	1c9a      	adds	r2, r3, #2
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b626:	b29b      	uxth	r3, r3
 800b628:	3b02      	subs	r3, #2
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b630:	e012      	b.n	800b658 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	330c      	adds	r3, #12
 800b63c:	7812      	ldrb	r2, [r2, #0]
 800b63e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b658:	2300      	movs	r3, #0
 800b65a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	f003 0301 	and.w	r3, r3, #1
 800b666:	2b01      	cmp	r3, #1
 800b668:	d148      	bne.n	800b6fc <HAL_SPI_TransmitReceive+0x3aa>
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b670:	b29b      	uxth	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d042      	beq.n	800b6fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d923      	bls.n	800b6ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68c:	b292      	uxth	r2, r2
 800b68e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b694:	1c9a      	adds	r2, r3, #2
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	3b02      	subs	r3, #2
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d81f      	bhi.n	800b6f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b6c6:	605a      	str	r2, [r3, #4]
 800b6c8:	e016      	b.n	800b6f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f103 020c 	add.w	r2, r3, #12
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b6fc:	f7fd f8c0 	bl	8008880 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b708:	429a      	cmp	r2, r3
 800b70a:	d803      	bhi.n	800b714 <HAL_SPI_TransmitReceive+0x3c2>
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d102      	bne.n	800b71a <HAL_SPI_TransmitReceive+0x3c8>
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	2b00      	cmp	r3, #0
 800b718:	d103      	bne.n	800b722 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800b720:	e01c      	b.n	800b75c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b726:	b29b      	uxth	r3, r3
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f47f af5b 	bne.w	800b5e4 <HAL_SPI_TransmitReceive+0x292>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b734:	b29b      	uxth	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	f47f af54 	bne.w	800b5e4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b73c:	69fa      	ldr	r2, [r7, #28]
 800b73e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 f945 	bl	800b9d0 <SPI_EndRxTxTransaction>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	661a      	str	r2, [r3, #96]	; 0x60
 800b758:	e000      	b.n	800b75c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800b75a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b76c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800b770:	4618      	mov	r0, r3
 800b772:	3728      	adds	r7, #40	; 0x28
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b786:	b2db      	uxtb	r3, r3
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	603b      	str	r3, [r7, #0]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b7a4:	f7fd f86c 	bl	8008880 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b7b4:	f7fd f864 	bl	8008880 <HAL_GetTick>
 800b7b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b7ba:	4b39      	ldr	r3, [pc, #228]	; (800b8a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	015b      	lsls	r3, r3, #5
 800b7c0:	0d1b      	lsrs	r3, r3, #20
 800b7c2:	69fa      	ldr	r2, [r7, #28]
 800b7c4:	fb02 f303 	mul.w	r3, r2, r3
 800b7c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7ca:	e054      	b.n	800b876 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d2:	d050      	beq.n	800b876 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b7d4:	f7fd f854 	bl	8008880 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	69fa      	ldr	r2, [r7, #28]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d902      	bls.n	800b7ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d13d      	bne.n	800b866 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b7f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b802:	d111      	bne.n	800b828 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b80c:	d004      	beq.n	800b818 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b816:	d107      	bne.n	800b828 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b826:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b830:	d10f      	bne.n	800b852 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b840:	601a      	str	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b850:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2201      	movs	r2, #1
 800b856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e017      	b.n	800b896 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	3b01      	subs	r3, #1
 800b874:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	4013      	ands	r3, r2
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	429a      	cmp	r2, r3
 800b884:	bf0c      	ite	eq
 800b886:	2301      	moveq	r3, #1
 800b888:	2300      	movne	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	461a      	mov	r2, r3
 800b88e:	79fb      	ldrb	r3, [r7, #7]
 800b890:	429a      	cmp	r2, r3
 800b892:	d19b      	bne.n	800b7cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20000020 	.word	0x20000020

0800b8a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b08a      	sub	sp, #40	; 0x28
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
 800b8b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b8b6:	f7fc ffe3 	bl	8008880 <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	1a9b      	subs	r3, r3, r2
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b8c6:	f7fc ffdb 	bl	8008880 <HAL_GetTick>
 800b8ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	330c      	adds	r3, #12
 800b8d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b8d4:	4b3d      	ldr	r3, [pc, #244]	; (800b9cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	4613      	mov	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4413      	add	r3, r2
 800b8de:	00da      	lsls	r2, r3, #3
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	0d1b      	lsrs	r3, r3, #20
 800b8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b8ec:	e060      	b.n	800b9b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b8f4:	d107      	bne.n	800b906 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d104      	bne.n	800b906 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	b2db      	uxtb	r3, r3
 800b902:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b904:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90c:	d050      	beq.n	800b9b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b90e:	f7fc ffb7 	bl	8008880 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	6a3b      	ldr	r3, [r7, #32]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d902      	bls.n	800b924 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	2b00      	cmp	r3, #0
 800b922:	d13d      	bne.n	800b9a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b93c:	d111      	bne.n	800b962 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b946:	d004      	beq.n	800b952 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b950:	d107      	bne.n	800b962 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b96a:	d10f      	bne.n	800b98c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b98a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e010      	b.n	800b9c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	689a      	ldr	r2, [r3, #8]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	4013      	ands	r3, r2
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d196      	bne.n	800b8ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3728      	adds	r7, #40	; 0x28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20000020 	.word	0x20000020

0800b9d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af02      	add	r7, sp, #8
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f7ff ff5b 	bl	800b8a4 <SPI_WaitFifoStateUntilTimeout>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9f8:	f043 0220 	orr.w	r2, r3, #32
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba00:	2303      	movs	r3, #3
 800ba02:	e027      	b.n	800ba54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2180      	movs	r1, #128	; 0x80
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f7ff fec0 	bl	800b794 <SPI_WaitFlagStateUntilTimeout>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba1e:	f043 0220 	orr.w	r2, r3, #32
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba26:	2303      	movs	r3, #3
 800ba28:	e014      	b.n	800ba54 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f7ff ff34 	bl	800b8a4 <SPI_WaitFifoStateUntilTimeout>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d007      	beq.n	800ba52 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba46:	f043 0220 	orr.w	r2, r3, #32
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba4e:	2303      	movs	r3, #3
 800ba50:	e000      	b.n	800ba54 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	e040      	b.n	800baf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d106      	bne.n	800ba84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f83a 	bl	800baf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2224      	movs	r2, #36	; 0x24
 800ba88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f022 0201 	bic.w	r2, r2, #1
 800ba98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f8ca 	bl	800bc34 <UART_SetConfig>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d101      	bne.n	800baaa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e022      	b.n	800baf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fb76 	bl	800c1a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bac6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689a      	ldr	r2, [r3, #8]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bad6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f042 0201 	orr.w	r2, r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fbfd 	bl	800c2e8 <UART_CheckIdleState>
 800baee:	4603      	mov	r3, r0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08a      	sub	sp, #40	; 0x28
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	4613      	mov	r3, r2
 800bb1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb20:	2b20      	cmp	r3, #32
 800bb22:	f040 8082 	bne.w	800bc2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <HAL_UART_Transmit+0x26>
 800bb2c:	88fb      	ldrh	r3, [r7, #6]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bb32:	2301      	movs	r3, #1
 800bb34:	e07a      	b.n	800bc2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d101      	bne.n	800bb44 <HAL_UART_Transmit+0x38>
 800bb40:	2302      	movs	r3, #2
 800bb42:	e073      	b.n	800bc2c <HAL_UART_Transmit+0x120>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2221      	movs	r2, #33	; 0x21
 800bb58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb5a:	f7fc fe91 	bl	8008880 <HAL_GetTick>
 800bb5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	88fa      	ldrh	r2, [r7, #6]
 800bb64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	88fa      	ldrh	r2, [r7, #6]
 800bb6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb78:	d108      	bne.n	800bb8c <HAL_UART_Transmit+0x80>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d104      	bne.n	800bb8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bb82:	2300      	movs	r3, #0
 800bb84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	61bb      	str	r3, [r7, #24]
 800bb8a:	e003      	b.n	800bb94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bb9c:	e02d      	b.n	800bbfa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2200      	movs	r2, #0
 800bba6:	2180      	movs	r1, #128	; 0x80
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 fbe6 	bl	800c37a <UART_WaitOnFlagUntilTimeout>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e039      	b.n	800bc2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10b      	bne.n	800bbd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	881a      	ldrh	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbca:	b292      	uxth	r2, r2
 800bbcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	3302      	adds	r3, #2
 800bbd2:	61bb      	str	r3, [r7, #24]
 800bbd4:	e008      	b.n	800bbe8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	781a      	ldrb	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	b292      	uxth	r2, r2
 800bbe0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbee:	b29b      	uxth	r3, r3
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1cb      	bne.n	800bb9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2140      	movs	r1, #64	; 0x40
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 fbb2 	bl	800c37a <UART_WaitOnFlagUntilTimeout>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e005      	b.n	800bc2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2220      	movs	r2, #32
 800bc24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	e000      	b.n	800bc2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800bc2a:	2302      	movs	r3, #2
  }
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc38:	b08a      	sub	sp, #40	; 0x28
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	689a      	ldr	r2, [r3, #8]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	431a      	orrs	r2, r3
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4ba4      	ldr	r3, [pc, #656]	; (800bef4 <UART_SetConfig+0x2c0>)
 800bc64:	4013      	ands	r3, r2
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc6c:	430b      	orrs	r3, r1
 800bc6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	430a      	orrs	r2, r1
 800bc84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	699b      	ldr	r3, [r3, #24]
 800bc8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a99      	ldr	r2, [pc, #612]	; (800bef8 <UART_SetConfig+0x2c4>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d004      	beq.n	800bca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6a1b      	ldr	r3, [r3, #32]
 800bc9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a90      	ldr	r2, [pc, #576]	; (800befc <UART_SetConfig+0x2c8>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d126      	bne.n	800bd0c <UART_SetConfig+0xd8>
 800bcbe:	4b90      	ldr	r3, [pc, #576]	; (800bf00 <UART_SetConfig+0x2cc>)
 800bcc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc4:	f003 0303 	and.w	r3, r3, #3
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	d81b      	bhi.n	800bd04 <UART_SetConfig+0xd0>
 800bccc:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <UART_SetConfig+0xa0>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bce5 	.word	0x0800bce5
 800bcd8:	0800bcf5 	.word	0x0800bcf5
 800bcdc:	0800bced 	.word	0x0800bced
 800bce0:	0800bcfd 	.word	0x0800bcfd
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcea:	e116      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bcec:	2302      	movs	r3, #2
 800bcee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcf2:	e112      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcfa:	e10e      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bcfc:	2308      	movs	r3, #8
 800bcfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd02:	e10a      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd04:	2310      	movs	r3, #16
 800bd06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd0a:	e106      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a7c      	ldr	r2, [pc, #496]	; (800bf04 <UART_SetConfig+0x2d0>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d138      	bne.n	800bd88 <UART_SetConfig+0x154>
 800bd16:	4b7a      	ldr	r3, [pc, #488]	; (800bf00 <UART_SetConfig+0x2cc>)
 800bd18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd1c:	f003 030c 	and.w	r3, r3, #12
 800bd20:	2b0c      	cmp	r3, #12
 800bd22:	d82d      	bhi.n	800bd80 <UART_SetConfig+0x14c>
 800bd24:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <UART_SetConfig+0xf8>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd61 	.word	0x0800bd61
 800bd30:	0800bd81 	.word	0x0800bd81
 800bd34:	0800bd81 	.word	0x0800bd81
 800bd38:	0800bd81 	.word	0x0800bd81
 800bd3c:	0800bd71 	.word	0x0800bd71
 800bd40:	0800bd81 	.word	0x0800bd81
 800bd44:	0800bd81 	.word	0x0800bd81
 800bd48:	0800bd81 	.word	0x0800bd81
 800bd4c:	0800bd69 	.word	0x0800bd69
 800bd50:	0800bd81 	.word	0x0800bd81
 800bd54:	0800bd81 	.word	0x0800bd81
 800bd58:	0800bd81 	.word	0x0800bd81
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	2300      	movs	r3, #0
 800bd62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd66:	e0d8      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd68:	2302      	movs	r3, #2
 800bd6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd6e:	e0d4      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd70:	2304      	movs	r3, #4
 800bd72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd76:	e0d0      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd78:	2308      	movs	r3, #8
 800bd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd7e:	e0cc      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd80:	2310      	movs	r3, #16
 800bd82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd86:	e0c8      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a5e      	ldr	r2, [pc, #376]	; (800bf08 <UART_SetConfig+0x2d4>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d125      	bne.n	800bdde <UART_SetConfig+0x1aa>
 800bd92:	4b5b      	ldr	r3, [pc, #364]	; (800bf00 <UART_SetConfig+0x2cc>)
 800bd94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd9c:	2b30      	cmp	r3, #48	; 0x30
 800bd9e:	d016      	beq.n	800bdce <UART_SetConfig+0x19a>
 800bda0:	2b30      	cmp	r3, #48	; 0x30
 800bda2:	d818      	bhi.n	800bdd6 <UART_SetConfig+0x1a2>
 800bda4:	2b20      	cmp	r3, #32
 800bda6:	d00a      	beq.n	800bdbe <UART_SetConfig+0x18a>
 800bda8:	2b20      	cmp	r3, #32
 800bdaa:	d814      	bhi.n	800bdd6 <UART_SetConfig+0x1a2>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <UART_SetConfig+0x182>
 800bdb0:	2b10      	cmp	r3, #16
 800bdb2:	d008      	beq.n	800bdc6 <UART_SetConfig+0x192>
 800bdb4:	e00f      	b.n	800bdd6 <UART_SetConfig+0x1a2>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bdbc:	e0ad      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bdc4:	e0a9      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bdc6:	2304      	movs	r3, #4
 800bdc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bdcc:	e0a5      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bdce:	2308      	movs	r3, #8
 800bdd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bdd4:	e0a1      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bdd6:	2310      	movs	r3, #16
 800bdd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bddc:	e09d      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4a4a      	ldr	r2, [pc, #296]	; (800bf0c <UART_SetConfig+0x2d8>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d125      	bne.n	800be34 <UART_SetConfig+0x200>
 800bde8:	4b45      	ldr	r3, [pc, #276]	; (800bf00 <UART_SetConfig+0x2cc>)
 800bdea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdf2:	2bc0      	cmp	r3, #192	; 0xc0
 800bdf4:	d016      	beq.n	800be24 <UART_SetConfig+0x1f0>
 800bdf6:	2bc0      	cmp	r3, #192	; 0xc0
 800bdf8:	d818      	bhi.n	800be2c <UART_SetConfig+0x1f8>
 800bdfa:	2b80      	cmp	r3, #128	; 0x80
 800bdfc:	d00a      	beq.n	800be14 <UART_SetConfig+0x1e0>
 800bdfe:	2b80      	cmp	r3, #128	; 0x80
 800be00:	d814      	bhi.n	800be2c <UART_SetConfig+0x1f8>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <UART_SetConfig+0x1d8>
 800be06:	2b40      	cmp	r3, #64	; 0x40
 800be08:	d008      	beq.n	800be1c <UART_SetConfig+0x1e8>
 800be0a:	e00f      	b.n	800be2c <UART_SetConfig+0x1f8>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be12:	e082      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be14:	2302      	movs	r3, #2
 800be16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be1a:	e07e      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be1c:	2304      	movs	r3, #4
 800be1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be22:	e07a      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be24:	2308      	movs	r3, #8
 800be26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be2a:	e076      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be2c:	2310      	movs	r3, #16
 800be2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be32:	e072      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a35      	ldr	r2, [pc, #212]	; (800bf10 <UART_SetConfig+0x2dc>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d12a      	bne.n	800be94 <UART_SetConfig+0x260>
 800be3e:	4b30      	ldr	r3, [pc, #192]	; (800bf00 <UART_SetConfig+0x2cc>)
 800be40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be4c:	d01a      	beq.n	800be84 <UART_SetConfig+0x250>
 800be4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be52:	d81b      	bhi.n	800be8c <UART_SetConfig+0x258>
 800be54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be58:	d00c      	beq.n	800be74 <UART_SetConfig+0x240>
 800be5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be5e:	d815      	bhi.n	800be8c <UART_SetConfig+0x258>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <UART_SetConfig+0x238>
 800be64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be68:	d008      	beq.n	800be7c <UART_SetConfig+0x248>
 800be6a:	e00f      	b.n	800be8c <UART_SetConfig+0x258>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be72:	e052      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be74:	2302      	movs	r3, #2
 800be76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be7a:	e04e      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be7c:	2304      	movs	r3, #4
 800be7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be82:	e04a      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be84:	2308      	movs	r3, #8
 800be86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be8a:	e046      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be8c:	2310      	movs	r3, #16
 800be8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800be92:	e042      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a17      	ldr	r2, [pc, #92]	; (800bef8 <UART_SetConfig+0x2c4>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d13a      	bne.n	800bf14 <UART_SetConfig+0x2e0>
 800be9e:	4b18      	ldr	r3, [pc, #96]	; (800bf00 <UART_SetConfig+0x2cc>)
 800bea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beac:	d01a      	beq.n	800bee4 <UART_SetConfig+0x2b0>
 800beae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beb2:	d81b      	bhi.n	800beec <UART_SetConfig+0x2b8>
 800beb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beb8:	d00c      	beq.n	800bed4 <UART_SetConfig+0x2a0>
 800beba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bebe:	d815      	bhi.n	800beec <UART_SetConfig+0x2b8>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <UART_SetConfig+0x298>
 800bec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec8:	d008      	beq.n	800bedc <UART_SetConfig+0x2a8>
 800beca:	e00f      	b.n	800beec <UART_SetConfig+0x2b8>
 800becc:	2300      	movs	r3, #0
 800bece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bed2:	e022      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bed4:	2302      	movs	r3, #2
 800bed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beda:	e01e      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bedc:	2304      	movs	r3, #4
 800bede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bee2:	e01a      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bee4:	2308      	movs	r3, #8
 800bee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800beea:	e016      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800beec:	2310      	movs	r3, #16
 800beee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bef2:	e012      	b.n	800bf1a <UART_SetConfig+0x2e6>
 800bef4:	efff69f3 	.word	0xefff69f3
 800bef8:	40008000 	.word	0x40008000
 800befc:	40013800 	.word	0x40013800
 800bf00:	40021000 	.word	0x40021000
 800bf04:	40004400 	.word	0x40004400
 800bf08:	40004800 	.word	0x40004800
 800bf0c:	40004c00 	.word	0x40004c00
 800bf10:	40005000 	.word	0x40005000
 800bf14:	2310      	movs	r3, #16
 800bf16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a9f      	ldr	r2, [pc, #636]	; (800c19c <UART_SetConfig+0x568>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d17a      	bne.n	800c01a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bf24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf28:	2b08      	cmp	r3, #8
 800bf2a:	d824      	bhi.n	800bf76 <UART_SetConfig+0x342>
 800bf2c:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <UART_SetConfig+0x300>)
 800bf2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf32:	bf00      	nop
 800bf34:	0800bf59 	.word	0x0800bf59
 800bf38:	0800bf77 	.word	0x0800bf77
 800bf3c:	0800bf61 	.word	0x0800bf61
 800bf40:	0800bf77 	.word	0x0800bf77
 800bf44:	0800bf67 	.word	0x0800bf67
 800bf48:	0800bf77 	.word	0x0800bf77
 800bf4c:	0800bf77 	.word	0x0800bf77
 800bf50:	0800bf77 	.word	0x0800bf77
 800bf54:	0800bf6f 	.word	0x0800bf6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf58:	f7fe fc06 	bl	800a768 <HAL_RCC_GetPCLK1Freq>
 800bf5c:	61f8      	str	r0, [r7, #28]
        break;
 800bf5e:	e010      	b.n	800bf82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf60:	4b8f      	ldr	r3, [pc, #572]	; (800c1a0 <UART_SetConfig+0x56c>)
 800bf62:	61fb      	str	r3, [r7, #28]
        break;
 800bf64:	e00d      	b.n	800bf82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf66:	f7fe fb67 	bl	800a638 <HAL_RCC_GetSysClockFreq>
 800bf6a:	61f8      	str	r0, [r7, #28]
        break;
 800bf6c:	e009      	b.n	800bf82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf72:	61fb      	str	r3, [r7, #28]
        break;
 800bf74:	e005      	b.n	800bf82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bf80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 80fb 	beq.w	800c180 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	4413      	add	r3, r2
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d305      	bcc.n	800bfa6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d903      	bls.n	800bfae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bfac:	e0e8      	b.n	800c180 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	461c      	mov	r4, r3
 800bfb4:	4615      	mov	r5, r2
 800bfb6:	f04f 0200 	mov.w	r2, #0
 800bfba:	f04f 0300 	mov.w	r3, #0
 800bfbe:	022b      	lsls	r3, r5, #8
 800bfc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bfc4:	0222      	lsls	r2, r4, #8
 800bfc6:	68f9      	ldr	r1, [r7, #12]
 800bfc8:	6849      	ldr	r1, [r1, #4]
 800bfca:	0849      	lsrs	r1, r1, #1
 800bfcc:	2000      	movs	r0, #0
 800bfce:	4688      	mov	r8, r1
 800bfd0:	4681      	mov	r9, r0
 800bfd2:	eb12 0a08 	adds.w	sl, r2, r8
 800bfd6:	eb43 0b09 	adc.w	fp, r3, r9
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	603b      	str	r3, [r7, #0]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe8:	4650      	mov	r0, sl
 800bfea:	4659      	mov	r1, fp
 800bfec:	f7f8 fb4c 	bl	8004688 <__aeabi_uldivmod>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4613      	mov	r3, r2
 800bff6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bffe:	d308      	bcc.n	800c012 <UART_SetConfig+0x3de>
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c006:	d204      	bcs.n	800c012 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	60da      	str	r2, [r3, #12]
 800c010:	e0b6      	b.n	800c180 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c018:	e0b2      	b.n	800c180 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	69db      	ldr	r3, [r3, #28]
 800c01e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c022:	d15e      	bne.n	800c0e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800c024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c028:	2b08      	cmp	r3, #8
 800c02a:	d828      	bhi.n	800c07e <UART_SetConfig+0x44a>
 800c02c:	a201      	add	r2, pc, #4	; (adr r2, 800c034 <UART_SetConfig+0x400>)
 800c02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c032:	bf00      	nop
 800c034:	0800c059 	.word	0x0800c059
 800c038:	0800c061 	.word	0x0800c061
 800c03c:	0800c069 	.word	0x0800c069
 800c040:	0800c07f 	.word	0x0800c07f
 800c044:	0800c06f 	.word	0x0800c06f
 800c048:	0800c07f 	.word	0x0800c07f
 800c04c:	0800c07f 	.word	0x0800c07f
 800c050:	0800c07f 	.word	0x0800c07f
 800c054:	0800c077 	.word	0x0800c077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c058:	f7fe fb86 	bl	800a768 <HAL_RCC_GetPCLK1Freq>
 800c05c:	61f8      	str	r0, [r7, #28]
        break;
 800c05e:	e014      	b.n	800c08a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c060:	f7fe fb98 	bl	800a794 <HAL_RCC_GetPCLK2Freq>
 800c064:	61f8      	str	r0, [r7, #28]
        break;
 800c066:	e010      	b.n	800c08a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c068:	4b4d      	ldr	r3, [pc, #308]	; (800c1a0 <UART_SetConfig+0x56c>)
 800c06a:	61fb      	str	r3, [r7, #28]
        break;
 800c06c:	e00d      	b.n	800c08a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c06e:	f7fe fae3 	bl	800a638 <HAL_RCC_GetSysClockFreq>
 800c072:	61f8      	str	r0, [r7, #28]
        break;
 800c074:	e009      	b.n	800c08a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c07a:	61fb      	str	r3, [r7, #28]
        break;
 800c07c:	e005      	b.n	800c08a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d077      	beq.n	800c180 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	005a      	lsls	r2, r3, #1
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	085b      	lsrs	r3, r3, #1
 800c09a:	441a      	add	r2, r3
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0a6:	69bb      	ldr	r3, [r7, #24]
 800c0a8:	2b0f      	cmp	r3, #15
 800c0aa:	d916      	bls.n	800c0da <UART_SetConfig+0x4a6>
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0b2:	d212      	bcs.n	800c0da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	f023 030f 	bic.w	r3, r3, #15
 800c0bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	085b      	lsrs	r3, r3, #1
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f003 0307 	and.w	r3, r3, #7
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	8afb      	ldrh	r3, [r7, #22]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	8afa      	ldrh	r2, [r7, #22]
 800c0d6:	60da      	str	r2, [r3, #12]
 800c0d8:	e052      	b.n	800c180 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c0e0:	e04e      	b.n	800c180 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0e6:	2b08      	cmp	r3, #8
 800c0e8:	d827      	bhi.n	800c13a <UART_SetConfig+0x506>
 800c0ea:	a201      	add	r2, pc, #4	; (adr r2, 800c0f0 <UART_SetConfig+0x4bc>)
 800c0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f0:	0800c115 	.word	0x0800c115
 800c0f4:	0800c11d 	.word	0x0800c11d
 800c0f8:	0800c125 	.word	0x0800c125
 800c0fc:	0800c13b 	.word	0x0800c13b
 800c100:	0800c12b 	.word	0x0800c12b
 800c104:	0800c13b 	.word	0x0800c13b
 800c108:	0800c13b 	.word	0x0800c13b
 800c10c:	0800c13b 	.word	0x0800c13b
 800c110:	0800c133 	.word	0x0800c133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c114:	f7fe fb28 	bl	800a768 <HAL_RCC_GetPCLK1Freq>
 800c118:	61f8      	str	r0, [r7, #28]
        break;
 800c11a:	e014      	b.n	800c146 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c11c:	f7fe fb3a 	bl	800a794 <HAL_RCC_GetPCLK2Freq>
 800c120:	61f8      	str	r0, [r7, #28]
        break;
 800c122:	e010      	b.n	800c146 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c124:	4b1e      	ldr	r3, [pc, #120]	; (800c1a0 <UART_SetConfig+0x56c>)
 800c126:	61fb      	str	r3, [r7, #28]
        break;
 800c128:	e00d      	b.n	800c146 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c12a:	f7fe fa85 	bl	800a638 <HAL_RCC_GetSysClockFreq>
 800c12e:	61f8      	str	r0, [r7, #28]
        break;
 800c130:	e009      	b.n	800c146 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c136:	61fb      	str	r3, [r7, #28]
        break;
 800c138:	e005      	b.n	800c146 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c144:	bf00      	nop
    }

    if (pclk != 0U)
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d019      	beq.n	800c180 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	085a      	lsrs	r2, r3, #1
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	441a      	add	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c15e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	2b0f      	cmp	r3, #15
 800c164:	d909      	bls.n	800c17a <UART_SetConfig+0x546>
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c16c:	d205      	bcs.n	800c17a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	b29a      	uxth	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	60da      	str	r2, [r3, #12]
 800c178:	e002      	b.n	800c180 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c18c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800c190:	4618      	mov	r0, r3
 800c192:	3728      	adds	r7, #40	; 0x28
 800c194:	46bd      	mov	sp, r7
 800c196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c19a:	bf00      	nop
 800c19c:	40008000 	.word	0x40008000
 800c1a0:	00f42400 	.word	0x00f42400

0800c1a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00a      	beq.n	800c1ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	430a      	orrs	r2, r1
 800c1cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	f003 0302 	and.w	r3, r3, #2
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00a      	beq.n	800c1f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	430a      	orrs	r2, r1
 800c1ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00a      	beq.n	800c212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	430a      	orrs	r2, r1
 800c210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c216:	f003 0308 	and.w	r3, r3, #8
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	430a      	orrs	r2, r1
 800c232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c238:	f003 0310 	and.w	r3, r3, #16
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	f003 0320 	and.w	r3, r3, #32
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	430a      	orrs	r2, r1
 800c276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c280:	2b00      	cmp	r3, #0
 800c282:	d01a      	beq.n	800c2ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	430a      	orrs	r2, r1
 800c298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2a2:	d10a      	bne.n	800c2ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	430a      	orrs	r2, r1
 800c2da:	605a      	str	r2, [r3, #4]
  }
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af02      	add	r7, sp, #8
 800c2ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c2f8:	f7fc fac2 	bl	8008880 <HAL_GetTick>
 800c2fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0308 	and.w	r3, r3, #8
 800c308:	2b08      	cmp	r3, #8
 800c30a:	d10e      	bne.n	800c32a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c30c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f82d 	bl	800c37a <UART_WaitOnFlagUntilTimeout>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c326:	2303      	movs	r3, #3
 800c328:	e023      	b.n	800c372 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b04      	cmp	r3, #4
 800c336:	d10e      	bne.n	800c356 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 f817 	bl	800c37a <UART_WaitOnFlagUntilTimeout>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c352:	2303      	movs	r3, #3
 800c354:	e00d      	b.n	800c372 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2220      	movs	r2, #32
 800c35a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2220      	movs	r2, #32
 800c360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b09c      	sub	sp, #112	; 0x70
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	603b      	str	r3, [r7, #0]
 800c386:	4613      	mov	r3, r2
 800c388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c38a:	e0a5      	b.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c38c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c392:	f000 80a1 	beq.w	800c4d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c396:	f7fc fa73 	bl	8008880 <HAL_GetTick>
 800c39a:	4602      	mov	r2, r0
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d302      	bcc.n	800c3ac <UART_WaitOnFlagUntilTimeout+0x32>
 800c3a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d13e      	bne.n	800c42a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b4:	e853 3f00 	ldrex	r3, [r3]
 800c3b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3c0:	667b      	str	r3, [r7, #100]	; 0x64
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3d2:	e841 2300 	strex	r3, r2, [r1]
 800c3d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c3d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d1e6      	bne.n	800c3ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e8:	e853 3f00 	ldrex	r3, [r3]
 800c3ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f0:	f023 0301 	bic.w	r3, r3, #1
 800c3f4:	663b      	str	r3, [r7, #96]	; 0x60
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800c400:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c402:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c406:	e841 2300 	strex	r3, r2, [r1]
 800c40a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c40c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1e5      	bne.n	800c3de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2220      	movs	r2, #32
 800c416:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2220      	movs	r2, #32
 800c41c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	e067      	b.n	800c4fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d04f      	beq.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c446:	d147      	bne.n	800c4d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c450:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c462:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c466:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	461a      	mov	r2, r3
 800c46e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c470:	637b      	str	r3, [r7, #52]	; 0x34
 800c472:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e6      	bne.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	3308      	adds	r3, #8
 800c48a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	613b      	str	r3, [r7, #16]
   return(result);
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	f023 0301 	bic.w	r3, r3, #1
 800c49a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3308      	adds	r3, #8
 800c4a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c4a4:	623a      	str	r2, [r7, #32]
 800c4a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	69f9      	ldr	r1, [r7, #28]
 800c4aa:	6a3a      	ldr	r2, [r7, #32]
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e5      	bne.n	800c484 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2220      	movs	r2, #32
 800c4bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2220      	movs	r2, #32
 800c4c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e010      	b.n	800c4fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	69da      	ldr	r2, [r3, #28]
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2301      	moveq	r3, #1
 800c4ea:	2300      	movne	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	79fb      	ldrb	r3, [r7, #7]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	f43f af4a 	beq.w	800c38c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3770      	adds	r7, #112	; 0x70
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800c502:	b5b0      	push	{r4, r5, r7, lr}
 800c504:	b0ce      	sub	sp, #312	; 0x138
 800c506:	af00      	add	r7, sp, #0
 800c508:	4605      	mov	r5, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	4610      	mov	r0, r2
 800c50e:	4619      	mov	r1, r3
 800c510:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c514:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c518:	462a      	mov	r2, r5
 800c51a:	701a      	strb	r2, [r3, #0]
 800c51c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c520:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c524:	4622      	mov	r2, r4
 800c526:	801a      	strh	r2, [r3, #0]
 800c528:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c52c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800c530:	4602      	mov	r2, r0
 800c532:	801a      	strh	r2, [r3, #0]
 800c534:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c538:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c53c:	460a      	mov	r2, r1
 800c53e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c540:	f107 030c 	add.w	r3, r7, #12
 800c544:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c548:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c54c:	3308      	adds	r3, #8
 800c54e:	f107 020c 	add.w	r2, r7, #12
 800c552:	4413      	add	r3, r2
 800c554:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c558:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c55c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c560:	4413      	add	r3, r2
 800c562:	3309      	adds	r3, #9
 800c564:	f107 020c 	add.w	r2, r7, #12
 800c568:	4413      	add	r3, r2
 800c56a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c56e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c572:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800c576:	2200      	movs	r2, #0
 800c578:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800c580:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c584:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c588:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800c58c:	7812      	ldrb	r2, [r2, #0]
 800c58e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c590:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c594:	3301      	adds	r3, #1
 800c596:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800c59a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c59e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c5a2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800c5a6:	8812      	ldrh	r2, [r2, #0]
 800c5a8:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c5ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c5b0:	3302      	adds	r3, #2
 800c5b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800c5b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c5be:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800c5c2:	8812      	ldrh	r2, [r2, #0]
 800c5c4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c5c8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c5cc:	3302      	adds	r3, #2
 800c5ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800c5d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c5da:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800c5de:	7812      	ldrb	r2, [r2, #0]
 800c5e0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c5e2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800c5ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c5f0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c5f4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c5f6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800c600:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c604:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c608:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c60a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c60e:	3301      	adds	r3, #1
 800c610:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800c614:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c618:	3308      	adds	r3, #8
 800c61a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800c61e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800c622:	4618      	mov	r0, r3
 800c624:	f003 f906 	bl	800f834 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800c628:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800c62c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800c630:	4413      	add	r3, r2
 800c632:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800c636:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c63a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c63e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c640:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c644:	3301      	adds	r3, #1
 800c646:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800c64a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c64e:	3301      	adds	r3, #1
 800c650:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c654:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800c658:	4618      	mov	r0, r3
 800c65a:	f003 f8eb 	bl	800f834 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800c65e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800c662:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800c666:	4413      	add	r3, r2
 800c668:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800c66c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c670:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800c674:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c676:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c67a:	3302      	adds	r3, #2
 800c67c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800c680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c684:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800c688:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c68a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c68e:	3302      	adds	r3, #2
 800c690:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c694:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c698:	2218      	movs	r2, #24
 800c69a:	2100      	movs	r1, #0
 800c69c:	4618      	mov	r0, r3
 800c69e:	f003 f8d7 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800c6a2:	233f      	movs	r3, #63	; 0x3f
 800c6a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800c6a8:	2383      	movs	r3, #131	; 0x83
 800c6aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c6ae:	f107 030c 	add.w	r3, r7, #12
 800c6b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c6b6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c6ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c6be:	f107 030b 	add.w	r3, r7, #11
 800c6c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c6cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f002 fdd6 	bl	800f284 <hci_send_req>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	da01      	bge.n	800c6e2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c6de:	23ff      	movs	r3, #255	; 0xff
 800c6e0:	e00d      	b.n	800c6fe <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800c6e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c6e6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d005      	beq.n	800c6fc <aci_gap_set_discoverable+0x1fa>
    return status;
 800c6f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c6f4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	e000      	b.n	800c6fe <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c704:	46bd      	mov	sp, r7
 800c706:	bdb0      	pop	{r4, r5, r7, pc}

0800c708 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b0cc      	sub	sp, #304	; 0x130
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4602      	mov	r2, r0
 800c710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c714:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c718:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c71a:	f107 030c 	add.w	r3, r7, #12
 800c71e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c726:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c72a:	2200      	movs	r2, #0
 800c72c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 800c734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c738:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c73c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c740:	7812      	ldrb	r2, [r2, #0]
 800c742:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c744:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c748:	3301      	adds	r3, #1
 800c74a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c74e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c752:	2218      	movs	r2, #24
 800c754:	2100      	movs	r1, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f003 f87a 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800c75c:	233f      	movs	r3, #63	; 0x3f
 800c75e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800c762:	2385      	movs	r3, #133	; 0x85
 800c764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c768:	f107 030c 	add.w	r3, r7, #12
 800c76c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c770:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c778:	f107 030b 	add.w	r3, r7, #11
 800c77c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c780:	2301      	movs	r3, #1
 800c782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c78a:	2100      	movs	r1, #0
 800c78c:	4618      	mov	r0, r3
 800c78e:	f002 fd79 	bl	800f284 <hci_send_req>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	da01      	bge.n	800c79c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c798:	23ff      	movs	r3, #255	; 0xff
 800c79a:	e00d      	b.n	800c7b8 <aci_gap_set_io_capability+0xb0>
  if (status) {
 800c79c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7a0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <aci_gap_set_io_capability+0xae>
    return status;
 800c7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7ae:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	e000      	b.n	800c7b8 <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800c7c2:	b5b0      	push	{r4, r5, r7, lr}
 800c7c4:	b0cc      	sub	sp, #304	; 0x130
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7d4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c7d8:	462a      	mov	r2, r5
 800c7da:	701a      	strb	r2, [r3, #0]
 800c7dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7ec:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	701a      	strb	r2, [r3, #0]
 800c7f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c7fc:	460a      	mov	r2, r1
 800c7fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c800:	f107 030c 	add.w	r3, r7, #12
 800c804:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c80c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c810:	2200      	movs	r2, #0
 800c812:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800c81a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c81e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c822:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c826:	7812      	ldrb	r2, [r2, #0]
 800c828:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c82a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c82e:	3301      	adds	r3, #1
 800c830:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800c834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c838:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c83c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c840:	7812      	ldrb	r2, [r2, #0]
 800c842:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c844:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c848:	3301      	adds	r3, #1
 800c84a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 800c84e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c852:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c856:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c85a:	7812      	ldrb	r2, [r2, #0]
 800c85c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c85e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c862:	3301      	adds	r3, #1
 800c864:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800c868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c86c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c870:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c878:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c87c:	3301      	adds	r3, #1
 800c87e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800c882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c886:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800c88a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c88c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c890:	3301      	adds	r3, #1
 800c892:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800c896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c89a:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800c89e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c8a0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800c8aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8ae:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800c8b2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c8b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800c8be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8c2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800c8c6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c8ca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800c8d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c8d8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c8dc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c8de:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c8e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c8ec:	2218      	movs	r2, #24
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f002 ffad 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800c8f6:	233f      	movs	r3, #63	; 0x3f
 800c8f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800c8fc:	2386      	movs	r3, #134	; 0x86
 800c8fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c902:	f107 030c 	add.w	r3, r7, #12
 800c906:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c90a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c90e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c912:	f107 030b 	add.w	r3, r7, #11
 800c916:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c91a:	2301      	movs	r3, #1
 800c91c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800c920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c924:	2100      	movs	r1, #0
 800c926:	4618      	mov	r0, r3
 800c928:	f002 fcac 	bl	800f284 <hci_send_req>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	da01      	bge.n	800c936 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800c932:	23ff      	movs	r3, #255	; 0xff
 800c934:	e00d      	b.n	800c952 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 800c936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c93a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d005      	beq.n	800c950 <aci_gap_set_authentication_requirement+0x18e>
    return status;
 800c944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c948:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	e000      	b.n	800c952 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c958:	46bd      	mov	sp, r7
 800c95a:	bdb0      	pop	{r4, r5, r7, pc}

0800c95c <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b0cc      	sub	sp, #304	; 0x130
 800c960:	af00      	add	r7, sp, #0
 800c962:	4602      	mov	r2, r0
 800c964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c96c:	6019      	str	r1, [r3, #0]
 800c96e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c972:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c976:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800c978:	f107 030c 	add.w	r3, r7, #12
 800c97c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c984:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800c988:	2200      	movs	r2, #0
 800c98a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800c992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c996:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c99a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c99e:	8812      	ldrh	r2, [r2, #0]
 800c9a0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c9a2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c9a6:	3302      	adds	r3, #2
 800c9a8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Pass_Key = htob(Pass_Key, 4);
 800c9ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c9b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c9b4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800c9b8:	6812      	ldr	r2, [r2, #0]
 800c9ba:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800c9be:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c9c2:	3304      	adds	r3, #4
 800c9c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800c9c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c9cc:	2218      	movs	r2, #24
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f002 ff3d 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800c9d6:	233f      	movs	r3, #63	; 0x3f
 800c9d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800c9dc:	2388      	movs	r3, #136	; 0x88
 800c9de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c9e2:	f107 030c 	add.w	r3, r7, #12
 800c9e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c9ea:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800c9ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c9f2:	f107 030b 	add.w	r3, r7, #11
 800c9f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ca00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca04:	2100      	movs	r1, #0
 800ca06:	4618      	mov	r0, r3
 800ca08:	f002 fc3c 	bl	800f284 <hci_send_req>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	da01      	bge.n	800ca16 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800ca12:	23ff      	movs	r3, #255	; 0xff
 800ca14:	e00d      	b.n	800ca32 <aci_gap_pass_key_resp+0xd6>
  if (status) {
 800ca16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca1a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <aci_gap_pass_key_resp+0xd4>
    return status;
 800ca24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca28:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	e000      	b.n	800ca32 <aci_gap_pass_key_resp+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800ca3c:	b590      	push	{r4, r7, lr}
 800ca3e:	b0cf      	sub	sp, #316	; 0x13c
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	4604      	mov	r4, r0
 800ca44:	4608      	mov	r0, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ca4c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800ca50:	6013      	str	r3, [r2, #0]
 800ca52:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca56:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	701a      	strb	r2, [r3, #0]
 800ca5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca62:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ca66:	4602      	mov	r2, r0
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ca6e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ca72:	460a      	mov	r2, r1
 800ca74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ca76:	f107 0314 	add.w	r3, r7, #20
 800ca7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ca7e:	f107 030c 	add.w	r3, r7, #12
 800ca82:	2207      	movs	r2, #7
 800ca84:	2100      	movs	r1, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f002 fee2 	bl	800f850 <memset>
  uint8_t index_input = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 800ca92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ca96:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ca9a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ca9e:	7812      	ldrb	r2, [r2, #0]
 800caa0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800caa2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800caa6:	3301      	adds	r3, #1
 800caa8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800caac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800cab0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cab4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800cab8:	7812      	ldrb	r2, [r2, #0]
 800caba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cabc:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800cac0:	3301      	adds	r3, #1
 800cac2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800cac6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800caca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cace:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800cad2:	7812      	ldrb	r2, [r2, #0]
 800cad4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cad6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800cada:	3301      	adds	r3, #1
 800cadc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cae0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cae4:	2218      	movs	r2, #24
 800cae6:	2100      	movs	r1, #0
 800cae8:	4618      	mov	r0, r3
 800caea:	f002 feb1 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800caee:	233f      	movs	r3, #63	; 0x3f
 800caf0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800caf4:	238a      	movs	r3, #138	; 0x8a
 800caf6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800cafa:	f107 0314 	add.w	r3, r7, #20
 800cafe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800cb02:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800cb06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800cb0a:	f107 030c 	add.w	r3, r7, #12
 800cb0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800cb12:	2307      	movs	r3, #7
 800cb14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800cb18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f002 fbb0 	bl	800f284 <hci_send_req>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	da01      	bge.n	800cb2e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800cb2a:	23ff      	movs	r3, #255	; 0xff
 800cb2c:	e02e      	b.n	800cb8c <aci_gap_init+0x150>
  if (resp.Status) {
 800cb2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d005      	beq.n	800cb48 <aci_gap_init+0x10c>
    return resp.Status;
 800cb3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	e021      	b.n	800cb8c <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800cb48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb50:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800cb62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb6a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cb74:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800cb76:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cb7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cb7e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800cb88:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd90      	pop	{r4, r7, pc}

0800cb96 <aci_gap_slave_security_req>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b0cc      	sub	sp, #304	; 0x130
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cba2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cba6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 800cba8:	f107 030c 	add.w	r3, r7, #12
 800cbac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cbb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbb4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800cbb8:	2200      	movs	r2, #0
 800cbba:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800cbc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cbc6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cbca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800cbce:	8812      	ldrh	r2, [r2, #0]
 800cbd0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cbd2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cbdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbe0:	2218      	movs	r2, #24
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f002 fe33 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800cbea:	233f      	movs	r3, #63	; 0x3f
 800cbec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08d;
 800cbf0:	238d      	movs	r3, #141	; 0x8d
 800cbf2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800cbf6:	230f      	movs	r3, #15
 800cbf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800cbfc:	f107 030c 	add.w	r3, r7, #12
 800cc00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cc04:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800cc08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cc0c:	f107 030b 	add.w	r3, r7, #11
 800cc10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cc14:	2301      	movs	r3, #1
 800cc16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800cc1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cc1e:	2100      	movs	r1, #0
 800cc20:	4618      	mov	r0, r3
 800cc22:	f002 fb2f 	bl	800f284 <hci_send_req>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	da01      	bge.n	800cc30 <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 800cc2c:	23ff      	movs	r3, #255	; 0xff
 800cc2e:	e00d      	b.n	800cc4c <aci_gap_slave_security_req+0xb6>
  if (status) {
 800cc30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc34:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d005      	beq.n	800cc4a <aci_gap_slave_security_req+0xb4>
    return status;
 800cc3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc42:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	e000      	b.n	800cc4c <aci_gap_slave_security_req+0xb6>
  }
  return BLE_STATUS_SUCCESS;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b0cc      	sub	sp, #304	; 0x130
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cc66:	6019      	str	r1, [r3, #0]
 800cc68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc6c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cc70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cc72:	f107 030c 	add.w	r3, r7, #12
 800cc76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cc7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cc7e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800cc82:	2200      	movs	r2, #0
 800cc84:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800cc8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cc90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cc94:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800cc98:	7812      	ldrb	r2, [r2, #0]
 800cc9a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc9c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800cca0:	3301      	adds	r3, #1
 800cca2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800cca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ccaa:	1c58      	adds	r0, r3, #1
 800ccac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccb0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ccb4:	781a      	ldrb	r2, [r3, #0]
 800ccb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ccbe:	6819      	ldr	r1, [r3, #0]
 800ccc0:	f002 fdb8 	bl	800f834 <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 800ccc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ccc8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800cccc:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ccd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ccdc:	2218      	movs	r2, #24
 800ccde:	2100      	movs	r1, #0
 800cce0:	4618      	mov	r0, r3
 800cce2:	f002 fdb5 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800cce6:	233f      	movs	r3, #63	; 0x3f
 800cce8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800ccec:	238e      	movs	r3, #142	; 0x8e
 800ccee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ccf2:	f107 030c 	add.w	r3, r7, #12
 800ccf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ccfa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ccfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cd02:	f107 030b 	add.w	r3, r7, #11
 800cd06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800cd10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cd14:	2100      	movs	r1, #0
 800cd16:	4618      	mov	r0, r3
 800cd18:	f002 fab4 	bl	800f284 <hci_send_req>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	da01      	bge.n	800cd26 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800cd22:	23ff      	movs	r3, #255	; 0xff
 800cd24:	e00d      	b.n	800cd42 <aci_gap_update_adv_data+0xec>
  if (status) {
 800cd26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd2a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d005      	beq.n	800cd40 <aci_gap_update_adv_data+0xea>
    return status;
 800cd34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cd38:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	e000      	b.n	800cd42 <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cd56:	f107 0308 	add.w	r3, r7, #8
 800cd5a:	2218      	movs	r2, #24
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f002 fd76 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800cd64:	233f      	movs	r3, #63	; 0x3f
 800cd66:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 800cd68:	2394      	movs	r3, #148	; 0x94
 800cd6a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cd6c:	1dfb      	adds	r3, r7, #7
 800cd6e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cd70:	2301      	movs	r3, #1
 800cd72:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800cd74:	f107 0308 	add.w	r3, r7, #8
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f002 fa82 	bl	800f284 <hci_send_req>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	da01      	bge.n	800cd8a <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cd86:	23ff      	movs	r3, #255	; 0xff
 800cd88:	e005      	b.n	800cd96 <aci_gap_clear_security_db+0x4a>
  if (status) {
 800cd8a:	79fb      	ldrb	r3, [r7, #7]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <aci_gap_clear_security_db+0x48>
    return status;
 800cd90:	79fb      	ldrb	r3, [r7, #7]
 800cd92:	e000      	b.n	800cd96 <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b088      	sub	sp, #32
 800cda2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cda8:	f107 0308 	add.w	r3, r7, #8
 800cdac:	2218      	movs	r2, #24
 800cdae:	2100      	movs	r1, #0
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f002 fd4d 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800cdb6:	233f      	movs	r3, #63	; 0x3f
 800cdb8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cdba:	f240 1301 	movw	r3, #257	; 0x101
 800cdbe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cdc0:	1dfb      	adds	r3, r7, #7
 800cdc2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800cdc8:	f107 0308 	add.w	r3, r7, #8
 800cdcc:	2100      	movs	r1, #0
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f002 fa58 	bl	800f284 <hci_send_req>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	da01      	bge.n	800cdde <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cdda:	23ff      	movs	r3, #255	; 0xff
 800cddc:	e005      	b.n	800cdea <aci_gatt_init+0x4c>
  if (status) {
 800cdde:	79fb      	ldrb	r3, [r7, #7]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <aci_gatt_init+0x4a>
    return status;
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	e000      	b.n	800cdea <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3720      	adds	r7, #32
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800cdf2:	b590      	push	{r4, r7, lr}
 800cdf4:	b0cf      	sub	sp, #316	; 0x13c
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800cdfe:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ce02:	6001      	str	r1, [r0, #0]
 800ce04:	4610      	mov	r0, r2
 800ce06:	4619      	mov	r1, r3
 800ce08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce0c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ce10:	4622      	mov	r2, r4
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce18:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	701a      	strb	r2, [r3, #0]
 800ce20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce24:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800ce28:	460a      	mov	r2, r1
 800ce2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ce2c:	f107 030c 	add.w	r3, r7, #12
 800ce30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ce34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce38:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d00a      	beq.n	800ce58 <aci_gatt_add_service+0x66>
 800ce42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce46:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d101      	bne.n	800ce54 <aci_gatt_add_service+0x62>
 800ce50:	2311      	movs	r3, #17
 800ce52:	e002      	b.n	800ce5a <aci_gatt_add_service+0x68>
 800ce54:	2301      	movs	r3, #1
 800ce56:	e000      	b.n	800ce5a <aci_gatt_add_service+0x68>
 800ce58:	2303      	movs	r3, #3
 800ce5a:	f107 020c 	add.w	r2, r7, #12
 800ce5e:	4413      	add	r3, r2
 800ce60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ce64:	f107 0308 	add.w	r3, r7, #8
 800ce68:	2203      	movs	r2, #3
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f002 fcef 	bl	800f850 <memset>
  uint8_t index_input = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800ce78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ce7c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ce80:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800ce84:	7812      	ldrb	r2, [r2, #0]
 800ce86:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce88:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800ce92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ce96:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d002      	beq.n	800cea6 <aci_gatt_add_service+0xb4>
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d004      	beq.n	800ceae <aci_gatt_add_service+0xbc>
 800cea4:	e007      	b.n	800ceb6 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 800cea6:	2302      	movs	r3, #2
 800cea8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ceac:	e005      	b.n	800ceba <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ceae:	2310      	movs	r3, #16
 800ceb0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800ceb4:	e001      	b.n	800ceba <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ceb6:	2347      	movs	r3, #71	; 0x47
 800ceb8:	e06c      	b.n	800cf94 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800ceba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800cebe:	1c58      	adds	r0, r3, #1
 800cec0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800cec4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cec8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800cecc:	6819      	ldr	r1, [r3, #0]
 800cece:	f002 fcb1 	bl	800f834 <memcpy>
    index_input += size;
 800ced2:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800ced6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800ceda:	4413      	add	r3, r2
 800cedc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800cee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cee4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cee8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800ceec:	7812      	ldrb	r2, [r2, #0]
 800ceee:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cef0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800cef4:	3301      	adds	r3, #1
 800cef6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800cefa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cefe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800cf02:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800cf06:	7812      	ldrb	r2, [r2, #0]
 800cf08:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800cf0a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800cf0e:	3301      	adds	r3, #1
 800cf10:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800cf14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf18:	2218      	movs	r2, #24
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f002 fc97 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800cf22:	233f      	movs	r3, #63	; 0x3f
 800cf24:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800cf28:	f44f 7381 	mov.w	r3, #258	; 0x102
 800cf2c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cf38:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800cf3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800cf40:	f107 0308 	add.w	r3, r7, #8
 800cf44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800cf48:	2303      	movs	r3, #3
 800cf4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800cf4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cf52:	2100      	movs	r1, #0
 800cf54:	4618      	mov	r0, r3
 800cf56:	f002 f995 	bl	800f284 <hci_send_req>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	da01      	bge.n	800cf64 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800cf60:	23ff      	movs	r3, #255	; 0xff
 800cf62:	e017      	b.n	800cf94 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 800cf64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cf68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d005      	beq.n	800cf7e <aci_gatt_add_service+0x18c>
    return resp.Status;
 800cf72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cf76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	e00a      	b.n	800cf94 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800cf7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800cf82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cf86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800cf90:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd90      	pop	{r4, r7, pc}

0800cf9e <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800cf9e:	b590      	push	{r4, r7, lr}
 800cfa0:	b0d1      	sub	sp, #324	; 0x144
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	4608      	mov	r0, r1
 800cfa8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800cfac:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800cfb0:	600a      	str	r2, [r1, #0]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfb8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800cfbc:	4622      	mov	r2, r4
 800cfbe:	801a      	strh	r2, [r3, #0]
 800cfc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfc4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cfc8:	4602      	mov	r2, r0
 800cfca:	701a      	strb	r2, [r3, #0]
 800cfcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfd0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800cfd4:	460a      	mov	r2, r1
 800cfd6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800cfd8:	f107 0314 	add.w	r3, r7, #20
 800cfdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800cfe0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cfe4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d00a      	beq.n	800d004 <aci_gatt_add_char+0x66>
 800cfee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800cff2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d101      	bne.n	800d000 <aci_gatt_add_char+0x62>
 800cffc:	2313      	movs	r3, #19
 800cffe:	e002      	b.n	800d006 <aci_gatt_add_char+0x68>
 800d000:	2303      	movs	r3, #3
 800d002:	e000      	b.n	800d006 <aci_gatt_add_char+0x68>
 800d004:	2305      	movs	r3, #5
 800d006:	f107 0214 	add.w	r2, r7, #20
 800d00a:	4413      	add	r3, r2
 800d00c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d010:	f107 0310 	add.w	r3, r7, #16
 800d014:	2203      	movs	r2, #3
 800d016:	2100      	movs	r1, #0
 800d018:	4618      	mov	r0, r3
 800d01a:	f002 fc19 	bl	800f850 <memset>
  uint8_t index_input = 0;
 800d01e:	2300      	movs	r3, #0
 800d020:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 800d024:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d028:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d02c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800d030:	8812      	ldrh	r2, [r2, #0]
 800d032:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d034:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d038:	3302      	adds	r3, #2
 800d03a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800d03e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d042:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d046:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800d04a:	7812      	ldrb	r2, [r2, #0]
 800d04c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d04e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d052:	3301      	adds	r3, #1
 800d054:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800d058:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d05c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d002      	beq.n	800d06c <aci_gatt_add_char+0xce>
 800d066:	2b02      	cmp	r3, #2
 800d068:	d004      	beq.n	800d074 <aci_gatt_add_char+0xd6>
 800d06a:	e007      	b.n	800d07c <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 800d06c:	2302      	movs	r3, #2
 800d06e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d072:	e005      	b.n	800d080 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d074:	2310      	movs	r3, #16
 800d076:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800d07a:	e001      	b.n	800d080 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d07c:	2347      	movs	r3, #71	; 0x47
 800d07e:	e091      	b.n	800d1a4 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800d080:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800d084:	1cd8      	adds	r0, r3, #3
 800d086:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800d08a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d08e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800d092:	6819      	ldr	r1, [r3, #0]
 800d094:	f002 fbce 	bl	800f834 <memcpy>
    index_input += size;
 800d098:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800d09c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800d0a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d0aa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800d0ae:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800d0b2:	8812      	ldrh	r2, [r2, #0]
 800d0b4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d0b6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d0ba:	3302      	adds	r3, #2
 800d0bc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800d0c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d0c4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d0c8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d0ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800d0d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d0d8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d0dc:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d0de:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800d0e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d0ec:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800d0f0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d0f2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800d0fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d100:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800d104:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d106:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d10a:	3301      	adds	r3, #1
 800d10c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800d110:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d114:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800d118:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d11a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d11e:	3301      	adds	r3, #1
 800d120:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d124:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d128:	2218      	movs	r2, #24
 800d12a:	2100      	movs	r1, #0
 800d12c:	4618      	mov	r0, r3
 800d12e:	f002 fb8f 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d132:	233f      	movs	r3, #63	; 0x3f
 800d134:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800d138:	f44f 7382 	mov.w	r3, #260	; 0x104
 800d13c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800d140:	f107 0314 	add.w	r3, r7, #20
 800d144:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800d148:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800d14c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800d150:	f107 0310 	add.w	r3, r7, #16
 800d154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800d158:	2303      	movs	r3, #3
 800d15a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800d15e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800d162:	2100      	movs	r1, #0
 800d164:	4618      	mov	r0, r3
 800d166:	f002 f88d 	bl	800f284 <hci_send_req>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	da01      	bge.n	800d174 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d170:	23ff      	movs	r3, #255	; 0xff
 800d172:	e017      	b.n	800d1a4 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 800d174:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d182:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	e00a      	b.n	800d1a4 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800d18e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800d192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d196:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800d1a0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd90      	pop	{r4, r7, pc}

0800d1ae <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800d1ae:	b5b0      	push	{r4, r5, r7, lr}
 800d1b0:	b0cc      	sub	sp, #304	; 0x130
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1c0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d1d0:	4622      	mov	r2, r4
 800d1d2:	801a      	strh	r2, [r3, #0]
 800d1d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1d8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800d1dc:	4602      	mov	r2, r0
 800d1de:	701a      	strb	r2, [r3, #0]
 800d1e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1e4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d1e8:	460a      	mov	r2, r1
 800d1ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d1ec:	f107 030c 	add.w	r3, r7, #12
 800d1f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d1f8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800d206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d20a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d20e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d212:	8812      	ldrh	r2, [r2, #0]
 800d214:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d216:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d21a:	3302      	adds	r3, #2
 800d21c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800d220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d224:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d228:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d22c:	8812      	ldrh	r2, [r2, #0]
 800d22e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d230:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d234:	3302      	adds	r3, #2
 800d236:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800d23a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d23e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d242:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800d246:	7812      	ldrb	r2, [r2, #0]
 800d248:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d24a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d24e:	3301      	adds	r3, #1
 800d250:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800d254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d258:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d25c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d260:	7812      	ldrb	r2, [r2, #0]
 800d262:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d264:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d268:	3301      	adds	r3, #1
 800d26a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800d26e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d272:	1d98      	adds	r0, r3, #6
 800d274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d278:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800d284:	f002 fad6 	bl	800f834 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800d288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d28c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d290:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	4413      	add	r3, r2
 800d298:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d29c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d2a0:	2218      	movs	r2, #24
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f002 fad3 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d2aa:	233f      	movs	r3, #63	; 0x3f
 800d2ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800d2b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800d2b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d2b8:	f107 030c 	add.w	r3, r7, #12
 800d2bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d2c0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d2c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d2c8:	f107 030b 	add.w	r3, r7, #11
 800d2cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800d2d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d2da:	2100      	movs	r1, #0
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f001 ffd1 	bl	800f284 <hci_send_req>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	da01      	bge.n	800d2ec <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d2e8:	23ff      	movs	r3, #255	; 0xff
 800d2ea:	e00d      	b.n	800d308 <aci_gatt_update_char_value+0x15a>
  if (status) {
 800d2ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2f0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d005      	beq.n	800d306 <aci_gatt_update_char_value+0x158>
    return status;
 800d2fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d2fe:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	e000      	b.n	800d308 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 800d306:	2300      	movs	r3, #0
}
 800d308:	4618      	mov	r0, r3
 800d30a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d30e:	46bd      	mov	sp, r7
 800d310:	bdb0      	pop	{r4, r5, r7, pc}

0800d312 <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b0cc      	sub	sp, #304	; 0x130
 800d316:	af00      	add	r7, sp, #0
 800d318:	4602      	mov	r2, r0
 800d31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d31e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d322:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800d324:	f107 030c 	add.w	r3, r7, #12
 800d328:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d32c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d330:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d334:	2200      	movs	r2, #0
 800d336:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800d33e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d342:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d346:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d34a:	8812      	ldrh	r2, [r2, #0]
 800d34c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d34e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d352:	3302      	adds	r3, #2
 800d354:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d358:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d35c:	2218      	movs	r2, #24
 800d35e:	2100      	movs	r1, #0
 800d360:	4618      	mov	r0, r3
 800d362:	f002 fa75 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d366:	233f      	movs	r3, #63	; 0x3f
 800d368:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 800d36c:	f240 1327 	movw	r3, #295	; 0x127
 800d370:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d374:	f107 030c 	add.w	r3, r7, #12
 800d378:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d37c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d384:	f107 030b 	add.w	r3, r7, #11
 800d388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d38c:	2301      	movs	r3, #1
 800d38e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800d392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d396:	2100      	movs	r1, #0
 800d398:	4618      	mov	r0, r3
 800d39a:	f001 ff73 	bl	800f284 <hci_send_req>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	da01      	bge.n	800d3a8 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800d3a4:	23ff      	movs	r3, #255	; 0xff
 800d3a6:	e00d      	b.n	800d3c4 <aci_gatt_allow_read+0xb2>
  if (status) {
 800d3a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d3ac:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d005      	beq.n	800d3c2 <aci_gatt_allow_read+0xb0>
    return status;
 800d3b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d3ba:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	e000      	b.n	800d3c4 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b08e      	sub	sp, #56	; 0x38
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	60b9      	str	r1, [r7, #8]
 800d3d8:	607a      	str	r2, [r7, #4]
 800d3da:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d3dc:	f107 0310 	add.w	r3, r7, #16
 800d3e0:	220f      	movs	r2, #15
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f002 fa33 	bl	800f850 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d3ea:	f107 0320 	add.w	r3, r7, #32
 800d3ee:	2218      	movs	r2, #24
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f002 fa2c 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d3f8:	233f      	movs	r3, #63	; 0x3f
 800d3fa:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 800d400:	f107 0310 	add.w	r3, r7, #16
 800d404:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800d406:	230f      	movs	r3, #15
 800d408:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800d40a:	f107 0320 	add.w	r3, r7, #32
 800d40e:	2100      	movs	r1, #0
 800d410:	4618      	mov	r0, r3
 800d412:	f001 ff37 	bl	800f284 <hci_send_req>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	da01      	bge.n	800d420 <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 800d41c:	23ff      	movs	r3, #255	; 0xff
 800d41e:	e02c      	b.n	800d47a <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 800d420:	7c3b      	ldrb	r3, [r7, #16]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 800d426:	7c3b      	ldrb	r3, [r7, #16]
 800d428:	e027      	b.n	800d47a <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 800d42a:	7c7a      	ldrb	r2, [r7, #17]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 800d430:	7cba      	ldrb	r2, [r7, #18]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 800d436:	7cfa      	ldrb	r2, [r7, #19]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 800d43c:	7d3a      	ldrb	r2, [r7, #20]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 800d442:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800d446:	b29a      	uxth	r2, r3
 800d448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d44a:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 800d44c:	7dfa      	ldrb	r2, [r7, #23]
 800d44e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d450:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 800d452:	7e3a      	ldrb	r2, [r7, #24]
 800d454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d456:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 800d458:	7e7a      	ldrb	r2, [r7, #25]
 800d45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45c:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 800d45e:	7eba      	ldrb	r2, [r7, #26]
 800d460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d462:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 800d464:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800d468:	b29a      	uxth	r2, r3
 800d46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d46c:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 800d46e:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 800d472:	b29a      	uxth	r2, r3
 800d474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d476:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3738      	adds	r7, #56	; 0x38
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <aci_hal_write_config_data>:
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800d482:	b580      	push	{r7, lr}
 800d484:	b0cc      	sub	sp, #304	; 0x130
 800d486:	af00      	add	r7, sp, #0
 800d488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d48c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d496:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d49a:	4602      	mov	r2, r0
 800d49c:	701a      	strb	r2, [r3, #0]
 800d49e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d4a6:	460a      	mov	r2, r1
 800d4a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d4aa:	f107 030c 	add.w	r3, r7, #12
 800d4ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d4b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d4b6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800d4c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4cc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d4d0:	7812      	ldrb	r2, [r2, #0]
 800d4d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4d4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d4d8:	3301      	adds	r3, #1
 800d4da:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 800d4de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d4e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d4ea:	7812      	ldrb	r2, [r2, #0]
 800d4ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d4ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800d4f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4fc:	1c98      	adds	r0, r3, #2
 800d4fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d502:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d506:	781a      	ldrb	r2, [r3, #0]
 800d508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d50c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d510:	6819      	ldr	r1, [r3, #0]
 800d512:	f002 f98f 	bl	800f834 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800d516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d51a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d51e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	4413      	add	r3, r2
 800d526:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d52a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d52e:	2218      	movs	r2, #24
 800d530:	2100      	movs	r1, #0
 800d532:	4618      	mov	r0, r3
 800d534:	f002 f98c 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d538:	233f      	movs	r3, #63	; 0x3f
 800d53a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800d53e:	230c      	movs	r3, #12
 800d540:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d544:	f107 030c 	add.w	r3, r7, #12
 800d548:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d54c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d554:	f107 030b 	add.w	r3, r7, #11
 800d558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d55c:	2301      	movs	r3, #1
 800d55e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800d562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d566:	2100      	movs	r1, #0
 800d568:	4618      	mov	r0, r3
 800d56a:	f001 fe8b 	bl	800f284 <hci_send_req>
 800d56e:	4603      	mov	r3, r0
 800d570:	2b00      	cmp	r3, #0
 800d572:	da01      	bge.n	800d578 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d574:	23ff      	movs	r3, #255	; 0xff
 800d576:	e00d      	b.n	800d594 <aci_hal_write_config_data+0x112>
  if (status) {
 800d578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d57c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d005      	beq.n	800d592 <aci_hal_write_config_data+0x110>
    return status;
 800d586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d58a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	e000      	b.n	800d594 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}

0800d59e <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800d59e:	b580      	push	{r7, lr}
 800d5a0:	b0ee      	sub	sp, #440	; 0x1b8
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d5a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d5ac:	6019      	str	r1, [r3, #0]
 800d5ae:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d5b2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d5b6:	601a      	str	r2, [r3, #0]
 800d5b8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d5bc:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 800d5c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800d5c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800d5cc:	f107 0314 	add.w	r3, r7, #20
 800d5d0:	2280      	movs	r2, #128	; 0x80
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f002 f93b 	bl	800f850 <memset>
  uint8_t index_input = 0;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 800d5e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800d5e4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800d5e8:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 800d5ec:	7812      	ldrb	r2, [r2, #0]
 800d5ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5f0:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d5fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d5fe:	2218      	movs	r2, #24
 800d600:	2100      	movs	r1, #0
 800d602:	4618      	mov	r0, r3
 800d604:	f002 f924 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d608:	233f      	movs	r3, #63	; 0x3f
 800d60a:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 800d60e:	230d      	movs	r3, #13
 800d610:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 800d614:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800d618:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 800d61c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800d620:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 800d624:	f107 0314 	add.w	r3, r7, #20
 800d628:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 800d62c:	2380      	movs	r3, #128	; 0x80
 800d62e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 800d632:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800d636:	2100      	movs	r1, #0
 800d638:	4618      	mov	r0, r3
 800d63a:	f001 fe23 	bl	800f284 <hci_send_req>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	da01      	bge.n	800d648 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 800d644:	23ff      	movs	r3, #255	; 0xff
 800d646:	e029      	b.n	800d69c <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 800d648:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d64c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <aci_hal_read_config_data+0xc4>
    return resp.Status;
 800d656:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d65a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	e01c      	b.n	800d69c <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800d662:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d666:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800d66a:	785a      	ldrb	r2, [r3, #1]
 800d66c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d670:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800d678:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d67c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	461a      	mov	r2, r3
 800d686:	f107 0314 	add.w	r3, r7, #20
 800d68a:	1c99      	adds	r1, r3, #2
 800d68c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800d690:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	f002 f8cd 	bl	800f834 <memcpy>
  return BLE_STATUS_SUCCESS;
 800d69a:	2300      	movs	r3, #0
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b0cc      	sub	sp, #304	; 0x130
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800d6b6:	701a      	strb	r2, [r3, #0]
 800d6b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6bc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d6c0:	460a      	mov	r2, r1
 800d6c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d6c4:	f107 030c 	add.w	r3, r7, #12
 800d6c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d6cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d6d0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800d6de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d6e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800d6ea:	7812      	ldrb	r2, [r2, #0]
 800d6ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d6ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 800d6f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d700:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d704:	7812      	ldrb	r2, [r2, #0]
 800d706:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d708:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d70c:	3301      	adds	r3, #1
 800d70e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d716:	2218      	movs	r2, #24
 800d718:	2100      	movs	r1, #0
 800d71a:	4618      	mov	r0, r3
 800d71c:	f002 f898 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d720:	233f      	movs	r3, #63	; 0x3f
 800d722:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800d726:	230f      	movs	r3, #15
 800d728:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d72c:	f107 030c 	add.w	r3, r7, #12
 800d730:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d734:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d738:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d73c:	f107 030b 	add.w	r3, r7, #11
 800d740:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d744:	2301      	movs	r3, #1
 800d746:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800d74a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d74e:	2100      	movs	r1, #0
 800d750:	4618      	mov	r0, r3
 800d752:	f001 fd97 	bl	800f284 <hci_send_req>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	da01      	bge.n	800d760 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d75c:	23ff      	movs	r3, #255	; 0xff
 800d75e:	e00d      	b.n	800d77c <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 800d760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d764:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d005      	beq.n	800d77a <aci_hal_set_tx_power_level+0xd4>
    return status;
 800d76e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d772:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	e000      	b.n	800d77c <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Conn_Interval_Min,
                                                     uint16_t Conn_Interval_Max,
                                                     uint16_t Slave_latency,
                                                     uint16_t Timeout_Multiplier)
{
 800d786:	b5b0      	push	{r4, r5, r7, lr}
 800d788:	b0cc      	sub	sp, #304	; 0x130
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	4605      	mov	r5, r0
 800d78e:	460c      	mov	r4, r1
 800d790:	4610      	mov	r0, r2
 800d792:	4619      	mov	r1, r3
 800d794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d798:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800d79c:	462a      	mov	r2, r5
 800d79e:	801a      	strh	r2, [r3, #0]
 800d7a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	801a      	strh	r2, [r3, #0]
 800d7ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7b0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	801a      	strh	r2, [r3, #0]
 800d7b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800d7c0:	460a      	mov	r2, r1
 800d7c2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800d7c4:	f107 030c 	add.w	r3, r7, #12
 800d7c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d7cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d7d0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800d7de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d7e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d7e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800d7ea:	8812      	ldrh	r2, [r2, #0]
 800d7ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d7ee:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d7f2:	3302      	adds	r3, #2
 800d7f4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800d7f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d7fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d800:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800d804:	8812      	ldrh	r2, [r2, #0]
 800d806:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d808:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d80c:	3302      	adds	r3, #2
 800d80e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800d812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d816:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d81a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800d81e:	8812      	ldrh	r2, [r2, #0]
 800d820:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800d822:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d826:	3302      	adds	r3, #2
 800d828:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Slave_latency = htob(Slave_latency, 2);
 800d82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d830:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800d834:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800d838:	8812      	ldrh	r2, [r2, #0]
 800d83a:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800d83c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d840:	3302      	adds	r3, #2
 800d842:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800d846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d84a:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800d84e:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800d850:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d854:	3302      	adds	r3, #2
 800d856:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800d85a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d85e:	2218      	movs	r2, #24
 800d860:	2100      	movs	r1, #0
 800d862:	4618      	mov	r0, r3
 800d864:	f001 fff4 	bl	800f850 <memset>
  rq.ogf = 0x3f;
 800d868:	233f      	movs	r3, #63	; 0x3f
 800d86a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800d86e:	f240 1381 	movw	r3, #385	; 0x181
 800d872:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800d876:	230f      	movs	r3, #15
 800d878:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800d87c:	f107 030c 	add.w	r3, r7, #12
 800d880:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d884:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800d888:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d88c:	f107 030b 	add.w	r3, r7, #11
 800d890:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d894:	2301      	movs	r3, #1
 800d896:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800d89a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d89e:	2100      	movs	r1, #0
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f001 fcef 	bl	800f284 <hci_send_req>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	da01      	bge.n	800d8b0 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800d8ac:	23ff      	movs	r3, #255	; 0xff
 800d8ae:	e00d      	b.n	800d8cc <aci_l2cap_connection_parameter_update_req+0x146>
  if (status) {
 800d8b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8b4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d005      	beq.n	800d8ca <aci_l2cap_connection_parameter_update_req+0x144>
    return status;
 800d8be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800d8c2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	e000      	b.n	800d8cc <aci_l2cap_connection_parameter_update_req+0x146>
  }
  return BLE_STATUS_SUCCESS;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bdb0      	pop	{r4, r5, r7, pc}

0800d8d6 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b084      	sub	sp, #16
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	7818      	ldrb	r0, [r3, #0]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d8f0:	b299      	uxth	r1, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	78db      	ldrb	r3, [r3, #3]
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	f7f8 fe5c 	bl	80065b4 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b084      	sub	sp, #16
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d90e:	2300      	movs	r3, #0
 800d910:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	7818      	ldrb	r0, [r3, #0]
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d920:	b299      	uxth	r1, r3
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	78db      	ldrb	r3, [r3, #3]
 800d926:	461a      	mov	r2, r3
 800d928:	f000 ffca 	bl	800e8c0 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800d936:	b590      	push	{r4, r7, lr}
 800d938:	b087      	sub	sp, #28
 800d93a:	af02      	add	r7, sp, #8
 800d93c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	7818      	ldrb	r0, [r3, #0]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d950:	b299      	uxth	r1, r3
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	78da      	ldrb	r2, [r3, #3]
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	889b      	ldrh	r3, [r3, #4]
 800d95a:	b29c      	uxth	r4, r3
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	88db      	ldrh	r3, [r3, #6]
 800d960:	b29b      	uxth	r3, r3
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	4623      	mov	r3, r4
 800d966:	f000 ffba 	bl	800e8de <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3714      	adds	r7, #20
 800d970:	46bd      	mov	sp, r7
 800d972:	bd90      	pop	{r4, r7, pc}

0800d974 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	4618      	mov	r0, r3
 800d98a:	f000 ffbc 	bl	800e906 <hci_hardware_error_event>

  return status;
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b0a6      	sub	sp, #152	; 0x98
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d9b8:	e02e      	b.n	800da18 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800d9ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d9be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	3398      	adds	r3, #152	; 0x98
 800d9d4:	443b      	add	r3, r7
 800d9d6:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800d9da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d9de:	3302      	adds	r3, #2
 800d9e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800d9e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d9e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	3398      	adds	r3, #152	; 0x98
 800d9fe:	443b      	add	r3, r7
 800da00:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800da04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800da08:	3302      	adds	r3, #2
 800da0a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800da0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da12:	3301      	adds	r3, #1
 800da14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	461a      	mov	r2, r3
 800da20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da24:	4293      	cmp	r3, r2
 800da26:	dbc8      	blt.n	800d9ba <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800da28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	f107 0208 	add.w	r2, r7, #8
 800da32:	4611      	mov	r1, r2
 800da34:	4618      	mov	r0, r3
 800da36:	f000 ff71 	bl	800e91c <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 800da3a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3798      	adds	r7, #152	; 0x98
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}

0800da46 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b084      	sub	sp, #16
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800da4e:	2300      	movs	r3, #0
 800da50:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 ff6a 	bl	800e934 <hci_data_buffer_overflow_event>

  return status;
 800da60:	7bfb      	ldrb	r3, [r7, #15]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800da72:	2300      	movs	r3, #0
 800da74:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	781a      	ldrb	r2, [r3, #0]
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800da84:	b29b      	uxth	r3, r3
 800da86:	4619      	mov	r1, r3
 800da88:	4610      	mov	r0, r2
 800da8a:	f000 ff5e 	bl	800e94a <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da90:	4618      	mov	r0, r3
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	4618      	mov	r0, r3
 800daae:	f001 f9b8 	bl	800ee22 <aci_blue_initialized_event>

  return status;
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	4618      	mov	r0, r3
 800dad0:	f001 f9b2 	bl	800ee38 <aci_blue_events_lost_event>

  return status;
 800dad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800dade:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dae2:	b08d      	sub	sp, #52	; 0x34
 800dae4:	af08      	add	r7, sp, #32
 800dae6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dae8:	2300      	movs	r3, #0
 800daea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	f893 c000 	ldrb.w	ip, [r3]
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	f8d3 9009 	ldr.w	r9, [r3, #9]
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800db0e:	603b      	str	r3, [r7, #0]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800db16:	68b9      	ldr	r1, [r7, #8]
 800db18:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800db1c:	68b8      	ldr	r0, [r7, #8]
 800db1e:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800db22:	68bc      	ldr	r4, [r7, #8]
 800db24:	f8d4 401d 	ldr.w	r4, [r4, #29]
 800db28:	68bd      	ldr	r5, [r7, #8]
 800db2a:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 800db2e:	68be      	ldr	r6, [r7, #8]
 800db30:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 800db38:	9307      	str	r3, [sp, #28]
 800db3a:	9606      	str	r6, [sp, #24]
 800db3c:	9505      	str	r5, [sp, #20]
 800db3e:	9404      	str	r4, [sp, #16]
 800db40:	9003      	str	r0, [sp, #12]
 800db42:	9102      	str	r1, [sp, #8]
 800db44:	9201      	str	r2, [sp, #4]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	464b      	mov	r3, r9
 800db4c:	4642      	mov	r2, r8
 800db4e:	4671      	mov	r1, lr
 800db50:	4660      	mov	r0, ip
 800db52:	f001 f97b 	bl	800ee4c <aci_blue_crash_info_event>

  return status;
 800db56:	7bfb      	ldrb	r3, [r7, #15]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3714      	adds	r7, #20
 800db5c:	46bd      	mov	sp, r7
 800db5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800db62 <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b084      	sub	sp, #16
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	7818      	ldrb	r0, [r3, #0]
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	7859      	ldrb	r1, [r3, #1]
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800db80:	461a      	mov	r2, r3
 800db82:	f001 f971 	bl	800ee68 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 800db86:	7bfb      	ldrb	r3, [r7, #15]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800db98:	2300      	movs	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f993 0000 	ldrsb.w	r0, [r3]
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800dbae:	461a      	mov	r2, r3
 800dbb0:	f001 f968 	bl	800ee84 <aci_hal_scan_req_report_event>

  return status;
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800dbbe:	b580      	push	{r7, lr}
 800dbc0:	b084      	sub	sp, #16
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	7818      	ldrb	r0, [r3, #0]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f001 f960 	bl	800eea0 <aci_hal_fw_error_event>

  return status;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800dbf6:	f000 ff3e 	bl	800ea76 <aci_gap_limited_discoverable_event>

  return status;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	b298      	uxth	r0, r3
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	7899      	ldrb	r1, [r3, #2]
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	78db      	ldrb	r3, [r3, #3]
 800dc22:	461a      	mov	r2, r3
 800dc24:	f7f8 fd34 	bl	8006690 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800dc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7f8 fd0b 	bl	8006664 <aci_gap_pass_key_req_event>

  return status;
 800dc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	881b      	ldrh	r3, [r3, #0]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 ff08 	bl	800ea84 <aci_gap_authorization_req_event>

  return status;
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dc86:	2300      	movs	r3, #0
 800dc88:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 800dc8a:	f000 ff06 	bl	800ea9a <aci_gap_slave_security_initiated_event>

  return status;
 800dc8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800dca4:	f000 ff00 	bl	800eaa8 <aci_gap_bond_lost_event>

  return status;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	7818      	ldrb	r0, [r3, #0]
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	7859      	ldrb	r1, [r3, #1]
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800dcd2:	f000 fef0 	bl	800eab6 <aci_gap_proc_complete_event>

  return status;
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3710      	adds	r7, #16
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dce8:	2300      	movs	r3, #0
 800dcea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	881b      	ldrh	r3, [r3, #0]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 feed 	bl	800ead6 <aci_gap_addr_not_resolved_event>

  return status;
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b084      	sub	sp, #16
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800dd22:	4619      	mov	r1, r3
 800dd24:	4610      	mov	r0, r2
 800dd26:	f000 fee1 	bl	800eaec <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	789b      	ldrb	r3, [r3, #2]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4610      	mov	r0, r2
 800dd52:	f000 fed7 	bl	800eb04 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	885b      	ldrh	r3, [r3, #2]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f001 f80b 	bl	800ed9a <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800dd84:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800dd8e:	b580      	push	{r7, lr}
 800dd90:	b084      	sub	sp, #16
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dd96:	2300      	movs	r3, #0
 800dd98:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	b298      	uxth	r0, r3
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800ddac:	461a      	mov	r2, r3
 800ddae:	f001 f802 	bl	800edb6 <aci_l2cap_proc_timeout_event>

  return status;
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3710      	adds	r7, #16
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800ddbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddbe:	b089      	sub	sp, #36	; 0x24
 800ddc0:	af04      	add	r7, sp, #16
 800ddc2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	b298      	uxth	r0, r3
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	789c      	ldrb	r4, [r3, #2]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dddc:	b29d      	uxth	r5, r3
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800dde4:	b29e      	uxth	r6, r3
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	68ba      	ldr	r2, [r7, #8]
 800ddf0:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800ddf4:	b292      	uxth	r2, r2
 800ddf6:	68b9      	ldr	r1, [r7, #8]
 800ddf8:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800ddfc:	b289      	uxth	r1, r1
 800ddfe:	9102      	str	r1, [sp, #8]
 800de00:	9201      	str	r2, [sp, #4]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	4633      	mov	r3, r6
 800de06:	462a      	mov	r2, r5
 800de08:	4621      	mov	r1, r4
 800de0a:	f000 ffe2 	bl	800edd2 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de18 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800de18:	b590      	push	{r4, r7, lr}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800de20:	2300      	movs	r3, #0
 800de22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	b298      	uxth	r0, r3
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	7899      	ldrb	r1, [r3, #2]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800de38:	b29a      	uxth	r2, r3
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	4623      	mov	r3, r4
 800de46:	f000 ffd8 	bl	800edfa <aci_l2cap_command_reject_event>

  return status;
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3714      	adds	r7, #20
 800de50:	46bd      	mov	sp, r7
 800de52:	bd90      	pop	{r4, r7, pc}

0800de54 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800de54:	b590      	push	{r4, r7, lr}
 800de56:	b087      	sub	sp, #28
 800de58:	af02      	add	r7, sp, #8
 800de5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800de5c:	2300      	movs	r3, #0
 800de5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	881b      	ldrh	r3, [r3, #0]
 800de68:	b298      	uxth	r0, r3
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	885b      	ldrh	r3, [r3, #2]
 800de6e:	b299      	uxth	r1, r3
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	889b      	ldrh	r3, [r3, #4]
 800de74:	b29a      	uxth	r2, r3
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	88db      	ldrh	r3, [r3, #6]
 800de7a:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	4623      	mov	r3, r4
 800de84:	f7f8 fbd1 	bl	800662a <aci_gatt_attribute_modified_event>

  return status;
 800de88:	7bfb      	ldrb	r3, [r7, #15]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd90      	pop	{r4, r7, pc}

0800de92 <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b084      	sub	sp, #16
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800de9a:	2300      	movs	r3, #0
 800de9c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	881b      	ldrh	r3, [r3, #0]
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	4618      	mov	r0, r3
 800deaa:	f000 fe39 	bl	800eb20 <aci_gatt_proc_timeout_event>

  return status;
 800deae:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dec0:	2300      	movs	r3, #0
 800dec2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	b29a      	uxth	r2, r3
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	885b      	ldrh	r3, [r3, #2]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	4619      	mov	r1, r3
 800ded6:	4610      	mov	r0, r2
 800ded8:	f000 fe2d 	bl	800eb36 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b084      	sub	sp, #16
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800deee:	2300      	movs	r3, #0
 800def0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	b298      	uxth	r0, r3
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	7899      	ldrb	r1, [r3, #2]
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800df08:	f000 fe23 	bl	800eb52 <aci_att_find_info_resp_event>

  return status;
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b0a6      	sub	sp, #152	; 0x98
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800df1e:	2300      	movs	r3, #0
 800df20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800df2a:	2303      	movs	r3, #3
 800df2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800df30:	2300      	movs	r3, #0
 800df32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df36:	e02e      	b.n	800df96 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800df38:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800df3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	3398      	adds	r3, #152	; 0x98
 800df52:	443b      	add	r3, r7
 800df54:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800df58:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800df5c:	3302      	adds	r3, #2
 800df5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800df62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800df66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800df72:	b29a      	uxth	r2, r3
 800df74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df78:	009b      	lsls	r3, r3, #2
 800df7a:	3398      	adds	r3, #152	; 0x98
 800df7c:	443b      	add	r3, r7
 800df7e:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800df82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800df86:	3302      	adds	r3, #2
 800df88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800df8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df90:	3301      	adds	r3, #1
 800df92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800df96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df9a:	789b      	ldrb	r3, [r3, #2]
 800df9c:	461a      	mov	r2, r3
 800df9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfa2:	4293      	cmp	r3, r2
 800dfa4:	dbc8      	blt.n	800df38 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800dfa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dfaa:	881b      	ldrh	r3, [r3, #0]
 800dfac:	b298      	uxth	r0, r3
 800dfae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dfb2:	789b      	ldrb	r3, [r3, #2]
 800dfb4:	f107 0208 	add.w	r2, r7, #8
 800dfb8:	4619      	mov	r1, r3
 800dfba:	f000 fdda 	bl	800eb72 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800dfbe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3798      	adds	r7, #152	; 0x98
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b084      	sub	sp, #16
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b298      	uxth	r0, r3
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	7899      	ldrb	r1, [r3, #2]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800dfec:	f000 fdcf 	bl	800eb8e <aci_att_read_by_type_resp_event>

  return status;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b084      	sub	sp, #16
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e002:	2300      	movs	r3, #0
 800e004:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	b298      	uxth	r0, r3
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800e018:	461a      	mov	r2, r3
 800e01a:	f000 fdc8 	bl	800ebae <aci_att_read_resp_event>

  return status;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e030:	2300      	movs	r3, #0
 800e032:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	b298      	uxth	r0, r3
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800e046:	461a      	mov	r2, r3
 800e048:	f000 fdbf 	bl	800ebca <aci_att_read_blob_resp_event>

  return status;
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b084      	sub	sp, #16
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e05e:	2300      	movs	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	b298      	uxth	r0, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800e074:	461a      	mov	r2, r3
 800e076:	f000 fdb6 	bl	800ebe6 <aci_att_read_multiple_resp_event>

  return status;
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	b298      	uxth	r0, r3
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	7899      	ldrb	r1, [r3, #2]
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800e0a6:	f000 fdac 	bl	800ec02 <aci_att_read_by_group_type_resp_event>

  return status;
 800e0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800e0b4:	b590      	push	{r4, r7, lr}
 800e0b6:	b087      	sub	sp, #28
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	b298      	uxth	r0, r3
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	885b      	ldrh	r3, [r3, #2]
 800e0ce:	b299      	uxth	r1, r3
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	889b      	ldrh	r3, [r3, #4]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	f000 fd9e 	bl	800ec22 <aci_att_prepare_write_resp_event>

  return status;
 800e0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3714      	adds	r7, #20
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd90      	pop	{r4, r7, pc}

0800e0f0 <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b084      	sub	sp, #16
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	881b      	ldrh	r3, [r3, #0]
 800e104:	b29b      	uxth	r3, r3
 800e106:	4618      	mov	r0, r3
 800e108:	f000 fd9f 	bl	800ec4a <aci_att_exec_write_resp_event>

  return status;
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b084      	sub	sp, #16
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e11e:	2300      	movs	r3, #0
 800e120:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	881b      	ldrh	r3, [r3, #0]
 800e12a:	b298      	uxth	r0, r3
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	885b      	ldrh	r3, [r3, #2]
 800e130:	b299      	uxth	r1, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800e13a:	f000 fd91 	bl	800ec60 <aci_gatt_indication_event>

  return status;
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e150:	2300      	movs	r3, #0
 800e152:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	881b      	ldrh	r3, [r3, #0]
 800e15c:	b298      	uxth	r0, r3
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	885b      	ldrh	r3, [r3, #2]
 800e162:	b299      	uxth	r1, r3
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800e16c:	f000 fd88 	bl	800ec80 <aci_gatt_notification_event>

  return status;
 800e170:	7bfb      	ldrb	r3, [r7, #15]
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e182:	2300      	movs	r3, #0
 800e184:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	b29a      	uxth	r2, r3
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	789b      	ldrb	r3, [r3, #2]
 800e194:	4619      	mov	r1, r3
 800e196:	4610      	mov	r0, r2
 800e198:	f000 fd82 	bl	800eca0 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800e19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	b298      	uxth	r0, r3
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	7899      	ldrb	r1, [r3, #2]
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e1c6:	b29a      	uxth	r2, r3
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	795b      	ldrb	r3, [r3, #5]
 800e1cc:	f000 fd76 	bl	800ecbc <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800e1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	881b      	ldrh	r3, [r3, #0]
 800e1ee:	b298      	uxth	r0, r3
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	885b      	ldrh	r3, [r3, #2]
 800e1f4:	b299      	uxth	r1, r3
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800e1fe:	f000 fd71 	bl	800ece4 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800e202:	7bfb      	ldrb	r3, [r7, #15]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e214:	2300      	movs	r3, #0
 800e216:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	b298      	uxth	r0, r3
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	885b      	ldrh	r3, [r3, #2]
 800e226:	b299      	uxth	r1, r3
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800e230:	f000 fd68 	bl	800ed04 <aci_gatt_write_permit_req_event>

  return status;
 800e234:	7bfb      	ldrb	r3, [r7, #15]
}
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b084      	sub	sp, #16
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e246:	2300      	movs	r3, #0
 800e248:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	b298      	uxth	r0, r3
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	885b      	ldrh	r3, [r3, #2]
 800e258:	b299      	uxth	r1, r3
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	889b      	ldrh	r3, [r3, #4]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	461a      	mov	r2, r3
 800e262:	f7f8 f9d1 	bl	8006608 <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800e266:	7bfb      	ldrb	r3, [r7, #15]
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b0a6      	sub	sp, #152	; 0x98
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e278:	2300      	movs	r3, #0
 800e27a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800e284:	2303      	movs	r3, #3
 800e286:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800e28a:	2300      	movs	r3, #0
 800e28c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e290:	e019      	b.n	800e2c6 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800e292:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e296:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e29a:	005b      	lsls	r3, r3, #1
 800e29c:	4413      	add	r3, r2
 800e29e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	3398      	adds	r3, #152	; 0x98
 800e2ac:	443b      	add	r3, r7
 800e2ae:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800e2b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e2b6:	3302      	adds	r3, #2
 800e2b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800e2bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e2c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2ca:	789b      	ldrb	r3, [r3, #2]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	dbdd      	blt.n	800e292 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800e2d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	b298      	uxth	r0, r3
 800e2de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e2e2:	789b      	ldrb	r3, [r3, #2]
 800e2e4:	f107 0208 	add.w	r2, r7, #8
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	f000 fd1b 	bl	800ed24 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800e2ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3798      	adds	r7, #152	; 0x98
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}

0800e2fa <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800e2fa:	b580      	push	{r7, lr}
 800e2fc:	b084      	sub	sp, #16
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e302:	2300      	movs	r3, #0
 800e304:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	b29a      	uxth	r2, r3
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	885b      	ldrh	r3, [r3, #2]
 800e314:	b29b      	uxth	r3, r3
 800e316:	4619      	mov	r1, r3
 800e318:	4610      	mov	r0, r2
 800e31a:	f000 fd11 	bl	800ed40 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 fd0c 	bl	800ed5c <aci_gatt_server_confirmation_event>

  return status;
 800e344:	7bfb      	ldrb	r3, [r7, #15]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800e34e:	b590      	push	{r4, r7, lr}
 800e350:	b087      	sub	sp, #28
 800e352:	af02      	add	r7, sp, #8
 800e354:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e356:	2300      	movs	r3, #0
 800e358:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	b298      	uxth	r0, r3
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	885b      	ldrh	r3, [r3, #2]
 800e368:	b299      	uxth	r1, r3
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	889b      	ldrh	r3, [r3, #4]
 800e36e:	b29a      	uxth	r2, r3
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	4623      	mov	r3, r4
 800e37c:	f000 fcf9 	bl	800ed72 <aci_gatt_prepare_write_permit_req_event>

  return status;
 800e380:	7bfb      	ldrb	r3, [r7, #15]
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	bd90      	pop	{r4, r7, pc}

0800e38a <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800e38a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e38c:	b08b      	sub	sp, #44	; 0x2c
 800e38e:	af06      	add	r7, sp, #24
 800e390:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e392:	2300      	movs	r3, #0
 800e394:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	781d      	ldrb	r5, [r3, #0]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e3a4:	b29e      	uxth	r6, r3
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	f893 c003 	ldrb.w	ip, [r3, #3]
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800e3bc:	b292      	uxth	r2, r2
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800e3c4:	b289      	uxth	r1, r1
 800e3c6:	68b8      	ldr	r0, [r7, #8]
 800e3c8:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800e3cc:	b280      	uxth	r0, r0
 800e3ce:	68bc      	ldr	r4, [r7, #8]
 800e3d0:	7c64      	ldrb	r4, [r4, #17]
 800e3d2:	9404      	str	r4, [sp, #16]
 800e3d4:	9003      	str	r0, [sp, #12]
 800e3d6:	9102      	str	r1, [sp, #8]
 800e3d8:	9201      	str	r2, [sp, #4]
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	4673      	mov	r3, lr
 800e3de:	4662      	mov	r2, ip
 800e3e0:	4631      	mov	r1, r6
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	f7f8 f8bc 	bl	8006560 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800e3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e3f2 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800e3f2:	b580      	push	{r7, lr}
 800e3f4:	b0a4      	sub	sp, #144	; 0x90
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800e406:	2301      	movs	r3, #1
 800e408:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800e40c:	2300      	movs	r3, #0
 800e40e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e412:	e0b3      	b.n	800e57c <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800e414:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e418:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e41c:	4613      	mov	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	4413      	add	r3, r2
 800e426:	440b      	add	r3, r1
 800e428:	3301      	adds	r3, #1
 800e42a:	7819      	ldrb	r1, [r3, #0]
 800e42c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e430:	4613      	mov	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	3390      	adds	r3, #144	; 0x90
 800e43a:	443b      	add	r3, r7
 800e43c:	3b88      	subs	r3, #136	; 0x88
 800e43e:	460a      	mov	r2, r1
 800e440:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e442:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e446:	3301      	adds	r3, #1
 800e448:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800e44c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e450:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e454:	4613      	mov	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	4413      	add	r3, r2
 800e45a:	005b      	lsls	r3, r3, #1
 800e45c:	4413      	add	r3, r2
 800e45e:	440b      	add	r3, r1
 800e460:	3302      	adds	r3, #2
 800e462:	7819      	ldrb	r1, [r3, #0]
 800e464:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e468:	4613      	mov	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	3390      	adds	r3, #144	; 0x90
 800e472:	443b      	add	r3, r7
 800e474:	3b87      	subs	r3, #135	; 0x87
 800e476:	460a      	mov	r2, r1
 800e478:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e47a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e47e:	3301      	adds	r3, #1
 800e480:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800e484:	f107 0108 	add.w	r1, r7, #8
 800e488:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	1c98      	adds	r0, r3, #2
 800e498:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e49c:	4613      	mov	r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	4413      	add	r3, r2
 800e4a2:	005b      	lsls	r3, r3, #1
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e4aa:	4413      	add	r3, r2
 800e4ac:	3303      	adds	r3, #3
 800e4ae:	2206      	movs	r2, #6
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	f001 f9bf 	bl	800f834 <memcpy>
    size += 6;
 800e4b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e4ba:	3306      	adds	r3, #6
 800e4bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800e4c0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e4c4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	4413      	add	r3, r2
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	4413      	add	r3, r2
 800e4d2:	440b      	add	r3, r1
 800e4d4:	3309      	adds	r3, #9
 800e4d6:	7819      	ldrb	r1, [r3, #0]
 800e4d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4dc:	4613      	mov	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	3390      	adds	r3, #144	; 0x90
 800e4e6:	443b      	add	r3, r7
 800e4e8:	3b80      	subs	r3, #128	; 0x80
 800e4ea:	460a      	mov	r2, r1
 800e4ec:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e4ee:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800e4f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	4413      	add	r3, r2
 800e506:	3308      	adds	r3, #8
 800e508:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e50c:	4413      	add	r3, r2
 800e50e:	1c99      	adds	r1, r3, #2
 800e510:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e514:	4613      	mov	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	3390      	adds	r3, #144	; 0x90
 800e51e:	443b      	add	r3, r7
 800e520:	3b7c      	subs	r3, #124	; 0x7c
 800e522:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800e524:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e528:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e52c:	4613      	mov	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	4413      	add	r3, r2
 800e536:	440b      	add	r3, r1
 800e538:	3309      	adds	r3, #9
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e540:	4413      	add	r3, r2
 800e542:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800e546:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	4413      	add	r3, r2
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	b259      	sxtb	r1, r3
 800e552:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	3390      	adds	r3, #144	; 0x90
 800e560:	443b      	add	r3, r7
 800e562:	3b78      	subs	r3, #120	; 0x78
 800e564:	460a      	mov	r2, r1
 800e566:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e568:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e56c:	3301      	adds	r3, #1
 800e56e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800e572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e576:	3301      	adds	r3, #1
 800e578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e57c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	461a      	mov	r2, r3
 800e584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e588:	4293      	cmp	r3, r2
 800e58a:	f6ff af43 	blt.w	800e414 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800e58e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f107 0208 	add.w	r2, r7, #8
 800e598:	4611      	mov	r1, r2
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 f9e3 	bl	800e966 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800e5a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3790      	adds	r7, #144	; 0x90
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800e5ac:	b590      	push	{r4, r7, lr}
 800e5ae:	b087      	sub	sp, #28
 800e5b0:	af02      	add	r7, sp, #8
 800e5b2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	7818      	ldrb	r0, [r3, #0]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e5c6:	b299      	uxth	r1, r3
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e5d6:	b29c      	uxth	r4, r3
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	4623      	mov	r3, r4
 800e5e4:	f000 f9cb 	bl	800e97e <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3714      	adds	r7, #20
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd90      	pop	{r4, r7, pc}

0800e5f2 <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b084      	sub	sp, #16
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	7818      	ldrb	r0, [r3, #0]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e60c:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800e612:	461a      	mov	r2, r3
 800e614:	f000 f9c7 	bl	800e9a6 <hci_le_read_remote_used_features_complete_event>

  return status;
 800e618:	7bfb      	ldrb	r3, [r7, #15]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	3710      	adds	r7, #16
 800e61e:	46bd      	mov	sp, r7
 800e620:	bd80      	pop	{r7, pc}

0800e622 <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800e622:	b580      	push	{r7, lr}
 800e624:	b084      	sub	sp, #16
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e62a:	2300      	movs	r3, #0
 800e62c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	895b      	ldrh	r3, [r3, #10]
 800e640:	b29b      	uxth	r3, r3
 800e642:	461a      	mov	r2, r3
 800e644:	f000 f9bd 	bl	800e9c2 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800e648:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800e652:	b590      	push	{r4, r7, lr}
 800e654:	b087      	sub	sp, #28
 800e656:	af02      	add	r7, sp, #8
 800e658:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e65a:	2300      	movs	r3, #0
 800e65c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	881b      	ldrh	r3, [r3, #0]
 800e666:	b298      	uxth	r0, r3
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	885b      	ldrh	r3, [r3, #2]
 800e66c:	b299      	uxth	r1, r3
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	889b      	ldrh	r3, [r3, #4]
 800e672:	b29a      	uxth	r2, r3
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	88db      	ldrh	r3, [r3, #6]
 800e678:	b29c      	uxth	r4, r3
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	891b      	ldrh	r3, [r3, #8]
 800e67e:	b29b      	uxth	r3, r3
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	4623      	mov	r3, r4
 800e684:	f000 f9ab 	bl	800e9de <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800e688:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3714      	adds	r7, #20
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd90      	pop	{r4, r7, pc}

0800e692 <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b084      	sub	sp, #16
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4610      	mov	r0, r2
 800e6ae:	f000 f9aa 	bl	800ea06 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800e6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4610      	mov	r0, r2
 800e6d8:	f000 f9a1 	bl	800ea1e <hci_le_generate_dhkey_complete_event>

  return status;
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800e6e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6ea:	b08d      	sub	sp, #52	; 0x34
 800e6ec:	af08      	add	r7, sp, #32
 800e6ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	f893 c000 	ldrb.w	ip, [r3]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e704:	fa1f fe83 	uxth.w	lr, r3
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	f893 8003 	ldrb.w	r8, [r3, #3]
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800e71c:	68b9      	ldr	r1, [r7, #8]
 800e71e:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800e720:	68b8      	ldr	r0, [r7, #8]
 800e722:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800e726:	b280      	uxth	r0, r0
 800e728:	68bc      	ldr	r4, [r7, #8]
 800e72a:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800e72e:	b2a4      	uxth	r4, r4
 800e730:	68bd      	ldr	r5, [r7, #8]
 800e732:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800e736:	b2ad      	uxth	r5, r5
 800e738:	68be      	ldr	r6, [r7, #8]
 800e73a:	7f76      	ldrb	r6, [r6, #29]
 800e73c:	9606      	str	r6, [sp, #24]
 800e73e:	9505      	str	r5, [sp, #20]
 800e740:	9404      	str	r4, [sp, #16]
 800e742:	9003      	str	r0, [sp, #12]
 800e744:	9102      	str	r1, [sp, #8]
 800e746:	9201      	str	r2, [sp, #4]
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	464b      	mov	r3, r9
 800e74c:	4642      	mov	r2, r8
 800e74e:	4671      	mov	r1, lr
 800e750:	4660      	mov	r0, ip
 800e752:	f000 f970 	bl	800ea36 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800e756:	7bfb      	ldrb	r3, [r7, #15]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e762 <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b0a6      	sub	sp, #152	; 0x98
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800e76a:	2300      	movs	r3, #0
 800e76c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800e776:	2301      	movs	r3, #1
 800e778:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800e77c:	2300      	movs	r3, #0
 800e77e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e782:	e085      	b.n	800e890 <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800e784:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	4413      	add	r3, r2
 800e790:	3301      	adds	r3, #1
 800e792:	781a      	ldrb	r2, [r3, #0]
 800e794:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e798:	011b      	lsls	r3, r3, #4
 800e79a:	3398      	adds	r3, #152	; 0x98
 800e79c:	443b      	add	r3, r7
 800e79e:	3b90      	subs	r3, #144	; 0x90
 800e7a0:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e7a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800e7ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7b4:	011b      	lsls	r3, r3, #4
 800e7b6:	4413      	add	r3, r2
 800e7b8:	3302      	adds	r3, #2
 800e7ba:	781a      	ldrb	r2, [r3, #0]
 800e7bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7c0:	011b      	lsls	r3, r3, #4
 800e7c2:	3398      	adds	r3, #152	; 0x98
 800e7c4:	443b      	add	r3, r7
 800e7c6:	3b8f      	subs	r3, #143	; 0x8f
 800e7c8:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e7ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800e7d4:	f107 0208 	add.w	r2, r7, #8
 800e7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7dc:	011b      	lsls	r3, r3, #4
 800e7de:	4413      	add	r3, r2
 800e7e0:	1c98      	adds	r0, r3, #2
 800e7e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e7ec:	4413      	add	r3, r2
 800e7ee:	3303      	adds	r3, #3
 800e7f0:	2206      	movs	r2, #6
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	f001 f81e 	bl	800f834 <memcpy>
    size += 6;
 800e7f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e7fc:	3306      	adds	r3, #6
 800e7fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800e802:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e806:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e80a:	011b      	lsls	r3, r3, #4
 800e80c:	4413      	add	r3, r2
 800e80e:	3309      	adds	r3, #9
 800e810:	781a      	ldrb	r2, [r3, #0]
 800e812:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	3398      	adds	r3, #152	; 0x98
 800e81a:	443b      	add	r3, r7
 800e81c:	3b88      	subs	r3, #136	; 0x88
 800e81e:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e820:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e824:	3301      	adds	r3, #1
 800e826:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800e82a:	f107 0208 	add.w	r2, r7, #8
 800e82e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e832:	011b      	lsls	r3, r3, #4
 800e834:	3308      	adds	r3, #8
 800e836:	4413      	add	r3, r2
 800e838:	1c58      	adds	r0, r3, #1
 800e83a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e83e:	011b      	lsls	r3, r3, #4
 800e840:	3308      	adds	r3, #8
 800e842:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e846:	4413      	add	r3, r2
 800e848:	3302      	adds	r3, #2
 800e84a:	2206      	movs	r2, #6
 800e84c:	4619      	mov	r1, r3
 800e84e:	f000 fff1 	bl	800f834 <memcpy>
    size += 6;
 800e852:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e856:	3306      	adds	r3, #6
 800e858:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800e85c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e864:	011b      	lsls	r3, r3, #4
 800e866:	4413      	add	r3, r2
 800e868:	3310      	adds	r3, #16
 800e86a:	f993 2000 	ldrsb.w	r2, [r3]
 800e86e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e872:	011b      	lsls	r3, r3, #4
 800e874:	3398      	adds	r3, #152	; 0x98
 800e876:	443b      	add	r3, r7
 800e878:	3b81      	subs	r3, #129	; 0x81
 800e87a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800e87c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e880:	3301      	adds	r3, #1
 800e882:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800e886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e88a:	3301      	adds	r3, #1
 800e88c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	461a      	mov	r2, r3
 800e898:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e89c:	4293      	cmp	r3, r2
 800e89e:	f6ff af71 	blt.w	800e784 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800e8a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	f107 0208 	add.w	r2, r7, #8
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f000 f8d5 	bl	800ea5e <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800e8b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3798      	adds	r7, #152	; 0x98
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	71fb      	strb	r3, [r7, #7]
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	80bb      	strh	r3, [r7, #4]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800e8d2:	bf00      	nop
 800e8d4:	370c      	adds	r7, #12
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr

0800e8de <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800e8de:	b490      	push	{r4, r7}
 800e8e0:	b082      	sub	sp, #8
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	4608      	mov	r0, r1
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	4623      	mov	r3, r4
 800e8ee:	71fb      	strb	r3, [r7, #7]
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	80bb      	strh	r3, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	71bb      	strb	r3, [r7, #6]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800e8fc:	bf00      	nop
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bc90      	pop	{r4, r7}
 800e904:	4770      	bx	lr

0800e906 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800e906:	b480      	push	{r7}
 800e908:	b083      	sub	sp, #12
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	4603      	mov	r3, r0
 800e90e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	6039      	str	r1, [r7, #0]
 800e926:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800e928:	bf00      	nop
 800e92a:	370c      	adds	r7, #12
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	4603      	mov	r3, r0
 800e93c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800e93e:	bf00      	nop
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800e94a:	b480      	push	{r7}
 800e94c:	b083      	sub	sp, #12
 800e94e:	af00      	add	r7, sp, #0
 800e950:	4603      	mov	r3, r0
 800e952:	460a      	mov	r2, r1
 800e954:	71fb      	strb	r3, [r7, #7]
 800e956:	4613      	mov	r3, r2
 800e958:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800e95a:	bf00      	nop
 800e95c:	370c      	adds	r7, #12
 800e95e:	46bd      	mov	sp, r7
 800e960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e964:	4770      	bx	lr

0800e966 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800e966:	b480      	push	{r7}
 800e968:	b083      	sub	sp, #12
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	4603      	mov	r3, r0
 800e96e:	6039      	str	r1, [r7, #0]
 800e970:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800e972:	bf00      	nop
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr

0800e97e <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800e97e:	b490      	push	{r4, r7}
 800e980:	b082      	sub	sp, #8
 800e982:	af00      	add	r7, sp, #0
 800e984:	4604      	mov	r4, r0
 800e986:	4608      	mov	r0, r1
 800e988:	4611      	mov	r1, r2
 800e98a:	461a      	mov	r2, r3
 800e98c:	4623      	mov	r3, r4
 800e98e:	71fb      	strb	r3, [r7, #7]
 800e990:	4603      	mov	r3, r0
 800e992:	80bb      	strh	r3, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	807b      	strh	r3, [r7, #2]
 800e998:	4613      	mov	r3, r2
 800e99a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bc90      	pop	{r4, r7}
 800e9a4:	4770      	bx	lr

0800e9a6 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b083      	sub	sp, #12
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	603a      	str	r2, [r7, #0]
 800e9b0:	71fb      	strb	r3, [r7, #7]
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800e9b6:	bf00      	nop
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	b083      	sub	sp, #12
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	6039      	str	r1, [r7, #0]
 800e9cc:	80fb      	strh	r3, [r7, #6]
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800e9d2:	bf00      	nop
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800e9de:	b490      	push	{r4, r7}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	4608      	mov	r0, r1
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	4623      	mov	r3, r4
 800e9ee:	80fb      	strh	r3, [r7, #6]
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	80bb      	strh	r3, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	807b      	strh	r3, [r7, #2]
 800e9f8:	4613      	mov	r3, r2
 800e9fa:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bc90      	pop	{r4, r7}
 800ea04:	4770      	bx	lr

0800ea06 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800ea06:	b480      	push	{r7}
 800ea08:	b083      	sub	sp, #12
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	6039      	str	r1, [r7, #0]
 800ea10:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b083      	sub	sp, #12
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	4603      	mov	r3, r0
 800ea26:	6039      	str	r1, [r7, #0]
 800ea28:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800ea2a:	bf00      	nop
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800ea36:	b490      	push	{r4, r7}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	4608      	mov	r0, r1
 800ea40:	4611      	mov	r1, r2
 800ea42:	461a      	mov	r2, r3
 800ea44:	4623      	mov	r3, r4
 800ea46:	71fb      	strb	r3, [r7, #7]
 800ea48:	4603      	mov	r3, r0
 800ea4a:	80bb      	strh	r3, [r7, #4]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	71bb      	strb	r3, [r7, #6]
 800ea50:	4613      	mov	r3, r2
 800ea52:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800ea54:	bf00      	nop
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bc90      	pop	{r4, r7}
 800ea5c:	4770      	bx	lr

0800ea5e <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b083      	sub	sp, #12
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	4603      	mov	r3, r0
 800ea66:	6039      	str	r1, [r7, #0]
 800ea68:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800ea6a:	bf00      	nop
 800ea6c:	370c      	adds	r7, #12
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea74:	4770      	bx	lr

0800ea76 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800ea76:	b480      	push	{r7}
 800ea78:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800ea7a:	bf00      	nop
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800ea84:	b480      	push	{r7}
 800ea86:	b083      	sub	sp, #12
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800ea8e:	bf00      	nop
 800ea90:	370c      	adds	r7, #12
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr

0800ea9a <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800ea9a:	b480      	push	{r7}
 800ea9c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800ea9e:	bf00      	nop
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800eaac:	bf00      	nop
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800eab6:	b480      	push	{r7}
 800eab8:	b083      	sub	sp, #12
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	603b      	str	r3, [r7, #0]
 800eabe:	4603      	mov	r3, r0
 800eac0:	71fb      	strb	r3, [r7, #7]
 800eac2:	460b      	mov	r3, r1
 800eac4:	71bb      	strb	r3, [r7, #6]
 800eac6:	4613      	mov	r3, r2
 800eac8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800eaca:	bf00      	nop
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800ead6:	b480      	push	{r7}
 800ead8:	b083      	sub	sp, #12
 800eada:	af00      	add	r7, sp, #0
 800eadc:	4603      	mov	r3, r0
 800eade:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800eaf8:	bf00      	nop
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	460a      	mov	r2, r1
 800eb0e:	80fb      	strh	r3, [r7, #6]
 800eb10:	4613      	mov	r3, r2
 800eb12:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800eb14:	bf00      	nop
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	4603      	mov	r3, r0
 800eb28:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800eb2a:	bf00      	nop
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800eb36:	b480      	push	{r7}
 800eb38:	b083      	sub	sp, #12
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	460a      	mov	r2, r1
 800eb40:	80fb      	strh	r3, [r7, #6]
 800eb42:	4613      	mov	r3, r2
 800eb44:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800eb46:	bf00      	nop
 800eb48:	370c      	adds	r7, #12
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr

0800eb52 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800eb52:	b480      	push	{r7}
 800eb54:	b083      	sub	sp, #12
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	603b      	str	r3, [r7, #0]
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	80fb      	strh	r3, [r7, #6]
 800eb5e:	460b      	mov	r3, r1
 800eb60:	717b      	strb	r3, [r7, #5]
 800eb62:	4613      	mov	r3, r2
 800eb64:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800eb66:	bf00      	nop
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800eb72:	b480      	push	{r7}
 800eb74:	b083      	sub	sp, #12
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	4603      	mov	r3, r0
 800eb7a:	603a      	str	r2, [r7, #0]
 800eb7c:	80fb      	strh	r3, [r7, #6]
 800eb7e:	460b      	mov	r3, r1
 800eb80:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800eb82:	bf00      	nop
 800eb84:	370c      	adds	r7, #12
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	603b      	str	r3, [r7, #0]
 800eb96:	4603      	mov	r3, r0
 800eb98:	80fb      	strh	r3, [r7, #6]
 800eb9a:	460b      	mov	r3, r1
 800eb9c:	717b      	strb	r3, [r7, #5]
 800eb9e:	4613      	mov	r3, r2
 800eba0:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800eba2:	bf00      	nop
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800ebae:	b480      	push	{r7}
 800ebb0:	b083      	sub	sp, #12
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	603a      	str	r2, [r7, #0]
 800ebb8:	80fb      	strh	r3, [r7, #6]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800ebbe:	bf00      	nop
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b083      	sub	sp, #12
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	603a      	str	r2, [r7, #0]
 800ebd4:	80fb      	strh	r3, [r7, #6]
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800ebda:	bf00      	nop
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800ebe6:	b480      	push	{r7}
 800ebe8:	b083      	sub	sp, #12
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	4603      	mov	r3, r0
 800ebee:	603a      	str	r2, [r7, #0]
 800ebf0:	80fb      	strh	r3, [r7, #6]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800ebf6:	bf00      	nop
 800ebf8:	370c      	adds	r7, #12
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800ec02:	b480      	push	{r7}
 800ec04:	b083      	sub	sp, #12
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	603b      	str	r3, [r7, #0]
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	80fb      	strh	r3, [r7, #6]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	717b      	strb	r3, [r7, #5]
 800ec12:	4613      	mov	r3, r2
 800ec14:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800ec16:	bf00      	nop
 800ec18:	370c      	adds	r7, #12
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800ec22:	b490      	push	{r4, r7}
 800ec24:	b082      	sub	sp, #8
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	4604      	mov	r4, r0
 800ec2a:	4608      	mov	r0, r1
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	461a      	mov	r2, r3
 800ec30:	4623      	mov	r3, r4
 800ec32:	80fb      	strh	r3, [r7, #6]
 800ec34:	4603      	mov	r3, r0
 800ec36:	80bb      	strh	r3, [r7, #4]
 800ec38:	460b      	mov	r3, r1
 800ec3a:	807b      	strh	r3, [r7, #2]
 800ec3c:	4613      	mov	r3, r2
 800ec3e:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800ec40:	bf00      	nop
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bc90      	pop	{r4, r7}
 800ec48:	4770      	bx	lr

0800ec4a <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800ec4a:	b480      	push	{r7}
 800ec4c:	b083      	sub	sp, #12
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	4603      	mov	r3, r0
 800ec52:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800ec60:	b480      	push	{r7}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	607b      	str	r3, [r7, #4]
 800ec68:	4603      	mov	r3, r0
 800ec6a:	81fb      	strh	r3, [r7, #14]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	81bb      	strh	r3, [r7, #12]
 800ec70:	4613      	mov	r3, r2
 800ec72:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800ec74:	bf00      	nop
 800ec76:	3714      	adds	r7, #20
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7e:	4770      	bx	lr

0800ec80 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800ec80:	b480      	push	{r7}
 800ec82:	b085      	sub	sp, #20
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	607b      	str	r3, [r7, #4]
 800ec88:	4603      	mov	r3, r0
 800ec8a:	81fb      	strh	r3, [r7, #14]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	81bb      	strh	r3, [r7, #12]
 800ec90:	4613      	mov	r3, r2
 800ec92:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 800ec94:	bf00      	nop
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800eca0:	b480      	push	{r7}
 800eca2:	b083      	sub	sp, #12
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	460a      	mov	r2, r1
 800ecaa:	80fb      	strh	r3, [r7, #6]
 800ecac:	4613      	mov	r3, r2
 800ecae:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800ecb0:	bf00      	nop
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800ecbc:	b490      	push	{r4, r7}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	4604      	mov	r4, r0
 800ecc4:	4608      	mov	r0, r1
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4623      	mov	r3, r4
 800eccc:	80fb      	strh	r3, [r7, #6]
 800ecce:	4603      	mov	r3, r0
 800ecd0:	717b      	strb	r3, [r7, #5]
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	807b      	strh	r3, [r7, #2]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800ecda:	bf00      	nop
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bc90      	pop	{r4, r7}
 800ece2:	4770      	bx	lr

0800ece4 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	607b      	str	r3, [r7, #4]
 800ecec:	4603      	mov	r3, r0
 800ecee:	81fb      	strh	r3, [r7, #14]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	81bb      	strh	r3, [r7, #12]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800ecf8:	bf00      	nop
 800ecfa:	3714      	adds	r7, #20
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	607b      	str	r3, [r7, #4]
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	81fb      	strh	r3, [r7, #14]
 800ed10:	460b      	mov	r3, r1
 800ed12:	81bb      	strh	r3, [r7, #12]
 800ed14:	4613      	mov	r3, r2
 800ed16:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800ed18:	bf00      	nop
 800ed1a:	3714      	adds	r7, #20
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800ed24:	b480      	push	{r7}
 800ed26:	b083      	sub	sp, #12
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	603a      	str	r2, [r7, #0]
 800ed2e:	80fb      	strh	r3, [r7, #6]
 800ed30:	460b      	mov	r3, r1
 800ed32:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	4603      	mov	r3, r0
 800ed48:	460a      	mov	r2, r1
 800ed4a:	80fb      	strh	r3, [r7, #6]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800ed50:	bf00      	nop
 800ed52:	370c      	adds	r7, #12
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800ed66:	bf00      	nop
 800ed68:	370c      	adds	r7, #12
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr

0800ed72 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800ed72:	b490      	push	{r4, r7}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	4604      	mov	r4, r0
 800ed7a:	4608      	mov	r0, r1
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	461a      	mov	r2, r3
 800ed80:	4623      	mov	r3, r4
 800ed82:	80fb      	strh	r3, [r7, #6]
 800ed84:	4603      	mov	r3, r0
 800ed86:	80bb      	strh	r3, [r7, #4]
 800ed88:	460b      	mov	r3, r1
 800ed8a:	807b      	strh	r3, [r7, #2]
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bc90      	pop	{r4, r7}
 800ed98:	4770      	bx	lr

0800ed9a <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800ed9a:	b480      	push	{r7}
 800ed9c:	b083      	sub	sp, #12
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	4603      	mov	r3, r0
 800eda2:	460a      	mov	r2, r1
 800eda4:	80fb      	strh	r3, [r7, #6]
 800eda6:	4613      	mov	r3, r2
 800eda8:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800edb6:	b480      	push	{r7}
 800edb8:	b083      	sub	sp, #12
 800edba:	af00      	add	r7, sp, #0
 800edbc:	4603      	mov	r3, r0
 800edbe:	603a      	str	r2, [r7, #0]
 800edc0:	80fb      	strh	r3, [r7, #6]
 800edc2:	460b      	mov	r3, r1
 800edc4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800edc6:	bf00      	nop
 800edc8:	370c      	adds	r7, #12
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr

0800edd2 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800edd2:	b490      	push	{r4, r7}
 800edd4:	b082      	sub	sp, #8
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	4604      	mov	r4, r0
 800edda:	4608      	mov	r0, r1
 800eddc:	4611      	mov	r1, r2
 800edde:	461a      	mov	r2, r3
 800ede0:	4623      	mov	r3, r4
 800ede2:	80fb      	strh	r3, [r7, #6]
 800ede4:	4603      	mov	r3, r0
 800ede6:	717b      	strb	r3, [r7, #5]
 800ede8:	460b      	mov	r3, r1
 800edea:	807b      	strh	r3, [r7, #2]
 800edec:	4613      	mov	r3, r2
 800edee:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800edf0:	bf00      	nop
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bc90      	pop	{r4, r7}
 800edf8:	4770      	bx	lr

0800edfa <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800edfa:	b490      	push	{r4, r7}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	4604      	mov	r4, r0
 800ee02:	4608      	mov	r0, r1
 800ee04:	4611      	mov	r1, r2
 800ee06:	461a      	mov	r2, r3
 800ee08:	4623      	mov	r3, r4
 800ee0a:	80fb      	strh	r3, [r7, #6]
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	717b      	strb	r3, [r7, #5]
 800ee10:	460b      	mov	r3, r1
 800ee12:	807b      	strh	r3, [r7, #2]
 800ee14:	4613      	mov	r3, r2
 800ee16:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800ee18:	bf00      	nop
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bc90      	pop	{r4, r7}
 800ee20:	4770      	bx	lr

0800ee22 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800ee22:	b480      	push	{r7}
 800ee24:	b083      	sub	sp, #12
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	4603      	mov	r3, r0
 800ee2a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800ee40:	bf00      	nop
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b085      	sub	sp, #20
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60b9      	str	r1, [r7, #8]
 800ee54:	607a      	str	r2, [r7, #4]
 800ee56:	603b      	str	r3, [r7, #0]
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800ee5c:	bf00      	nop
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	4603      	mov	r3, r0
 800ee70:	603a      	str	r2, [r7, #0]
 800ee72:	71fb      	strb	r3, [r7, #7]
 800ee74:	460b      	mov	r3, r1
 800ee76:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	603a      	str	r2, [r7, #0]
 800ee8e:	71fb      	strb	r3, [r7, #7]
 800ee90:	460b      	mov	r3, r1
 800ee92:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800ee94:	bf00      	nop
 800ee96:	370c      	adds	r7, #12
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9e:	4770      	bx	lr

0800eea0 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	603a      	str	r2, [r7, #0]
 800eeaa:	71fb      	strb	r3, [r7, #7]
 800eeac:	460b      	mov	r3, r1
 800eeae:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b088      	sub	sp, #32
 800eec0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eec6:	f107 0308 	add.w	r3, r7, #8
 800eeca:	2218      	movs	r2, #24
 800eecc:	2100      	movs	r1, #0
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 fcbe 	bl	800f850 <memset>
  rq.ogf = 0x03;
 800eed4:	2303      	movs	r3, #3
 800eed6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800eed8:	2303      	movs	r3, #3
 800eeda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800eedc:	1dfb      	adds	r3, r7, #7
 800eede:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800eee0:	2301      	movs	r3, #1
 800eee2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800eee4:	f107 0308 	add.w	r3, r7, #8
 800eee8:	2100      	movs	r1, #0
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 f9ca 	bl	800f284 <hci_send_req>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	da01      	bge.n	800eefa <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800eef6:	23ff      	movs	r3, #255	; 0xff
 800eef8:	e005      	b.n	800ef06 <hci_reset+0x4a>
  if (status) {
 800eefa:	79fb      	ldrb	r3, [r7, #7]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <hci_reset+0x48>
    return status;
 800ef00:	79fb      	ldrb	r3, [r7, #7]
 800ef02:	e000      	b.n	800ef06 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3720      	adds	r7, #32
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b08e      	sub	sp, #56	; 0x38
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	60b9      	str	r1, [r7, #8]
 800ef18:	607a      	str	r2, [r7, #4]
 800ef1a:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ef1c:	f107 0314 	add.w	r3, r7, #20
 800ef20:	2209      	movs	r2, #9
 800ef22:	2100      	movs	r1, #0
 800ef24:	4618      	mov	r0, r3
 800ef26:	f000 fc93 	bl	800f850 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ef2a:	f107 0320 	add.w	r3, r7, #32
 800ef2e:	2218      	movs	r2, #24
 800ef30:	2100      	movs	r1, #0
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 fc8c 	bl	800f850 <memset>
  rq.ogf = 0x04;
 800ef38:	2304      	movs	r3, #4
 800ef3a:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 800ef40:	f107 0314 	add.w	r3, r7, #20
 800ef44:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800ef46:	2309      	movs	r3, #9
 800ef48:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800ef4a:	f107 0320 	add.w	r3, r7, #32
 800ef4e:	2100      	movs	r1, #0
 800ef50:	4618      	mov	r0, r3
 800ef52:	f000 f997 	bl	800f284 <hci_send_req>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	da01      	bge.n	800ef60 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800ef5c:	23ff      	movs	r3, #255	; 0xff
 800ef5e:	e018      	b.n	800ef92 <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800ef60:	7d3b      	ldrb	r3, [r7, #20]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <hci_read_local_version_information+0x5c>
    return resp.Status;
 800ef66:	7d3b      	ldrb	r3, [r7, #20]
 800ef68:	e013      	b.n	800ef92 <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800ef6a:	7d7a      	ldrb	r2, [r7, #21]
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800ef70:	8afa      	ldrh	r2, [r7, #22]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800ef76:	7e3a      	ldrb	r2, [r7, #24]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800ef7c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800ef86:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3738      	adds	r7, #56	; 0x38
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b0cc      	sub	sp, #304	; 0x130
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	4602      	mov	r2, r0
 800efa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efaa:	6019      	str	r1, [r3, #0]
 800efac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efb0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800efb4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800efb6:	f107 030c 	add.w	r3, r7, #12
 800efba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800efbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efc2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800efc6:	2200      	movs	r2, #0
 800efc8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800efca:	2300      	movs	r3, #0
 800efcc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800efd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800efd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800efd8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800efdc:	7812      	ldrb	r2, [r2, #0]
 800efde:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800efe0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800efe4:	3301      	adds	r3, #1
 800efe6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800efea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d00a      	beq.n	800f00e <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800eff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800effc:	1c58      	adds	r0, r3, #1
 800effe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800f006:	221f      	movs	r2, #31
 800f008:	6819      	ldr	r1, [r3, #0]
 800f00a:	f000 fc13 	bl	800f834 <memcpy>
  }
  index_input += 31;
 800f00e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800f012:	331f      	adds	r3, #31
 800f014:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800f018:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f01c:	2218      	movs	r2, #24
 800f01e:	2100      	movs	r1, #0
 800f020:	4618      	mov	r0, r3
 800f022:	f000 fc15 	bl	800f850 <memset>
  rq.ogf = 0x08;
 800f026:	2308      	movs	r3, #8
 800f028:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800f02c:	2309      	movs	r3, #9
 800f02e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800f032:	f107 030c 	add.w	r3, r7, #12
 800f036:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800f03a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800f03e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800f042:	f107 030b 	add.w	r3, r7, #11
 800f046:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800f04a:	2301      	movs	r3, #1
 800f04c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800f050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800f054:	2100      	movs	r1, #0
 800f056:	4618      	mov	r0, r3
 800f058:	f000 f914 	bl	800f284 <hci_send_req>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	da01      	bge.n	800f066 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 800f062:	23ff      	movs	r3, #255	; 0xff
 800f064:	e00d      	b.n	800f082 <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800f066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f06a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d005      	beq.n	800f080 <hci_le_set_scan_response_data+0xe6>
    return status;
 800f074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800f078:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	e000      	b.n	800f082 <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	3308      	adds	r3, #8
 800f098:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d001      	beq.n	800f0a6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e00c      	b.n	800f0c0 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	3302      	adds	r3, #2
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f0b4:	3b03      	subs	r3, #3
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d001      	beq.n	800f0be <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	e000      	b.n	800f0c0 <verify_packet+0x34>
  
  return 0;      
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b0a6      	sub	sp, #152	; 0x98
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	607b      	str	r3, [r7, #4]
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	81fb      	strh	r3, [r7, #14]
 800f0d8:	460b      	mov	r3, r1
 800f0da:	81bb      	strh	r3, [r7, #12]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800f0e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f0e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0e8:	b21a      	sxth	r2, r3
 800f0ea:	89fb      	ldrh	r3, [r7, #14]
 800f0ec:	029b      	lsls	r3, r3, #10
 800f0ee:	b21b      	sxth	r3, r3
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	b21b      	sxth	r3, r3
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800f0f8:	7afb      	ldrb	r3, [r7, #11]
 800f0fa:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800f100:	f107 0318 	add.w	r3, r7, #24
 800f104:	3301      	adds	r3, #1
 800f106:	461a      	mov	r2, r3
 800f108:	f107 0314 	add.w	r3, r7, #20
 800f10c:	8819      	ldrh	r1, [r3, #0]
 800f10e:	789b      	ldrb	r3, [r3, #2]
 800f110:	8011      	strh	r1, [r2, #0]
 800f112:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800f114:	f107 0318 	add.w	r3, r7, #24
 800f118:	3304      	adds	r3, #4
 800f11a:	7afa      	ldrb	r2, [r7, #11]
 800f11c:	6879      	ldr	r1, [r7, #4]
 800f11e:	4618      	mov	r0, r3
 800f120:	f000 fb88 	bl	800f834 <memcpy>
  
  if (hciContext.io.Send)
 800f124:	4b08      	ldr	r3, [pc, #32]	; (800f148 <send_cmd+0x7c>)
 800f126:	691b      	ldr	r3, [r3, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d009      	beq.n	800f140 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800f12c:	4b06      	ldr	r3, [pc, #24]	; (800f148 <send_cmd+0x7c>)
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	7afa      	ldrb	r2, [r7, #11]
 800f132:	b292      	uxth	r2, r2
 800f134:	3204      	adds	r2, #4
 800f136:	b291      	uxth	r1, r2
 800f138:	f107 0218 	add.w	r2, r7, #24
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
  }
}
 800f140:	bf00      	nop
 800f142:	3798      	adds	r7, #152	; 0x98
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}
 800f148:	20000a18 	.word	0x20000a18

0800f14c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b084      	sub	sp, #16
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800f156:	e00a      	b.n	800f16e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800f158:	f107 030c 	add.w	r3, r7, #12
 800f15c:	4619      	mov	r1, r3
 800f15e:	6838      	ldr	r0, [r7, #0]
 800f160:	f000 faea 	bl	800f738 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	4619      	mov	r1, r3
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fa51 	bl	800f610 <list_insert_head>
  while (!list_is_empty(src_list))
 800f16e:	6838      	ldr	r0, [r7, #0]
 800f170:	f000 fa2c 	bl	800f5cc <list_is_empty>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d0ee      	beq.n	800f158 <move_list+0xc>
  }
}
 800f17a:	bf00      	nop
 800f17c:	bf00      	nop
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f18a:	e009      	b.n	800f1a0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800f18c:	1d3b      	adds	r3, r7, #4
 800f18e:	4619      	mov	r1, r3
 800f190:	4809      	ldr	r0, [pc, #36]	; (800f1b8 <free_event_list+0x34>)
 800f192:	f000 faaa 	bl	800f6ea <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4619      	mov	r1, r3
 800f19a:	4808      	ldr	r0, [pc, #32]	; (800f1bc <free_event_list+0x38>)
 800f19c:	f000 fa5e 	bl	800f65c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800f1a0:	4806      	ldr	r0, [pc, #24]	; (800f1bc <free_event_list+0x38>)
 800f1a2:	f000 faf0 	bl	800f786 <list_get_size>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b04      	cmp	r3, #4
 800f1aa:	ddef      	ble.n	800f18c <free_event_list+0x8>
  }
}
 800f1ac:	bf00      	nop
 800f1ae:	bf00      	nop
 800f1b0:	3708      	adds	r7, #8
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20000498 	.word	0x20000498
 800f1bc:	20000490 	.word	0x20000490

0800f1c0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d002      	beq.n	800f1d6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800f1d0:	4a18      	ldr	r2, [pc, #96]	; (800f234 <hci_init+0x74>)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800f1d6:	4818      	ldr	r0, [pc, #96]	; (800f238 <hci_init+0x78>)
 800f1d8:	f000 f9e8 	bl	800f5ac <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800f1dc:	4817      	ldr	r0, [pc, #92]	; (800f23c <hci_init+0x7c>)
 800f1de:	f000 f9e5 	bl	800f5ac <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800f1e2:	f7f8 fb53 	bl	800788c <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	73fb      	strb	r3, [r7, #15]
 800f1ea:	e00c      	b.n	800f206 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	228c      	movs	r2, #140	; 0x8c
 800f1f0:	fb02 f303 	mul.w	r3, r2, r3
 800f1f4:	4a12      	ldr	r2, [pc, #72]	; (800f240 <hci_init+0x80>)
 800f1f6:	4413      	add	r3, r2
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	480f      	ldr	r0, [pc, #60]	; (800f238 <hci_init+0x78>)
 800f1fc:	f000 fa2e 	bl	800f65c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800f200:	7bfb      	ldrb	r3, [r7, #15]
 800f202:	3301      	adds	r3, #1
 800f204:	73fb      	strb	r3, [r7, #15]
 800f206:	7bfb      	ldrb	r3, [r7, #15]
 800f208:	2b09      	cmp	r3, #9
 800f20a:	d9ef      	bls.n	800f1ec <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800f20c:	4b09      	ldr	r3, [pc, #36]	; (800f234 <hci_init+0x74>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d003      	beq.n	800f21c <hci_init+0x5c>
 800f214:	4b07      	ldr	r3, [pc, #28]	; (800f234 <hci_init+0x74>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2000      	movs	r0, #0
 800f21a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800f21c:	4b05      	ldr	r3, [pc, #20]	; (800f234 <hci_init+0x74>)
 800f21e:	689b      	ldr	r3, [r3, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d002      	beq.n	800f22a <hci_init+0x6a>
 800f224:	4b03      	ldr	r3, [pc, #12]	; (800f234 <hci_init+0x74>)
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	4798      	blx	r3
}
 800f22a:	bf00      	nop
 800f22c:	3710      	adds	r7, #16
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	20000a18 	.word	0x20000a18
 800f238:	20000490 	.word	0x20000490
 800f23c:	20000498 	.word	0x20000498
 800f240:	200004a0 	.word	0x200004a0

0800f244 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a0b      	ldr	r2, [pc, #44]	; (800f280 <hci_register_io_bus+0x3c>)
 800f252:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	4a09      	ldr	r2, [pc, #36]	; (800f280 <hci_register_io_bus+0x3c>)
 800f25a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	4a07      	ldr	r2, [pc, #28]	; (800f280 <hci_register_io_bus+0x3c>)
 800f262:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	4a05      	ldr	r2, [pc, #20]	; (800f280 <hci_register_io_bus+0x3c>)
 800f26a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	4a03      	ldr	r2, [pc, #12]	; (800f280 <hci_register_io_bus+0x3c>)
 800f272:	6093      	str	r3, [r2, #8]
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	20000a18 	.word	0x20000a18

0800f284 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08e      	sub	sp, #56	; 0x38
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	460b      	mov	r3, r1
 800f28e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	885b      	ldrh	r3, [r3, #2]
 800f294:	b21b      	sxth	r3, r3
 800f296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f29a:	b21a      	sxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	029b      	lsls	r3, r3, #10
 800f2a2:	b21b      	sxth	r3, r3
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	b21b      	sxth	r3, r3
 800f2a8:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800f2ae:	f107 0308 	add.w	r3, r7, #8
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 f97a 	bl	800f5ac <list_init_head>

  free_event_list();
 800f2b8:	f7ff ff64 	bl	800f184 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	8818      	ldrh	r0, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	8859      	ldrh	r1, [r3, #2]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	b2da      	uxtb	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	f7ff fefd 	bl	800f0cc <send_cmd>
  
  if (async)
 800f2d2:	78fb      	ldrb	r3, [r7, #3]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <hci_send_req+0x58>
  {
    return 0;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e0e5      	b.n	800f4a8 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800f2dc:	f7f9 fad0 	bl	8008880 <HAL_GetTick>
 800f2e0:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f2e2:	f7f9 facd 	bl	8008880 <HAL_GetTick>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f2f0:	f200 80b6 	bhi.w	800f460 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800f2f4:	486e      	ldr	r0, [pc, #440]	; (800f4b0 <hci_send_req+0x22c>)
 800f2f6:	f000 f969 	bl	800f5cc <list_is_empty>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d000      	beq.n	800f302 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800f300:	e7ef      	b.n	800f2e2 <hci_send_req+0x5e>
      {
        break;
 800f302:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800f304:	f107 0310 	add.w	r3, r7, #16
 800f308:	4619      	mov	r1, r3
 800f30a:	4869      	ldr	r0, [pc, #420]	; (800f4b0 <hci_send_req+0x22c>)
 800f30c:	f000 f9ed 	bl	800f6ea <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	3308      	adds	r3, #8
 800f314:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b04      	cmp	r3, #4
 800f31c:	d17b      	bne.n	800f416 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 800f31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f320:	3301      	adds	r3, #1
 800f322:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	3308      	adds	r3, #8
 800f328:	3303      	adds	r3, #3
 800f32a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800f332:	3b03      	subs	r3, #3
 800f334:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b3e      	cmp	r3, #62	; 0x3e
 800f33c:	d04d      	beq.n	800f3da <hci_send_req+0x156>
 800f33e:	2b3e      	cmp	r3, #62	; 0x3e
 800f340:	dc6b      	bgt.n	800f41a <hci_send_req+0x196>
 800f342:	2b10      	cmp	r3, #16
 800f344:	f000 808e 	beq.w	800f464 <hci_send_req+0x1e0>
 800f348:	2b10      	cmp	r3, #16
 800f34a:	dc66      	bgt.n	800f41a <hci_send_req+0x196>
 800f34c:	2b0e      	cmp	r3, #14
 800f34e:	d024      	beq.n	800f39a <hci_send_req+0x116>
 800f350:	2b0f      	cmp	r3, #15
 800f352:	d162      	bne.n	800f41a <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	885b      	ldrh	r3, [r3, #2]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f360:	429a      	cmp	r2, r3
 800f362:	f040 8081 	bne.w	800f468 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	2b0f      	cmp	r3, #15
 800f36c:	d004      	beq.n	800f378 <hci_send_req+0xf4>
          if (cs->status) {
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d053      	beq.n	800f41e <hci_send_req+0x19a>
            goto failed;
 800f376:	e07a      	b.n	800f46e <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	695a      	ldr	r2, [r3, #20]
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	429a      	cmp	r2, r3
 800f380:	bf28      	it	cs
 800f382:	461a      	movcs	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6918      	ldr	r0, [r3, #16]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	695b      	ldr	r3, [r3, #20]
 800f390:	461a      	mov	r2, r3
 800f392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f394:	f000 fa4e 	bl	800f834 <memcpy>
        goto done;
 800f398:	e07a      	b.n	800f490 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d15f      	bne.n	800f46c <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800f3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ae:	3303      	adds	r3, #3
 800f3b0:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800f3b2:	6a3b      	ldr	r3, [r7, #32]
 800f3b4:	3b03      	subs	r3, #3
 800f3b6:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	695a      	ldr	r2, [r3, #20]
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	bf28      	it	cs
 800f3c2:	461a      	movcs	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6918      	ldr	r0, [r3, #16]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	695b      	ldr	r3, [r3, #20]
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3d4:	f000 fa2e 	bl	800f834 <memcpy>
        goto done;
 800f3d8:	e05a      	b.n	800f490 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	461a      	mov	r2, r3
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d11a      	bne.n	800f422 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 800f3ec:	6a3b      	ldr	r3, [r7, #32]
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	695a      	ldr	r2, [r3, #20]
 800f3f6:	6a3b      	ldr	r3, [r7, #32]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	bf28      	it	cs
 800f3fc:	461a      	movcs	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6918      	ldr	r0, [r3, #16]
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	1c59      	adds	r1, r3, #1
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	695b      	ldr	r3, [r3, #20]
 800f40e:	461a      	mov	r2, r3
 800f410:	f000 fa10 	bl	800f834 <memcpy>
        goto done;
 800f414:	e03c      	b.n	800f490 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800f416:	bf00      	nop
 800f418:	e004      	b.n	800f424 <hci_send_req+0x1a0>
        break;
 800f41a:	bf00      	nop
 800f41c:	e002      	b.n	800f424 <hci_send_req+0x1a0>
          break;
 800f41e:	bf00      	nop
 800f420:	e000      	b.n	800f424 <hci_send_req+0x1a0>
          break;
 800f422:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800f424:	4823      	ldr	r0, [pc, #140]	; (800f4b4 <hci_send_req+0x230>)
 800f426:	f000 f8d1 	bl	800f5cc <list_is_empty>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00d      	beq.n	800f44c <hci_send_req+0x1c8>
 800f430:	481f      	ldr	r0, [pc, #124]	; (800f4b0 <hci_send_req+0x22c>)
 800f432:	f000 f8cb 	bl	800f5cc <list_is_empty>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d007      	beq.n	800f44c <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	4619      	mov	r1, r3
 800f440:	481c      	ldr	r0, [pc, #112]	; (800f4b4 <hci_send_req+0x230>)
 800f442:	f000 f90b 	bl	800f65c <list_insert_tail>
      hciReadPacket=NULL;
 800f446:	2300      	movs	r3, #0
 800f448:	613b      	str	r3, [r7, #16]
 800f44a:	e008      	b.n	800f45e <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	f107 0308 	add.w	r3, r7, #8
 800f452:	4611      	mov	r1, r2
 800f454:	4618      	mov	r0, r3
 800f456:	f000 f901 	bl	800f65c <list_insert_tail>
      hciReadPacket=NULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	613b      	str	r3, [r7, #16]
  {
 800f45e:	e73d      	b.n	800f2dc <hci_send_req+0x58>
        goto failed;
 800f460:	bf00      	nop
 800f462:	e004      	b.n	800f46e <hci_send_req+0x1ea>
        goto failed;
 800f464:	bf00      	nop
 800f466:	e002      	b.n	800f46e <hci_send_req+0x1ea>
          goto failed;
 800f468:	bf00      	nop
 800f46a:	e000      	b.n	800f46e <hci_send_req+0x1ea>
          goto failed;
 800f46c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d004      	beq.n	800f47e <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	4619      	mov	r1, r3
 800f478:	480e      	ldr	r0, [pc, #56]	; (800f4b4 <hci_send_req+0x230>)
 800f47a:	f000 f8c9 	bl	800f610 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f47e:	f107 0308 	add.w	r3, r7, #8
 800f482:	4619      	mov	r1, r3
 800f484:	480a      	ldr	r0, [pc, #40]	; (800f4b0 <hci_send_req+0x22c>)
 800f486:	f7ff fe61 	bl	800f14c <move_list>

  return -1;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	e00b      	b.n	800f4a8 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	4619      	mov	r1, r3
 800f494:	4807      	ldr	r0, [pc, #28]	; (800f4b4 <hci_send_req+0x230>)
 800f496:	f000 f8bb 	bl	800f610 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800f49a:	f107 0308 	add.w	r3, r7, #8
 800f49e:	4619      	mov	r1, r3
 800f4a0:	4803      	ldr	r0, [pc, #12]	; (800f4b0 <hci_send_req+0x22c>)
 800f4a2:	f7ff fe53 	bl	800f14c <move_list>

  return 0;
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3738      	adds	r7, #56	; 0x38
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	20000498 	.word	0x20000498
 800f4b4:	20000490 	.word	0x20000490

0800f4b8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f4c2:	e013      	b.n	800f4ec <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800f4c4:	1d3b      	adds	r3, r7, #4
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	480e      	ldr	r0, [pc, #56]	; (800f504 <hci_user_evt_proc+0x4c>)
 800f4ca:	f000 f90e 	bl	800f6ea <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f4ce:	4b0e      	ldr	r3, [pc, #56]	; (800f508 <hci_user_evt_proc+0x50>)
 800f4d0:	69db      	ldr	r3, [r3, #28]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d005      	beq.n	800f4e2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800f4d6:	4b0c      	ldr	r3, [pc, #48]	; (800f508 <hci_user_evt_proc+0x50>)
 800f4d8:	69db      	ldr	r3, [r3, #28]
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	3208      	adds	r2, #8
 800f4de:	4610      	mov	r0, r2
 800f4e0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	4809      	ldr	r0, [pc, #36]	; (800f50c <hci_user_evt_proc+0x54>)
 800f4e8:	f000 f8b8 	bl	800f65c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800f4ec:	4805      	ldr	r0, [pc, #20]	; (800f504 <hci_user_evt_proc+0x4c>)
 800f4ee:	f000 f86d 	bl	800f5cc <list_is_empty>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d0e5      	beq.n	800f4c4 <hci_user_evt_proc+0xc>
  }
}
 800f4f8:	bf00      	nop
 800f4fa:	bf00      	nop
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	20000498 	.word	0x20000498
 800f508:	20000a18 	.word	0x20000a18
 800f50c:	20000490 	.word	0x20000490

0800f510 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800f518:	2300      	movs	r3, #0
 800f51a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800f520:	481f      	ldr	r0, [pc, #124]	; (800f5a0 <hci_notify_asynch_evt+0x90>)
 800f522:	f000 f853 	bl	800f5cc <list_is_empty>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d132      	bne.n	800f592 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800f52c:	f107 030c 	add.w	r3, r7, #12
 800f530:	4619      	mov	r1, r3
 800f532:	481b      	ldr	r0, [pc, #108]	; (800f5a0 <hci_notify_asynch_evt+0x90>)
 800f534:	f000 f8d9 	bl	800f6ea <list_remove_head>
    
    if (hciContext.io.Receive)
 800f538:	4b1a      	ldr	r3, [pc, #104]	; (800f5a4 <hci_notify_asynch_evt+0x94>)
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d02a      	beq.n	800f596 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800f540:	4b18      	ldr	r3, [pc, #96]	; (800f5a4 <hci_notify_asynch_evt+0x94>)
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	3208      	adds	r2, #8
 800f548:	2180      	movs	r1, #128	; 0x80
 800f54a:	4610      	mov	r0, r2
 800f54c:	4798      	blx	r3
 800f54e:	4603      	mov	r3, r0
 800f550:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800f552:	7cfb      	ldrb	r3, [r7, #19]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d016      	beq.n	800f586 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	7cfa      	ldrb	r2, [r7, #19]
 800f55c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4618      	mov	r0, r3
 800f564:	f7ff fd92 	bl	800f08c <verify_packet>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d105      	bne.n	800f57a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	4619      	mov	r1, r3
 800f572:	480d      	ldr	r0, [pc, #52]	; (800f5a8 <hci_notify_asynch_evt+0x98>)
 800f574:	f000 f872 	bl	800f65c <list_insert_tail>
 800f578:	e00d      	b.n	800f596 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	4619      	mov	r1, r3
 800f57e:	4808      	ldr	r0, [pc, #32]	; (800f5a0 <hci_notify_asynch_evt+0x90>)
 800f580:	f000 f846 	bl	800f610 <list_insert_head>
 800f584:	e007      	b.n	800f596 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	4619      	mov	r1, r3
 800f58a:	4805      	ldr	r0, [pc, #20]	; (800f5a0 <hci_notify_asynch_evt+0x90>)
 800f58c:	f000 f840 	bl	800f610 <list_insert_head>
 800f590:	e001      	b.n	800f596 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800f592:	2301      	movs	r3, #1
 800f594:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800f596:	697b      	ldr	r3, [r7, #20]
  
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3718      	adds	r7, #24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bd80      	pop	{r7, pc}
 800f5a0:	20000490 	.word	0x20000490
 800f5a4:	20000a18 	.word	0x20000a18
 800f5a8:	20000498 	.word	0x20000498

0800f5ac <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	605a      	str	r2, [r3, #4]
}
 800f5c0:	bf00      	nop
 800f5c2:	370c      	adds	r7, #12
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr

0800f5cc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b087      	sub	sp, #28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5da:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f5dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f5de:	b672      	cpsid	i
}
 800f5e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d102      	bne.n	800f5f2 <list_is_empty+0x26>
  {
    return_value = 1;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	75fb      	strb	r3, [r7, #23]
 800f5f0:	e001      	b.n	800f5f6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	75fb      	strb	r3, [r7, #23]
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f383 8810 	msr	PRIMASK, r3
}
 800f600:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800f602:	7dfb      	ldrb	r3, [r7, #23]
}
 800f604:	4618      	mov	r0, r3
 800f606:	371c      	adds	r7, #28
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800f610:	b480      	push	{r7}
 800f612:	b087      	sub	sp, #28
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f61a:	f3ef 8310 	mrs	r3, PRIMASK
 800f61e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f620:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f622:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f624:	b672      	cpsid	i
}
 800f626:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	683a      	ldr	r2, [r7, #0]
 800f642:	605a      	str	r2, [r3, #4]
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	f383 8810 	msr	PRIMASK, r3
}
 800f64e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f650:	bf00      	nop
 800f652:	371c      	adds	r7, #28
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b087      	sub	sp, #28
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f666:	f3ef 8310 	mrs	r3, PRIMASK
 800f66a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f66c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f66e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f670:	b672      	cpsid	i
}
 800f672:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	685a      	ldr	r2, [r3, #4]
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	683a      	ldr	r2, [r7, #0]
 800f686:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	683a      	ldr	r2, [r7, #0]
 800f68e:	601a      	str	r2, [r3, #0]
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	f383 8810 	msr	PRIMASK, r3
}
 800f69a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f69c:	bf00      	nop
 800f69e:	371c      	adds	r7, #28
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6b0:	f3ef 8310 	mrs	r3, PRIMASK
 800f6b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f6b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6ba:	b672      	cpsid	i
}
 800f6bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	687a      	ldr	r2, [r7, #4]
 800f6c4:	6812      	ldr	r2, [r2, #0]
 800f6c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6852      	ldr	r2, [r2, #4]
 800f6d0:	605a      	str	r2, [r3, #4]
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	f383 8810 	msr	PRIMASK, r3
}
 800f6dc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f6de:	bf00      	nop
 800f6e0:	371c      	adds	r7, #28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b086      	sub	sp, #24
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f6f4:	f3ef 8310 	mrs	r3, PRIMASK
 800f6f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f6fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f6fe:	b672      	cpsid	i
}
 800f700:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff ffca 	bl	800f6a8 <list_remove_node>
  (*node)->next = NULL;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2200      	movs	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2200      	movs	r2, #0
 800f722:	605a      	str	r2, [r3, #4]
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	f383 8810 	msr	PRIMASK, r3
}
 800f72e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f730:	bf00      	nop
 800f732:	3718      	adds	r7, #24
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f742:	f3ef 8310 	mrs	r3, PRIMASK
 800f746:	60fb      	str	r3, [r7, #12]
  return(result);
 800f748:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f74a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f74c:	b672      	cpsid	i
}
 800f74e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	685a      	ldr	r2, [r3, #4]
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7ff ffa3 	bl	800f6a8 <list_remove_node>
  (*node)->next = NULL;
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	2200      	movs	r2, #0
 800f768:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	2200      	movs	r2, #0
 800f770:	605a      	str	r2, [r3, #4]
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f776:	693b      	ldr	r3, [r7, #16]
 800f778:	f383 8810 	msr	PRIMASK, r3
}
 800f77c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800f77e:	bf00      	nop
 800f780:	3718      	adds	r7, #24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800f786:	b480      	push	{r7}
 800f788:	b089      	sub	sp, #36	; 0x24
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f792:	f3ef 8310 	mrs	r3, PRIMASK
 800f796:	613b      	str	r3, [r7, #16]
  return(result);
 800f798:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f79a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f79c:	b672      	cpsid	i
}
 800f79e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f7a6:	e005      	b.n	800f7b4 <list_get_size+0x2e>
  {
    size++;
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800f7b4:	69ba      	ldr	r2, [r7, #24]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d1f5      	bne.n	800f7a8 <list_get_size+0x22>
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f383 8810 	msr	PRIMASK, r3
}
 800f7c6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800f7c8:	69fb      	ldr	r3, [r7, #28]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3724      	adds	r7, #36	; 0x24
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr

0800f7d6 <atoi>:
 800f7d6:	220a      	movs	r2, #10
 800f7d8:	2100      	movs	r1, #0
 800f7da:	f000 b9f1 	b.w	800fbc0 <strtol>
	...

0800f7e0 <__errno>:
 800f7e0:	4b01      	ldr	r3, [pc, #4]	; (800f7e8 <__errno+0x8>)
 800f7e2:	6818      	ldr	r0, [r3, #0]
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	2000004c 	.word	0x2000004c

0800f7ec <__libc_init_array>:
 800f7ec:	b570      	push	{r4, r5, r6, lr}
 800f7ee:	4d0d      	ldr	r5, [pc, #52]	; (800f824 <__libc_init_array+0x38>)
 800f7f0:	4c0d      	ldr	r4, [pc, #52]	; (800f828 <__libc_init_array+0x3c>)
 800f7f2:	1b64      	subs	r4, r4, r5
 800f7f4:	10a4      	asrs	r4, r4, #2
 800f7f6:	2600      	movs	r6, #0
 800f7f8:	42a6      	cmp	r6, r4
 800f7fa:	d109      	bne.n	800f810 <__libc_init_array+0x24>
 800f7fc:	4d0b      	ldr	r5, [pc, #44]	; (800f82c <__libc_init_array+0x40>)
 800f7fe:	4c0c      	ldr	r4, [pc, #48]	; (800f830 <__libc_init_array+0x44>)
 800f800:	f001 fb90 	bl	8010f24 <_init>
 800f804:	1b64      	subs	r4, r4, r5
 800f806:	10a4      	asrs	r4, r4, #2
 800f808:	2600      	movs	r6, #0
 800f80a:	42a6      	cmp	r6, r4
 800f80c:	d105      	bne.n	800f81a <__libc_init_array+0x2e>
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
 800f810:	f855 3b04 	ldr.w	r3, [r5], #4
 800f814:	4798      	blx	r3
 800f816:	3601      	adds	r6, #1
 800f818:	e7ee      	b.n	800f7f8 <__libc_init_array+0xc>
 800f81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81e:	4798      	blx	r3
 800f820:	3601      	adds	r6, #1
 800f822:	e7f2      	b.n	800f80a <__libc_init_array+0x1e>
 800f824:	080117ac 	.word	0x080117ac
 800f828:	080117ac 	.word	0x080117ac
 800f82c:	080117ac 	.word	0x080117ac
 800f830:	080117b0 	.word	0x080117b0

0800f834 <memcpy>:
 800f834:	440a      	add	r2, r1
 800f836:	4291      	cmp	r1, r2
 800f838:	f100 33ff 	add.w	r3, r0, #4294967295
 800f83c:	d100      	bne.n	800f840 <memcpy+0xc>
 800f83e:	4770      	bx	lr
 800f840:	b510      	push	{r4, lr}
 800f842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f84a:	4291      	cmp	r1, r2
 800f84c:	d1f9      	bne.n	800f842 <memcpy+0xe>
 800f84e:	bd10      	pop	{r4, pc}

0800f850 <memset>:
 800f850:	4402      	add	r2, r0
 800f852:	4603      	mov	r3, r0
 800f854:	4293      	cmp	r3, r2
 800f856:	d100      	bne.n	800f85a <memset+0xa>
 800f858:	4770      	bx	lr
 800f85a:	f803 1b01 	strb.w	r1, [r3], #1
 800f85e:	e7f9      	b.n	800f854 <memset+0x4>

0800f860 <iprintf>:
 800f860:	b40f      	push	{r0, r1, r2, r3}
 800f862:	4b0a      	ldr	r3, [pc, #40]	; (800f88c <iprintf+0x2c>)
 800f864:	b513      	push	{r0, r1, r4, lr}
 800f866:	681c      	ldr	r4, [r3, #0]
 800f868:	b124      	cbz	r4, 800f874 <iprintf+0x14>
 800f86a:	69a3      	ldr	r3, [r4, #24]
 800f86c:	b913      	cbnz	r3, 800f874 <iprintf+0x14>
 800f86e:	4620      	mov	r0, r4
 800f870:	f000 fba8 	bl	800ffc4 <__sinit>
 800f874:	ab05      	add	r3, sp, #20
 800f876:	9a04      	ldr	r2, [sp, #16]
 800f878:	68a1      	ldr	r1, [r4, #8]
 800f87a:	9301      	str	r3, [sp, #4]
 800f87c:	4620      	mov	r0, r4
 800f87e:	f000 ff27 	bl	80106d0 <_vfiprintf_r>
 800f882:	b002      	add	sp, #8
 800f884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f888:	b004      	add	sp, #16
 800f88a:	4770      	bx	lr
 800f88c:	2000004c 	.word	0x2000004c

0800f890 <_puts_r>:
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	460e      	mov	r6, r1
 800f894:	4605      	mov	r5, r0
 800f896:	b118      	cbz	r0, 800f8a0 <_puts_r+0x10>
 800f898:	6983      	ldr	r3, [r0, #24]
 800f89a:	b90b      	cbnz	r3, 800f8a0 <_puts_r+0x10>
 800f89c:	f000 fb92 	bl	800ffc4 <__sinit>
 800f8a0:	69ab      	ldr	r3, [r5, #24]
 800f8a2:	68ac      	ldr	r4, [r5, #8]
 800f8a4:	b913      	cbnz	r3, 800f8ac <_puts_r+0x1c>
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f000 fb8c 	bl	800ffc4 <__sinit>
 800f8ac:	4b2c      	ldr	r3, [pc, #176]	; (800f960 <_puts_r+0xd0>)
 800f8ae:	429c      	cmp	r4, r3
 800f8b0:	d120      	bne.n	800f8f4 <_puts_r+0x64>
 800f8b2:	686c      	ldr	r4, [r5, #4]
 800f8b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8b6:	07db      	lsls	r3, r3, #31
 800f8b8:	d405      	bmi.n	800f8c6 <_puts_r+0x36>
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	0598      	lsls	r0, r3, #22
 800f8be:	d402      	bmi.n	800f8c6 <_puts_r+0x36>
 800f8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8c2:	f000 fc2f 	bl	8010124 <__retarget_lock_acquire_recursive>
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	0719      	lsls	r1, r3, #28
 800f8ca:	d51d      	bpl.n	800f908 <_puts_r+0x78>
 800f8cc:	6923      	ldr	r3, [r4, #16]
 800f8ce:	b1db      	cbz	r3, 800f908 <_puts_r+0x78>
 800f8d0:	3e01      	subs	r6, #1
 800f8d2:	68a3      	ldr	r3, [r4, #8]
 800f8d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f8d8:	3b01      	subs	r3, #1
 800f8da:	60a3      	str	r3, [r4, #8]
 800f8dc:	bb39      	cbnz	r1, 800f92e <_puts_r+0x9e>
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	da38      	bge.n	800f954 <_puts_r+0xc4>
 800f8e2:	4622      	mov	r2, r4
 800f8e4:	210a      	movs	r1, #10
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f000 f974 	bl	800fbd4 <__swbuf_r>
 800f8ec:	3001      	adds	r0, #1
 800f8ee:	d011      	beq.n	800f914 <_puts_r+0x84>
 800f8f0:	250a      	movs	r5, #10
 800f8f2:	e011      	b.n	800f918 <_puts_r+0x88>
 800f8f4:	4b1b      	ldr	r3, [pc, #108]	; (800f964 <_puts_r+0xd4>)
 800f8f6:	429c      	cmp	r4, r3
 800f8f8:	d101      	bne.n	800f8fe <_puts_r+0x6e>
 800f8fa:	68ac      	ldr	r4, [r5, #8]
 800f8fc:	e7da      	b.n	800f8b4 <_puts_r+0x24>
 800f8fe:	4b1a      	ldr	r3, [pc, #104]	; (800f968 <_puts_r+0xd8>)
 800f900:	429c      	cmp	r4, r3
 800f902:	bf08      	it	eq
 800f904:	68ec      	ldreq	r4, [r5, #12]
 800f906:	e7d5      	b.n	800f8b4 <_puts_r+0x24>
 800f908:	4621      	mov	r1, r4
 800f90a:	4628      	mov	r0, r5
 800f90c:	f000 f9b4 	bl	800fc78 <__swsetup_r>
 800f910:	2800      	cmp	r0, #0
 800f912:	d0dd      	beq.n	800f8d0 <_puts_r+0x40>
 800f914:	f04f 35ff 	mov.w	r5, #4294967295
 800f918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f91a:	07da      	lsls	r2, r3, #31
 800f91c:	d405      	bmi.n	800f92a <_puts_r+0x9a>
 800f91e:	89a3      	ldrh	r3, [r4, #12]
 800f920:	059b      	lsls	r3, r3, #22
 800f922:	d402      	bmi.n	800f92a <_puts_r+0x9a>
 800f924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f926:	f000 fbfe 	bl	8010126 <__retarget_lock_release_recursive>
 800f92a:	4628      	mov	r0, r5
 800f92c:	bd70      	pop	{r4, r5, r6, pc}
 800f92e:	2b00      	cmp	r3, #0
 800f930:	da04      	bge.n	800f93c <_puts_r+0xac>
 800f932:	69a2      	ldr	r2, [r4, #24]
 800f934:	429a      	cmp	r2, r3
 800f936:	dc06      	bgt.n	800f946 <_puts_r+0xb6>
 800f938:	290a      	cmp	r1, #10
 800f93a:	d004      	beq.n	800f946 <_puts_r+0xb6>
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	6022      	str	r2, [r4, #0]
 800f942:	7019      	strb	r1, [r3, #0]
 800f944:	e7c5      	b.n	800f8d2 <_puts_r+0x42>
 800f946:	4622      	mov	r2, r4
 800f948:	4628      	mov	r0, r5
 800f94a:	f000 f943 	bl	800fbd4 <__swbuf_r>
 800f94e:	3001      	adds	r0, #1
 800f950:	d1bf      	bne.n	800f8d2 <_puts_r+0x42>
 800f952:	e7df      	b.n	800f914 <_puts_r+0x84>
 800f954:	6823      	ldr	r3, [r4, #0]
 800f956:	250a      	movs	r5, #10
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	6022      	str	r2, [r4, #0]
 800f95c:	701d      	strb	r5, [r3, #0]
 800f95e:	e7db      	b.n	800f918 <_puts_r+0x88>
 800f960:	08011730 	.word	0x08011730
 800f964:	08011750 	.word	0x08011750
 800f968:	08011710 	.word	0x08011710

0800f96c <puts>:
 800f96c:	4b02      	ldr	r3, [pc, #8]	; (800f978 <puts+0xc>)
 800f96e:	4601      	mov	r1, r0
 800f970:	6818      	ldr	r0, [r3, #0]
 800f972:	f7ff bf8d 	b.w	800f890 <_puts_r>
 800f976:	bf00      	nop
 800f978:	2000004c 	.word	0x2000004c

0800f97c <srand>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	4b10      	ldr	r3, [pc, #64]	; (800f9c0 <srand+0x44>)
 800f980:	681d      	ldr	r5, [r3, #0]
 800f982:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f984:	4604      	mov	r4, r0
 800f986:	b9b3      	cbnz	r3, 800f9b6 <srand+0x3a>
 800f988:	2018      	movs	r0, #24
 800f98a:	f000 fc33 	bl	80101f4 <malloc>
 800f98e:	4602      	mov	r2, r0
 800f990:	63a8      	str	r0, [r5, #56]	; 0x38
 800f992:	b920      	cbnz	r0, 800f99e <srand+0x22>
 800f994:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <srand+0x48>)
 800f996:	480c      	ldr	r0, [pc, #48]	; (800f9c8 <srand+0x4c>)
 800f998:	2142      	movs	r1, #66	; 0x42
 800f99a:	f000 f9db 	bl	800fd54 <__assert_func>
 800f99e:	490b      	ldr	r1, [pc, #44]	; (800f9cc <srand+0x50>)
 800f9a0:	4b0b      	ldr	r3, [pc, #44]	; (800f9d0 <srand+0x54>)
 800f9a2:	e9c0 1300 	strd	r1, r3, [r0]
 800f9a6:	4b0b      	ldr	r3, [pc, #44]	; (800f9d4 <srand+0x58>)
 800f9a8:	6083      	str	r3, [r0, #8]
 800f9aa:	230b      	movs	r3, #11
 800f9ac:	8183      	strh	r3, [r0, #12]
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f9b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	611c      	str	r4, [r3, #16]
 800f9bc:	615a      	str	r2, [r3, #20]
 800f9be:	bd38      	pop	{r3, r4, r5, pc}
 800f9c0:	2000004c 	.word	0x2000004c
 800f9c4:	08011560 	.word	0x08011560
 800f9c8:	08011577 	.word	0x08011577
 800f9cc:	abcd330e 	.word	0xabcd330e
 800f9d0:	e66d1234 	.word	0xe66d1234
 800f9d4:	0005deec 	.word	0x0005deec

0800f9d8 <rand>:
 800f9d8:	4b16      	ldr	r3, [pc, #88]	; (800fa34 <rand+0x5c>)
 800f9da:	b510      	push	{r4, lr}
 800f9dc:	681c      	ldr	r4, [r3, #0]
 800f9de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f9e0:	b9b3      	cbnz	r3, 800fa10 <rand+0x38>
 800f9e2:	2018      	movs	r0, #24
 800f9e4:	f000 fc06 	bl	80101f4 <malloc>
 800f9e8:	63a0      	str	r0, [r4, #56]	; 0x38
 800f9ea:	b928      	cbnz	r0, 800f9f8 <rand+0x20>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	4b12      	ldr	r3, [pc, #72]	; (800fa38 <rand+0x60>)
 800f9f0:	4812      	ldr	r0, [pc, #72]	; (800fa3c <rand+0x64>)
 800f9f2:	214e      	movs	r1, #78	; 0x4e
 800f9f4:	f000 f9ae 	bl	800fd54 <__assert_func>
 800f9f8:	4a11      	ldr	r2, [pc, #68]	; (800fa40 <rand+0x68>)
 800f9fa:	4b12      	ldr	r3, [pc, #72]	; (800fa44 <rand+0x6c>)
 800f9fc:	e9c0 2300 	strd	r2, r3, [r0]
 800fa00:	4b11      	ldr	r3, [pc, #68]	; (800fa48 <rand+0x70>)
 800fa02:	6083      	str	r3, [r0, #8]
 800fa04:	230b      	movs	r3, #11
 800fa06:	8183      	strh	r3, [r0, #12]
 800fa08:	2201      	movs	r2, #1
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fa10:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fa12:	4a0e      	ldr	r2, [pc, #56]	; (800fa4c <rand+0x74>)
 800fa14:	6920      	ldr	r0, [r4, #16]
 800fa16:	6963      	ldr	r3, [r4, #20]
 800fa18:	490d      	ldr	r1, [pc, #52]	; (800fa50 <rand+0x78>)
 800fa1a:	4342      	muls	r2, r0
 800fa1c:	fb01 2203 	mla	r2, r1, r3, r2
 800fa20:	fba0 0101 	umull	r0, r1, r0, r1
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	eb42 0001 	adc.w	r0, r2, r1
 800fa2a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fa2e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fa32:	bd10      	pop	{r4, pc}
 800fa34:	2000004c 	.word	0x2000004c
 800fa38:	08011560 	.word	0x08011560
 800fa3c:	08011577 	.word	0x08011577
 800fa40:	abcd330e 	.word	0xabcd330e
 800fa44:	e66d1234 	.word	0xe66d1234
 800fa48:	0005deec 	.word	0x0005deec
 800fa4c:	5851f42d 	.word	0x5851f42d
 800fa50:	4c957f2d 	.word	0x4c957f2d

0800fa54 <siprintf>:
 800fa54:	b40e      	push	{r1, r2, r3}
 800fa56:	b500      	push	{lr}
 800fa58:	b09c      	sub	sp, #112	; 0x70
 800fa5a:	ab1d      	add	r3, sp, #116	; 0x74
 800fa5c:	9002      	str	r0, [sp, #8]
 800fa5e:	9006      	str	r0, [sp, #24]
 800fa60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fa64:	4809      	ldr	r0, [pc, #36]	; (800fa8c <siprintf+0x38>)
 800fa66:	9107      	str	r1, [sp, #28]
 800fa68:	9104      	str	r1, [sp, #16]
 800fa6a:	4909      	ldr	r1, [pc, #36]	; (800fa90 <siprintf+0x3c>)
 800fa6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa70:	9105      	str	r1, [sp, #20]
 800fa72:	6800      	ldr	r0, [r0, #0]
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	a902      	add	r1, sp, #8
 800fa78:	f000 fd00 	bl	801047c <_svfiprintf_r>
 800fa7c:	9b02      	ldr	r3, [sp, #8]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	701a      	strb	r2, [r3, #0]
 800fa82:	b01c      	add	sp, #112	; 0x70
 800fa84:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa88:	b003      	add	sp, #12
 800fa8a:	4770      	bx	lr
 800fa8c:	2000004c 	.word	0x2000004c
 800fa90:	ffff0208 	.word	0xffff0208

0800fa94 <strncmp>:
 800fa94:	b510      	push	{r4, lr}
 800fa96:	b17a      	cbz	r2, 800fab8 <strncmp+0x24>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	3901      	subs	r1, #1
 800fa9c:	1884      	adds	r4, r0, r2
 800fa9e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800faa2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800faa6:	4290      	cmp	r0, r2
 800faa8:	d101      	bne.n	800faae <strncmp+0x1a>
 800faaa:	42a3      	cmp	r3, r4
 800faac:	d101      	bne.n	800fab2 <strncmp+0x1e>
 800faae:	1a80      	subs	r0, r0, r2
 800fab0:	bd10      	pop	{r4, pc}
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d1f3      	bne.n	800fa9e <strncmp+0xa>
 800fab6:	e7fa      	b.n	800faae <strncmp+0x1a>
 800fab8:	4610      	mov	r0, r2
 800faba:	e7f9      	b.n	800fab0 <strncmp+0x1c>

0800fabc <_strtol_l.constprop.0>:
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac2:	d001      	beq.n	800fac8 <_strtol_l.constprop.0+0xc>
 800fac4:	2b24      	cmp	r3, #36	; 0x24
 800fac6:	d906      	bls.n	800fad6 <_strtol_l.constprop.0+0x1a>
 800fac8:	f7ff fe8a 	bl	800f7e0 <__errno>
 800facc:	2316      	movs	r3, #22
 800face:	6003      	str	r3, [r0, #0]
 800fad0:	2000      	movs	r0, #0
 800fad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fbbc <_strtol_l.constprop.0+0x100>
 800fada:	460d      	mov	r5, r1
 800fadc:	462e      	mov	r6, r5
 800fade:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fae2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fae6:	f017 0708 	ands.w	r7, r7, #8
 800faea:	d1f7      	bne.n	800fadc <_strtol_l.constprop.0+0x20>
 800faec:	2c2d      	cmp	r4, #45	; 0x2d
 800faee:	d132      	bne.n	800fb56 <_strtol_l.constprop.0+0x9a>
 800faf0:	782c      	ldrb	r4, [r5, #0]
 800faf2:	2701      	movs	r7, #1
 800faf4:	1cb5      	adds	r5, r6, #2
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d05b      	beq.n	800fbb2 <_strtol_l.constprop.0+0xf6>
 800fafa:	2b10      	cmp	r3, #16
 800fafc:	d109      	bne.n	800fb12 <_strtol_l.constprop.0+0x56>
 800fafe:	2c30      	cmp	r4, #48	; 0x30
 800fb00:	d107      	bne.n	800fb12 <_strtol_l.constprop.0+0x56>
 800fb02:	782c      	ldrb	r4, [r5, #0]
 800fb04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fb08:	2c58      	cmp	r4, #88	; 0x58
 800fb0a:	d14d      	bne.n	800fba8 <_strtol_l.constprop.0+0xec>
 800fb0c:	786c      	ldrb	r4, [r5, #1]
 800fb0e:	2310      	movs	r3, #16
 800fb10:	3502      	adds	r5, #2
 800fb12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fb16:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb1a:	f04f 0c00 	mov.w	ip, #0
 800fb1e:	fbb8 f9f3 	udiv	r9, r8, r3
 800fb22:	4666      	mov	r6, ip
 800fb24:	fb03 8a19 	mls	sl, r3, r9, r8
 800fb28:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fb2c:	f1be 0f09 	cmp.w	lr, #9
 800fb30:	d816      	bhi.n	800fb60 <_strtol_l.constprop.0+0xa4>
 800fb32:	4674      	mov	r4, lr
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	dd24      	ble.n	800fb82 <_strtol_l.constprop.0+0xc6>
 800fb38:	f1bc 0f00 	cmp.w	ip, #0
 800fb3c:	db1e      	blt.n	800fb7c <_strtol_l.constprop.0+0xc0>
 800fb3e:	45b1      	cmp	r9, r6
 800fb40:	d31c      	bcc.n	800fb7c <_strtol_l.constprop.0+0xc0>
 800fb42:	d101      	bne.n	800fb48 <_strtol_l.constprop.0+0x8c>
 800fb44:	45a2      	cmp	sl, r4
 800fb46:	db19      	blt.n	800fb7c <_strtol_l.constprop.0+0xc0>
 800fb48:	fb06 4603 	mla	r6, r6, r3, r4
 800fb4c:	f04f 0c01 	mov.w	ip, #1
 800fb50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb54:	e7e8      	b.n	800fb28 <_strtol_l.constprop.0+0x6c>
 800fb56:	2c2b      	cmp	r4, #43	; 0x2b
 800fb58:	bf04      	itt	eq
 800fb5a:	782c      	ldrbeq	r4, [r5, #0]
 800fb5c:	1cb5      	addeq	r5, r6, #2
 800fb5e:	e7ca      	b.n	800faf6 <_strtol_l.constprop.0+0x3a>
 800fb60:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fb64:	f1be 0f19 	cmp.w	lr, #25
 800fb68:	d801      	bhi.n	800fb6e <_strtol_l.constprop.0+0xb2>
 800fb6a:	3c37      	subs	r4, #55	; 0x37
 800fb6c:	e7e2      	b.n	800fb34 <_strtol_l.constprop.0+0x78>
 800fb6e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fb72:	f1be 0f19 	cmp.w	lr, #25
 800fb76:	d804      	bhi.n	800fb82 <_strtol_l.constprop.0+0xc6>
 800fb78:	3c57      	subs	r4, #87	; 0x57
 800fb7a:	e7db      	b.n	800fb34 <_strtol_l.constprop.0+0x78>
 800fb7c:	f04f 3cff 	mov.w	ip, #4294967295
 800fb80:	e7e6      	b.n	800fb50 <_strtol_l.constprop.0+0x94>
 800fb82:	f1bc 0f00 	cmp.w	ip, #0
 800fb86:	da05      	bge.n	800fb94 <_strtol_l.constprop.0+0xd8>
 800fb88:	2322      	movs	r3, #34	; 0x22
 800fb8a:	6003      	str	r3, [r0, #0]
 800fb8c:	4646      	mov	r6, r8
 800fb8e:	b942      	cbnz	r2, 800fba2 <_strtol_l.constprop.0+0xe6>
 800fb90:	4630      	mov	r0, r6
 800fb92:	e79e      	b.n	800fad2 <_strtol_l.constprop.0+0x16>
 800fb94:	b107      	cbz	r7, 800fb98 <_strtol_l.constprop.0+0xdc>
 800fb96:	4276      	negs	r6, r6
 800fb98:	2a00      	cmp	r2, #0
 800fb9a:	d0f9      	beq.n	800fb90 <_strtol_l.constprop.0+0xd4>
 800fb9c:	f1bc 0f00 	cmp.w	ip, #0
 800fba0:	d000      	beq.n	800fba4 <_strtol_l.constprop.0+0xe8>
 800fba2:	1e69      	subs	r1, r5, #1
 800fba4:	6011      	str	r1, [r2, #0]
 800fba6:	e7f3      	b.n	800fb90 <_strtol_l.constprop.0+0xd4>
 800fba8:	2430      	movs	r4, #48	; 0x30
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1b1      	bne.n	800fb12 <_strtol_l.constprop.0+0x56>
 800fbae:	2308      	movs	r3, #8
 800fbb0:	e7af      	b.n	800fb12 <_strtol_l.constprop.0+0x56>
 800fbb2:	2c30      	cmp	r4, #48	; 0x30
 800fbb4:	d0a5      	beq.n	800fb02 <_strtol_l.constprop.0+0x46>
 800fbb6:	230a      	movs	r3, #10
 800fbb8:	e7ab      	b.n	800fb12 <_strtol_l.constprop.0+0x56>
 800fbba:	bf00      	nop
 800fbbc:	0801160f 	.word	0x0801160f

0800fbc0 <strtol>:
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	460a      	mov	r2, r1
 800fbc4:	4601      	mov	r1, r0
 800fbc6:	4802      	ldr	r0, [pc, #8]	; (800fbd0 <strtol+0x10>)
 800fbc8:	6800      	ldr	r0, [r0, #0]
 800fbca:	f7ff bf77 	b.w	800fabc <_strtol_l.constprop.0>
 800fbce:	bf00      	nop
 800fbd0:	2000004c 	.word	0x2000004c

0800fbd4 <__swbuf_r>:
 800fbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd6:	460e      	mov	r6, r1
 800fbd8:	4614      	mov	r4, r2
 800fbda:	4605      	mov	r5, r0
 800fbdc:	b118      	cbz	r0, 800fbe6 <__swbuf_r+0x12>
 800fbde:	6983      	ldr	r3, [r0, #24]
 800fbe0:	b90b      	cbnz	r3, 800fbe6 <__swbuf_r+0x12>
 800fbe2:	f000 f9ef 	bl	800ffc4 <__sinit>
 800fbe6:	4b21      	ldr	r3, [pc, #132]	; (800fc6c <__swbuf_r+0x98>)
 800fbe8:	429c      	cmp	r4, r3
 800fbea:	d12b      	bne.n	800fc44 <__swbuf_r+0x70>
 800fbec:	686c      	ldr	r4, [r5, #4]
 800fbee:	69a3      	ldr	r3, [r4, #24]
 800fbf0:	60a3      	str	r3, [r4, #8]
 800fbf2:	89a3      	ldrh	r3, [r4, #12]
 800fbf4:	071a      	lsls	r2, r3, #28
 800fbf6:	d52f      	bpl.n	800fc58 <__swbuf_r+0x84>
 800fbf8:	6923      	ldr	r3, [r4, #16]
 800fbfa:	b36b      	cbz	r3, 800fc58 <__swbuf_r+0x84>
 800fbfc:	6923      	ldr	r3, [r4, #16]
 800fbfe:	6820      	ldr	r0, [r4, #0]
 800fc00:	1ac0      	subs	r0, r0, r3
 800fc02:	6963      	ldr	r3, [r4, #20]
 800fc04:	b2f6      	uxtb	r6, r6
 800fc06:	4283      	cmp	r3, r0
 800fc08:	4637      	mov	r7, r6
 800fc0a:	dc04      	bgt.n	800fc16 <__swbuf_r+0x42>
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f000 f944 	bl	800fe9c <_fflush_r>
 800fc14:	bb30      	cbnz	r0, 800fc64 <__swbuf_r+0x90>
 800fc16:	68a3      	ldr	r3, [r4, #8]
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	60a3      	str	r3, [r4, #8]
 800fc1c:	6823      	ldr	r3, [r4, #0]
 800fc1e:	1c5a      	adds	r2, r3, #1
 800fc20:	6022      	str	r2, [r4, #0]
 800fc22:	701e      	strb	r6, [r3, #0]
 800fc24:	6963      	ldr	r3, [r4, #20]
 800fc26:	3001      	adds	r0, #1
 800fc28:	4283      	cmp	r3, r0
 800fc2a:	d004      	beq.n	800fc36 <__swbuf_r+0x62>
 800fc2c:	89a3      	ldrh	r3, [r4, #12]
 800fc2e:	07db      	lsls	r3, r3, #31
 800fc30:	d506      	bpl.n	800fc40 <__swbuf_r+0x6c>
 800fc32:	2e0a      	cmp	r6, #10
 800fc34:	d104      	bne.n	800fc40 <__swbuf_r+0x6c>
 800fc36:	4621      	mov	r1, r4
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f000 f92f 	bl	800fe9c <_fflush_r>
 800fc3e:	b988      	cbnz	r0, 800fc64 <__swbuf_r+0x90>
 800fc40:	4638      	mov	r0, r7
 800fc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc44:	4b0a      	ldr	r3, [pc, #40]	; (800fc70 <__swbuf_r+0x9c>)
 800fc46:	429c      	cmp	r4, r3
 800fc48:	d101      	bne.n	800fc4e <__swbuf_r+0x7a>
 800fc4a:	68ac      	ldr	r4, [r5, #8]
 800fc4c:	e7cf      	b.n	800fbee <__swbuf_r+0x1a>
 800fc4e:	4b09      	ldr	r3, [pc, #36]	; (800fc74 <__swbuf_r+0xa0>)
 800fc50:	429c      	cmp	r4, r3
 800fc52:	bf08      	it	eq
 800fc54:	68ec      	ldreq	r4, [r5, #12]
 800fc56:	e7ca      	b.n	800fbee <__swbuf_r+0x1a>
 800fc58:	4621      	mov	r1, r4
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f80c 	bl	800fc78 <__swsetup_r>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d0cb      	beq.n	800fbfc <__swbuf_r+0x28>
 800fc64:	f04f 37ff 	mov.w	r7, #4294967295
 800fc68:	e7ea      	b.n	800fc40 <__swbuf_r+0x6c>
 800fc6a:	bf00      	nop
 800fc6c:	08011730 	.word	0x08011730
 800fc70:	08011750 	.word	0x08011750
 800fc74:	08011710 	.word	0x08011710

0800fc78 <__swsetup_r>:
 800fc78:	4b32      	ldr	r3, [pc, #200]	; (800fd44 <__swsetup_r+0xcc>)
 800fc7a:	b570      	push	{r4, r5, r6, lr}
 800fc7c:	681d      	ldr	r5, [r3, #0]
 800fc7e:	4606      	mov	r6, r0
 800fc80:	460c      	mov	r4, r1
 800fc82:	b125      	cbz	r5, 800fc8e <__swsetup_r+0x16>
 800fc84:	69ab      	ldr	r3, [r5, #24]
 800fc86:	b913      	cbnz	r3, 800fc8e <__swsetup_r+0x16>
 800fc88:	4628      	mov	r0, r5
 800fc8a:	f000 f99b 	bl	800ffc4 <__sinit>
 800fc8e:	4b2e      	ldr	r3, [pc, #184]	; (800fd48 <__swsetup_r+0xd0>)
 800fc90:	429c      	cmp	r4, r3
 800fc92:	d10f      	bne.n	800fcb4 <__swsetup_r+0x3c>
 800fc94:	686c      	ldr	r4, [r5, #4]
 800fc96:	89a3      	ldrh	r3, [r4, #12]
 800fc98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc9c:	0719      	lsls	r1, r3, #28
 800fc9e:	d42c      	bmi.n	800fcfa <__swsetup_r+0x82>
 800fca0:	06dd      	lsls	r5, r3, #27
 800fca2:	d411      	bmi.n	800fcc8 <__swsetup_r+0x50>
 800fca4:	2309      	movs	r3, #9
 800fca6:	6033      	str	r3, [r6, #0]
 800fca8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fcac:	81a3      	strh	r3, [r4, #12]
 800fcae:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb2:	e03e      	b.n	800fd32 <__swsetup_r+0xba>
 800fcb4:	4b25      	ldr	r3, [pc, #148]	; (800fd4c <__swsetup_r+0xd4>)
 800fcb6:	429c      	cmp	r4, r3
 800fcb8:	d101      	bne.n	800fcbe <__swsetup_r+0x46>
 800fcba:	68ac      	ldr	r4, [r5, #8]
 800fcbc:	e7eb      	b.n	800fc96 <__swsetup_r+0x1e>
 800fcbe:	4b24      	ldr	r3, [pc, #144]	; (800fd50 <__swsetup_r+0xd8>)
 800fcc0:	429c      	cmp	r4, r3
 800fcc2:	bf08      	it	eq
 800fcc4:	68ec      	ldreq	r4, [r5, #12]
 800fcc6:	e7e6      	b.n	800fc96 <__swsetup_r+0x1e>
 800fcc8:	0758      	lsls	r0, r3, #29
 800fcca:	d512      	bpl.n	800fcf2 <__swsetup_r+0x7a>
 800fccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcce:	b141      	cbz	r1, 800fce2 <__swsetup_r+0x6a>
 800fcd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcd4:	4299      	cmp	r1, r3
 800fcd6:	d002      	beq.n	800fcde <__swsetup_r+0x66>
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f000 fa93 	bl	8010204 <_free_r>
 800fcde:	2300      	movs	r3, #0
 800fce0:	6363      	str	r3, [r4, #52]	; 0x34
 800fce2:	89a3      	ldrh	r3, [r4, #12]
 800fce4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fce8:	81a3      	strh	r3, [r4, #12]
 800fcea:	2300      	movs	r3, #0
 800fcec:	6063      	str	r3, [r4, #4]
 800fcee:	6923      	ldr	r3, [r4, #16]
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	89a3      	ldrh	r3, [r4, #12]
 800fcf4:	f043 0308 	orr.w	r3, r3, #8
 800fcf8:	81a3      	strh	r3, [r4, #12]
 800fcfa:	6923      	ldr	r3, [r4, #16]
 800fcfc:	b94b      	cbnz	r3, 800fd12 <__swsetup_r+0x9a>
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd08:	d003      	beq.n	800fd12 <__swsetup_r+0x9a>
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	f000 fa31 	bl	8010174 <__smakebuf_r>
 800fd12:	89a0      	ldrh	r0, [r4, #12]
 800fd14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd18:	f010 0301 	ands.w	r3, r0, #1
 800fd1c:	d00a      	beq.n	800fd34 <__swsetup_r+0xbc>
 800fd1e:	2300      	movs	r3, #0
 800fd20:	60a3      	str	r3, [r4, #8]
 800fd22:	6963      	ldr	r3, [r4, #20]
 800fd24:	425b      	negs	r3, r3
 800fd26:	61a3      	str	r3, [r4, #24]
 800fd28:	6923      	ldr	r3, [r4, #16]
 800fd2a:	b943      	cbnz	r3, 800fd3e <__swsetup_r+0xc6>
 800fd2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd30:	d1ba      	bne.n	800fca8 <__swsetup_r+0x30>
 800fd32:	bd70      	pop	{r4, r5, r6, pc}
 800fd34:	0781      	lsls	r1, r0, #30
 800fd36:	bf58      	it	pl
 800fd38:	6963      	ldrpl	r3, [r4, #20]
 800fd3a:	60a3      	str	r3, [r4, #8]
 800fd3c:	e7f4      	b.n	800fd28 <__swsetup_r+0xb0>
 800fd3e:	2000      	movs	r0, #0
 800fd40:	e7f7      	b.n	800fd32 <__swsetup_r+0xba>
 800fd42:	bf00      	nop
 800fd44:	2000004c 	.word	0x2000004c
 800fd48:	08011730 	.word	0x08011730
 800fd4c:	08011750 	.word	0x08011750
 800fd50:	08011710 	.word	0x08011710

0800fd54 <__assert_func>:
 800fd54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd56:	4614      	mov	r4, r2
 800fd58:	461a      	mov	r2, r3
 800fd5a:	4b09      	ldr	r3, [pc, #36]	; (800fd80 <__assert_func+0x2c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4605      	mov	r5, r0
 800fd60:	68d8      	ldr	r0, [r3, #12]
 800fd62:	b14c      	cbz	r4, 800fd78 <__assert_func+0x24>
 800fd64:	4b07      	ldr	r3, [pc, #28]	; (800fd84 <__assert_func+0x30>)
 800fd66:	9100      	str	r1, [sp, #0]
 800fd68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd6c:	4906      	ldr	r1, [pc, #24]	; (800fd88 <__assert_func+0x34>)
 800fd6e:	462b      	mov	r3, r5
 800fd70:	f000 f9a6 	bl	80100c0 <fiprintf>
 800fd74:	f000 ffd6 	bl	8010d24 <abort>
 800fd78:	4b04      	ldr	r3, [pc, #16]	; (800fd8c <__assert_func+0x38>)
 800fd7a:	461c      	mov	r4, r3
 800fd7c:	e7f3      	b.n	800fd66 <__assert_func+0x12>
 800fd7e:	bf00      	nop
 800fd80:	2000004c 	.word	0x2000004c
 800fd84:	080115d2 	.word	0x080115d2
 800fd88:	080115df 	.word	0x080115df
 800fd8c:	0801160d 	.word	0x0801160d

0800fd90 <__sflush_r>:
 800fd90:	898a      	ldrh	r2, [r1, #12]
 800fd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd96:	4605      	mov	r5, r0
 800fd98:	0710      	lsls	r0, r2, #28
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	d458      	bmi.n	800fe50 <__sflush_r+0xc0>
 800fd9e:	684b      	ldr	r3, [r1, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	dc05      	bgt.n	800fdb0 <__sflush_r+0x20>
 800fda4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	dc02      	bgt.n	800fdb0 <__sflush_r+0x20>
 800fdaa:	2000      	movs	r0, #0
 800fdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdb2:	2e00      	cmp	r6, #0
 800fdb4:	d0f9      	beq.n	800fdaa <__sflush_r+0x1a>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdbc:	682f      	ldr	r7, [r5, #0]
 800fdbe:	602b      	str	r3, [r5, #0]
 800fdc0:	d032      	beq.n	800fe28 <__sflush_r+0x98>
 800fdc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	075a      	lsls	r2, r3, #29
 800fdc8:	d505      	bpl.n	800fdd6 <__sflush_r+0x46>
 800fdca:	6863      	ldr	r3, [r4, #4]
 800fdcc:	1ac0      	subs	r0, r0, r3
 800fdce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdd0:	b10b      	cbz	r3, 800fdd6 <__sflush_r+0x46>
 800fdd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdd4:	1ac0      	subs	r0, r0, r3
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	4602      	mov	r2, r0
 800fdda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fddc:	6a21      	ldr	r1, [r4, #32]
 800fdde:	4628      	mov	r0, r5
 800fde0:	47b0      	blx	r6
 800fde2:	1c43      	adds	r3, r0, #1
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	d106      	bne.n	800fdf6 <__sflush_r+0x66>
 800fde8:	6829      	ldr	r1, [r5, #0]
 800fdea:	291d      	cmp	r1, #29
 800fdec:	d82c      	bhi.n	800fe48 <__sflush_r+0xb8>
 800fdee:	4a2a      	ldr	r2, [pc, #168]	; (800fe98 <__sflush_r+0x108>)
 800fdf0:	40ca      	lsrs	r2, r1
 800fdf2:	07d6      	lsls	r6, r2, #31
 800fdf4:	d528      	bpl.n	800fe48 <__sflush_r+0xb8>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	6062      	str	r2, [r4, #4]
 800fdfa:	04d9      	lsls	r1, r3, #19
 800fdfc:	6922      	ldr	r2, [r4, #16]
 800fdfe:	6022      	str	r2, [r4, #0]
 800fe00:	d504      	bpl.n	800fe0c <__sflush_r+0x7c>
 800fe02:	1c42      	adds	r2, r0, #1
 800fe04:	d101      	bne.n	800fe0a <__sflush_r+0x7a>
 800fe06:	682b      	ldr	r3, [r5, #0]
 800fe08:	b903      	cbnz	r3, 800fe0c <__sflush_r+0x7c>
 800fe0a:	6560      	str	r0, [r4, #84]	; 0x54
 800fe0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe0e:	602f      	str	r7, [r5, #0]
 800fe10:	2900      	cmp	r1, #0
 800fe12:	d0ca      	beq.n	800fdaa <__sflush_r+0x1a>
 800fe14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe18:	4299      	cmp	r1, r3
 800fe1a:	d002      	beq.n	800fe22 <__sflush_r+0x92>
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f000 f9f1 	bl	8010204 <_free_r>
 800fe22:	2000      	movs	r0, #0
 800fe24:	6360      	str	r0, [r4, #52]	; 0x34
 800fe26:	e7c1      	b.n	800fdac <__sflush_r+0x1c>
 800fe28:	6a21      	ldr	r1, [r4, #32]
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	47b0      	blx	r6
 800fe30:	1c41      	adds	r1, r0, #1
 800fe32:	d1c7      	bne.n	800fdc4 <__sflush_r+0x34>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d0c4      	beq.n	800fdc4 <__sflush_r+0x34>
 800fe3a:	2b1d      	cmp	r3, #29
 800fe3c:	d001      	beq.n	800fe42 <__sflush_r+0xb2>
 800fe3e:	2b16      	cmp	r3, #22
 800fe40:	d101      	bne.n	800fe46 <__sflush_r+0xb6>
 800fe42:	602f      	str	r7, [r5, #0]
 800fe44:	e7b1      	b.n	800fdaa <__sflush_r+0x1a>
 800fe46:	89a3      	ldrh	r3, [r4, #12]
 800fe48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4c:	81a3      	strh	r3, [r4, #12]
 800fe4e:	e7ad      	b.n	800fdac <__sflush_r+0x1c>
 800fe50:	690f      	ldr	r7, [r1, #16]
 800fe52:	2f00      	cmp	r7, #0
 800fe54:	d0a9      	beq.n	800fdaa <__sflush_r+0x1a>
 800fe56:	0793      	lsls	r3, r2, #30
 800fe58:	680e      	ldr	r6, [r1, #0]
 800fe5a:	bf08      	it	eq
 800fe5c:	694b      	ldreq	r3, [r1, #20]
 800fe5e:	600f      	str	r7, [r1, #0]
 800fe60:	bf18      	it	ne
 800fe62:	2300      	movne	r3, #0
 800fe64:	eba6 0807 	sub.w	r8, r6, r7
 800fe68:	608b      	str	r3, [r1, #8]
 800fe6a:	f1b8 0f00 	cmp.w	r8, #0
 800fe6e:	dd9c      	ble.n	800fdaa <__sflush_r+0x1a>
 800fe70:	6a21      	ldr	r1, [r4, #32]
 800fe72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe74:	4643      	mov	r3, r8
 800fe76:	463a      	mov	r2, r7
 800fe78:	4628      	mov	r0, r5
 800fe7a:	47b0      	blx	r6
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	dc06      	bgt.n	800fe8e <__sflush_r+0xfe>
 800fe80:	89a3      	ldrh	r3, [r4, #12]
 800fe82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe86:	81a3      	strh	r3, [r4, #12]
 800fe88:	f04f 30ff 	mov.w	r0, #4294967295
 800fe8c:	e78e      	b.n	800fdac <__sflush_r+0x1c>
 800fe8e:	4407      	add	r7, r0
 800fe90:	eba8 0800 	sub.w	r8, r8, r0
 800fe94:	e7e9      	b.n	800fe6a <__sflush_r+0xda>
 800fe96:	bf00      	nop
 800fe98:	20400001 	.word	0x20400001

0800fe9c <_fflush_r>:
 800fe9c:	b538      	push	{r3, r4, r5, lr}
 800fe9e:	690b      	ldr	r3, [r1, #16]
 800fea0:	4605      	mov	r5, r0
 800fea2:	460c      	mov	r4, r1
 800fea4:	b913      	cbnz	r3, 800feac <_fflush_r+0x10>
 800fea6:	2500      	movs	r5, #0
 800fea8:	4628      	mov	r0, r5
 800feaa:	bd38      	pop	{r3, r4, r5, pc}
 800feac:	b118      	cbz	r0, 800feb6 <_fflush_r+0x1a>
 800feae:	6983      	ldr	r3, [r0, #24]
 800feb0:	b90b      	cbnz	r3, 800feb6 <_fflush_r+0x1a>
 800feb2:	f000 f887 	bl	800ffc4 <__sinit>
 800feb6:	4b14      	ldr	r3, [pc, #80]	; (800ff08 <_fflush_r+0x6c>)
 800feb8:	429c      	cmp	r4, r3
 800feba:	d11b      	bne.n	800fef4 <_fflush_r+0x58>
 800febc:	686c      	ldr	r4, [r5, #4]
 800febe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d0ef      	beq.n	800fea6 <_fflush_r+0xa>
 800fec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fec8:	07d0      	lsls	r0, r2, #31
 800feca:	d404      	bmi.n	800fed6 <_fflush_r+0x3a>
 800fecc:	0599      	lsls	r1, r3, #22
 800fece:	d402      	bmi.n	800fed6 <_fflush_r+0x3a>
 800fed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fed2:	f000 f927 	bl	8010124 <__retarget_lock_acquire_recursive>
 800fed6:	4628      	mov	r0, r5
 800fed8:	4621      	mov	r1, r4
 800feda:	f7ff ff59 	bl	800fd90 <__sflush_r>
 800fede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fee0:	07da      	lsls	r2, r3, #31
 800fee2:	4605      	mov	r5, r0
 800fee4:	d4e0      	bmi.n	800fea8 <_fflush_r+0xc>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	059b      	lsls	r3, r3, #22
 800feea:	d4dd      	bmi.n	800fea8 <_fflush_r+0xc>
 800feec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feee:	f000 f91a 	bl	8010126 <__retarget_lock_release_recursive>
 800fef2:	e7d9      	b.n	800fea8 <_fflush_r+0xc>
 800fef4:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <_fflush_r+0x70>)
 800fef6:	429c      	cmp	r4, r3
 800fef8:	d101      	bne.n	800fefe <_fflush_r+0x62>
 800fefa:	68ac      	ldr	r4, [r5, #8]
 800fefc:	e7df      	b.n	800febe <_fflush_r+0x22>
 800fefe:	4b04      	ldr	r3, [pc, #16]	; (800ff10 <_fflush_r+0x74>)
 800ff00:	429c      	cmp	r4, r3
 800ff02:	bf08      	it	eq
 800ff04:	68ec      	ldreq	r4, [r5, #12]
 800ff06:	e7da      	b.n	800febe <_fflush_r+0x22>
 800ff08:	08011730 	.word	0x08011730
 800ff0c:	08011750 	.word	0x08011750
 800ff10:	08011710 	.word	0x08011710

0800ff14 <std>:
 800ff14:	2300      	movs	r3, #0
 800ff16:	b510      	push	{r4, lr}
 800ff18:	4604      	mov	r4, r0
 800ff1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ff1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff22:	6083      	str	r3, [r0, #8]
 800ff24:	8181      	strh	r1, [r0, #12]
 800ff26:	6643      	str	r3, [r0, #100]	; 0x64
 800ff28:	81c2      	strh	r2, [r0, #14]
 800ff2a:	6183      	str	r3, [r0, #24]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	2208      	movs	r2, #8
 800ff30:	305c      	adds	r0, #92	; 0x5c
 800ff32:	f7ff fc8d 	bl	800f850 <memset>
 800ff36:	4b05      	ldr	r3, [pc, #20]	; (800ff4c <std+0x38>)
 800ff38:	6263      	str	r3, [r4, #36]	; 0x24
 800ff3a:	4b05      	ldr	r3, [pc, #20]	; (800ff50 <std+0x3c>)
 800ff3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff3e:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <std+0x40>)
 800ff40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff42:	4b05      	ldr	r3, [pc, #20]	; (800ff58 <std+0x44>)
 800ff44:	6224      	str	r4, [r4, #32]
 800ff46:	6323      	str	r3, [r4, #48]	; 0x30
 800ff48:	bd10      	pop	{r4, pc}
 800ff4a:	bf00      	nop
 800ff4c:	08010c79 	.word	0x08010c79
 800ff50:	08010c9b 	.word	0x08010c9b
 800ff54:	08010cd3 	.word	0x08010cd3
 800ff58:	08010cf7 	.word	0x08010cf7

0800ff5c <_cleanup_r>:
 800ff5c:	4901      	ldr	r1, [pc, #4]	; (800ff64 <_cleanup_r+0x8>)
 800ff5e:	f000 b8c1 	b.w	80100e4 <_fwalk_reent>
 800ff62:	bf00      	nop
 800ff64:	0800fe9d 	.word	0x0800fe9d

0800ff68 <__sfmoreglue>:
 800ff68:	b570      	push	{r4, r5, r6, lr}
 800ff6a:	2268      	movs	r2, #104	; 0x68
 800ff6c:	1e4d      	subs	r5, r1, #1
 800ff6e:	4355      	muls	r5, r2
 800ff70:	460e      	mov	r6, r1
 800ff72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff76:	f000 f9b1 	bl	80102dc <_malloc_r>
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	b140      	cbz	r0, 800ff90 <__sfmoreglue+0x28>
 800ff7e:	2100      	movs	r1, #0
 800ff80:	e9c0 1600 	strd	r1, r6, [r0]
 800ff84:	300c      	adds	r0, #12
 800ff86:	60a0      	str	r0, [r4, #8]
 800ff88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff8c:	f7ff fc60 	bl	800f850 <memset>
 800ff90:	4620      	mov	r0, r4
 800ff92:	bd70      	pop	{r4, r5, r6, pc}

0800ff94 <__sfp_lock_acquire>:
 800ff94:	4801      	ldr	r0, [pc, #4]	; (800ff9c <__sfp_lock_acquire+0x8>)
 800ff96:	f000 b8c5 	b.w	8010124 <__retarget_lock_acquire_recursive>
 800ff9a:	bf00      	nop
 800ff9c:	20000a39 	.word	0x20000a39

0800ffa0 <__sfp_lock_release>:
 800ffa0:	4801      	ldr	r0, [pc, #4]	; (800ffa8 <__sfp_lock_release+0x8>)
 800ffa2:	f000 b8c0 	b.w	8010126 <__retarget_lock_release_recursive>
 800ffa6:	bf00      	nop
 800ffa8:	20000a39 	.word	0x20000a39

0800ffac <__sinit_lock_acquire>:
 800ffac:	4801      	ldr	r0, [pc, #4]	; (800ffb4 <__sinit_lock_acquire+0x8>)
 800ffae:	f000 b8b9 	b.w	8010124 <__retarget_lock_acquire_recursive>
 800ffb2:	bf00      	nop
 800ffb4:	20000a3a 	.word	0x20000a3a

0800ffb8 <__sinit_lock_release>:
 800ffb8:	4801      	ldr	r0, [pc, #4]	; (800ffc0 <__sinit_lock_release+0x8>)
 800ffba:	f000 b8b4 	b.w	8010126 <__retarget_lock_release_recursive>
 800ffbe:	bf00      	nop
 800ffc0:	20000a3a 	.word	0x20000a3a

0800ffc4 <__sinit>:
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	f7ff fff0 	bl	800ffac <__sinit_lock_acquire>
 800ffcc:	69a3      	ldr	r3, [r4, #24]
 800ffce:	b11b      	cbz	r3, 800ffd8 <__sinit+0x14>
 800ffd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd4:	f7ff bff0 	b.w	800ffb8 <__sinit_lock_release>
 800ffd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ffdc:	6523      	str	r3, [r4, #80]	; 0x50
 800ffde:	4b13      	ldr	r3, [pc, #76]	; (801002c <__sinit+0x68>)
 800ffe0:	4a13      	ldr	r2, [pc, #76]	; (8010030 <__sinit+0x6c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ffe6:	42a3      	cmp	r3, r4
 800ffe8:	bf04      	itt	eq
 800ffea:	2301      	moveq	r3, #1
 800ffec:	61a3      	streq	r3, [r4, #24]
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 f820 	bl	8010034 <__sfp>
 800fff4:	6060      	str	r0, [r4, #4]
 800fff6:	4620      	mov	r0, r4
 800fff8:	f000 f81c 	bl	8010034 <__sfp>
 800fffc:	60a0      	str	r0, [r4, #8]
 800fffe:	4620      	mov	r0, r4
 8010000:	f000 f818 	bl	8010034 <__sfp>
 8010004:	2200      	movs	r2, #0
 8010006:	60e0      	str	r0, [r4, #12]
 8010008:	2104      	movs	r1, #4
 801000a:	6860      	ldr	r0, [r4, #4]
 801000c:	f7ff ff82 	bl	800ff14 <std>
 8010010:	68a0      	ldr	r0, [r4, #8]
 8010012:	2201      	movs	r2, #1
 8010014:	2109      	movs	r1, #9
 8010016:	f7ff ff7d 	bl	800ff14 <std>
 801001a:	68e0      	ldr	r0, [r4, #12]
 801001c:	2202      	movs	r2, #2
 801001e:	2112      	movs	r1, #18
 8010020:	f7ff ff78 	bl	800ff14 <std>
 8010024:	2301      	movs	r3, #1
 8010026:	61a3      	str	r3, [r4, #24]
 8010028:	e7d2      	b.n	800ffd0 <__sinit+0xc>
 801002a:	bf00      	nop
 801002c:	0801155c 	.word	0x0801155c
 8010030:	0800ff5d 	.word	0x0800ff5d

08010034 <__sfp>:
 8010034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010036:	4607      	mov	r7, r0
 8010038:	f7ff ffac 	bl	800ff94 <__sfp_lock_acquire>
 801003c:	4b1e      	ldr	r3, [pc, #120]	; (80100b8 <__sfp+0x84>)
 801003e:	681e      	ldr	r6, [r3, #0]
 8010040:	69b3      	ldr	r3, [r6, #24]
 8010042:	b913      	cbnz	r3, 801004a <__sfp+0x16>
 8010044:	4630      	mov	r0, r6
 8010046:	f7ff ffbd 	bl	800ffc4 <__sinit>
 801004a:	3648      	adds	r6, #72	; 0x48
 801004c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010050:	3b01      	subs	r3, #1
 8010052:	d503      	bpl.n	801005c <__sfp+0x28>
 8010054:	6833      	ldr	r3, [r6, #0]
 8010056:	b30b      	cbz	r3, 801009c <__sfp+0x68>
 8010058:	6836      	ldr	r6, [r6, #0]
 801005a:	e7f7      	b.n	801004c <__sfp+0x18>
 801005c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010060:	b9d5      	cbnz	r5, 8010098 <__sfp+0x64>
 8010062:	4b16      	ldr	r3, [pc, #88]	; (80100bc <__sfp+0x88>)
 8010064:	60e3      	str	r3, [r4, #12]
 8010066:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801006a:	6665      	str	r5, [r4, #100]	; 0x64
 801006c:	f000 f859 	bl	8010122 <__retarget_lock_init_recursive>
 8010070:	f7ff ff96 	bl	800ffa0 <__sfp_lock_release>
 8010074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801007c:	6025      	str	r5, [r4, #0]
 801007e:	61a5      	str	r5, [r4, #24]
 8010080:	2208      	movs	r2, #8
 8010082:	4629      	mov	r1, r5
 8010084:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010088:	f7ff fbe2 	bl	800f850 <memset>
 801008c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010090:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010094:	4620      	mov	r0, r4
 8010096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010098:	3468      	adds	r4, #104	; 0x68
 801009a:	e7d9      	b.n	8010050 <__sfp+0x1c>
 801009c:	2104      	movs	r1, #4
 801009e:	4638      	mov	r0, r7
 80100a0:	f7ff ff62 	bl	800ff68 <__sfmoreglue>
 80100a4:	4604      	mov	r4, r0
 80100a6:	6030      	str	r0, [r6, #0]
 80100a8:	2800      	cmp	r0, #0
 80100aa:	d1d5      	bne.n	8010058 <__sfp+0x24>
 80100ac:	f7ff ff78 	bl	800ffa0 <__sfp_lock_release>
 80100b0:	230c      	movs	r3, #12
 80100b2:	603b      	str	r3, [r7, #0]
 80100b4:	e7ee      	b.n	8010094 <__sfp+0x60>
 80100b6:	bf00      	nop
 80100b8:	0801155c 	.word	0x0801155c
 80100bc:	ffff0001 	.word	0xffff0001

080100c0 <fiprintf>:
 80100c0:	b40e      	push	{r1, r2, r3}
 80100c2:	b503      	push	{r0, r1, lr}
 80100c4:	4601      	mov	r1, r0
 80100c6:	ab03      	add	r3, sp, #12
 80100c8:	4805      	ldr	r0, [pc, #20]	; (80100e0 <fiprintf+0x20>)
 80100ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ce:	6800      	ldr	r0, [r0, #0]
 80100d0:	9301      	str	r3, [sp, #4]
 80100d2:	f000 fafd 	bl	80106d0 <_vfiprintf_r>
 80100d6:	b002      	add	sp, #8
 80100d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80100dc:	b003      	add	sp, #12
 80100de:	4770      	bx	lr
 80100e0:	2000004c 	.word	0x2000004c

080100e4 <_fwalk_reent>:
 80100e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100e8:	4606      	mov	r6, r0
 80100ea:	4688      	mov	r8, r1
 80100ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80100f0:	2700      	movs	r7, #0
 80100f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100f6:	f1b9 0901 	subs.w	r9, r9, #1
 80100fa:	d505      	bpl.n	8010108 <_fwalk_reent+0x24>
 80100fc:	6824      	ldr	r4, [r4, #0]
 80100fe:	2c00      	cmp	r4, #0
 8010100:	d1f7      	bne.n	80100f2 <_fwalk_reent+0xe>
 8010102:	4638      	mov	r0, r7
 8010104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010108:	89ab      	ldrh	r3, [r5, #12]
 801010a:	2b01      	cmp	r3, #1
 801010c:	d907      	bls.n	801011e <_fwalk_reent+0x3a>
 801010e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010112:	3301      	adds	r3, #1
 8010114:	d003      	beq.n	801011e <_fwalk_reent+0x3a>
 8010116:	4629      	mov	r1, r5
 8010118:	4630      	mov	r0, r6
 801011a:	47c0      	blx	r8
 801011c:	4307      	orrs	r7, r0
 801011e:	3568      	adds	r5, #104	; 0x68
 8010120:	e7e9      	b.n	80100f6 <_fwalk_reent+0x12>

08010122 <__retarget_lock_init_recursive>:
 8010122:	4770      	bx	lr

08010124 <__retarget_lock_acquire_recursive>:
 8010124:	4770      	bx	lr

08010126 <__retarget_lock_release_recursive>:
 8010126:	4770      	bx	lr

08010128 <__swhatbuf_r>:
 8010128:	b570      	push	{r4, r5, r6, lr}
 801012a:	460e      	mov	r6, r1
 801012c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010130:	2900      	cmp	r1, #0
 8010132:	b096      	sub	sp, #88	; 0x58
 8010134:	4614      	mov	r4, r2
 8010136:	461d      	mov	r5, r3
 8010138:	da08      	bge.n	801014c <__swhatbuf_r+0x24>
 801013a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801013e:	2200      	movs	r2, #0
 8010140:	602a      	str	r2, [r5, #0]
 8010142:	061a      	lsls	r2, r3, #24
 8010144:	d410      	bmi.n	8010168 <__swhatbuf_r+0x40>
 8010146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801014a:	e00e      	b.n	801016a <__swhatbuf_r+0x42>
 801014c:	466a      	mov	r2, sp
 801014e:	f000 fe01 	bl	8010d54 <_fstat_r>
 8010152:	2800      	cmp	r0, #0
 8010154:	dbf1      	blt.n	801013a <__swhatbuf_r+0x12>
 8010156:	9a01      	ldr	r2, [sp, #4]
 8010158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801015c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010160:	425a      	negs	r2, r3
 8010162:	415a      	adcs	r2, r3
 8010164:	602a      	str	r2, [r5, #0]
 8010166:	e7ee      	b.n	8010146 <__swhatbuf_r+0x1e>
 8010168:	2340      	movs	r3, #64	; 0x40
 801016a:	2000      	movs	r0, #0
 801016c:	6023      	str	r3, [r4, #0]
 801016e:	b016      	add	sp, #88	; 0x58
 8010170:	bd70      	pop	{r4, r5, r6, pc}
	...

08010174 <__smakebuf_r>:
 8010174:	898b      	ldrh	r3, [r1, #12]
 8010176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010178:	079d      	lsls	r5, r3, #30
 801017a:	4606      	mov	r6, r0
 801017c:	460c      	mov	r4, r1
 801017e:	d507      	bpl.n	8010190 <__smakebuf_r+0x1c>
 8010180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010184:	6023      	str	r3, [r4, #0]
 8010186:	6123      	str	r3, [r4, #16]
 8010188:	2301      	movs	r3, #1
 801018a:	6163      	str	r3, [r4, #20]
 801018c:	b002      	add	sp, #8
 801018e:	bd70      	pop	{r4, r5, r6, pc}
 8010190:	ab01      	add	r3, sp, #4
 8010192:	466a      	mov	r2, sp
 8010194:	f7ff ffc8 	bl	8010128 <__swhatbuf_r>
 8010198:	9900      	ldr	r1, [sp, #0]
 801019a:	4605      	mov	r5, r0
 801019c:	4630      	mov	r0, r6
 801019e:	f000 f89d 	bl	80102dc <_malloc_r>
 80101a2:	b948      	cbnz	r0, 80101b8 <__smakebuf_r+0x44>
 80101a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101a8:	059a      	lsls	r2, r3, #22
 80101aa:	d4ef      	bmi.n	801018c <__smakebuf_r+0x18>
 80101ac:	f023 0303 	bic.w	r3, r3, #3
 80101b0:	f043 0302 	orr.w	r3, r3, #2
 80101b4:	81a3      	strh	r3, [r4, #12]
 80101b6:	e7e3      	b.n	8010180 <__smakebuf_r+0xc>
 80101b8:	4b0d      	ldr	r3, [pc, #52]	; (80101f0 <__smakebuf_r+0x7c>)
 80101ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80101bc:	89a3      	ldrh	r3, [r4, #12]
 80101be:	6020      	str	r0, [r4, #0]
 80101c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c4:	81a3      	strh	r3, [r4, #12]
 80101c6:	9b00      	ldr	r3, [sp, #0]
 80101c8:	6163      	str	r3, [r4, #20]
 80101ca:	9b01      	ldr	r3, [sp, #4]
 80101cc:	6120      	str	r0, [r4, #16]
 80101ce:	b15b      	cbz	r3, 80101e8 <__smakebuf_r+0x74>
 80101d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101d4:	4630      	mov	r0, r6
 80101d6:	f000 fdcf 	bl	8010d78 <_isatty_r>
 80101da:	b128      	cbz	r0, 80101e8 <__smakebuf_r+0x74>
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	f023 0303 	bic.w	r3, r3, #3
 80101e2:	f043 0301 	orr.w	r3, r3, #1
 80101e6:	81a3      	strh	r3, [r4, #12]
 80101e8:	89a0      	ldrh	r0, [r4, #12]
 80101ea:	4305      	orrs	r5, r0
 80101ec:	81a5      	strh	r5, [r4, #12]
 80101ee:	e7cd      	b.n	801018c <__smakebuf_r+0x18>
 80101f0:	0800ff5d 	.word	0x0800ff5d

080101f4 <malloc>:
 80101f4:	4b02      	ldr	r3, [pc, #8]	; (8010200 <malloc+0xc>)
 80101f6:	4601      	mov	r1, r0
 80101f8:	6818      	ldr	r0, [r3, #0]
 80101fa:	f000 b86f 	b.w	80102dc <_malloc_r>
 80101fe:	bf00      	nop
 8010200:	2000004c 	.word	0x2000004c

08010204 <_free_r>:
 8010204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010206:	2900      	cmp	r1, #0
 8010208:	d044      	beq.n	8010294 <_free_r+0x90>
 801020a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801020e:	9001      	str	r0, [sp, #4]
 8010210:	2b00      	cmp	r3, #0
 8010212:	f1a1 0404 	sub.w	r4, r1, #4
 8010216:	bfb8      	it	lt
 8010218:	18e4      	addlt	r4, r4, r3
 801021a:	f000 fde9 	bl	8010df0 <__malloc_lock>
 801021e:	4a1e      	ldr	r2, [pc, #120]	; (8010298 <_free_r+0x94>)
 8010220:	9801      	ldr	r0, [sp, #4]
 8010222:	6813      	ldr	r3, [r2, #0]
 8010224:	b933      	cbnz	r3, 8010234 <_free_r+0x30>
 8010226:	6063      	str	r3, [r4, #4]
 8010228:	6014      	str	r4, [r2, #0]
 801022a:	b003      	add	sp, #12
 801022c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010230:	f000 bde4 	b.w	8010dfc <__malloc_unlock>
 8010234:	42a3      	cmp	r3, r4
 8010236:	d908      	bls.n	801024a <_free_r+0x46>
 8010238:	6825      	ldr	r5, [r4, #0]
 801023a:	1961      	adds	r1, r4, r5
 801023c:	428b      	cmp	r3, r1
 801023e:	bf01      	itttt	eq
 8010240:	6819      	ldreq	r1, [r3, #0]
 8010242:	685b      	ldreq	r3, [r3, #4]
 8010244:	1949      	addeq	r1, r1, r5
 8010246:	6021      	streq	r1, [r4, #0]
 8010248:	e7ed      	b.n	8010226 <_free_r+0x22>
 801024a:	461a      	mov	r2, r3
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	b10b      	cbz	r3, 8010254 <_free_r+0x50>
 8010250:	42a3      	cmp	r3, r4
 8010252:	d9fa      	bls.n	801024a <_free_r+0x46>
 8010254:	6811      	ldr	r1, [r2, #0]
 8010256:	1855      	adds	r5, r2, r1
 8010258:	42a5      	cmp	r5, r4
 801025a:	d10b      	bne.n	8010274 <_free_r+0x70>
 801025c:	6824      	ldr	r4, [r4, #0]
 801025e:	4421      	add	r1, r4
 8010260:	1854      	adds	r4, r2, r1
 8010262:	42a3      	cmp	r3, r4
 8010264:	6011      	str	r1, [r2, #0]
 8010266:	d1e0      	bne.n	801022a <_free_r+0x26>
 8010268:	681c      	ldr	r4, [r3, #0]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	6053      	str	r3, [r2, #4]
 801026e:	4421      	add	r1, r4
 8010270:	6011      	str	r1, [r2, #0]
 8010272:	e7da      	b.n	801022a <_free_r+0x26>
 8010274:	d902      	bls.n	801027c <_free_r+0x78>
 8010276:	230c      	movs	r3, #12
 8010278:	6003      	str	r3, [r0, #0]
 801027a:	e7d6      	b.n	801022a <_free_r+0x26>
 801027c:	6825      	ldr	r5, [r4, #0]
 801027e:	1961      	adds	r1, r4, r5
 8010280:	428b      	cmp	r3, r1
 8010282:	bf04      	itt	eq
 8010284:	6819      	ldreq	r1, [r3, #0]
 8010286:	685b      	ldreq	r3, [r3, #4]
 8010288:	6063      	str	r3, [r4, #4]
 801028a:	bf04      	itt	eq
 801028c:	1949      	addeq	r1, r1, r5
 801028e:	6021      	streq	r1, [r4, #0]
 8010290:	6054      	str	r4, [r2, #4]
 8010292:	e7ca      	b.n	801022a <_free_r+0x26>
 8010294:	b003      	add	sp, #12
 8010296:	bd30      	pop	{r4, r5, pc}
 8010298:	20000a3c 	.word	0x20000a3c

0801029c <sbrk_aligned>:
 801029c:	b570      	push	{r4, r5, r6, lr}
 801029e:	4e0e      	ldr	r6, [pc, #56]	; (80102d8 <sbrk_aligned+0x3c>)
 80102a0:	460c      	mov	r4, r1
 80102a2:	6831      	ldr	r1, [r6, #0]
 80102a4:	4605      	mov	r5, r0
 80102a6:	b911      	cbnz	r1, 80102ae <sbrk_aligned+0x12>
 80102a8:	f000 fcd6 	bl	8010c58 <_sbrk_r>
 80102ac:	6030      	str	r0, [r6, #0]
 80102ae:	4621      	mov	r1, r4
 80102b0:	4628      	mov	r0, r5
 80102b2:	f000 fcd1 	bl	8010c58 <_sbrk_r>
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	d00a      	beq.n	80102d0 <sbrk_aligned+0x34>
 80102ba:	1cc4      	adds	r4, r0, #3
 80102bc:	f024 0403 	bic.w	r4, r4, #3
 80102c0:	42a0      	cmp	r0, r4
 80102c2:	d007      	beq.n	80102d4 <sbrk_aligned+0x38>
 80102c4:	1a21      	subs	r1, r4, r0
 80102c6:	4628      	mov	r0, r5
 80102c8:	f000 fcc6 	bl	8010c58 <_sbrk_r>
 80102cc:	3001      	adds	r0, #1
 80102ce:	d101      	bne.n	80102d4 <sbrk_aligned+0x38>
 80102d0:	f04f 34ff 	mov.w	r4, #4294967295
 80102d4:	4620      	mov	r0, r4
 80102d6:	bd70      	pop	{r4, r5, r6, pc}
 80102d8:	20000a40 	.word	0x20000a40

080102dc <_malloc_r>:
 80102dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e0:	1ccd      	adds	r5, r1, #3
 80102e2:	f025 0503 	bic.w	r5, r5, #3
 80102e6:	3508      	adds	r5, #8
 80102e8:	2d0c      	cmp	r5, #12
 80102ea:	bf38      	it	cc
 80102ec:	250c      	movcc	r5, #12
 80102ee:	2d00      	cmp	r5, #0
 80102f0:	4607      	mov	r7, r0
 80102f2:	db01      	blt.n	80102f8 <_malloc_r+0x1c>
 80102f4:	42a9      	cmp	r1, r5
 80102f6:	d905      	bls.n	8010304 <_malloc_r+0x28>
 80102f8:	230c      	movs	r3, #12
 80102fa:	603b      	str	r3, [r7, #0]
 80102fc:	2600      	movs	r6, #0
 80102fe:	4630      	mov	r0, r6
 8010300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010304:	4e2e      	ldr	r6, [pc, #184]	; (80103c0 <_malloc_r+0xe4>)
 8010306:	f000 fd73 	bl	8010df0 <__malloc_lock>
 801030a:	6833      	ldr	r3, [r6, #0]
 801030c:	461c      	mov	r4, r3
 801030e:	bb34      	cbnz	r4, 801035e <_malloc_r+0x82>
 8010310:	4629      	mov	r1, r5
 8010312:	4638      	mov	r0, r7
 8010314:	f7ff ffc2 	bl	801029c <sbrk_aligned>
 8010318:	1c43      	adds	r3, r0, #1
 801031a:	4604      	mov	r4, r0
 801031c:	d14d      	bne.n	80103ba <_malloc_r+0xde>
 801031e:	6834      	ldr	r4, [r6, #0]
 8010320:	4626      	mov	r6, r4
 8010322:	2e00      	cmp	r6, #0
 8010324:	d140      	bne.n	80103a8 <_malloc_r+0xcc>
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	4631      	mov	r1, r6
 801032a:	4638      	mov	r0, r7
 801032c:	eb04 0803 	add.w	r8, r4, r3
 8010330:	f000 fc92 	bl	8010c58 <_sbrk_r>
 8010334:	4580      	cmp	r8, r0
 8010336:	d13a      	bne.n	80103ae <_malloc_r+0xd2>
 8010338:	6821      	ldr	r1, [r4, #0]
 801033a:	3503      	adds	r5, #3
 801033c:	1a6d      	subs	r5, r5, r1
 801033e:	f025 0503 	bic.w	r5, r5, #3
 8010342:	3508      	adds	r5, #8
 8010344:	2d0c      	cmp	r5, #12
 8010346:	bf38      	it	cc
 8010348:	250c      	movcc	r5, #12
 801034a:	4629      	mov	r1, r5
 801034c:	4638      	mov	r0, r7
 801034e:	f7ff ffa5 	bl	801029c <sbrk_aligned>
 8010352:	3001      	adds	r0, #1
 8010354:	d02b      	beq.n	80103ae <_malloc_r+0xd2>
 8010356:	6823      	ldr	r3, [r4, #0]
 8010358:	442b      	add	r3, r5
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	e00e      	b.n	801037c <_malloc_r+0xa0>
 801035e:	6822      	ldr	r2, [r4, #0]
 8010360:	1b52      	subs	r2, r2, r5
 8010362:	d41e      	bmi.n	80103a2 <_malloc_r+0xc6>
 8010364:	2a0b      	cmp	r2, #11
 8010366:	d916      	bls.n	8010396 <_malloc_r+0xba>
 8010368:	1961      	adds	r1, r4, r5
 801036a:	42a3      	cmp	r3, r4
 801036c:	6025      	str	r5, [r4, #0]
 801036e:	bf18      	it	ne
 8010370:	6059      	strne	r1, [r3, #4]
 8010372:	6863      	ldr	r3, [r4, #4]
 8010374:	bf08      	it	eq
 8010376:	6031      	streq	r1, [r6, #0]
 8010378:	5162      	str	r2, [r4, r5]
 801037a:	604b      	str	r3, [r1, #4]
 801037c:	4638      	mov	r0, r7
 801037e:	f104 060b 	add.w	r6, r4, #11
 8010382:	f000 fd3b 	bl	8010dfc <__malloc_unlock>
 8010386:	f026 0607 	bic.w	r6, r6, #7
 801038a:	1d23      	adds	r3, r4, #4
 801038c:	1af2      	subs	r2, r6, r3
 801038e:	d0b6      	beq.n	80102fe <_malloc_r+0x22>
 8010390:	1b9b      	subs	r3, r3, r6
 8010392:	50a3      	str	r3, [r4, r2]
 8010394:	e7b3      	b.n	80102fe <_malloc_r+0x22>
 8010396:	6862      	ldr	r2, [r4, #4]
 8010398:	42a3      	cmp	r3, r4
 801039a:	bf0c      	ite	eq
 801039c:	6032      	streq	r2, [r6, #0]
 801039e:	605a      	strne	r2, [r3, #4]
 80103a0:	e7ec      	b.n	801037c <_malloc_r+0xa0>
 80103a2:	4623      	mov	r3, r4
 80103a4:	6864      	ldr	r4, [r4, #4]
 80103a6:	e7b2      	b.n	801030e <_malloc_r+0x32>
 80103a8:	4634      	mov	r4, r6
 80103aa:	6876      	ldr	r6, [r6, #4]
 80103ac:	e7b9      	b.n	8010322 <_malloc_r+0x46>
 80103ae:	230c      	movs	r3, #12
 80103b0:	603b      	str	r3, [r7, #0]
 80103b2:	4638      	mov	r0, r7
 80103b4:	f000 fd22 	bl	8010dfc <__malloc_unlock>
 80103b8:	e7a1      	b.n	80102fe <_malloc_r+0x22>
 80103ba:	6025      	str	r5, [r4, #0]
 80103bc:	e7de      	b.n	801037c <_malloc_r+0xa0>
 80103be:	bf00      	nop
 80103c0:	20000a3c 	.word	0x20000a3c

080103c4 <__ssputs_r>:
 80103c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c8:	688e      	ldr	r6, [r1, #8]
 80103ca:	429e      	cmp	r6, r3
 80103cc:	4682      	mov	sl, r0
 80103ce:	460c      	mov	r4, r1
 80103d0:	4690      	mov	r8, r2
 80103d2:	461f      	mov	r7, r3
 80103d4:	d838      	bhi.n	8010448 <__ssputs_r+0x84>
 80103d6:	898a      	ldrh	r2, [r1, #12]
 80103d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103dc:	d032      	beq.n	8010444 <__ssputs_r+0x80>
 80103de:	6825      	ldr	r5, [r4, #0]
 80103e0:	6909      	ldr	r1, [r1, #16]
 80103e2:	eba5 0901 	sub.w	r9, r5, r1
 80103e6:	6965      	ldr	r5, [r4, #20]
 80103e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103f0:	3301      	adds	r3, #1
 80103f2:	444b      	add	r3, r9
 80103f4:	106d      	asrs	r5, r5, #1
 80103f6:	429d      	cmp	r5, r3
 80103f8:	bf38      	it	cc
 80103fa:	461d      	movcc	r5, r3
 80103fc:	0553      	lsls	r3, r2, #21
 80103fe:	d531      	bpl.n	8010464 <__ssputs_r+0xa0>
 8010400:	4629      	mov	r1, r5
 8010402:	f7ff ff6b 	bl	80102dc <_malloc_r>
 8010406:	4606      	mov	r6, r0
 8010408:	b950      	cbnz	r0, 8010420 <__ssputs_r+0x5c>
 801040a:	230c      	movs	r3, #12
 801040c:	f8ca 3000 	str.w	r3, [sl]
 8010410:	89a3      	ldrh	r3, [r4, #12]
 8010412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010416:	81a3      	strh	r3, [r4, #12]
 8010418:	f04f 30ff 	mov.w	r0, #4294967295
 801041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010420:	6921      	ldr	r1, [r4, #16]
 8010422:	464a      	mov	r2, r9
 8010424:	f7ff fa06 	bl	800f834 <memcpy>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	6126      	str	r6, [r4, #16]
 8010436:	6165      	str	r5, [r4, #20]
 8010438:	444e      	add	r6, r9
 801043a:	eba5 0509 	sub.w	r5, r5, r9
 801043e:	6026      	str	r6, [r4, #0]
 8010440:	60a5      	str	r5, [r4, #8]
 8010442:	463e      	mov	r6, r7
 8010444:	42be      	cmp	r6, r7
 8010446:	d900      	bls.n	801044a <__ssputs_r+0x86>
 8010448:	463e      	mov	r6, r7
 801044a:	6820      	ldr	r0, [r4, #0]
 801044c:	4632      	mov	r2, r6
 801044e:	4641      	mov	r1, r8
 8010450:	f000 fcb4 	bl	8010dbc <memmove>
 8010454:	68a3      	ldr	r3, [r4, #8]
 8010456:	1b9b      	subs	r3, r3, r6
 8010458:	60a3      	str	r3, [r4, #8]
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	4433      	add	r3, r6
 801045e:	6023      	str	r3, [r4, #0]
 8010460:	2000      	movs	r0, #0
 8010462:	e7db      	b.n	801041c <__ssputs_r+0x58>
 8010464:	462a      	mov	r2, r5
 8010466:	f000 fccf 	bl	8010e08 <_realloc_r>
 801046a:	4606      	mov	r6, r0
 801046c:	2800      	cmp	r0, #0
 801046e:	d1e1      	bne.n	8010434 <__ssputs_r+0x70>
 8010470:	6921      	ldr	r1, [r4, #16]
 8010472:	4650      	mov	r0, sl
 8010474:	f7ff fec6 	bl	8010204 <_free_r>
 8010478:	e7c7      	b.n	801040a <__ssputs_r+0x46>
	...

0801047c <_svfiprintf_r>:
 801047c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010480:	4698      	mov	r8, r3
 8010482:	898b      	ldrh	r3, [r1, #12]
 8010484:	061b      	lsls	r3, r3, #24
 8010486:	b09d      	sub	sp, #116	; 0x74
 8010488:	4607      	mov	r7, r0
 801048a:	460d      	mov	r5, r1
 801048c:	4614      	mov	r4, r2
 801048e:	d50e      	bpl.n	80104ae <_svfiprintf_r+0x32>
 8010490:	690b      	ldr	r3, [r1, #16]
 8010492:	b963      	cbnz	r3, 80104ae <_svfiprintf_r+0x32>
 8010494:	2140      	movs	r1, #64	; 0x40
 8010496:	f7ff ff21 	bl	80102dc <_malloc_r>
 801049a:	6028      	str	r0, [r5, #0]
 801049c:	6128      	str	r0, [r5, #16]
 801049e:	b920      	cbnz	r0, 80104aa <_svfiprintf_r+0x2e>
 80104a0:	230c      	movs	r3, #12
 80104a2:	603b      	str	r3, [r7, #0]
 80104a4:	f04f 30ff 	mov.w	r0, #4294967295
 80104a8:	e0d1      	b.n	801064e <_svfiprintf_r+0x1d2>
 80104aa:	2340      	movs	r3, #64	; 0x40
 80104ac:	616b      	str	r3, [r5, #20]
 80104ae:	2300      	movs	r3, #0
 80104b0:	9309      	str	r3, [sp, #36]	; 0x24
 80104b2:	2320      	movs	r3, #32
 80104b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80104bc:	2330      	movs	r3, #48	; 0x30
 80104be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010668 <_svfiprintf_r+0x1ec>
 80104c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104c6:	f04f 0901 	mov.w	r9, #1
 80104ca:	4623      	mov	r3, r4
 80104cc:	469a      	mov	sl, r3
 80104ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d2:	b10a      	cbz	r2, 80104d8 <_svfiprintf_r+0x5c>
 80104d4:	2a25      	cmp	r2, #37	; 0x25
 80104d6:	d1f9      	bne.n	80104cc <_svfiprintf_r+0x50>
 80104d8:	ebba 0b04 	subs.w	fp, sl, r4
 80104dc:	d00b      	beq.n	80104f6 <_svfiprintf_r+0x7a>
 80104de:	465b      	mov	r3, fp
 80104e0:	4622      	mov	r2, r4
 80104e2:	4629      	mov	r1, r5
 80104e4:	4638      	mov	r0, r7
 80104e6:	f7ff ff6d 	bl	80103c4 <__ssputs_r>
 80104ea:	3001      	adds	r0, #1
 80104ec:	f000 80aa 	beq.w	8010644 <_svfiprintf_r+0x1c8>
 80104f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104f2:	445a      	add	r2, fp
 80104f4:	9209      	str	r2, [sp, #36]	; 0x24
 80104f6:	f89a 3000 	ldrb.w	r3, [sl]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f000 80a2 	beq.w	8010644 <_svfiprintf_r+0x1c8>
 8010500:	2300      	movs	r3, #0
 8010502:	f04f 32ff 	mov.w	r2, #4294967295
 8010506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801050a:	f10a 0a01 	add.w	sl, sl, #1
 801050e:	9304      	str	r3, [sp, #16]
 8010510:	9307      	str	r3, [sp, #28]
 8010512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010516:	931a      	str	r3, [sp, #104]	; 0x68
 8010518:	4654      	mov	r4, sl
 801051a:	2205      	movs	r2, #5
 801051c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010520:	4851      	ldr	r0, [pc, #324]	; (8010668 <_svfiprintf_r+0x1ec>)
 8010522:	f7f3 fe55 	bl	80041d0 <memchr>
 8010526:	9a04      	ldr	r2, [sp, #16]
 8010528:	b9d8      	cbnz	r0, 8010562 <_svfiprintf_r+0xe6>
 801052a:	06d0      	lsls	r0, r2, #27
 801052c:	bf44      	itt	mi
 801052e:	2320      	movmi	r3, #32
 8010530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010534:	0711      	lsls	r1, r2, #28
 8010536:	bf44      	itt	mi
 8010538:	232b      	movmi	r3, #43	; 0x2b
 801053a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801053e:	f89a 3000 	ldrb.w	r3, [sl]
 8010542:	2b2a      	cmp	r3, #42	; 0x2a
 8010544:	d015      	beq.n	8010572 <_svfiprintf_r+0xf6>
 8010546:	9a07      	ldr	r2, [sp, #28]
 8010548:	4654      	mov	r4, sl
 801054a:	2000      	movs	r0, #0
 801054c:	f04f 0c0a 	mov.w	ip, #10
 8010550:	4621      	mov	r1, r4
 8010552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010556:	3b30      	subs	r3, #48	; 0x30
 8010558:	2b09      	cmp	r3, #9
 801055a:	d94e      	bls.n	80105fa <_svfiprintf_r+0x17e>
 801055c:	b1b0      	cbz	r0, 801058c <_svfiprintf_r+0x110>
 801055e:	9207      	str	r2, [sp, #28]
 8010560:	e014      	b.n	801058c <_svfiprintf_r+0x110>
 8010562:	eba0 0308 	sub.w	r3, r0, r8
 8010566:	fa09 f303 	lsl.w	r3, r9, r3
 801056a:	4313      	orrs	r3, r2
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	46a2      	mov	sl, r4
 8010570:	e7d2      	b.n	8010518 <_svfiprintf_r+0x9c>
 8010572:	9b03      	ldr	r3, [sp, #12]
 8010574:	1d19      	adds	r1, r3, #4
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	9103      	str	r1, [sp, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	bfbb      	ittet	lt
 801057e:	425b      	neglt	r3, r3
 8010580:	f042 0202 	orrlt.w	r2, r2, #2
 8010584:	9307      	strge	r3, [sp, #28]
 8010586:	9307      	strlt	r3, [sp, #28]
 8010588:	bfb8      	it	lt
 801058a:	9204      	strlt	r2, [sp, #16]
 801058c:	7823      	ldrb	r3, [r4, #0]
 801058e:	2b2e      	cmp	r3, #46	; 0x2e
 8010590:	d10c      	bne.n	80105ac <_svfiprintf_r+0x130>
 8010592:	7863      	ldrb	r3, [r4, #1]
 8010594:	2b2a      	cmp	r3, #42	; 0x2a
 8010596:	d135      	bne.n	8010604 <_svfiprintf_r+0x188>
 8010598:	9b03      	ldr	r3, [sp, #12]
 801059a:	1d1a      	adds	r2, r3, #4
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	9203      	str	r2, [sp, #12]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	bfb8      	it	lt
 80105a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80105a8:	3402      	adds	r4, #2
 80105aa:	9305      	str	r3, [sp, #20]
 80105ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010678 <_svfiprintf_r+0x1fc>
 80105b0:	7821      	ldrb	r1, [r4, #0]
 80105b2:	2203      	movs	r2, #3
 80105b4:	4650      	mov	r0, sl
 80105b6:	f7f3 fe0b 	bl	80041d0 <memchr>
 80105ba:	b140      	cbz	r0, 80105ce <_svfiprintf_r+0x152>
 80105bc:	2340      	movs	r3, #64	; 0x40
 80105be:	eba0 000a 	sub.w	r0, r0, sl
 80105c2:	fa03 f000 	lsl.w	r0, r3, r0
 80105c6:	9b04      	ldr	r3, [sp, #16]
 80105c8:	4303      	orrs	r3, r0
 80105ca:	3401      	adds	r4, #1
 80105cc:	9304      	str	r3, [sp, #16]
 80105ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105d2:	4826      	ldr	r0, [pc, #152]	; (801066c <_svfiprintf_r+0x1f0>)
 80105d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105d8:	2206      	movs	r2, #6
 80105da:	f7f3 fdf9 	bl	80041d0 <memchr>
 80105de:	2800      	cmp	r0, #0
 80105e0:	d038      	beq.n	8010654 <_svfiprintf_r+0x1d8>
 80105e2:	4b23      	ldr	r3, [pc, #140]	; (8010670 <_svfiprintf_r+0x1f4>)
 80105e4:	bb1b      	cbnz	r3, 801062e <_svfiprintf_r+0x1b2>
 80105e6:	9b03      	ldr	r3, [sp, #12]
 80105e8:	3307      	adds	r3, #7
 80105ea:	f023 0307 	bic.w	r3, r3, #7
 80105ee:	3308      	adds	r3, #8
 80105f0:	9303      	str	r3, [sp, #12]
 80105f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105f4:	4433      	add	r3, r6
 80105f6:	9309      	str	r3, [sp, #36]	; 0x24
 80105f8:	e767      	b.n	80104ca <_svfiprintf_r+0x4e>
 80105fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80105fe:	460c      	mov	r4, r1
 8010600:	2001      	movs	r0, #1
 8010602:	e7a5      	b.n	8010550 <_svfiprintf_r+0xd4>
 8010604:	2300      	movs	r3, #0
 8010606:	3401      	adds	r4, #1
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	4619      	mov	r1, r3
 801060c:	f04f 0c0a 	mov.w	ip, #10
 8010610:	4620      	mov	r0, r4
 8010612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010616:	3a30      	subs	r2, #48	; 0x30
 8010618:	2a09      	cmp	r2, #9
 801061a:	d903      	bls.n	8010624 <_svfiprintf_r+0x1a8>
 801061c:	2b00      	cmp	r3, #0
 801061e:	d0c5      	beq.n	80105ac <_svfiprintf_r+0x130>
 8010620:	9105      	str	r1, [sp, #20]
 8010622:	e7c3      	b.n	80105ac <_svfiprintf_r+0x130>
 8010624:	fb0c 2101 	mla	r1, ip, r1, r2
 8010628:	4604      	mov	r4, r0
 801062a:	2301      	movs	r3, #1
 801062c:	e7f0      	b.n	8010610 <_svfiprintf_r+0x194>
 801062e:	ab03      	add	r3, sp, #12
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	462a      	mov	r2, r5
 8010634:	4b0f      	ldr	r3, [pc, #60]	; (8010674 <_svfiprintf_r+0x1f8>)
 8010636:	a904      	add	r1, sp, #16
 8010638:	4638      	mov	r0, r7
 801063a:	f3af 8000 	nop.w
 801063e:	1c42      	adds	r2, r0, #1
 8010640:	4606      	mov	r6, r0
 8010642:	d1d6      	bne.n	80105f2 <_svfiprintf_r+0x176>
 8010644:	89ab      	ldrh	r3, [r5, #12]
 8010646:	065b      	lsls	r3, r3, #25
 8010648:	f53f af2c 	bmi.w	80104a4 <_svfiprintf_r+0x28>
 801064c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801064e:	b01d      	add	sp, #116	; 0x74
 8010650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010654:	ab03      	add	r3, sp, #12
 8010656:	9300      	str	r3, [sp, #0]
 8010658:	462a      	mov	r2, r5
 801065a:	4b06      	ldr	r3, [pc, #24]	; (8010674 <_svfiprintf_r+0x1f8>)
 801065c:	a904      	add	r1, sp, #16
 801065e:	4638      	mov	r0, r7
 8010660:	f000 f9d4 	bl	8010a0c <_printf_i>
 8010664:	e7eb      	b.n	801063e <_svfiprintf_r+0x1c2>
 8010666:	bf00      	nop
 8010668:	08011770 	.word	0x08011770
 801066c:	0801177a 	.word	0x0801177a
 8010670:	00000000 	.word	0x00000000
 8010674:	080103c5 	.word	0x080103c5
 8010678:	08011776 	.word	0x08011776

0801067c <__sfputc_r>:
 801067c:	6893      	ldr	r3, [r2, #8]
 801067e:	3b01      	subs	r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	b410      	push	{r4}
 8010684:	6093      	str	r3, [r2, #8]
 8010686:	da08      	bge.n	801069a <__sfputc_r+0x1e>
 8010688:	6994      	ldr	r4, [r2, #24]
 801068a:	42a3      	cmp	r3, r4
 801068c:	db01      	blt.n	8010692 <__sfputc_r+0x16>
 801068e:	290a      	cmp	r1, #10
 8010690:	d103      	bne.n	801069a <__sfputc_r+0x1e>
 8010692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010696:	f7ff ba9d 	b.w	800fbd4 <__swbuf_r>
 801069a:	6813      	ldr	r3, [r2, #0]
 801069c:	1c58      	adds	r0, r3, #1
 801069e:	6010      	str	r0, [r2, #0]
 80106a0:	7019      	strb	r1, [r3, #0]
 80106a2:	4608      	mov	r0, r1
 80106a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <__sfputs_r>:
 80106aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ac:	4606      	mov	r6, r0
 80106ae:	460f      	mov	r7, r1
 80106b0:	4614      	mov	r4, r2
 80106b2:	18d5      	adds	r5, r2, r3
 80106b4:	42ac      	cmp	r4, r5
 80106b6:	d101      	bne.n	80106bc <__sfputs_r+0x12>
 80106b8:	2000      	movs	r0, #0
 80106ba:	e007      	b.n	80106cc <__sfputs_r+0x22>
 80106bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106c0:	463a      	mov	r2, r7
 80106c2:	4630      	mov	r0, r6
 80106c4:	f7ff ffda 	bl	801067c <__sfputc_r>
 80106c8:	1c43      	adds	r3, r0, #1
 80106ca:	d1f3      	bne.n	80106b4 <__sfputs_r+0xa>
 80106cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080106d0 <_vfiprintf_r>:
 80106d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d4:	460d      	mov	r5, r1
 80106d6:	b09d      	sub	sp, #116	; 0x74
 80106d8:	4614      	mov	r4, r2
 80106da:	4698      	mov	r8, r3
 80106dc:	4606      	mov	r6, r0
 80106de:	b118      	cbz	r0, 80106e8 <_vfiprintf_r+0x18>
 80106e0:	6983      	ldr	r3, [r0, #24]
 80106e2:	b90b      	cbnz	r3, 80106e8 <_vfiprintf_r+0x18>
 80106e4:	f7ff fc6e 	bl	800ffc4 <__sinit>
 80106e8:	4b89      	ldr	r3, [pc, #548]	; (8010910 <_vfiprintf_r+0x240>)
 80106ea:	429d      	cmp	r5, r3
 80106ec:	d11b      	bne.n	8010726 <_vfiprintf_r+0x56>
 80106ee:	6875      	ldr	r5, [r6, #4]
 80106f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106f2:	07d9      	lsls	r1, r3, #31
 80106f4:	d405      	bmi.n	8010702 <_vfiprintf_r+0x32>
 80106f6:	89ab      	ldrh	r3, [r5, #12]
 80106f8:	059a      	lsls	r2, r3, #22
 80106fa:	d402      	bmi.n	8010702 <_vfiprintf_r+0x32>
 80106fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106fe:	f7ff fd11 	bl	8010124 <__retarget_lock_acquire_recursive>
 8010702:	89ab      	ldrh	r3, [r5, #12]
 8010704:	071b      	lsls	r3, r3, #28
 8010706:	d501      	bpl.n	801070c <_vfiprintf_r+0x3c>
 8010708:	692b      	ldr	r3, [r5, #16]
 801070a:	b9eb      	cbnz	r3, 8010748 <_vfiprintf_r+0x78>
 801070c:	4629      	mov	r1, r5
 801070e:	4630      	mov	r0, r6
 8010710:	f7ff fab2 	bl	800fc78 <__swsetup_r>
 8010714:	b1c0      	cbz	r0, 8010748 <_vfiprintf_r+0x78>
 8010716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010718:	07dc      	lsls	r4, r3, #31
 801071a:	d50e      	bpl.n	801073a <_vfiprintf_r+0x6a>
 801071c:	f04f 30ff 	mov.w	r0, #4294967295
 8010720:	b01d      	add	sp, #116	; 0x74
 8010722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010726:	4b7b      	ldr	r3, [pc, #492]	; (8010914 <_vfiprintf_r+0x244>)
 8010728:	429d      	cmp	r5, r3
 801072a:	d101      	bne.n	8010730 <_vfiprintf_r+0x60>
 801072c:	68b5      	ldr	r5, [r6, #8]
 801072e:	e7df      	b.n	80106f0 <_vfiprintf_r+0x20>
 8010730:	4b79      	ldr	r3, [pc, #484]	; (8010918 <_vfiprintf_r+0x248>)
 8010732:	429d      	cmp	r5, r3
 8010734:	bf08      	it	eq
 8010736:	68f5      	ldreq	r5, [r6, #12]
 8010738:	e7da      	b.n	80106f0 <_vfiprintf_r+0x20>
 801073a:	89ab      	ldrh	r3, [r5, #12]
 801073c:	0598      	lsls	r0, r3, #22
 801073e:	d4ed      	bmi.n	801071c <_vfiprintf_r+0x4c>
 8010740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010742:	f7ff fcf0 	bl	8010126 <__retarget_lock_release_recursive>
 8010746:	e7e9      	b.n	801071c <_vfiprintf_r+0x4c>
 8010748:	2300      	movs	r3, #0
 801074a:	9309      	str	r3, [sp, #36]	; 0x24
 801074c:	2320      	movs	r3, #32
 801074e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010752:	f8cd 800c 	str.w	r8, [sp, #12]
 8010756:	2330      	movs	r3, #48	; 0x30
 8010758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801091c <_vfiprintf_r+0x24c>
 801075c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010760:	f04f 0901 	mov.w	r9, #1
 8010764:	4623      	mov	r3, r4
 8010766:	469a      	mov	sl, r3
 8010768:	f813 2b01 	ldrb.w	r2, [r3], #1
 801076c:	b10a      	cbz	r2, 8010772 <_vfiprintf_r+0xa2>
 801076e:	2a25      	cmp	r2, #37	; 0x25
 8010770:	d1f9      	bne.n	8010766 <_vfiprintf_r+0x96>
 8010772:	ebba 0b04 	subs.w	fp, sl, r4
 8010776:	d00b      	beq.n	8010790 <_vfiprintf_r+0xc0>
 8010778:	465b      	mov	r3, fp
 801077a:	4622      	mov	r2, r4
 801077c:	4629      	mov	r1, r5
 801077e:	4630      	mov	r0, r6
 8010780:	f7ff ff93 	bl	80106aa <__sfputs_r>
 8010784:	3001      	adds	r0, #1
 8010786:	f000 80aa 	beq.w	80108de <_vfiprintf_r+0x20e>
 801078a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801078c:	445a      	add	r2, fp
 801078e:	9209      	str	r2, [sp, #36]	; 0x24
 8010790:	f89a 3000 	ldrb.w	r3, [sl]
 8010794:	2b00      	cmp	r3, #0
 8010796:	f000 80a2 	beq.w	80108de <_vfiprintf_r+0x20e>
 801079a:	2300      	movs	r3, #0
 801079c:	f04f 32ff 	mov.w	r2, #4294967295
 80107a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107a4:	f10a 0a01 	add.w	sl, sl, #1
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	9307      	str	r3, [sp, #28]
 80107ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107b0:	931a      	str	r3, [sp, #104]	; 0x68
 80107b2:	4654      	mov	r4, sl
 80107b4:	2205      	movs	r2, #5
 80107b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ba:	4858      	ldr	r0, [pc, #352]	; (801091c <_vfiprintf_r+0x24c>)
 80107bc:	f7f3 fd08 	bl	80041d0 <memchr>
 80107c0:	9a04      	ldr	r2, [sp, #16]
 80107c2:	b9d8      	cbnz	r0, 80107fc <_vfiprintf_r+0x12c>
 80107c4:	06d1      	lsls	r1, r2, #27
 80107c6:	bf44      	itt	mi
 80107c8:	2320      	movmi	r3, #32
 80107ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ce:	0713      	lsls	r3, r2, #28
 80107d0:	bf44      	itt	mi
 80107d2:	232b      	movmi	r3, #43	; 0x2b
 80107d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107d8:	f89a 3000 	ldrb.w	r3, [sl]
 80107dc:	2b2a      	cmp	r3, #42	; 0x2a
 80107de:	d015      	beq.n	801080c <_vfiprintf_r+0x13c>
 80107e0:	9a07      	ldr	r2, [sp, #28]
 80107e2:	4654      	mov	r4, sl
 80107e4:	2000      	movs	r0, #0
 80107e6:	f04f 0c0a 	mov.w	ip, #10
 80107ea:	4621      	mov	r1, r4
 80107ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107f0:	3b30      	subs	r3, #48	; 0x30
 80107f2:	2b09      	cmp	r3, #9
 80107f4:	d94e      	bls.n	8010894 <_vfiprintf_r+0x1c4>
 80107f6:	b1b0      	cbz	r0, 8010826 <_vfiprintf_r+0x156>
 80107f8:	9207      	str	r2, [sp, #28]
 80107fa:	e014      	b.n	8010826 <_vfiprintf_r+0x156>
 80107fc:	eba0 0308 	sub.w	r3, r0, r8
 8010800:	fa09 f303 	lsl.w	r3, r9, r3
 8010804:	4313      	orrs	r3, r2
 8010806:	9304      	str	r3, [sp, #16]
 8010808:	46a2      	mov	sl, r4
 801080a:	e7d2      	b.n	80107b2 <_vfiprintf_r+0xe2>
 801080c:	9b03      	ldr	r3, [sp, #12]
 801080e:	1d19      	adds	r1, r3, #4
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	9103      	str	r1, [sp, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	bfbb      	ittet	lt
 8010818:	425b      	neglt	r3, r3
 801081a:	f042 0202 	orrlt.w	r2, r2, #2
 801081e:	9307      	strge	r3, [sp, #28]
 8010820:	9307      	strlt	r3, [sp, #28]
 8010822:	bfb8      	it	lt
 8010824:	9204      	strlt	r2, [sp, #16]
 8010826:	7823      	ldrb	r3, [r4, #0]
 8010828:	2b2e      	cmp	r3, #46	; 0x2e
 801082a:	d10c      	bne.n	8010846 <_vfiprintf_r+0x176>
 801082c:	7863      	ldrb	r3, [r4, #1]
 801082e:	2b2a      	cmp	r3, #42	; 0x2a
 8010830:	d135      	bne.n	801089e <_vfiprintf_r+0x1ce>
 8010832:	9b03      	ldr	r3, [sp, #12]
 8010834:	1d1a      	adds	r2, r3, #4
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	9203      	str	r2, [sp, #12]
 801083a:	2b00      	cmp	r3, #0
 801083c:	bfb8      	it	lt
 801083e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010842:	3402      	adds	r4, #2
 8010844:	9305      	str	r3, [sp, #20]
 8010846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801092c <_vfiprintf_r+0x25c>
 801084a:	7821      	ldrb	r1, [r4, #0]
 801084c:	2203      	movs	r2, #3
 801084e:	4650      	mov	r0, sl
 8010850:	f7f3 fcbe 	bl	80041d0 <memchr>
 8010854:	b140      	cbz	r0, 8010868 <_vfiprintf_r+0x198>
 8010856:	2340      	movs	r3, #64	; 0x40
 8010858:	eba0 000a 	sub.w	r0, r0, sl
 801085c:	fa03 f000 	lsl.w	r0, r3, r0
 8010860:	9b04      	ldr	r3, [sp, #16]
 8010862:	4303      	orrs	r3, r0
 8010864:	3401      	adds	r4, #1
 8010866:	9304      	str	r3, [sp, #16]
 8010868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801086c:	482c      	ldr	r0, [pc, #176]	; (8010920 <_vfiprintf_r+0x250>)
 801086e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010872:	2206      	movs	r2, #6
 8010874:	f7f3 fcac 	bl	80041d0 <memchr>
 8010878:	2800      	cmp	r0, #0
 801087a:	d03f      	beq.n	80108fc <_vfiprintf_r+0x22c>
 801087c:	4b29      	ldr	r3, [pc, #164]	; (8010924 <_vfiprintf_r+0x254>)
 801087e:	bb1b      	cbnz	r3, 80108c8 <_vfiprintf_r+0x1f8>
 8010880:	9b03      	ldr	r3, [sp, #12]
 8010882:	3307      	adds	r3, #7
 8010884:	f023 0307 	bic.w	r3, r3, #7
 8010888:	3308      	adds	r3, #8
 801088a:	9303      	str	r3, [sp, #12]
 801088c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801088e:	443b      	add	r3, r7
 8010890:	9309      	str	r3, [sp, #36]	; 0x24
 8010892:	e767      	b.n	8010764 <_vfiprintf_r+0x94>
 8010894:	fb0c 3202 	mla	r2, ip, r2, r3
 8010898:	460c      	mov	r4, r1
 801089a:	2001      	movs	r0, #1
 801089c:	e7a5      	b.n	80107ea <_vfiprintf_r+0x11a>
 801089e:	2300      	movs	r3, #0
 80108a0:	3401      	adds	r4, #1
 80108a2:	9305      	str	r3, [sp, #20]
 80108a4:	4619      	mov	r1, r3
 80108a6:	f04f 0c0a 	mov.w	ip, #10
 80108aa:	4620      	mov	r0, r4
 80108ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108b0:	3a30      	subs	r2, #48	; 0x30
 80108b2:	2a09      	cmp	r2, #9
 80108b4:	d903      	bls.n	80108be <_vfiprintf_r+0x1ee>
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d0c5      	beq.n	8010846 <_vfiprintf_r+0x176>
 80108ba:	9105      	str	r1, [sp, #20]
 80108bc:	e7c3      	b.n	8010846 <_vfiprintf_r+0x176>
 80108be:	fb0c 2101 	mla	r1, ip, r1, r2
 80108c2:	4604      	mov	r4, r0
 80108c4:	2301      	movs	r3, #1
 80108c6:	e7f0      	b.n	80108aa <_vfiprintf_r+0x1da>
 80108c8:	ab03      	add	r3, sp, #12
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	462a      	mov	r2, r5
 80108ce:	4b16      	ldr	r3, [pc, #88]	; (8010928 <_vfiprintf_r+0x258>)
 80108d0:	a904      	add	r1, sp, #16
 80108d2:	4630      	mov	r0, r6
 80108d4:	f3af 8000 	nop.w
 80108d8:	4607      	mov	r7, r0
 80108da:	1c78      	adds	r0, r7, #1
 80108dc:	d1d6      	bne.n	801088c <_vfiprintf_r+0x1bc>
 80108de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108e0:	07d9      	lsls	r1, r3, #31
 80108e2:	d405      	bmi.n	80108f0 <_vfiprintf_r+0x220>
 80108e4:	89ab      	ldrh	r3, [r5, #12]
 80108e6:	059a      	lsls	r2, r3, #22
 80108e8:	d402      	bmi.n	80108f0 <_vfiprintf_r+0x220>
 80108ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80108ec:	f7ff fc1b 	bl	8010126 <__retarget_lock_release_recursive>
 80108f0:	89ab      	ldrh	r3, [r5, #12]
 80108f2:	065b      	lsls	r3, r3, #25
 80108f4:	f53f af12 	bmi.w	801071c <_vfiprintf_r+0x4c>
 80108f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108fa:	e711      	b.n	8010720 <_vfiprintf_r+0x50>
 80108fc:	ab03      	add	r3, sp, #12
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	462a      	mov	r2, r5
 8010902:	4b09      	ldr	r3, [pc, #36]	; (8010928 <_vfiprintf_r+0x258>)
 8010904:	a904      	add	r1, sp, #16
 8010906:	4630      	mov	r0, r6
 8010908:	f000 f880 	bl	8010a0c <_printf_i>
 801090c:	e7e4      	b.n	80108d8 <_vfiprintf_r+0x208>
 801090e:	bf00      	nop
 8010910:	08011730 	.word	0x08011730
 8010914:	08011750 	.word	0x08011750
 8010918:	08011710 	.word	0x08011710
 801091c:	08011770 	.word	0x08011770
 8010920:	0801177a 	.word	0x0801177a
 8010924:	00000000 	.word	0x00000000
 8010928:	080106ab 	.word	0x080106ab
 801092c:	08011776 	.word	0x08011776

08010930 <_printf_common>:
 8010930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010934:	4616      	mov	r6, r2
 8010936:	4699      	mov	r9, r3
 8010938:	688a      	ldr	r2, [r1, #8]
 801093a:	690b      	ldr	r3, [r1, #16]
 801093c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010940:	4293      	cmp	r3, r2
 8010942:	bfb8      	it	lt
 8010944:	4613      	movlt	r3, r2
 8010946:	6033      	str	r3, [r6, #0]
 8010948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801094c:	4607      	mov	r7, r0
 801094e:	460c      	mov	r4, r1
 8010950:	b10a      	cbz	r2, 8010956 <_printf_common+0x26>
 8010952:	3301      	adds	r3, #1
 8010954:	6033      	str	r3, [r6, #0]
 8010956:	6823      	ldr	r3, [r4, #0]
 8010958:	0699      	lsls	r1, r3, #26
 801095a:	bf42      	ittt	mi
 801095c:	6833      	ldrmi	r3, [r6, #0]
 801095e:	3302      	addmi	r3, #2
 8010960:	6033      	strmi	r3, [r6, #0]
 8010962:	6825      	ldr	r5, [r4, #0]
 8010964:	f015 0506 	ands.w	r5, r5, #6
 8010968:	d106      	bne.n	8010978 <_printf_common+0x48>
 801096a:	f104 0a19 	add.w	sl, r4, #25
 801096e:	68e3      	ldr	r3, [r4, #12]
 8010970:	6832      	ldr	r2, [r6, #0]
 8010972:	1a9b      	subs	r3, r3, r2
 8010974:	42ab      	cmp	r3, r5
 8010976:	dc26      	bgt.n	80109c6 <_printf_common+0x96>
 8010978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801097c:	1e13      	subs	r3, r2, #0
 801097e:	6822      	ldr	r2, [r4, #0]
 8010980:	bf18      	it	ne
 8010982:	2301      	movne	r3, #1
 8010984:	0692      	lsls	r2, r2, #26
 8010986:	d42b      	bmi.n	80109e0 <_printf_common+0xb0>
 8010988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801098c:	4649      	mov	r1, r9
 801098e:	4638      	mov	r0, r7
 8010990:	47c0      	blx	r8
 8010992:	3001      	adds	r0, #1
 8010994:	d01e      	beq.n	80109d4 <_printf_common+0xa4>
 8010996:	6823      	ldr	r3, [r4, #0]
 8010998:	68e5      	ldr	r5, [r4, #12]
 801099a:	6832      	ldr	r2, [r6, #0]
 801099c:	f003 0306 	and.w	r3, r3, #6
 80109a0:	2b04      	cmp	r3, #4
 80109a2:	bf08      	it	eq
 80109a4:	1aad      	subeq	r5, r5, r2
 80109a6:	68a3      	ldr	r3, [r4, #8]
 80109a8:	6922      	ldr	r2, [r4, #16]
 80109aa:	bf0c      	ite	eq
 80109ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80109b0:	2500      	movne	r5, #0
 80109b2:	4293      	cmp	r3, r2
 80109b4:	bfc4      	itt	gt
 80109b6:	1a9b      	subgt	r3, r3, r2
 80109b8:	18ed      	addgt	r5, r5, r3
 80109ba:	2600      	movs	r6, #0
 80109bc:	341a      	adds	r4, #26
 80109be:	42b5      	cmp	r5, r6
 80109c0:	d11a      	bne.n	80109f8 <_printf_common+0xc8>
 80109c2:	2000      	movs	r0, #0
 80109c4:	e008      	b.n	80109d8 <_printf_common+0xa8>
 80109c6:	2301      	movs	r3, #1
 80109c8:	4652      	mov	r2, sl
 80109ca:	4649      	mov	r1, r9
 80109cc:	4638      	mov	r0, r7
 80109ce:	47c0      	blx	r8
 80109d0:	3001      	adds	r0, #1
 80109d2:	d103      	bne.n	80109dc <_printf_common+0xac>
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109dc:	3501      	adds	r5, #1
 80109de:	e7c6      	b.n	801096e <_printf_common+0x3e>
 80109e0:	18e1      	adds	r1, r4, r3
 80109e2:	1c5a      	adds	r2, r3, #1
 80109e4:	2030      	movs	r0, #48	; 0x30
 80109e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109ea:	4422      	add	r2, r4
 80109ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109f4:	3302      	adds	r3, #2
 80109f6:	e7c7      	b.n	8010988 <_printf_common+0x58>
 80109f8:	2301      	movs	r3, #1
 80109fa:	4622      	mov	r2, r4
 80109fc:	4649      	mov	r1, r9
 80109fe:	4638      	mov	r0, r7
 8010a00:	47c0      	blx	r8
 8010a02:	3001      	adds	r0, #1
 8010a04:	d0e6      	beq.n	80109d4 <_printf_common+0xa4>
 8010a06:	3601      	adds	r6, #1
 8010a08:	e7d9      	b.n	80109be <_printf_common+0x8e>
	...

08010a0c <_printf_i>:
 8010a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010a10:	7e0f      	ldrb	r7, [r1, #24]
 8010a12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010a14:	2f78      	cmp	r7, #120	; 0x78
 8010a16:	4691      	mov	r9, r2
 8010a18:	4680      	mov	r8, r0
 8010a1a:	460c      	mov	r4, r1
 8010a1c:	469a      	mov	sl, r3
 8010a1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010a22:	d807      	bhi.n	8010a34 <_printf_i+0x28>
 8010a24:	2f62      	cmp	r7, #98	; 0x62
 8010a26:	d80a      	bhi.n	8010a3e <_printf_i+0x32>
 8010a28:	2f00      	cmp	r7, #0
 8010a2a:	f000 80d8 	beq.w	8010bde <_printf_i+0x1d2>
 8010a2e:	2f58      	cmp	r7, #88	; 0x58
 8010a30:	f000 80a3 	beq.w	8010b7a <_printf_i+0x16e>
 8010a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a3c:	e03a      	b.n	8010ab4 <_printf_i+0xa8>
 8010a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a42:	2b15      	cmp	r3, #21
 8010a44:	d8f6      	bhi.n	8010a34 <_printf_i+0x28>
 8010a46:	a101      	add	r1, pc, #4	; (adr r1, 8010a4c <_printf_i+0x40>)
 8010a48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a4c:	08010aa5 	.word	0x08010aa5
 8010a50:	08010ab9 	.word	0x08010ab9
 8010a54:	08010a35 	.word	0x08010a35
 8010a58:	08010a35 	.word	0x08010a35
 8010a5c:	08010a35 	.word	0x08010a35
 8010a60:	08010a35 	.word	0x08010a35
 8010a64:	08010ab9 	.word	0x08010ab9
 8010a68:	08010a35 	.word	0x08010a35
 8010a6c:	08010a35 	.word	0x08010a35
 8010a70:	08010a35 	.word	0x08010a35
 8010a74:	08010a35 	.word	0x08010a35
 8010a78:	08010bc5 	.word	0x08010bc5
 8010a7c:	08010ae9 	.word	0x08010ae9
 8010a80:	08010ba7 	.word	0x08010ba7
 8010a84:	08010a35 	.word	0x08010a35
 8010a88:	08010a35 	.word	0x08010a35
 8010a8c:	08010be7 	.word	0x08010be7
 8010a90:	08010a35 	.word	0x08010a35
 8010a94:	08010ae9 	.word	0x08010ae9
 8010a98:	08010a35 	.word	0x08010a35
 8010a9c:	08010a35 	.word	0x08010a35
 8010aa0:	08010baf 	.word	0x08010baf
 8010aa4:	682b      	ldr	r3, [r5, #0]
 8010aa6:	1d1a      	adds	r2, r3, #4
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	602a      	str	r2, [r5, #0]
 8010aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	e0a3      	b.n	8010c00 <_printf_i+0x1f4>
 8010ab8:	6820      	ldr	r0, [r4, #0]
 8010aba:	6829      	ldr	r1, [r5, #0]
 8010abc:	0606      	lsls	r6, r0, #24
 8010abe:	f101 0304 	add.w	r3, r1, #4
 8010ac2:	d50a      	bpl.n	8010ada <_printf_i+0xce>
 8010ac4:	680e      	ldr	r6, [r1, #0]
 8010ac6:	602b      	str	r3, [r5, #0]
 8010ac8:	2e00      	cmp	r6, #0
 8010aca:	da03      	bge.n	8010ad4 <_printf_i+0xc8>
 8010acc:	232d      	movs	r3, #45	; 0x2d
 8010ace:	4276      	negs	r6, r6
 8010ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ad4:	485e      	ldr	r0, [pc, #376]	; (8010c50 <_printf_i+0x244>)
 8010ad6:	230a      	movs	r3, #10
 8010ad8:	e019      	b.n	8010b0e <_printf_i+0x102>
 8010ada:	680e      	ldr	r6, [r1, #0]
 8010adc:	602b      	str	r3, [r5, #0]
 8010ade:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ae2:	bf18      	it	ne
 8010ae4:	b236      	sxthne	r6, r6
 8010ae6:	e7ef      	b.n	8010ac8 <_printf_i+0xbc>
 8010ae8:	682b      	ldr	r3, [r5, #0]
 8010aea:	6820      	ldr	r0, [r4, #0]
 8010aec:	1d19      	adds	r1, r3, #4
 8010aee:	6029      	str	r1, [r5, #0]
 8010af0:	0601      	lsls	r1, r0, #24
 8010af2:	d501      	bpl.n	8010af8 <_printf_i+0xec>
 8010af4:	681e      	ldr	r6, [r3, #0]
 8010af6:	e002      	b.n	8010afe <_printf_i+0xf2>
 8010af8:	0646      	lsls	r6, r0, #25
 8010afa:	d5fb      	bpl.n	8010af4 <_printf_i+0xe8>
 8010afc:	881e      	ldrh	r6, [r3, #0]
 8010afe:	4854      	ldr	r0, [pc, #336]	; (8010c50 <_printf_i+0x244>)
 8010b00:	2f6f      	cmp	r7, #111	; 0x6f
 8010b02:	bf0c      	ite	eq
 8010b04:	2308      	moveq	r3, #8
 8010b06:	230a      	movne	r3, #10
 8010b08:	2100      	movs	r1, #0
 8010b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010b0e:	6865      	ldr	r5, [r4, #4]
 8010b10:	60a5      	str	r5, [r4, #8]
 8010b12:	2d00      	cmp	r5, #0
 8010b14:	bfa2      	ittt	ge
 8010b16:	6821      	ldrge	r1, [r4, #0]
 8010b18:	f021 0104 	bicge.w	r1, r1, #4
 8010b1c:	6021      	strge	r1, [r4, #0]
 8010b1e:	b90e      	cbnz	r6, 8010b24 <_printf_i+0x118>
 8010b20:	2d00      	cmp	r5, #0
 8010b22:	d04d      	beq.n	8010bc0 <_printf_i+0x1b4>
 8010b24:	4615      	mov	r5, r2
 8010b26:	fbb6 f1f3 	udiv	r1, r6, r3
 8010b2a:	fb03 6711 	mls	r7, r3, r1, r6
 8010b2e:	5dc7      	ldrb	r7, [r0, r7]
 8010b30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010b34:	4637      	mov	r7, r6
 8010b36:	42bb      	cmp	r3, r7
 8010b38:	460e      	mov	r6, r1
 8010b3a:	d9f4      	bls.n	8010b26 <_printf_i+0x11a>
 8010b3c:	2b08      	cmp	r3, #8
 8010b3e:	d10b      	bne.n	8010b58 <_printf_i+0x14c>
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	07de      	lsls	r6, r3, #31
 8010b44:	d508      	bpl.n	8010b58 <_printf_i+0x14c>
 8010b46:	6923      	ldr	r3, [r4, #16]
 8010b48:	6861      	ldr	r1, [r4, #4]
 8010b4a:	4299      	cmp	r1, r3
 8010b4c:	bfde      	ittt	le
 8010b4e:	2330      	movle	r3, #48	; 0x30
 8010b50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b58:	1b52      	subs	r2, r2, r5
 8010b5a:	6122      	str	r2, [r4, #16]
 8010b5c:	f8cd a000 	str.w	sl, [sp]
 8010b60:	464b      	mov	r3, r9
 8010b62:	aa03      	add	r2, sp, #12
 8010b64:	4621      	mov	r1, r4
 8010b66:	4640      	mov	r0, r8
 8010b68:	f7ff fee2 	bl	8010930 <_printf_common>
 8010b6c:	3001      	adds	r0, #1
 8010b6e:	d14c      	bne.n	8010c0a <_printf_i+0x1fe>
 8010b70:	f04f 30ff 	mov.w	r0, #4294967295
 8010b74:	b004      	add	sp, #16
 8010b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b7a:	4835      	ldr	r0, [pc, #212]	; (8010c50 <_printf_i+0x244>)
 8010b7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010b80:	6829      	ldr	r1, [r5, #0]
 8010b82:	6823      	ldr	r3, [r4, #0]
 8010b84:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b88:	6029      	str	r1, [r5, #0]
 8010b8a:	061d      	lsls	r5, r3, #24
 8010b8c:	d514      	bpl.n	8010bb8 <_printf_i+0x1ac>
 8010b8e:	07df      	lsls	r7, r3, #31
 8010b90:	bf44      	itt	mi
 8010b92:	f043 0320 	orrmi.w	r3, r3, #32
 8010b96:	6023      	strmi	r3, [r4, #0]
 8010b98:	b91e      	cbnz	r6, 8010ba2 <_printf_i+0x196>
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	f023 0320 	bic.w	r3, r3, #32
 8010ba0:	6023      	str	r3, [r4, #0]
 8010ba2:	2310      	movs	r3, #16
 8010ba4:	e7b0      	b.n	8010b08 <_printf_i+0xfc>
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	f043 0320 	orr.w	r3, r3, #32
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	2378      	movs	r3, #120	; 0x78
 8010bb0:	4828      	ldr	r0, [pc, #160]	; (8010c54 <_printf_i+0x248>)
 8010bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010bb6:	e7e3      	b.n	8010b80 <_printf_i+0x174>
 8010bb8:	0659      	lsls	r1, r3, #25
 8010bba:	bf48      	it	mi
 8010bbc:	b2b6      	uxthmi	r6, r6
 8010bbe:	e7e6      	b.n	8010b8e <_printf_i+0x182>
 8010bc0:	4615      	mov	r5, r2
 8010bc2:	e7bb      	b.n	8010b3c <_printf_i+0x130>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	6826      	ldr	r6, [r4, #0]
 8010bc8:	6961      	ldr	r1, [r4, #20]
 8010bca:	1d18      	adds	r0, r3, #4
 8010bcc:	6028      	str	r0, [r5, #0]
 8010bce:	0635      	lsls	r5, r6, #24
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	d501      	bpl.n	8010bd8 <_printf_i+0x1cc>
 8010bd4:	6019      	str	r1, [r3, #0]
 8010bd6:	e002      	b.n	8010bde <_printf_i+0x1d2>
 8010bd8:	0670      	lsls	r0, r6, #25
 8010bda:	d5fb      	bpl.n	8010bd4 <_printf_i+0x1c8>
 8010bdc:	8019      	strh	r1, [r3, #0]
 8010bde:	2300      	movs	r3, #0
 8010be0:	6123      	str	r3, [r4, #16]
 8010be2:	4615      	mov	r5, r2
 8010be4:	e7ba      	b.n	8010b5c <_printf_i+0x150>
 8010be6:	682b      	ldr	r3, [r5, #0]
 8010be8:	1d1a      	adds	r2, r3, #4
 8010bea:	602a      	str	r2, [r5, #0]
 8010bec:	681d      	ldr	r5, [r3, #0]
 8010bee:	6862      	ldr	r2, [r4, #4]
 8010bf0:	2100      	movs	r1, #0
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	f7f3 faec 	bl	80041d0 <memchr>
 8010bf8:	b108      	cbz	r0, 8010bfe <_printf_i+0x1f2>
 8010bfa:	1b40      	subs	r0, r0, r5
 8010bfc:	6060      	str	r0, [r4, #4]
 8010bfe:	6863      	ldr	r3, [r4, #4]
 8010c00:	6123      	str	r3, [r4, #16]
 8010c02:	2300      	movs	r3, #0
 8010c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c08:	e7a8      	b.n	8010b5c <_printf_i+0x150>
 8010c0a:	6923      	ldr	r3, [r4, #16]
 8010c0c:	462a      	mov	r2, r5
 8010c0e:	4649      	mov	r1, r9
 8010c10:	4640      	mov	r0, r8
 8010c12:	47d0      	blx	sl
 8010c14:	3001      	adds	r0, #1
 8010c16:	d0ab      	beq.n	8010b70 <_printf_i+0x164>
 8010c18:	6823      	ldr	r3, [r4, #0]
 8010c1a:	079b      	lsls	r3, r3, #30
 8010c1c:	d413      	bmi.n	8010c46 <_printf_i+0x23a>
 8010c1e:	68e0      	ldr	r0, [r4, #12]
 8010c20:	9b03      	ldr	r3, [sp, #12]
 8010c22:	4298      	cmp	r0, r3
 8010c24:	bfb8      	it	lt
 8010c26:	4618      	movlt	r0, r3
 8010c28:	e7a4      	b.n	8010b74 <_printf_i+0x168>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	4632      	mov	r2, r6
 8010c2e:	4649      	mov	r1, r9
 8010c30:	4640      	mov	r0, r8
 8010c32:	47d0      	blx	sl
 8010c34:	3001      	adds	r0, #1
 8010c36:	d09b      	beq.n	8010b70 <_printf_i+0x164>
 8010c38:	3501      	adds	r5, #1
 8010c3a:	68e3      	ldr	r3, [r4, #12]
 8010c3c:	9903      	ldr	r1, [sp, #12]
 8010c3e:	1a5b      	subs	r3, r3, r1
 8010c40:	42ab      	cmp	r3, r5
 8010c42:	dcf2      	bgt.n	8010c2a <_printf_i+0x21e>
 8010c44:	e7eb      	b.n	8010c1e <_printf_i+0x212>
 8010c46:	2500      	movs	r5, #0
 8010c48:	f104 0619 	add.w	r6, r4, #25
 8010c4c:	e7f5      	b.n	8010c3a <_printf_i+0x22e>
 8010c4e:	bf00      	nop
 8010c50:	08011781 	.word	0x08011781
 8010c54:	08011792 	.word	0x08011792

08010c58 <_sbrk_r>:
 8010c58:	b538      	push	{r3, r4, r5, lr}
 8010c5a:	4d06      	ldr	r5, [pc, #24]	; (8010c74 <_sbrk_r+0x1c>)
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	4604      	mov	r4, r0
 8010c60:	4608      	mov	r0, r1
 8010c62:	602b      	str	r3, [r5, #0]
 8010c64:	f7f7 fca0 	bl	80085a8 <_sbrk>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	d102      	bne.n	8010c72 <_sbrk_r+0x1a>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	b103      	cbz	r3, 8010c72 <_sbrk_r+0x1a>
 8010c70:	6023      	str	r3, [r4, #0]
 8010c72:	bd38      	pop	{r3, r4, r5, pc}
 8010c74:	20000a44 	.word	0x20000a44

08010c78 <__sread>:
 8010c78:	b510      	push	{r4, lr}
 8010c7a:	460c      	mov	r4, r1
 8010c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c80:	f000 f8f2 	bl	8010e68 <_read_r>
 8010c84:	2800      	cmp	r0, #0
 8010c86:	bfab      	itete	ge
 8010c88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8010c8c:	181b      	addge	r3, r3, r0
 8010c8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c92:	bfac      	ite	ge
 8010c94:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c96:	81a3      	strhlt	r3, [r4, #12]
 8010c98:	bd10      	pop	{r4, pc}

08010c9a <__swrite>:
 8010c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c9e:	461f      	mov	r7, r3
 8010ca0:	898b      	ldrh	r3, [r1, #12]
 8010ca2:	05db      	lsls	r3, r3, #23
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	4616      	mov	r6, r2
 8010caa:	d505      	bpl.n	8010cb8 <__swrite+0x1e>
 8010cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cb0:	2302      	movs	r3, #2
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f000 f870 	bl	8010d98 <_lseek_r>
 8010cb8:	89a3      	ldrh	r3, [r4, #12]
 8010cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cc2:	81a3      	strh	r3, [r4, #12]
 8010cc4:	4632      	mov	r2, r6
 8010cc6:	463b      	mov	r3, r7
 8010cc8:	4628      	mov	r0, r5
 8010cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cce:	f000 b817 	b.w	8010d00 <_write_r>

08010cd2 <__sseek>:
 8010cd2:	b510      	push	{r4, lr}
 8010cd4:	460c      	mov	r4, r1
 8010cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cda:	f000 f85d 	bl	8010d98 <_lseek_r>
 8010cde:	1c43      	adds	r3, r0, #1
 8010ce0:	89a3      	ldrh	r3, [r4, #12]
 8010ce2:	bf15      	itete	ne
 8010ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010cee:	81a3      	strheq	r3, [r4, #12]
 8010cf0:	bf18      	it	ne
 8010cf2:	81a3      	strhne	r3, [r4, #12]
 8010cf4:	bd10      	pop	{r4, pc}

08010cf6 <__sclose>:
 8010cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cfa:	f000 b81b 	b.w	8010d34 <_close_r>
	...

08010d00 <_write_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	4d07      	ldr	r5, [pc, #28]	; (8010d20 <_write_r+0x20>)
 8010d04:	4604      	mov	r4, r0
 8010d06:	4608      	mov	r0, r1
 8010d08:	4611      	mov	r1, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	602a      	str	r2, [r5, #0]
 8010d0e:	461a      	mov	r2, r3
 8010d10:	f7f7 fbf9 	bl	8008506 <_write>
 8010d14:	1c43      	adds	r3, r0, #1
 8010d16:	d102      	bne.n	8010d1e <_write_r+0x1e>
 8010d18:	682b      	ldr	r3, [r5, #0]
 8010d1a:	b103      	cbz	r3, 8010d1e <_write_r+0x1e>
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	bd38      	pop	{r3, r4, r5, pc}
 8010d20:	20000a44 	.word	0x20000a44

08010d24 <abort>:
 8010d24:	b508      	push	{r3, lr}
 8010d26:	2006      	movs	r0, #6
 8010d28:	f000 f8d8 	bl	8010edc <raise>
 8010d2c:	2001      	movs	r0, #1
 8010d2e:	f7f7 fbc3 	bl	80084b8 <_exit>
	...

08010d34 <_close_r>:
 8010d34:	b538      	push	{r3, r4, r5, lr}
 8010d36:	4d06      	ldr	r5, [pc, #24]	; (8010d50 <_close_r+0x1c>)
 8010d38:	2300      	movs	r3, #0
 8010d3a:	4604      	mov	r4, r0
 8010d3c:	4608      	mov	r0, r1
 8010d3e:	602b      	str	r3, [r5, #0]
 8010d40:	f7f7 fbfd 	bl	800853e <_close>
 8010d44:	1c43      	adds	r3, r0, #1
 8010d46:	d102      	bne.n	8010d4e <_close_r+0x1a>
 8010d48:	682b      	ldr	r3, [r5, #0]
 8010d4a:	b103      	cbz	r3, 8010d4e <_close_r+0x1a>
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	bd38      	pop	{r3, r4, r5, pc}
 8010d50:	20000a44 	.word	0x20000a44

08010d54 <_fstat_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_fstat_r+0x20>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	4611      	mov	r1, r2
 8010d60:	602b      	str	r3, [r5, #0]
 8010d62:	f7f7 fbf8 	bl	8008556 <_fstat>
 8010d66:	1c43      	adds	r3, r0, #1
 8010d68:	d102      	bne.n	8010d70 <_fstat_r+0x1c>
 8010d6a:	682b      	ldr	r3, [r5, #0]
 8010d6c:	b103      	cbz	r3, 8010d70 <_fstat_r+0x1c>
 8010d6e:	6023      	str	r3, [r4, #0]
 8010d70:	bd38      	pop	{r3, r4, r5, pc}
 8010d72:	bf00      	nop
 8010d74:	20000a44 	.word	0x20000a44

08010d78 <_isatty_r>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4d06      	ldr	r5, [pc, #24]	; (8010d94 <_isatty_r+0x1c>)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	4608      	mov	r0, r1
 8010d82:	602b      	str	r3, [r5, #0]
 8010d84:	f7f7 fbf7 	bl	8008576 <_isatty>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d102      	bne.n	8010d92 <_isatty_r+0x1a>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	b103      	cbz	r3, 8010d92 <_isatty_r+0x1a>
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	20000a44 	.word	0x20000a44

08010d98 <_lseek_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_lseek_r+0x20>)
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	4608      	mov	r0, r1
 8010da0:	4611      	mov	r1, r2
 8010da2:	2200      	movs	r2, #0
 8010da4:	602a      	str	r2, [r5, #0]
 8010da6:	461a      	mov	r2, r3
 8010da8:	f7f7 fbf0 	bl	800858c <_lseek>
 8010dac:	1c43      	adds	r3, r0, #1
 8010dae:	d102      	bne.n	8010db6 <_lseek_r+0x1e>
 8010db0:	682b      	ldr	r3, [r5, #0]
 8010db2:	b103      	cbz	r3, 8010db6 <_lseek_r+0x1e>
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	bd38      	pop	{r3, r4, r5, pc}
 8010db8:	20000a44 	.word	0x20000a44

08010dbc <memmove>:
 8010dbc:	4288      	cmp	r0, r1
 8010dbe:	b510      	push	{r4, lr}
 8010dc0:	eb01 0402 	add.w	r4, r1, r2
 8010dc4:	d902      	bls.n	8010dcc <memmove+0x10>
 8010dc6:	4284      	cmp	r4, r0
 8010dc8:	4623      	mov	r3, r4
 8010dca:	d807      	bhi.n	8010ddc <memmove+0x20>
 8010dcc:	1e43      	subs	r3, r0, #1
 8010dce:	42a1      	cmp	r1, r4
 8010dd0:	d008      	beq.n	8010de4 <memmove+0x28>
 8010dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dda:	e7f8      	b.n	8010dce <memmove+0x12>
 8010ddc:	4402      	add	r2, r0
 8010dde:	4601      	mov	r1, r0
 8010de0:	428a      	cmp	r2, r1
 8010de2:	d100      	bne.n	8010de6 <memmove+0x2a>
 8010de4:	bd10      	pop	{r4, pc}
 8010de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dee:	e7f7      	b.n	8010de0 <memmove+0x24>

08010df0 <__malloc_lock>:
 8010df0:	4801      	ldr	r0, [pc, #4]	; (8010df8 <__malloc_lock+0x8>)
 8010df2:	f7ff b997 	b.w	8010124 <__retarget_lock_acquire_recursive>
 8010df6:	bf00      	nop
 8010df8:	20000a38 	.word	0x20000a38

08010dfc <__malloc_unlock>:
 8010dfc:	4801      	ldr	r0, [pc, #4]	; (8010e04 <__malloc_unlock+0x8>)
 8010dfe:	f7ff b992 	b.w	8010126 <__retarget_lock_release_recursive>
 8010e02:	bf00      	nop
 8010e04:	20000a38 	.word	0x20000a38

08010e08 <_realloc_r>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	4614      	mov	r4, r2
 8010e10:	460e      	mov	r6, r1
 8010e12:	b921      	cbnz	r1, 8010e1e <_realloc_r+0x16>
 8010e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e18:	4611      	mov	r1, r2
 8010e1a:	f7ff ba5f 	b.w	80102dc <_malloc_r>
 8010e1e:	b92a      	cbnz	r2, 8010e2c <_realloc_r+0x24>
 8010e20:	f7ff f9f0 	bl	8010204 <_free_r>
 8010e24:	4625      	mov	r5, r4
 8010e26:	4628      	mov	r0, r5
 8010e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e2c:	f000 f872 	bl	8010f14 <_malloc_usable_size_r>
 8010e30:	4284      	cmp	r4, r0
 8010e32:	4607      	mov	r7, r0
 8010e34:	d802      	bhi.n	8010e3c <_realloc_r+0x34>
 8010e36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010e3a:	d812      	bhi.n	8010e62 <_realloc_r+0x5a>
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	4640      	mov	r0, r8
 8010e40:	f7ff fa4c 	bl	80102dc <_malloc_r>
 8010e44:	4605      	mov	r5, r0
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d0ed      	beq.n	8010e26 <_realloc_r+0x1e>
 8010e4a:	42bc      	cmp	r4, r7
 8010e4c:	4622      	mov	r2, r4
 8010e4e:	4631      	mov	r1, r6
 8010e50:	bf28      	it	cs
 8010e52:	463a      	movcs	r2, r7
 8010e54:	f7fe fcee 	bl	800f834 <memcpy>
 8010e58:	4631      	mov	r1, r6
 8010e5a:	4640      	mov	r0, r8
 8010e5c:	f7ff f9d2 	bl	8010204 <_free_r>
 8010e60:	e7e1      	b.n	8010e26 <_realloc_r+0x1e>
 8010e62:	4635      	mov	r5, r6
 8010e64:	e7df      	b.n	8010e26 <_realloc_r+0x1e>
	...

08010e68 <_read_r>:
 8010e68:	b538      	push	{r3, r4, r5, lr}
 8010e6a:	4d07      	ldr	r5, [pc, #28]	; (8010e88 <_read_r+0x20>)
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	4608      	mov	r0, r1
 8010e70:	4611      	mov	r1, r2
 8010e72:	2200      	movs	r2, #0
 8010e74:	602a      	str	r2, [r5, #0]
 8010e76:	461a      	mov	r2, r3
 8010e78:	f7f7 fb28 	bl	80084cc <_read>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_read_r+0x1e>
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_read_r+0x1e>
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	20000a44 	.word	0x20000a44

08010e8c <_raise_r>:
 8010e8c:	291f      	cmp	r1, #31
 8010e8e:	b538      	push	{r3, r4, r5, lr}
 8010e90:	4604      	mov	r4, r0
 8010e92:	460d      	mov	r5, r1
 8010e94:	d904      	bls.n	8010ea0 <_raise_r+0x14>
 8010e96:	2316      	movs	r3, #22
 8010e98:	6003      	str	r3, [r0, #0]
 8010e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e9e:	bd38      	pop	{r3, r4, r5, pc}
 8010ea0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ea2:	b112      	cbz	r2, 8010eaa <_raise_r+0x1e>
 8010ea4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ea8:	b94b      	cbnz	r3, 8010ebe <_raise_r+0x32>
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f000 f830 	bl	8010f10 <_getpid_r>
 8010eb0:	462a      	mov	r2, r5
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eba:	f000 b817 	b.w	8010eec <_kill_r>
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	d00a      	beq.n	8010ed8 <_raise_r+0x4c>
 8010ec2:	1c59      	adds	r1, r3, #1
 8010ec4:	d103      	bne.n	8010ece <_raise_r+0x42>
 8010ec6:	2316      	movs	r3, #22
 8010ec8:	6003      	str	r3, [r0, #0]
 8010eca:	2001      	movs	r0, #1
 8010ecc:	e7e7      	b.n	8010e9e <_raise_r+0x12>
 8010ece:	2400      	movs	r4, #0
 8010ed0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	4798      	blx	r3
 8010ed8:	2000      	movs	r0, #0
 8010eda:	e7e0      	b.n	8010e9e <_raise_r+0x12>

08010edc <raise>:
 8010edc:	4b02      	ldr	r3, [pc, #8]	; (8010ee8 <raise+0xc>)
 8010ede:	4601      	mov	r1, r0
 8010ee0:	6818      	ldr	r0, [r3, #0]
 8010ee2:	f7ff bfd3 	b.w	8010e8c <_raise_r>
 8010ee6:	bf00      	nop
 8010ee8:	2000004c 	.word	0x2000004c

08010eec <_kill_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d07      	ldr	r5, [pc, #28]	; (8010f0c <_kill_r+0x20>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	602b      	str	r3, [r5, #0]
 8010efa:	f7f7 facd 	bl	8008498 <_kill>
 8010efe:	1c43      	adds	r3, r0, #1
 8010f00:	d102      	bne.n	8010f08 <_kill_r+0x1c>
 8010f02:	682b      	ldr	r3, [r5, #0]
 8010f04:	b103      	cbz	r3, 8010f08 <_kill_r+0x1c>
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	bd38      	pop	{r3, r4, r5, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20000a44 	.word	0x20000a44

08010f10 <_getpid_r>:
 8010f10:	f7f7 baba 	b.w	8008488 <_getpid>

08010f14 <_malloc_usable_size_r>:
 8010f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f18:	1f18      	subs	r0, r3, #4
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	bfbc      	itt	lt
 8010f1e:	580b      	ldrlt	r3, [r1, r0]
 8010f20:	18c0      	addlt	r0, r0, r3
 8010f22:	4770      	bx	lr

08010f24 <_init>:
 8010f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f26:	bf00      	nop
 8010f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f2a:	bc08      	pop	{r3}
 8010f2c:	469e      	mov	lr, r3
 8010f2e:	4770      	bx	lr

08010f30 <_fini>:
 8010f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f32:	bf00      	nop
 8010f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f36:	bc08      	pop	{r3}
 8010f38:	469e      	mov	lr, r3
 8010f3a:	4770      	bx	lr
