
SL06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003480  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003658  08003658  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  0800366c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  0800366c  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d728  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bab  00000000  00000000  0002d764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0002fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025de0  00000000  00000000  00030838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb2b  00000000  00000000  00056618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe81  00000000  00000000  00063143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014efc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  0014f014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035f0 	.word	0x080035f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035f0 	.word	0x080035f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_RTCEx_TimeStampEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004d4:	2120      	movs	r1, #32
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004da:	f000 fdcd 	bl	8001078 <HAL_GPIO_TogglePin>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fa74 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f818 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8ea 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 f8b8 	bl	800066c <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004fc:	f000 f866 	bl	80005cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0,0xdead0001);
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <main+0x30>)
 8000502:	2100      	movs	r1, #0
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x34>)
 8000506:	f002 fb77 	bl	8002bf8 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0,0xdead0002);
 800050a:	4a05      	ldr	r2, [pc, #20]	; (8000520 <main+0x38>)
 800050c:	2100      	movs	r1, #0
 800050e:	4803      	ldr	r0, [pc, #12]	; (800051c <main+0x34>)
 8000510:	f002 fb72 	bl	8002bf8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x2c>
 8000516:	bf00      	nop
 8000518:	dead0001 	.word	0xdead0001
 800051c:	20000028 	.word	0x20000028
 8000520:	dead0002 	.word	0xdead0002

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0314 	add.w	r3, r7, #20
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 f854 	bl	80035e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000546:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054a:	f000 fdbd 	bl	80010c8 <HAL_PWREx_ControlVoltageScaling>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000554:	f000 f910 	bl	8000778 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000558:	230a      	movs	r3, #10
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000560:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000572:	2301      	movs	r3, #1
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000576:	230a      	movs	r3, #10
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fdf2 	bl	8001174 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000596:	f000 f8ef 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2303      	movs	r3, #3
 80005a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	2104      	movs	r1, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f9ba 	bl	800192c <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005be:	f000 f8db 	bl	8000778 <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3758      	adds	r7, #88	; 0x58
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2228      	movs	r2, #40	; 0x28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f801 	bl	80035e0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_RTC_Init+0x98>)
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <MX_RTC_Init+0x9c>)
 80005e2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_RTC_Init+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_RTC_Init+0x98>)
 80005ec:	227f      	movs	r2, #127	; 0x7f
 80005ee:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_RTC_Init+0x98>)
 80005f2:	22ff      	movs	r2, #255	; 0xff
 80005f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_RTC_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_RTC_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_RTC_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_RTC_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800060e:	4815      	ldr	r0, [pc, #84]	; (8000664 <MX_RTC_Init+0x98>)
 8000610:	f002 f86c 	bl	80026ec <HAL_RTC_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f8ad 	bl	8000778 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 800061e:	2301      	movs	r3, #1
 8000620:	603b      	str	r3, [r7, #0]
  sTamper.Interrupt = RTC_TAMPER1_INTERRUPT;
 8000622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000626:	607b      	str	r3, [r7, #4]
  sTamper.Trigger = RTC_TAMPERTRIGGER_FALLINGEDGE;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper_IT(&hrtc, &sTamper) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_RTC_Init+0x98>)
 800064e:	f002 f9e1 	bl	8002a14 <HAL_RTCEx_SetTamper_IT>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_RTC_Init+0x90>
  {
    Error_Handler();
 8000658:	f000 f88e 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000028 	.word	0x20000028
 8000668:	40002800 	.word	0x40002800

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <MX_USART2_UART_Init+0x5c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x58>)
 80006b0:	f002 fabb 	bl	8002c2a <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 f85d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000004c 	.word	0x2000004c
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_GPIO_Init+0xa8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a23      	ldr	r2, [pc, #140]	; (8000774 <MX_GPIO_Init+0xa8>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_GPIO_Init+0xa8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_GPIO_Init+0xa8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_GPIO_Init+0xa8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a11      	ldr	r2, [pc, #68]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_GPIO_Init+0xa8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 fc7d 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074e:	2320      	movs	r3, #32
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000768:	f000 fac4 	bl	8000cf4 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40021000 	.word	0x40021000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x44>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_MspInit+0x44>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6613      	str	r3, [r2, #96]	; 0x60
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <HAL_MspInit+0x44>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x44>)
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	6593      	str	r3, [r2, #88]	; 0x58
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0a4      	sub	sp, #144	; 0x90
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	f107 0308 	add.w	r3, r7, #8
 80007d8:	2288      	movs	r2, #136	; 0x88
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 feff 	bl	80035e0 <memset>
  if(hrtc->Instance==RTC)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_RTC_MspInit+0x6c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d120      	bne.n	800082e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fab8 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800080a:	f7ff ffb5 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <HAL_RTC_MspInit+0x70>)
 8000810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000814:	4a09      	ldr	r2, [pc, #36]	; (800083c <HAL_RTC_MspInit+0x70>)
 8000816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2002      	movs	r0, #2
 8000824:	f000 fa2f 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_IRQn);
 8000828:	2002      	movs	r0, #2
 800082a:	f000 fa48 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800082e:	bf00      	nop
 8000830:	3790      	adds	r7, #144	; 0x90
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40002800 	.word	0x40002800
 800083c:	40021000 	.word	0x40021000

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b0ac      	sub	sp, #176	; 0xb0
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2288      	movs	r2, #136	; 0x88
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f002 febd 	bl	80035e0 <memset>
  if(huart->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_UART_MspInit+0xb0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d13b      	bne.n	80008e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000870:	2302      	movs	r3, #2
 8000872:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000874:	2300      	movs	r3, #0
 8000876:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fa79 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000888:	f7ff ff76 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 8000892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000896:	6593      	str	r3, [r2, #88]	; 0x58
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0xb4>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008bc:	230c      	movs	r3, #12
 80008be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d4:	2307      	movs	r3, #7
 80008d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fa06 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	37b0      	adds	r7, #176	; 0xb0
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40021000 	.word	0x40021000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8a4 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <TAMP_STAMP_IRQHandler>:

/**
  * @brief This function handles RTC tamper and time stamp, CSS on LSE interrupts through EXTI line 19.
  */
void TAMP_STAMP_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_IRQn 0 */

  /* USER CODE END TAMP_STAMP_IRQn 0 */
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <TAMP_STAMP_IRQHandler+0x10>)
 8000952:	f001 ffdd 	bl	8002910 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_IRQn 1 */

  /* USER CODE END TAMP_STAMP_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ffea 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 fdf1 	bl	8003598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fd97 	bl	80004e8 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c8:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 80009cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009d0:	200000d4 	.word	0x200000d4

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_Init+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f93e 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 f80f 	bl	8000a18 <HAL_InitTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff febd 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x70>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f949 	bl	8000cda <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10f      	bne.n	8000a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d809      	bhi.n	8000a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f913 	bl	8000c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0x74>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e001      	b.n	8000a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000d0 	.word	0x200000d0

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000d0 	.word	0x200000d0

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff29 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff3e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff31 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e17f      	b.n	8001004 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8171 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 0201 	and.w	r2, r3, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d118      	bne.n	8000dd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	08db      	lsrs	r3, r3, #3
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80ac 	beq.w	8000ffe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b5f      	ldr	r3, [pc, #380]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_GPIO_Init+0x330>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	089b      	lsrs	r3, r3, #2
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x242>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x338>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x23e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x33c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x23a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x340>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x236>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x344>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x232>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x348>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x34c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x22a>
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	e00c      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00a      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f22:	2305      	movs	r3, #5
 8000f24:	e008      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e004      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <HAL_GPIO_Init+0x244>
 8000f36:	2300      	movs	r3, #0
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	f002 0203 	and.w	r2, r2, #3
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	4093      	lsls	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f48:	4937      	ldr	r1, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x334>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f56:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f80:	4b30      	ldr	r3, [pc, #192]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_GPIO_Init+0x350>)
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa22 f303 	lsr.w	r3, r2, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	f47f ae78 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	48000400 	.word	0x48000400
 8001030:	48000800 	.word	0x48000800
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48001000 	.word	0x48001000
 800103c:	48001400 	.word	0x48001400
 8001040:	48001800 	.word	0x48001800
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001064:	e002      	b.n	800106c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800108a:	887a      	ldrh	r2, [r7, #2]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4013      	ands	r3, r2
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43d9      	mvns	r1, r3
 8001096:	887b      	ldrh	r3, [r7, #2]
 8001098:	400b      	ands	r3, r1
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40007000 	.word	0x40007000

080010c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d6:	d130      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e4:	d038      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	fb02 f303 	mul.w	r3, r2, r3
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001102:	fba2 2303 	umull	r2, r3, r2, r3
 8001106:	0c9b      	lsrs	r3, r3, #18
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800110c:	e002      	b.n	8001114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3b01      	subs	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d102      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f2      	bne.n	800110e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	d110      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e00f      	b.n	800115a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001146:	d007      	beq.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e3ca      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001186:	4b97      	ldr	r3, [pc, #604]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001190:	4b94      	ldr	r3, [pc, #592]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0310 	and.w	r3, r3, #16
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80e4 	beq.w	8001370 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_RCC_OscConfig+0x4a>
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	2b0c      	cmp	r3, #12
 80011b2:	f040 808b 	bne.w	80012cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	f040 8087 	bne.w	80012cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011be:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x62>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e3a2      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	4b82      	ldr	r3, [pc, #520]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_RCC_OscConfig+0x7c>
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ee:	e005      	b.n	80011fc <HAL_RCC_OscConfig+0x88>
 80011f0:	4b7c      	ldr	r3, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80011f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d223      	bcs.n	8001248 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fd55 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e383      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001214:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a72      	ldr	r2, [pc, #456]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b70      	ldr	r3, [pc, #448]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	496d      	ldr	r1, [pc, #436]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001232:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	4968      	ldr	r1, [pc, #416]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
 8001246:	e025      	b.n	8001294 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001248:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a65      	ldr	r2, [pc, #404]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4960      	ldr	r1, [pc, #384]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001266:	4b5f      	ldr	r3, [pc, #380]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	495b      	ldr	r1, [pc, #364]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fd15 	bl	8001cb4 <RCC_SetFlashLatencyFromMSIRange>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e343      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001294:	f000 fc4a 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	4950      	ldr	r1, [pc, #320]	; (80013e8 <HAL_RCC_OscConfig+0x274>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	4a4e      	ldr	r2, [pc, #312]	; (80013ec <HAL_RCC_OscConfig+0x278>)
 80012b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b4:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fbad 	bl	8000a18 <HAL_InitTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d052      	beq.n	800136e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	e327      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d032      	beq.n	800133a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a42      	ldr	r2, [pc, #264]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fbea 	bl	8000ab8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e8:	f7ff fbe6 	bl	8000ab8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e310      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a36      	ldr	r2, [pc, #216]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	4931      	ldr	r1, [pc, #196]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	492c      	ldr	r1, [pc, #176]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
 8001338:	e01a      	b.n	8001370 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001346:	f7ff fbb7 	bl	8000ab8 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134e:	f7ff fbb3 	bl	8000ab8 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e2dd      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1f0      	bne.n	800134e <HAL_RCC_OscConfig+0x1da>
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d074      	beq.n	8001466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b08      	cmp	r3, #8
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x21a>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d10e      	bne.n	80013a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d064      	beq.n	8001464 <HAL_RCC_OscConfig+0x2f0>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d160      	bne.n	8001464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e2ba      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x24a>
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e026      	b.n	800140c <HAL_RCC_OscConfig+0x298>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c6:	d115      	bne.n	80013f4 <HAL_RCC_OscConfig+0x280>
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a02      	ldr	r2, [pc, #8]	; (80013e4 <HAL_RCC_OscConfig+0x270>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e014      	b.n	800140c <HAL_RCC_OscConfig+0x298>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	08003608 	.word	0x08003608
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a9f      	ldr	r2, [pc, #636]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b9d      	ldr	r3, [pc, #628]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a9c      	ldr	r2, [pc, #624]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fb50 	bl	8000ab8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fb4c 	bl	8000ab8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e276      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142e:	4b92      	ldr	r3, [pc, #584]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2a8>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fb3c 	bl	8000ab8 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fb38 	bl	8000ab8 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e262      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001456:	4b88      	ldr	r3, [pc, #544]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x2d0>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d060      	beq.n	8001534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b04      	cmp	r3, #4
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x310>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d119      	bne.n	80014b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d116      	bne.n	80014b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001484:	4b7c      	ldr	r3, [pc, #496]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_OscConfig+0x328>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e23f      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	4973      	ldr	r1, [pc, #460]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	e040      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d023      	beq.n	8001502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6e      	ldr	r2, [pc, #440]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c6:	f7ff faf7 	bl	8000ab8 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014cc:	e008      	b.n	80014e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff faf3 	bl	8000ab8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e21d      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e0:	4b65      	ldr	r3, [pc, #404]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	495f      	ldr	r1, [pc, #380]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a5c      	ldr	r2, [pc, #368]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fad3 	bl	8000ab8 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff facf 	bl	8000ab8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1f9      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f0      	bne.n	8001516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d03c      	beq.n	80015ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01c      	beq.n	8001582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001548:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff faae 	bl	8000ab8 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff faaa 	bl	8000ab8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1d4      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001572:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ef      	beq.n	8001560 <HAL_RCC_OscConfig+0x3ec>
 8001580:	e01b      	b.n	80015ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001582:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001588:	4a3b      	ldr	r2, [pc, #236]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001592:	f7ff fa91 	bl	8000ab8 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159a:	f7ff fa8d 	bl	8000ab8 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e1b7      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ac:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ef      	bne.n	800159a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 80a6 	beq.w	8001714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10d      	bne.n	80015f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	4a26      	ldr	r2, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e2:	6593      	str	r3, [r2, #88]	; 0x58
 80015e4:	4b24      	ldr	r3, [pc, #144]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 80015e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f0:	2301      	movs	r3, #1
 80015f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_OscConfig+0x508>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d118      	bne.n	8001632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_RCC_OscConfig+0x508>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a1d      	ldr	r2, [pc, #116]	; (800167c <HAL_RCC_OscConfig+0x508>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160c:	f7ff fa54 	bl	8000ab8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff fa50 	bl	8000ab8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e17a      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_RCC_OscConfig+0x508>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d108      	bne.n	800164c <HAL_RCC_OscConfig+0x4d8>
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800163c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164a:	e029      	b.n	80016a0 <HAL_RCC_OscConfig+0x52c>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d115      	bne.n	8001680 <HAL_RCC_OscConfig+0x50c>
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	4a03      	ldr	r2, [pc, #12]	; (8001678 <HAL_RCC_OscConfig+0x504>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x52c>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40007000 	.word	0x40007000
 8001680:	4b9c      	ldr	r3, [pc, #624]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a9b      	ldr	r2, [pc, #620]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001690:	4b98      	ldr	r3, [pc, #608]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a97      	ldr	r2, [pc, #604]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d016      	beq.n	80016d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fa06 	bl	8000ab8 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fa02 	bl	8000ab8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e12a      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c6:	4b8b      	ldr	r3, [pc, #556]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80016c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ed      	beq.n	80016b0 <HAL_RCC_OscConfig+0x53c>
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff f9ef 	bl	8000ab8 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff f9eb 	bl	8000ab8 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e113      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f4:	4b7f      	ldr	r3, [pc, #508]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1ed      	bne.n	80016de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	4a79      	ldr	r2, [pc, #484]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800170e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80fe 	beq.w	800191a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b02      	cmp	r3, #2
 8001724:	f040 80d0 	bne.w	80018c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001728:	4b72      	ldr	r3, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0203 	and.w	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	429a      	cmp	r2, r3
 800173a:	d130      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	3b01      	subs	r3, #1
 8001748:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d127      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11f      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001768:	2a07      	cmp	r2, #7
 800176a:	bf14      	ite	ne
 800176c:	2201      	movne	r2, #1
 800176e:	2200      	moveq	r2, #0
 8001770:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001772:	4293      	cmp	r3, r2
 8001774:	d113      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d109      	bne.n	800179e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	085b      	lsrs	r3, r3, #1
 8001796:	3b01      	subs	r3, #1
 8001798:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179a:	429a      	cmp	r2, r3
 800179c:	d06e      	beq.n	800187c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d069      	beq.n	8001878 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0ad      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017cc:	f7ff f974 	bl	8000ab8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff f970 	bl	8000ab8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e09a      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x784>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001802:	3a01      	subs	r2, #1
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	4311      	orrs	r1, r2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180c:	0212      	lsls	r2, r2, #8
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001814:	0852      	lsrs	r2, r2, #1
 8001816:	3a01      	subs	r2, #1
 8001818:	0552      	lsls	r2, r2, #21
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001820:	0852      	lsrs	r2, r2, #1
 8001822:	3a01      	subs	r2, #1
 8001824:	0652      	lsls	r2, r2, #25
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182c:	0912      	lsrs	r2, r2, #4
 800182e:	0452      	lsls	r2, r2, #17
 8001830:	430a      	orrs	r2, r1
 8001832:	4930      	ldr	r1, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001838:	4b2e      	ldr	r3, [pc, #184]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a2a      	ldr	r2, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7ff f932 	bl	8000ab8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f92e 	bl	8000ab8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e058      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001876:	e050      	b.n	800191a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e04f      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d148      	bne.n	800191a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a19      	ldr	r2, [pc, #100]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a16      	ldr	r2, [pc, #88]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a0:	f7ff f90a 	bl	8000ab8 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f906 	bl	8000ab8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e030      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x734>
 80018c6:	e028      	b.n	800191a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d023      	beq.n	8001916 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_RCC_OscConfig+0x780>)
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018da:	f7ff f8ed 	bl	8000ab8 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	e00c      	b.n	80018fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff f8e9 	bl	8000ab8 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d905      	bls.n	80018fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e013      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
 80018f4:	40021000 	.word	0x40021000
 80018f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_OscConfig+0x7b0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1ec      	bne.n	80018e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x7b0>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4905      	ldr	r1, [pc, #20]	; (8001924 <HAL_RCC_OscConfig+0x7b0>)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x7b4>)
 8001910:	4013      	ands	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e001      	b.n	800191a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	feeefffc 	.word	0xfeeefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e7      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b72      	ldr	r3, [pc, #456]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4970      	ldr	r1, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b6e      	ldr	r3, [pc, #440]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0cf      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d908      	bls.n	800199e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	4960      	ldr	r1, [pc, #384]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04c      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0a6      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ca:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e09a      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e2:	4b4e      	ldr	r3, [pc, #312]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e086      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4943      	ldr	r1, [pc, #268]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a14:	f7ff f850 	bl	8000ab8 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff f84c 	bl	8000ab8 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e06e      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d010      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d208      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	492b      	ldr	r1, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d210      	bcs.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 0207 	bic.w	r2, r3, #7
 8001a88:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e036      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	4918      	ldr	r1, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4910      	ldr	r1, [pc, #64]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae0:	f000 f824 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ff87 	bl	8000a18 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08003608 	.word	0x08003608
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	2300      	movs	r3, #0
 8001b38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d11e      	bne.n	8001b9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b88:	4a2b      	ldr	r2, [pc, #172]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e004      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d134      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd0:	e005      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001bd4:	617b      	str	r3, [r7, #20]
      break;
 8001bd6:	e005      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bda:	617b      	str	r3, [r7, #20]
      break;
 8001bdc:	e002      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	617b      	str	r3, [r7, #20]
      break;
 8001be2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	3301      	adds	r3, #1
 8001bf0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	0e5b      	lsrs	r3, r3, #25
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	3301      	adds	r3, #1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c24:	69bb      	ldr	r3, [r7, #24]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08003620 	.word	0x08003620
 8001c3c:	00f42400 	.word	0x00f42400
 8001c40:	007a1200 	.word	0x007a1200

08001c44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000000 	.word	0x20000000

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c60:	f7ff fff0 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0a1b      	lsrs	r3, r3, #8
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4904      	ldr	r1, [pc, #16]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40021000 	.word	0x40021000
 8001c84:	08003618 	.word	0x08003618

08001c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c8c:	f7ff ffda 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0adb      	lsrs	r3, r3, #11
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08003618 	.word	0x08003618

08001cb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ccc:	f7ff f9ee 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001cd0:	6178      	str	r0, [r7, #20]
 8001cd2:	e014      	b.n	8001cfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cec:	f7ff f9de 	bl	80010ac <HAL_PWREx_GetVoltageRange>
 8001cf0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a1d      	ldr	r2, [pc, #116]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d04:	d10b      	bne.n	8001d1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b80      	cmp	r3, #128	; 0x80
 8001d0a:	d919      	bls.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8001d10:	d902      	bls.n	8001d18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d12:	2302      	movs	r3, #2
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	e013      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	e010      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d902      	bls.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d24:	2303      	movs	r3, #3
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e00a      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d102      	bne.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e004      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b70      	cmp	r3, #112	; 0x70
 8001d3a:	d101      	bne.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4909      	ldr	r1, [pc, #36]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d80:	2300      	movs	r3, #0
 8001d82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d041      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d98:	d02a      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d9e:	d824      	bhi.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001da4:	d008      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001daa:	d81e      	bhi.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db4:	d010      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001db6:	e018      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001db8:	4b86      	ldr	r3, [pc, #536]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a85      	ldr	r2, [pc, #532]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dc4:	e015      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fabb 	bl	8002348 <RCCEx_PLLSAI1_Config>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dd6:	e00c      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3320      	adds	r3, #32
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fba6 	bl	8002530 <RCCEx_PLLSAI2_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de8:	e003      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	74fb      	strb	r3, [r7, #19]
      break;
 8001dee:	e000      	b.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001df2:	7cfb      	ldrb	r3, [r7, #19]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001df8:	4b76      	ldr	r3, [pc, #472]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e06:	4973      	ldr	r1, [pc, #460]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e0e:	e001      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d041      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e28:	d02a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e2e:	d824      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e34:	d008      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e3a:	d81e      	bhi.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00a      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e44:	d010      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e46:	e018      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e48:	4b62      	ldr	r3, [pc, #392]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	4a61      	ldr	r2, [pc, #388]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e54:	e015      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fa73 	bl	8002348 <RCCEx_PLLSAI1_Config>
 8001e62:	4603      	mov	r3, r0
 8001e64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e66:	e00c      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fb5e 	bl	8002530 <RCCEx_PLLSAI2_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e78:	e003      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e7e:	e000      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10b      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e88:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e96:	494f      	ldr	r1, [pc, #316]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e9e:	e001      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea0:	7cfb      	ldrb	r3, [r7, #19]
 8001ea2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a0 	beq.w	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00d      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a40      	ldr	r2, [pc, #256]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ef4:	f7fe fde0 	bl	8000ab8 <HAL_GetTick>
 8001ef8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001efa:	e009      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efc:	f7fe fddc 	bl	8000ab8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d902      	bls.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f0e:	e005      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f10:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f1c:	7cfb      	ldrb	r3, [r7, #19]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d15c      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01f      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d019      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fd9b 	bl	8000ab8 <HAL_GetTick>
 8001f82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f84:	e00b      	b.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe fd97 	bl	8000ab8 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d902      	bls.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f9c:	e006      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ec      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc2:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fca:	e009      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	74bb      	strb	r3, [r7, #18]
 8001fd0:	e006      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe0:	7c7b      	ldrb	r3, [r7, #17]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b9e      	ldr	r3, [pc, #632]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a9d      	ldr	r2, [pc, #628]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ffe:	4b98      	ldr	r3, [pc, #608]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f023 0203 	bic.w	r2, r3, #3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	4994      	ldr	r1, [pc, #592]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002020:	4b8f      	ldr	r3, [pc, #572]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	f023 020c 	bic.w	r2, r3, #12
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	498c      	ldr	r1, [pc, #560]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002042:	4b87      	ldr	r3, [pc, #540]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4983      	ldr	r1, [pc, #524]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002052:	4313      	orrs	r3, r2
 8002054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002064:	4b7e      	ldr	r3, [pc, #504]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	497b      	ldr	r1, [pc, #492]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002074:	4313      	orrs	r3, r2
 8002076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002086:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	4972      	ldr	r1, [pc, #456]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002096:	4313      	orrs	r3, r2
 8002098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00a      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020a8:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	496a      	ldr	r1, [pc, #424]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ca:	4b65      	ldr	r3, [pc, #404]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	4961      	ldr	r1, [pc, #388]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020ec:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020fa:	4959      	ldr	r1, [pc, #356]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002114:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800211c:	4950      	ldr	r1, [pc, #320]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	4313      	orrs	r3, r2
 8002120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002130:	4b4b      	ldr	r3, [pc, #300]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	4948      	ldr	r1, [pc, #288]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002158:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	493f      	ldr	r1, [pc, #252]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d028      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002182:	4937      	ldr	r1, [pc, #220]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002192:	d106      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219e:	60d3      	str	r3, [r2, #12]
 80021a0:	e011      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3304      	adds	r3, #4
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f8c8 	bl	8002348 <RCCEx_PLLSAI1_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d028      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021d2:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e0:	491f      	ldr	r1, [pc, #124]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021f0:	d106      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fc:	60d3      	str	r3, [r2, #12]
 80021fe:	e011      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002208:	d10c      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	2101      	movs	r1, #1
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f899 	bl	8002348 <RCCEx_PLLSAI1_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d02b      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224e:	d109      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a02      	ldr	r2, [pc, #8]	; (8002260 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225a:	60d3      	str	r3, [r2, #12]
 800225c:	e014      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800225e:	bf00      	nop
 8002260:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800226c:	d10c      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f867 	bl	8002348 <RCCEx_PLLSAI1_Config>
 800227a:	4603      	mov	r3, r0
 800227c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d02f      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022a2:	4928      	ldr	r1, [pc, #160]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b2:	d10d      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2102      	movs	r1, #2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f844 	bl	8002348 <RCCEx_PLLSAI1_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d014      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	74bb      	strb	r3, [r7, #18]
 80022ce:	e011      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3320      	adds	r3, #32
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f925 	bl	8002530 <RCCEx_PLLSAI2_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00a      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002300:	4b10      	ldr	r3, [pc, #64]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800230e:	490d      	ldr	r1, [pc, #52]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00b      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002328:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002332:	4904      	ldr	r1, [pc, #16]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800233a:	7cbb      	ldrb	r3, [r7, #18]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000

08002348 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002356:	4b75      	ldr	r3, [pc, #468]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d018      	beq.n	8002394 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d10d      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
       ||
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800237a:	4b6c      	ldr	r3, [pc, #432]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	091b      	lsrs	r3, r3, #4
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
       ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d047      	beq.n	800241e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	e044      	b.n	800241e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d018      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x86>
 800239c:	2b03      	cmp	r3, #3
 800239e:	d825      	bhi.n	80023ec <RCCEx_PLLSAI1_Config+0xa4>
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d002      	beq.n	80023aa <RCCEx_PLLSAI1_Config+0x62>
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d009      	beq.n	80023bc <RCCEx_PLLSAI1_Config+0x74>
 80023a8:	e020      	b.n	80023ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11d      	bne.n	80023f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ba:	e01a      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d116      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023cc:	e013      	b.n	80023f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023da:	4b54      	ldr	r3, [pc, #336]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d109      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023ea:	e006      	b.n	80023fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e004      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023f2:	bf00      	nop
 80023f4:	e002      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	430b      	orrs	r3, r1
 8002418:	4944      	ldr	r1, [pc, #272]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d17d      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002424:	4b41      	ldr	r3, [pc, #260]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a40      	ldr	r2, [pc, #256]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 800242a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800242e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002430:	f7fe fb42 	bl	8000ab8 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002436:	e009      	b.n	800244c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002438:	f7fe fb3e 	bl	8000ab8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d902      	bls.n	800244c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	73fb      	strb	r3, [r7, #15]
        break;
 800244a:	e005      	b.n	8002458 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ef      	bne.n	8002438 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d160      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800246c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6892      	ldr	r2, [r2, #8]
 8002474:	0211      	lsls	r1, r2, #8
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68d2      	ldr	r2, [r2, #12]
 800247a:	0912      	lsrs	r2, r2, #4
 800247c:	0452      	lsls	r2, r2, #17
 800247e:	430a      	orrs	r2, r1
 8002480:	492a      	ldr	r1, [pc, #168]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	610b      	str	r3, [r1, #16]
 8002486:	e027      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d112      	bne.n	80024b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002496:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6892      	ldr	r2, [r2, #8]
 800249e:	0211      	lsls	r1, r2, #8
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6912      	ldr	r2, [r2, #16]
 80024a4:	0852      	lsrs	r2, r2, #1
 80024a6:	3a01      	subs	r2, #1
 80024a8:	0552      	lsls	r2, r2, #21
 80024aa:	430a      	orrs	r2, r1
 80024ac:	491f      	ldr	r1, [pc, #124]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	610b      	str	r3, [r1, #16]
 80024b2:	e011      	b.n	80024d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6892      	ldr	r2, [r2, #8]
 80024c4:	0211      	lsls	r1, r2, #8
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6952      	ldr	r2, [r2, #20]
 80024ca:	0852      	lsrs	r2, r2, #1
 80024cc:	3a01      	subs	r2, #1
 80024ce:	0652      	lsls	r2, r2, #25
 80024d0:	430a      	orrs	r2, r1
 80024d2:	4916      	ldr	r1, [pc, #88]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a13      	ldr	r2, [pc, #76]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fae8 	bl	8000ab8 <HAL_GetTick>
 80024e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ea:	e009      	b.n	8002500 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024ec:	f7fe fae4 	bl	8000ab8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	73fb      	strb	r3, [r7, #15]
          break;
 80024fe:	e005      	b.n	800250c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	4904      	ldr	r1, [pc, #16]	; (800252c <RCCEx_PLLSAI1_Config+0x1e4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000

08002530 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800253e:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d018      	beq.n	800257c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800254a:	4b67      	ldr	r3, [pc, #412]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0203 	and.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
       ||
 800255e:	2b00      	cmp	r3, #0
 8002560:	d009      	beq.n	8002576 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002562:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
       ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d047      	beq.n	8002606 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	e044      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d018      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0x86>
 8002584:	2b03      	cmp	r3, #3
 8002586:	d825      	bhi.n	80025d4 <RCCEx_PLLSAI2_Config+0xa4>
 8002588:	2b01      	cmp	r3, #1
 800258a:	d002      	beq.n	8002592 <RCCEx_PLLSAI2_Config+0x62>
 800258c:	2b02      	cmp	r3, #2
 800258e:	d009      	beq.n	80025a4 <RCCEx_PLLSAI2_Config+0x74>
 8002590:	e020      	b.n	80025d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002592:	4b55      	ldr	r3, [pc, #340]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11d      	bne.n	80025da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a2:	e01a      	b.n	80025da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e013      	b.n	80025de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025d2:	e006      	b.n	80025e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      break;
 80025d8:	e004      	b.n	80025e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025da:	bf00      	nop
 80025dc:	e002      	b.n	80025e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025de:	bf00      	nop
 80025e0:	e000      	b.n	80025e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	430b      	orrs	r3, r1
 8002600:	4939      	ldr	r1, [pc, #228]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d167      	bne.n	80026dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a35      	ldr	r2, [pc, #212]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002618:	f7fe fa4e 	bl	8000ab8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800261e:	e009      	b.n	8002634 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002620:	f7fe fa4a 	bl	8000ab8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d902      	bls.n	8002634 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	73fb      	strb	r3, [r7, #15]
        break;
 8002632:	e005      	b.n	8002640 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1ef      	bne.n	8002620 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d14a      	bne.n	80026dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6892      	ldr	r2, [r2, #8]
 800265c:	0211      	lsls	r1, r2, #8
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	0912      	lsrs	r2, r2, #4
 8002664:	0452      	lsls	r2, r2, #17
 8002666:	430a      	orrs	r2, r1
 8002668:	491f      	ldr	r1, [pc, #124]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	4313      	orrs	r3, r2
 800266c:	614b      	str	r3, [r1, #20]
 800266e:	e011      	b.n	8002694 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002678:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	0211      	lsls	r1, r2, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6912      	ldr	r2, [r2, #16]
 8002686:	0852      	lsrs	r2, r2, #1
 8002688:	3a01      	subs	r2, #1
 800268a:	0652      	lsls	r2, r2, #25
 800268c:	430a      	orrs	r2, r1
 800268e:	4916      	ldr	r1, [pc, #88]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	4313      	orrs	r3, r2
 8002692:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe fa0a 	bl	8000ab8 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026a6:	e009      	b.n	80026bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026a8:	f7fe fa06 	bl	8000ab8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d902      	bls.n	80026bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	73fb      	strb	r3, [r7, #15]
          break;
 80026ba:	e005      	b.n	80026c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ef      	beq.n	80026a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	4904      	ldr	r1, [pc, #16]	; (80026e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000

080026ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d06c      	beq.n	80027d8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe f85a 	bl	80007cc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	22ca      	movs	r2, #202	; 0xca
 8002726:	625a      	str	r2, [r3, #36]	; 0x24
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2253      	movs	r2, #83	; 0x53
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f87c 	bl	800282e <RTC_EnterInitMode>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d14b      	bne.n	80027d8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800274e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002752:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68d2      	ldr	r2, [r2, #12]
 800277a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	041a      	lsls	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f87f 	bl	8002894 <RTC_ExitInitMode>
 8002796:	4603      	mov	r3, r0
 8002798:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d11b      	bne.n	80027d8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0203 	bic.w	r2, r2, #3
 80027ae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	22ff      	movs	r2, #255	; 0xff
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027f8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80027fa:	f7fe f95d 	bl	8000ab8 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002800:	e009      	b.n	8002816 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002802:	f7fe f959 	bl	8000ab8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002810:	d901      	bls.n	8002816 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e007      	b.n	8002826 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d120      	bne.n	800288a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002852:	f7fe f931 	bl	8000ab8 <HAL_GetTick>
 8002856:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002858:	e00d      	b.n	8002876 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800285a:	f7fe f92d 	bl	8000ab8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002868:	d905      	bls.n	8002876 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2203      	movs	r2, #3
 8002872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <RTC_EnterInitMode+0x5c>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b03      	cmp	r3, #3
 8002888:	d1e7      	bne.n	800285a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <RTC_ExitInitMode+0x78>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <RTC_ExitInitMode+0x78>)
 80028a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <RTC_ExitInitMode+0x78>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10c      	bne.n	80028d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff92 	bl	80027e2 <HAL_RTC_WaitForSynchro>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01e      	beq.n	8002902 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2203      	movs	r2, #3
 80028c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e017      	b.n	8002902 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <RTC_ExitInitMode+0x78>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <RTC_ExitInitMode+0x78>)
 80028d8:	f023 0320 	bic.w	r3, r3, #32
 80028dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff7f 	bl	80027e2 <HAL_RTC_WaitForSynchro>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2203      	movs	r2, #3
 80028ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <RTC_ExitInitMode+0x78>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <RTC_ExitInitMode+0x78>)
 80028fc:	f043 0320 	orr.w	r3, r3, #32
 8002900:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40002800 	.word	0x40002800

08002910 <HAL_RTCEx_TamperTimeStampIRQHandler>:
}

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf0>)
 800291a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800291e:	615a      	str	r2, [r3, #20]

  /* Get the TimeStamp interrupt source enable status and pending flag status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_RTCEx_TamperTimeStampIRQHandler+0x44>
  {
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00b      	beq.n	8002954 <HAL_RTCEx_TamperTimeStampIRQHandler+0x44>
    {
      /* TIMESTAMP callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fd fdc5 	bl	80004cc <HAL_RTCEx_TimeStampEventCallback>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

      /* Clear the TIMESTAMP interrupt pending bit (this will clear timestamp time and date registers) */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8002952:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper1 interrupt source enable status and pending flag status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf4>)
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <HAL_RTCEx_TamperTimeStampIRQHandler+0x78>
  {
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HAL_RTCEx_TamperTimeStampIRQHandler+0x78>
    {
      /* Clear the Tamper1 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f462 5202 	orn	r2, r2, #8320	; 0x2080
 8002980:	60da      	str	r2, [r3, #12]

      /* Tamper1 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f91a 	bl	8002bbc <HAL_RTCEx_Tamper1EventCallback>
    }
  }
#endif /* RTC_TAMPER1_SUPPORT */

  /* Get the Tamper2 interrupt source enable status and pending flag status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf8>)
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <HAL_RTCEx_TamperTimeStampIRQHandler+0xac>
  {
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_RTCEx_TamperTimeStampIRQHandler+0xac>
    {
      /* Clear the Tamper2 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f462 4281 	orn	r2, r2, #16512	; 0x4080
 80029b4:	60da      	str	r2, [r3, #12]

      /* Tamper2 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f90a 	bl	8002bd0 <HAL_RTCEx_Tamper2EventCallback>
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper3 interrupts source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d012      	beq.n	80029f0 <HAL_RTCEx_TamperTimeStampIRQHandler+0xe0>
  {
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_RTCEx_TamperTimeStampIRQHandler+0xe0>
    {
      /* Clear the Tamper3 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	b2d9      	uxtb	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 80029e6:	430b      	orrs	r3, r1
 80029e8:	60d3      	str	r3, [r2, #12]

      /* Tamper3 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f8fa 	bl	8002be4 <HAL_RTCEx_Tamper3EventCallback>
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40010400 	.word	0x40010400
 8002a04:	00010004 	.word	0x00010004
 8002a08:	00080004 	.word	0x00080004
 8002a0c:	00400004 	.word	0x00400004
 8002a10:	ffff7f7f 	.word	0xffff7f7f

08002a14 <HAL_RTCEx_SetTamper_IT>:
   * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper_IT(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_RTCEx_SetTamper_IT+0x18>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0be      	b.n	8002baa <HAL_RTCEx_SetTamper_IT+0x196>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d024      	beq.n	8002a9a <HAL_RTCEx_SetTamper_IT+0x86>
  {
    MODIFY_REG(tmpreg,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	6889      	ldr	r1, [r1, #8]
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RTCEx_SetTamper_IT+0x58>
 8002a68:	2100      	movs	r1, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_RTCEx_SetTamper_IT+0x5a>
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	68c9      	ldr	r1, [r1, #12]
 8002a74:	2900      	cmp	r1, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RTCEx_SetTamper_IT+0x68>
 8002a78:	2100      	movs	r1, #0
 8002a7a:	e001      	b.n	8002a80 <HAL_RTCEx_SetTamper_IT+0x6c>
 8002a7c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6839      	ldr	r1, [r7, #0]
 8002a84:	6909      	ldr	r1, [r1, #16]
 8002a86:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002a8a:	d102      	bne.n	8002a92 <HAL_RTCEx_SetTamper_IT+0x7e>
 8002a8c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8002a90:	e000      	b.n	8002a94 <HAL_RTCEx_SetTamper_IT+0x80>
 8002a92:	2100      	movs	r1, #0
 8002a94:	430b      	orrs	r3, r1
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d026      	beq.n	8002af4 <HAL_RTCEx_SetTamper_IT+0xe0>
  {
    MODIFY_REG(tmpreg,
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8002aac:	f023 031c 	bic.w	r3, r3, #28
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	6811      	ldr	r1, [r2, #0]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	6889      	ldr	r1, [r1, #8]
 8002abe:	2900      	cmp	r1, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RTCEx_SetTamper_IT+0xb2>
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_RTCEx_SetTamper_IT+0xb4>
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	68c9      	ldr	r1, [r1, #12]
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RTCEx_SetTamper_IT+0xc2>
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	e001      	b.n	8002ada <HAL_RTCEx_SetTamper_IT+0xc6>
 8002ad6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8002ada:	430a      	orrs	r2, r1
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	6909      	ldr	r1, [r1, #16]
 8002ae0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002ae4:	d102      	bne.n	8002aec <HAL_RTCEx_SetTamper_IT+0xd8>
 8002ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002aea:	e000      	b.n	8002aee <HAL_RTCEx_SetTamper_IT+0xda>
 8002aec:	2100      	movs	r1, #0
 8002aee:	430a      	orrs	r2, r1
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d026      	beq.n	8002b4e <HAL_RTCEx_SetTamper_IT+0x13a>
  {
    MODIFY_REG(tmpreg,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8002b06:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	6852      	ldr	r2, [r2, #4]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	6889      	ldr	r1, [r1, #8]
 8002b18:	2900      	cmp	r1, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RTCEx_SetTamper_IT+0x10c>
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_RTCEx_SetTamper_IT+0x10e>
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	430a      	orrs	r2, r1
 8002b24:	6839      	ldr	r1, [r7, #0]
 8002b26:	68c9      	ldr	r1, [r1, #12]
 8002b28:	2900      	cmp	r1, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RTCEx_SetTamper_IT+0x11c>
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	e001      	b.n	8002b34 <HAL_RTCEx_SetTamper_IT+0x120>
 8002b30:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8002b34:	430a      	orrs	r2, r1
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	6909      	ldr	r1, [r1, #16]
 8002b3a:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002b3e:	d102      	bne.n	8002b46 <HAL_RTCEx_SetTamper_IT+0x132>
 8002b40:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002b44:	e000      	b.n	8002b48 <HAL_RTCEx_SetTamper_IT+0x134>
 8002b46:	2100      	movs	r1, #0
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	6951      	ldr	r1, [r2, #20]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	6992      	ldr	r2, [r2, #24]
 8002b60:	4311      	orrs	r1, r2
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	69d2      	ldr	r2, [r2, #28]
 8002b66:	4311      	orrs	r1, r2
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	6a12      	ldr	r2, [r2, #32]
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b72:	430a      	orrs	r2, r1
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
            );

  /* Set register */
  WRITE_REG(hrtc->Instance->TAMPCR, tmpreg);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* RTC Tamper Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0c      	ldr	r2, [pc, #48]	; (8002bb8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002b86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b8a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RTCEx_SetTamper_IT+0x1a4>)
 8002b92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b96:	6093      	str	r3, [r2, #8]

  hrtc->State = HAL_RTC_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40010400 	.word	0x40010400

08002bbc <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	3350      	adds	r3, #80	; 0x50
 8002c0a:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	009a      	lsls	r2, r3, #2
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	4413      	add	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6013      	str	r3, [r2, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e040      	b.n	8002cbe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d106      	bne.n	8002c52 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7fd fdf7 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2224      	movs	r2, #36	; 0x24
 8002c56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f82d 	bl	8002cc8 <UART_SetConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e022      	b.n	8002cbe <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fad9 	bl	8003238 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fb60 	bl	800337c <UART_CheckIdleState>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ccc:	b08a      	sub	sp, #40	; 0x28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4ba4      	ldr	r3, [pc, #656]	; (8002f88 <UART_SetConfig+0x2c0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a99      	ldr	r2, [pc, #612]	; (8002f8c <UART_SetConfig+0x2c4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d30:	4313      	orrs	r3, r2
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	430a      	orrs	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a90      	ldr	r2, [pc, #576]	; (8002f90 <UART_SetConfig+0x2c8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d126      	bne.n	8002da0 <UART_SetConfig+0xd8>
 8002d52:	4b90      	ldr	r3, [pc, #576]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d81b      	bhi.n	8002d98 <UART_SetConfig+0xd0>
 8002d60:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <UART_SetConfig+0xa0>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002d79 	.word	0x08002d79
 8002d6c:	08002d89 	.word	0x08002d89
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d91 	.word	0x08002d91
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7e:	e116      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002d80:	2302      	movs	r3, #2
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d86:	e112      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002d88:	2304      	movs	r3, #4
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8e:	e10e      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002d90:	2308      	movs	r3, #8
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d96:	e10a      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002d98:	2310      	movs	r3, #16
 8002d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d9e:	e106      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a7c      	ldr	r2, [pc, #496]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d138      	bne.n	8002e1c <UART_SetConfig+0x154>
 8002daa:	4b7a      	ldr	r3, [pc, #488]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d82d      	bhi.n	8002e14 <UART_SetConfig+0x14c>
 8002db8:	a201      	add	r2, pc, #4	; (adr r2, 8002dc0 <UART_SetConfig+0xf8>)
 8002dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbe:	bf00      	nop
 8002dc0:	08002df5 	.word	0x08002df5
 8002dc4:	08002e15 	.word	0x08002e15
 8002dc8:	08002e15 	.word	0x08002e15
 8002dcc:	08002e15 	.word	0x08002e15
 8002dd0:	08002e05 	.word	0x08002e05
 8002dd4:	08002e15 	.word	0x08002e15
 8002dd8:	08002e15 	.word	0x08002e15
 8002ddc:	08002e15 	.word	0x08002e15
 8002de0:	08002dfd 	.word	0x08002dfd
 8002de4:	08002e15 	.word	0x08002e15
 8002de8:	08002e15 	.word	0x08002e15
 8002dec:	08002e15 	.word	0x08002e15
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dfa:	e0d8      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e02:	e0d4      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e04:	2304      	movs	r3, #4
 8002e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0a:	e0d0      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e12:	e0cc      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e14:	2310      	movs	r3, #16
 8002e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1a:	e0c8      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a5e      	ldr	r2, [pc, #376]	; (8002f9c <UART_SetConfig+0x2d4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d125      	bne.n	8002e72 <UART_SetConfig+0x1aa>
 8002e26:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d016      	beq.n	8002e62 <UART_SetConfig+0x19a>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d818      	bhi.n	8002e6a <UART_SetConfig+0x1a2>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d00a      	beq.n	8002e52 <UART_SetConfig+0x18a>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d814      	bhi.n	8002e6a <UART_SetConfig+0x1a2>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <UART_SetConfig+0x182>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d008      	beq.n	8002e5a <UART_SetConfig+0x192>
 8002e48:	e00f      	b.n	8002e6a <UART_SetConfig+0x1a2>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e50:	e0ad      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e52:	2302      	movs	r3, #2
 8002e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e58:	e0a9      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e60:	e0a5      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e62:	2308      	movs	r3, #8
 8002e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e68:	e0a1      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e70:	e09d      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <UART_SetConfig+0x2d8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d125      	bne.n	8002ec8 <UART_SetConfig+0x200>
 8002e7c:	4b45      	ldr	r3, [pc, #276]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e86:	2bc0      	cmp	r3, #192	; 0xc0
 8002e88:	d016      	beq.n	8002eb8 <UART_SetConfig+0x1f0>
 8002e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e8c:	d818      	bhi.n	8002ec0 <UART_SetConfig+0x1f8>
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d00a      	beq.n	8002ea8 <UART_SetConfig+0x1e0>
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d814      	bhi.n	8002ec0 <UART_SetConfig+0x1f8>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <UART_SetConfig+0x1d8>
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d008      	beq.n	8002eb0 <UART_SetConfig+0x1e8>
 8002e9e:	e00f      	b.n	8002ec0 <UART_SetConfig+0x1f8>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	e082      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eae:	e07e      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb6:	e07a      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002eb8:	2308      	movs	r3, #8
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ebe:	e076      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec6:	e072      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <UART_SetConfig+0x2dc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12a      	bne.n	8002f28 <UART_SetConfig+0x260>
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee0:	d01a      	beq.n	8002f18 <UART_SetConfig+0x250>
 8002ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee6:	d81b      	bhi.n	8002f20 <UART_SetConfig+0x258>
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d00c      	beq.n	8002f08 <UART_SetConfig+0x240>
 8002eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ef2:	d815      	bhi.n	8002f20 <UART_SetConfig+0x258>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <UART_SetConfig+0x238>
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efc:	d008      	beq.n	8002f10 <UART_SetConfig+0x248>
 8002efe:	e00f      	b.n	8002f20 <UART_SetConfig+0x258>
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f06:	e052      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e04e      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f10:	2304      	movs	r3, #4
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e04a      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f18:	2308      	movs	r3, #8
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1e:	e046      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f20:	2310      	movs	r3, #16
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e042      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <UART_SetConfig+0x2c4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d13a      	bne.n	8002fa8 <UART_SetConfig+0x2e0>
 8002f32:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f40:	d01a      	beq.n	8002f78 <UART_SetConfig+0x2b0>
 8002f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f46:	d81b      	bhi.n	8002f80 <UART_SetConfig+0x2b8>
 8002f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4c:	d00c      	beq.n	8002f68 <UART_SetConfig+0x2a0>
 8002f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f52:	d815      	bhi.n	8002f80 <UART_SetConfig+0x2b8>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <UART_SetConfig+0x298>
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d008      	beq.n	8002f70 <UART_SetConfig+0x2a8>
 8002f5e:	e00f      	b.n	8002f80 <UART_SetConfig+0x2b8>
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e022      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6e:	e01e      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f70:	2304      	movs	r3, #4
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f76:	e01a      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e016      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f80:	2310      	movs	r3, #16
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e012      	b.n	8002fae <UART_SetConfig+0x2e6>
 8002f88:	efff69f3 	.word	0xefff69f3
 8002f8c:	40008000 	.word	0x40008000
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40004400 	.word	0x40004400
 8002f9c:	40004800 	.word	0x40004800
 8002fa0:	40004c00 	.word	0x40004c00
 8002fa4:	40005000 	.word	0x40005000
 8002fa8:	2310      	movs	r3, #16
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a9f      	ldr	r2, [pc, #636]	; (8003230 <UART_SetConfig+0x568>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d17a      	bne.n	80030ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d824      	bhi.n	800300a <UART_SetConfig+0x342>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <UART_SetConfig+0x300>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002fed 	.word	0x08002fed
 8002fcc:	0800300b 	.word	0x0800300b
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	0800300b 	.word	0x0800300b
 8002fd8:	08002ffb 	.word	0x08002ffb
 8002fdc:	0800300b 	.word	0x0800300b
 8002fe0:	0800300b 	.word	0x0800300b
 8002fe4:	0800300b 	.word	0x0800300b
 8002fe8:	08003003 	.word	0x08003003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fec:	f7fe fe36 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002ff0:	61f8      	str	r0, [r7, #28]
        break;
 8002ff2:	e010      	b.n	8003016 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ff4:	4b8f      	ldr	r3, [pc, #572]	; (8003234 <UART_SetConfig+0x56c>)
 8002ff6:	61fb      	str	r3, [r7, #28]
        break;
 8002ff8:	e00d      	b.n	8003016 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ffa:	f7fe fd97 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8002ffe:	61f8      	str	r0, [r7, #28]
        break;
 8003000:	e009      	b.n	8003016 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003006:	61fb      	str	r3, [r7, #28]
        break;
 8003008:	e005      	b.n	8003016 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80fb 	beq.w	8003214 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	429a      	cmp	r2, r3
 800302c:	d305      	bcc.n	800303a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	429a      	cmp	r2, r3
 8003038:	d903      	bls.n	8003042 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003040:	e0e8      	b.n	8003214 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	2200      	movs	r2, #0
 8003046:	461c      	mov	r4, r3
 8003048:	4615      	mov	r5, r2
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	022b      	lsls	r3, r5, #8
 8003054:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003058:	0222      	lsls	r2, r4, #8
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	6849      	ldr	r1, [r1, #4]
 800305e:	0849      	lsrs	r1, r1, #1
 8003060:	2000      	movs	r0, #0
 8003062:	4688      	mov	r8, r1
 8003064:	4681      	mov	r9, r0
 8003066:	eb12 0a08 	adds.w	sl, r2, r8
 800306a:	eb43 0b09 	adc.w	fp, r3, r9
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800307c:	4650      	mov	r0, sl
 800307e:	4659      	mov	r1, fp
 8003080:	f7fd f8a2 	bl	80001c8 <__aeabi_uldivmod>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4613      	mov	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003092:	d308      	bcc.n	80030a6 <UART_SetConfig+0x3de>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800309a:	d204      	bcs.n	80030a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	60da      	str	r2, [r3, #12]
 80030a4:	e0b6      	b.n	8003214 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030ac:	e0b2      	b.n	8003214 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b6:	d15e      	bne.n	8003176 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80030b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d828      	bhi.n	8003112 <UART_SetConfig+0x44a>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <UART_SetConfig+0x400>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030ed 	.word	0x080030ed
 80030cc:	080030f5 	.word	0x080030f5
 80030d0:	080030fd 	.word	0x080030fd
 80030d4:	08003113 	.word	0x08003113
 80030d8:	08003103 	.word	0x08003103
 80030dc:	08003113 	.word	0x08003113
 80030e0:	08003113 	.word	0x08003113
 80030e4:	08003113 	.word	0x08003113
 80030e8:	0800310b 	.word	0x0800310b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ec:	f7fe fdb6 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 80030f0:	61f8      	str	r0, [r7, #28]
        break;
 80030f2:	e014      	b.n	800311e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f4:	f7fe fdc8 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 80030f8:	61f8      	str	r0, [r7, #28]
        break;
 80030fa:	e010      	b.n	800311e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030fc:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <UART_SetConfig+0x56c>)
 80030fe:	61fb      	str	r3, [r7, #28]
        break;
 8003100:	e00d      	b.n	800311e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003102:	f7fe fd13 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8003106:	61f8      	str	r0, [r7, #28]
        break;
 8003108:	e009      	b.n	800311e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310e:	61fb      	str	r3, [r7, #28]
        break;
 8003110:	e005      	b.n	800311e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800311c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d077      	beq.n	8003214 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005a      	lsls	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d916      	bls.n	800316e <UART_SetConfig+0x4a6>
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d212      	bcs.n	800316e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	b29a      	uxth	r2, r3
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	4313      	orrs	r3, r2
 8003162:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	8afa      	ldrh	r2, [r7, #22]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	e052      	b.n	8003214 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003174:	e04e      	b.n	8003214 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317a:	2b08      	cmp	r3, #8
 800317c:	d827      	bhi.n	80031ce <UART_SetConfig+0x506>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x4bc>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031b1 	.word	0x080031b1
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031cf 	.word	0x080031cf
 8003194:	080031bf 	.word	0x080031bf
 8003198:	080031cf 	.word	0x080031cf
 800319c:	080031cf 	.word	0x080031cf
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	080031c7 	.word	0x080031c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7fe fd58 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 80031ac:	61f8      	str	r0, [r7, #28]
        break;
 80031ae:	e014      	b.n	80031da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7fe fd6a 	bl	8001c88 <HAL_RCC_GetPCLK2Freq>
 80031b4:	61f8      	str	r0, [r7, #28]
        break;
 80031b6:	e010      	b.n	80031da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <UART_SetConfig+0x56c>)
 80031ba:	61fb      	str	r3, [r7, #28]
        break;
 80031bc:	e00d      	b.n	80031da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe fcb5 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 80031c2:	61f8      	str	r0, [r7, #28]
        break;
 80031c4:	e009      	b.n	80031da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ca:	61fb      	str	r3, [r7, #28]
        break;
 80031cc:	e005      	b.n	80031da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031d8:	bf00      	nop
    }

    if (pclk != 0U)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d019      	beq.n	8003214 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	085a      	lsrs	r2, r3, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d909      	bls.n	800320e <UART_SetConfig+0x546>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d205      	bcs.n	800320e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	e002      	b.n	8003214 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003220:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	40008000 	.word	0x40008000
 8003234:	00f42400 	.word	0x00f42400

08003238 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01a      	beq.n	800334e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003336:	d10a      	bne.n	800334e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af02      	add	r7, sp, #8
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800338c:	f7fd fb94 	bl	8000ab8 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d10e      	bne.n	80033be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f82d 	bl	800340e <UART_WaitOnFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e023      	b.n	8003406 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d10e      	bne.n	80033ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f817 	bl	800340e <UART_WaitOnFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e00d      	b.n	8003406 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b09c      	sub	sp, #112	; 0x70
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341e:	e0a5      	b.n	800356c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003426:	f000 80a1 	beq.w	800356c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7fd fb45 	bl	8000ab8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <UART_WaitOnFlagUntilTimeout+0x32>
 800343a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800343c:	2b00      	cmp	r3, #0
 800343e:	d13e      	bne.n	80034be <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800344e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003450:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003454:	667b      	str	r3, [r7, #100]	; 0x64
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800345e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003460:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003464:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800346c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e6      	bne.n	8003440 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3308      	adds	r3, #8
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	e853 3f00 	ldrex	r3, [r3]
 8003480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	663b      	str	r3, [r7, #96]	; 0x60
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3308      	adds	r3, #8
 8003490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003492:	64ba      	str	r2, [r7, #72]	; 0x48
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800349a:	e841 2300 	strex	r3, r2, [r1]
 800349e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1e5      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e067      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d04f      	beq.n	800356c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034da:	d147      	bne.n	800356c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
 8003506:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800350a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e6      	bne.n	80034e6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3308      	adds	r3, #8
 800351e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	613b      	str	r3, [r7, #16]
   return(result);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3308      	adds	r3, #8
 8003536:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003538:	623a      	str	r2, [r7, #32]
 800353a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	69f9      	ldr	r1, [r7, #28]
 800353e:	6a3a      	ldr	r2, [r7, #32]
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	61bb      	str	r3, [r7, #24]
   return(result);
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e5      	bne.n	8003518 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e010      	b.n	800358e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	429a      	cmp	r2, r3
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	79fb      	ldrb	r3, [r7, #7]
 8003586:	429a      	cmp	r2, r3
 8003588:	f43f af4a 	beq.w	8003420 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3770      	adds	r7, #112	; 0x70
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <__libc_init_array>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	4d0d      	ldr	r5, [pc, #52]	; (80035d0 <__libc_init_array+0x38>)
 800359c:	4c0d      	ldr	r4, [pc, #52]	; (80035d4 <__libc_init_array+0x3c>)
 800359e:	1b64      	subs	r4, r4, r5
 80035a0:	10a4      	asrs	r4, r4, #2
 80035a2:	2600      	movs	r6, #0
 80035a4:	42a6      	cmp	r6, r4
 80035a6:	d109      	bne.n	80035bc <__libc_init_array+0x24>
 80035a8:	4d0b      	ldr	r5, [pc, #44]	; (80035d8 <__libc_init_array+0x40>)
 80035aa:	4c0c      	ldr	r4, [pc, #48]	; (80035dc <__libc_init_array+0x44>)
 80035ac:	f000 f820 	bl	80035f0 <_init>
 80035b0:	1b64      	subs	r4, r4, r5
 80035b2:	10a4      	asrs	r4, r4, #2
 80035b4:	2600      	movs	r6, #0
 80035b6:	42a6      	cmp	r6, r4
 80035b8:	d105      	bne.n	80035c6 <__libc_init_array+0x2e>
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
 80035bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c0:	4798      	blx	r3
 80035c2:	3601      	adds	r6, #1
 80035c4:	e7ee      	b.n	80035a4 <__libc_init_array+0xc>
 80035c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ca:	4798      	blx	r3
 80035cc:	3601      	adds	r6, #1
 80035ce:	e7f2      	b.n	80035b6 <__libc_init_array+0x1e>
 80035d0:	08003658 	.word	0x08003658
 80035d4:	08003658 	.word	0x08003658
 80035d8:	08003658 	.word	0x08003658
 80035dc:	0800365c 	.word	0x0800365c

080035e0 <memset>:
 80035e0:	4402      	add	r2, r0
 80035e2:	4603      	mov	r3, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d100      	bne.n	80035ea <memset+0xa>
 80035e8:	4770      	bx	lr
 80035ea:	f803 1b01 	strb.w	r1, [r3], #1
 80035ee:	e7f9      	b.n	80035e4 <memset+0x4>

080035f0 <_init>:
 80035f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f2:	bf00      	nop
 80035f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f6:	bc08      	pop	{r3}
 80035f8:	469e      	mov	lr, r3
 80035fa:	4770      	bx	lr

080035fc <_fini>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	bf00      	nop
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr
