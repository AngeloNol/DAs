
SL05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a68  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d74  08004d74  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000090  08004e0c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08004e0c  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f450  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b2  00000000  00000000  0002f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d4f  00000000  00000000  00033380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fab4  00000000  00000000  0005b0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1bdb  00000000  00000000  0006ab83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c75e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  0015c7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bd8 	.word	0x08004bd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08004bd8 	.word	0x08004bd8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission  */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004da:	2201      	movs	r2, #1
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <__io_putchar+0x20>)
 80004de:	f003 f94e 	bl	800377e <HAL_UART_Transmit>

	return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]

}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000d0 	.word	0x200000d0

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	; 0x30
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb75 	bl	8000be4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_DBGMCU_DisableDBGStandbyMode();
 80004fa:	f000 fc13 	bl	8000d24 <HAL_DBGMCU_DisableDBGStandbyMode>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f89d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f947 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f915 	bl	8000734 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800050a:	f000 f8eb 	bl	80006e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n**********************************\r\n");
 800050e:	4840      	ldr	r0, [pc, #256]	; (8000610 <main+0x120>)
 8000510:	f003 fed2 	bl	80042b8 <puts>
   printf("\r\n* Appli started *\r\n");
 8000514:	483f      	ldr	r0, [pc, #252]	; (8000614 <main+0x124>)
 8000516:	f003 fecf 	bl	80042b8 <puts>
   printf("\r\n**********************************\r\n");
 800051a:	483d      	ldr	r0, [pc, #244]	; (8000610 <main+0x120>)
 800051c:	f003 fecc 	bl	80042b8 <puts>

   #ifdef ACTIVATE_RDP
   	   if(HAL_FLASH_Unlock() == HAL_OK) {
 8000520:	f000 fcf6 	bl	8000f10 <HAL_FLASH_Unlock>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d13d      	bne.n	80005a6 <main+0xb6>
   		   if (HAL_FLASH_OB_Unlock() == HAL_OK) {
 800052a:	f000 fd23 	bl	8000f74 <HAL_FLASH_OB_Unlock>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d136      	bne.n	80005a2 <main+0xb2>
   			   	   FLASH_OBProgramInitTypeDef pOBInit;
   			   	   HAL_FLASHEx_OBGetConfig(&pOBInit);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fe1e 	bl	8001178 <HAL_FLASHEx_OBGetConfig>

   			   	   if (pOBInit.RDPLevel != OB_RDP_LEVEL_1) {
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	2bbb      	cmp	r3, #187	; 0xbb
 8000540:	d02a      	beq.n	8000598 <main+0xa8>
   			   		   printf("\r\n*--------> RDP Level 0 \r\n");
 8000542:	4835      	ldr	r0, [pc, #212]	; (8000618 <main+0x128>)
 8000544:	f003 feb8 	bl	80042b8 <puts>
   			   		   pOBInit.OptionType = OPTIONBYTE_RDP;
 8000548:	2302      	movs	r3, #2
 800054a:	607b      	str	r3, [r7, #4]
   			   		   pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 800054c:	23bb      	movs	r3, #187	; 0xbb
 800054e:	617b      	str	r3, [r7, #20]
   			   		   HAL_FLASHEx_OBProgram(&pOBInit);
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fda2 	bl	800109c <HAL_FLASHEx_OBProgram>
 			   		   printf("\r\n*--------> HAL_FLASH_OB_Launch \r\n");
 			   		   HAL_FLASH_OB_Launch();
 			   		   printf("\r\n*--------> HAL_FLASH_OB_Launch finished\r\n");

  #else
   	   	   	   	   	   __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	4b30      	ldr	r3, [pc, #192]	; (800061c <main+0x12c>)
 800055a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055c:	4a2f      	ldr	r2, [pc, #188]	; (800061c <main+0x12c>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6593      	str	r3, [r2, #88]	; 0x58
 8000564:	4b2d      	ldr	r3, [pc, #180]	; (800061c <main+0x12c>)
 8000566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 			   		   HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000570:	482b      	ldr	r0, [pc, #172]	; (8000620 <main+0x130>)
 8000572:	f003 f859 	bl	8003628 <HAL_RTCEx_DeactivateWakeUpTimer>
 			   		   HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 36,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000576:	2200      	movs	r2, #0
 8000578:	2124      	movs	r1, #36	; 0x24
 800057a:	4829      	ldr	r0, [pc, #164]	; (8000620 <main+0x130>)
 800057c:	f002 ffc0 	bl	8003500 <HAL_RTCEx_SetWakeUpTimer_IT>
 			   		   __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <main+0x134>)
 8000582:	221f      	movs	r2, #31
 8000584:	619a      	str	r2, [r3, #24]
 			   		   printf("\r\n*--------> Go to standby \r\n");
 8000586:	4828      	ldr	r0, [pc, #160]	; (8000628 <main+0x138>)
 8000588:	f003 fe96 	bl	80042b8 <puts>
 			   		HAL_PWR_EnterSTANDBYMode();
 800058c:	f001 fb6c 	bl	8001c68 <HAL_PWR_EnterSTANDBYMode>
 			   		printf("\r\n*--------> RTC wakeup \r\n");
 8000590:	4826      	ldr	r0, [pc, #152]	; (800062c <main+0x13c>)
 8000592:	f003 fe91 	bl	80042b8 <puts>
 8000596:	e002      	b.n	800059e <main+0xae>
 #endif
 			   		 } else {
 			   			 	 printf("\r\n*--------> RDP Level 1 \r\n");
 8000598:	4825      	ldr	r0, [pc, #148]	; (8000630 <main+0x140>)
 800059a:	f003 fe8d 	bl	80042b8 <puts>
 			   		 }
 			   		 HAL_FLASH_OB_Lock();
 800059e:	f000 fd05 	bl	8000fac <HAL_FLASH_OB_Lock>
 			   	}
 			HAL_FLASH_Lock();
 80005a2:	f000 fcd7 	bl	8000f54 <HAL_FLASH_Lock>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005a6:	2120      	movs	r1, #32
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ac:	f001 fb42 	bl	8001c34 <HAL_GPIO_TogglePin>
	  printf("\r\n*--------> LED blinking \r\n");
 80005b0:	4820      	ldr	r0, [pc, #128]	; (8000634 <main+0x144>)
 80005b2:	f003 fe81 	bl	80042b8 <puts>
	  HAL_Delay(500);
 80005b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ba:	f000 fb8f 	bl	8000cdc <HAL_Delay>
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <main+0x148>)
 80005c4:	f001 fb06 	bl	8001bd4 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1eb      	bne.n	80005a6 <main+0xb6>
	  {
		  if(HAL_FLASH_Unlock() == HAL_OK) {
 80005ce:	f000 fc9f 	bl	8000f10 <HAL_FLASH_Unlock>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1e6      	bne.n	80005a6 <main+0xb6>
			  if (HAL_FLASH_OB_Unlock() == HAL_OK) {
 80005d8:	f000 fccc 	bl	8000f74 <HAL_FLASH_OB_Unlock>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d112      	bne.n	8000608 <main+0x118>
				   FLASH_OBProgramInitTypeDef pOBInit;
				   HAL_FLASHEx_OBGetConfig(&pOBInit);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fdc7 	bl	8001178 <HAL_FLASHEx_OBGetConfig>

				   if (pOBInit.RDPLevel != OB_RDP_LEVEL_1) {
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	2bbb      	cmp	r3, #187	; 0xbb
 80005ee:	d009      	beq.n	8000604 <main+0x114>
						   pOBInit.OptionType = OPTIONBYTE_RDP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	607b      	str	r3, [r7, #4]
						   pOBInit.RDPLevel = OB_RDP_LEVEL_1;
 80005f4:	23bb      	movs	r3, #187	; 0xbb
 80005f6:	617b      	str	r3, [r7, #20]
						   HAL_FLASHEx_OBProgram(&pOBInit);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fd4e 	bl	800109c <HAL_FLASHEx_OBProgram>
						   HAL_FLASH_OB_Launch();
 8000600:	f000 fce4 	bl	8000fcc <HAL_FLASH_OB_Launch>
				   }
				   HAL_FLASH_OB_Lock();
 8000604:	f000 fcd2 	bl	8000fac <HAL_FLASH_OB_Lock>
	   }
	 HAL_FLASH_Lock();
 8000608:	f000 fca4 	bl	8000f54 <HAL_FLASH_Lock>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800060c:	e7cb      	b.n	80005a6 <main+0xb6>
 800060e:	bf00      	nop
 8000610:	08004bf0 	.word	0x08004bf0
 8000614:	08004c18 	.word	0x08004c18
 8000618:	08004c30 	.word	0x08004c30
 800061c:	40021000 	.word	0x40021000
 8000620:	200000ac 	.word	0x200000ac
 8000624:	40007000 	.word	0x40007000
 8000628:	08004c4c 	.word	0x08004c4c
 800062c:	08004c6c 	.word	0x08004c6c
 8000630:	08004c88 	.word	0x08004c88
 8000634:	08004ca4 	.word	0x08004ca4
 8000638:	48000800 	.word	0x48000800

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b096      	sub	sp, #88	; 0x58
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fdbe 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800065e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000662:	f001 fb29 	bl	8001cb8 <HAL_PWREx_ControlVoltageScaling>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800066c:	f000 f8f8 	bl	8000860 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000670:	230a      	movs	r3, #10
 8000672:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000678:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067a:	2310      	movs	r3, #16
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2302      	movs	r3, #2
 8000688:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800068e:	230a      	movs	r3, #10
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000692:	2307      	movs	r3, #7
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000696:	2302      	movs	r3, #2
 8000698:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fb5e 	bl	8001d64 <HAL_RCC_OscConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006ae:	f000 f8d7 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2303      	movs	r3, #3
 80006b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	2104      	movs	r1, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 ff26 	bl	800251c <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f8c3 	bl	8000860 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3758      	adds	r7, #88	; 0x58
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_RTC_Init+0x48>)
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <MX_RTC_Init+0x4c>)
 80006ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_RTC_Init+0x48>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <MX_RTC_Init+0x48>)
 80006f6:	227f      	movs	r2, #127	; 0x7f
 80006f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_RTC_Init+0x48>)
 80006fc:	22ff      	movs	r2, #255	; 0xff
 80006fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_RTC_Init+0x48>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_RTC_Init+0x48>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_RTC_Init+0x48>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_RTC_Init+0x48>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_RTC_Init+0x48>)
 800071a:	f002 fddf 	bl	80032dc <HAL_RTC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000724:	f000 f89c 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000ac 	.word	0x200000ac
 8000730:	40002800 	.word	0x40002800

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_USART2_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_USART2_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0x58>)
 8000778:	f002 ffb3 	bl	80036e2 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f86d 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000d0 	.word	0x200000d0
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a2a      	ldr	r2, [pc, #168]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	4b25      	ldr	r3, [pc, #148]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a24      	ldr	r2, [pc, #144]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a1e      	ldr	r2, [pc, #120]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_GPIO_Init+0xc4>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f001 f9f7 	bl	8001c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000816:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0xc8>)
 800082e:	f001 f827 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000832:	2320      	movs	r3, #32
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084c:	f001 f818 	bl	8001880 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000800 	.word	0x48000800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6613      	str	r3, [r2, #96]	; 0x60
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6593      	str	r3, [r2, #88]	; 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0a4      	sub	sp, #144	; 0x90
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2288      	movs	r2, #136	; 0x88
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 fc81 	bl	80041cc <memset>
  if(hrtc->Instance==RTC)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_RTC_MspInit+0x5c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d118      	bne.n	8000906 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 f83c 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008f2:	f7ff ffb5 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_RTC_MspInit+0x60>)
 80008f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008fc:	4a05      	ldr	r2, [pc, #20]	; (8000914 <HAL_RTC_MspInit+0x60>)
 80008fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3790      	adds	r7, #144	; 0x90
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40002800 	.word	0x40002800
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0ac      	sub	sp, #176	; 0xb0
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2288      	movs	r2, #136	; 0x88
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fc47 	bl	80041cc <memset>
  if(huart->Instance==USART2)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <HAL_UART_MspInit+0xb0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d13b      	bne.n	80009c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f805 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ff7e 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_UART_MspInit+0xb4>)
 8000966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000968:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_UART_MspInit+0xb4>)
 800096a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096e:	6593      	str	r3, [r2, #88]	; 0x58
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_UART_MspInit+0xb4>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_UART_MspInit+0xb4>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a12      	ldr	r2, [pc, #72]	; (80009cc <HAL_UART_MspInit+0xb4>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_UART_MspInit+0xb4>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000994:	230c      	movs	r3, #12
 8000996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ac:	2307      	movs	r3, #7
 80009ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009b6:	4619      	mov	r1, r3
 80009b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009bc:	f000 ff60 	bl	8001880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	37b0      	adds	r7, #176	; 0xb0
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f93e 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	e00a      	b.n	8000a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a36:	f3af 8000 	nop.w
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	60ba      	str	r2, [r7, #8]
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf0      	blt.n	8000a36 <_read+0x12>
  }

  return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	e009      	b.n	8000a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	60ba      	str	r2, [r7, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd27 	bl	80004cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf1      	blt.n	8000a70 <_write+0x12>
  }
  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_close>:

int _close(int file)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000abe:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <_isatty>:

int _isatty(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f003 fb22 	bl	8004178 <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20018000 	.word	0x20018000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	20000154 	.word	0x20000154
 8000b68:	20000170 	.word	0x20000170

08000b6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f003 fae1 	bl	8004184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bc2:	f7ff fc95 	bl	80004f0 <main>

08000bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bd4:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 8000bd8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bdc:	2000016c 	.word	0x2000016c

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_Init+0x3c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_Init+0x3c>)
 8000bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f000 f954 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 f80f 	bl	8000c24 <HAL_InitTick>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	e001      	b.n	8000c16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c12:	f7ff fe2b 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d023      	beq.n	8000c80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_InitTick+0x70>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_InitTick+0x6c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f951 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10f      	bne.n	8000c7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d809      	bhi.n	8000c74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f929 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_InitTick+0x74>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e007      	b.n	8000c84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
 8000c78:	e004      	b.n	8000c84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e001      	b.n	8000c84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000158 	.word	0x20000158

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000158 	.word	0x20000158

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8000d2e:	f023 0304 	bic.w	r3, r3, #4
 8000d32:	6053      	str	r3, [r2, #4]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e0042000 	.word	0xe0042000

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5c 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb0 	bl	8000e64 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_FLASH_Unlock+0x38>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da0b      	bge.n	8000f3a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_FLASH_Unlock+0x38>)
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_FLASH_Unlock+0x3c>)
 8000f26:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_FLASH_Unlock+0x38>)
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_FLASH_Unlock+0x40>)
 8000f2c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_FLASH_Unlock+0x38>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da01      	bge.n	8000f3a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	40022000 	.word	0x40022000
 8000f4c:	45670123 	.word	0x45670123
 8000f50:	cdef89ab 	.word	0xcdef89ab

08000f54 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_FLASH_Lock+0x1c>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_FLASH_Lock+0x1c>)
 8000f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f62:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_FLASH_OB_Unlock+0x2c>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d007      	beq.n	8000f94 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_FLASH_OB_Unlock+0x2c>)
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_FLASH_OB_Unlock+0x30>)
 8000f88:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_FLASH_OB_Unlock+0x2c>)
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <HAL_FLASH_OB_Unlock+0x34>)
 8000f8e:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	e000      	b.n	8000f96 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40022000 	.word	0x40022000
 8000fa4:	08192a3b 	.word	0x08192a3b
 8000fa8:	4c5d6e7f 	.word	0x4c5d6e7f

08000fac <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_FLASH_OB_Lock+0x1c>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_FLASH_OB_Lock+0x1c>)
 8000fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fba:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40022000 	.word	0x40022000

08000fcc <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_FLASH_OB_Launch+0x20>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_FLASH_OB_Launch+0x20>)
 8000fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fda:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8000fdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe0:	f000 f806 	bl	8000ff0 <FLASH_WaitForLastOperation>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40022000 	.word	0x40022000

08000ff0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fe64 	bl	8000cc4 <HAL_GetTick>
 8000ffc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000ffe:	e00d      	b.n	800101c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001006:	d009      	beq.n	800101c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001008:	f7ff fe5c 	bl	8000cc4 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	d801      	bhi.n	800101c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	e037      	b.n	800108c <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1eb      	bne.n	8001000 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001030:	4013      	ands	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d01e      	beq.n	8001078 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <FLASH_WaitForLastOperation+0xa8>)
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4313      	orrs	r3, r2
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <FLASH_WaitForLastOperation+0xa8>)
 8001044:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <FLASH_WaitForLastOperation+0x70>
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 8001052:	699a      	ldr	r2, [r3, #24]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 800105c:	4313      	orrs	r3, r2
 800105e:	618b      	str	r3, [r1, #24]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <FLASH_WaitForLastOperation+0x84>
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001072:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e009      	b.n	800108c <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <FLASH_WaitForLastOperation+0xa4>)
 8001086:	2201      	movs	r2, #1
 8001088:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40022000 	.word	0x40022000
 8001098:	2000000c 	.word	0x2000000c

0800109c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <HAL_FLASHEx_OBProgram+0xd8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_FLASHEx_OBProgram+0x18>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e05a      	b.n	800116a <HAL_FLASHEx_OBProgram+0xce>
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <HAL_FLASHEx_OBProgram+0xd8>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_FLASHEx_OBProgram+0xd8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00d      	beq.n	80010e8 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6858      	ldr	r0, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6899      	ldr	r1, [r3, #8]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	461a      	mov	r2, r3
 80010da:	f000 f89b 	bl	8001214 <FLASH_OB_WRPConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d009      	beq.n	8001108 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8ef 	bl	80012dc <FLASH_OB_RDPConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00c      	beq.n	800112e <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f000 f90a 	bl	8001338 <FLASH_OB_UserConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d013      	beq.n	8001162 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	429a      	cmp	r2, r3
 8001144:	d00d      	beq.n	8001162 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69d8      	ldr	r0, [r3, #28]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a19      	ldr	r1, [r3, #32]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	461a      	mov	r2, r3
 8001154:	f000 f9e8 	bl	8001528 <FLASH_OB_PCROPConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_FLASHEx_OBProgram+0xd8>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

  return status;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000000c 	.word	0x2000000c

08001178 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2206      	movs	r2, #6
 8001184:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_FLASHEx_OBGetConfig+0x2e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d007      	beq.n	80011a6 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800119a:	2b02      	cmp	r3, #2
 800119c:	d003      	beq.n	80011a6 <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d10f      	bne.n	80011c6 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f103 0108 	add.w	r1, r3, #8
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	330c      	adds	r3, #12
 80011c0:	461a      	mov	r2, r3
 80011c2:	f000 fa5d 	bl	8001680 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80011c6:	f000 faa5 	bl	8001714 <FLASH_OB_GetRDP>
 80011ca:	4602      	mov	r2, r0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80011d0:	f000 faba 	bl	8001748 <FLASH_OB_GetUser>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d003      	beq.n	80011ea <HAL_FLASHEx_OBGetConfig+0x72>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d110      	bne.n	800120c <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f043 0208 	orr.w	r2, r3, #8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f103 001c 	add.w	r0, r3, #28
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f103 0120 	add.w	r1, r3, #32
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3324      	adds	r3, #36	; 0x24
 8001206:	461a      	mov	r2, r3
 8001208:	f000 fab2 	bl	8001770 <FLASH_OB_GetPCROP>
  }
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001220:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001224:	f7ff fee4 	bl	8000ff0 <FLASH_WaitForLastOperation>
 8001228:	4603      	mov	r3, r0
 800122a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d14c      	bne.n	80012cc <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10b      	bne.n	8001250 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0419      	lsls	r1, r3, #16
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	430b      	orrs	r3, r1
 8001248:	4923      	ldr	r1, [pc, #140]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800124e:	e02b      	b.n	80012a8 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d10b      	bne.n	800126e <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0419      	lsls	r1, r3, #16
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	430b      	orrs	r3, r1
 8001266:	491c      	ldr	r1, [pc, #112]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	630b      	str	r3, [r1, #48]	; 0x30
 800126c:	e01c      	b.n	80012a8 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d10b      	bne.n	800128c <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 8001276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001278:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0419      	lsls	r1, r3, #16
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	430b      	orrs	r3, r1
 8001284:	4914      	ldr	r1, [pc, #80]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 8001286:	4313      	orrs	r3, r2
 8001288:	64cb      	str	r3, [r1, #76]	; 0x4c
 800128a:	e00d      	b.n	80012a8 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b04      	cmp	r3, #4
 8001290:	d10a      	bne.n	80012a8 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 8001294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001296:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0419      	lsls	r1, r3, #16
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 80012ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012b8:	f7ff fe9a 	bl	8000ff0 <FLASH_WaitForLastOperation>
 80012bc:	4603      	mov	r3, r0
 80012be:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <FLASH_OB_WRPConfig+0xc4>)
 80012c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012ca:	6153      	str	r3, [r2, #20]
  }

  return status;
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012e8:	f7ff fe82 	bl	8000ff0 <FLASH_WaitForLastOperation>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d119      	bne.n	800132a <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <FLASH_OB_RDPConfig+0x58>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <FLASH_OB_RDPConfig+0x58>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <FLASH_OB_RDPConfig+0x58>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <FLASH_OB_RDPConfig+0x58>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001312:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001316:	f7ff fe6b 	bl	8000ff0 <FLASH_WaitForLastOperation>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <FLASH_OB_RDPConfig+0x58>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <FLASH_OB_RDPConfig+0x58>)
 8001324:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001328:	6153      	str	r3, [r2, #20]
  }

  return status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40022000 	.word	0x40022000

08001338 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800134a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800134e:	f7ff fe4f 	bl	8000ff0 <FLASH_WaitForLastOperation>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 80de 	bne.w	800151a <FLASH_OB_UserConfig+0x1e2>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4313      	orrs	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800137a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	4313      	orrs	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001398:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d009      	beq.n	80013b8 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d009      	beq.n	8001412 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	4313      	orrs	r3, r2
 8001408:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	2b00      	cmp	r3, #0
 800141a:	d009      	beq.n	8001430 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d009      	beq.n	800144e <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4313      	orrs	r3, r2
 8001444:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800144c:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800146a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001472:	2b00      	cmp	r3, #0
 8001474:	d009      	beq.n	800148a <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4313      	orrs	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001488:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014a6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c4:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e2:	613b      	str	r3, [r7, #16]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <FLASH_OB_UserConfig+0x1ec>)
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	401a      	ands	r2, r3
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <FLASH_OB_UserConfig+0x1ec>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <FLASH_OB_UserConfig+0x1ec>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <FLASH_OB_UserConfig+0x1ec>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001502:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001506:	f7ff fd73 	bl	8000ff0 <FLASH_WaitForLastOperation>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <FLASH_OB_UserConfig+0x1ec>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <FLASH_OB_UserConfig+0x1ec>)
 8001514:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001518:	6153      	str	r3, [r2, #20]
  }

  return status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40022000 	.word	0x40022000

08001528 <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001538:	f7ff fd5a 	bl	8000ff0 <FLASH_WaitForLastOperation>
 800153c:	4603      	mov	r3, r0
 800153e:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 808c 	bne.w	8001660 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001548:	4b48      	ldr	r3, [pc, #288]	; (800166c <FLASH_OB_PCROPConfig+0x144>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d115      	bne.n	8001580 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 8001554:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001558:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <FLASH_OB_PCROPConfig+0x148>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	4293      	cmp	r3, r2
 8001566:	d008      	beq.n	800157a <FLASH_OB_PCROPConfig+0x52>
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <FLASH_OB_PCROPConfig+0x148>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	085a      	lsrs	r2, r3, #1
 8001570:	4b40      	ldr	r3, [pc, #256]	; (8001674 <FLASH_OB_PCROPConfig+0x14c>)
 8001572:	4013      	ands	r3, r2
 8001574:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001578:	e000      	b.n	800157c <FLASH_OB_PCROPConfig+0x54>
 800157a:	4b3f      	ldr	r3, [pc, #252]	; (8001678 <FLASH_OB_PCROPConfig+0x150>)
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e014      	b.n	80015aa <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001580:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <FLASH_OB_PCROPConfig+0x148>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158a:	4293      	cmp	r3, r2
 800158c:	d008      	beq.n	80015a0 <FLASH_OB_PCROPConfig+0x78>
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <FLASH_OB_PCROPConfig+0x148>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	029b      	lsls	r3, r3, #10
 8001594:	085a      	lsrs	r2, r3, #1
 8001596:	4b37      	ldr	r3, [pc, #220]	; (8001674 <FLASH_OB_PCROPConfig+0x14c>)
 8001598:	4013      	ands	r3, r2
 800159a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800159e:	e000      	b.n	80015a2 <FLASH_OB_PCROPConfig+0x7a>
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <FLASH_OB_PCROPConfig+0x150>)
 80015a2:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 80015a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015a8:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d11a      	bne.n	80015ea <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	0c1b      	lsrs	r3, r3, #16
 80015c4:	041b      	lsls	r3, r3, #16
 80015c6:	492d      	ldr	r1, [pc, #180]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	041b      	lsls	r3, r3, #16
 80015e0:	4926      	ldr	r1, [pc, #152]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	628b      	str	r3, [r1, #40]	; 0x28
 80015e8:	e01e      	b.n	8001628 <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d119      	bne.n	8001628 <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	491d      	ldr	r1, [pc, #116]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	041b      	lsls	r3, r3, #16
 8001620:	4916      	ldr	r1, [pc, #88]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001636:	4911      	ldr	r1, [pc, #68]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 8001638:	4313      	orrs	r3, r2
 800163a:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 8001642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001646:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001648:	f24c 3050 	movw	r0, #50000	; 0xc350
 800164c:	f7ff fcd0 	bl	8000ff0 <FLASH_WaitForLastOperation>
 8001650:	4603      	mov	r3, r0
 8001652:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <FLASH_OB_PCROPConfig+0x154>)
 800165a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800165e:	6153      	str	r3, [r2, #20]
  }

  return status;
 8001660:	7ffb      	ldrb	r3, [r7, #31]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40010000 	.word	0x40010000
 8001670:	1fff75e0 	.word	0x1fff75e0
 8001674:	01fffe00 	.word	0x01fffe00
 8001678:	08080000 	.word	0x08080000
 800167c:	40022000 	.word	0x40022000

08001680 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	b2da      	uxtb	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 80016a8:	e02b      	b.n	8001702 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10b      	bne.n	80016c8 <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]
}
 80016c6:	e01c      	b.n	8001702 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d10b      	bne.n	80016e6 <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	e00d      	b.n	8001702 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d10a      	bne.n	8001702 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 80016ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <FLASH_OB_GetWRP+0x90>)
 80016f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000

08001714 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <FLASH_OB_GetRDP+0x30>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2baa      	cmp	r3, #170	; 0xaa
 8001726:	d004      	beq.n	8001732 <FLASH_OB_GetRDP+0x1e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2bcc      	cmp	r3, #204	; 0xcc
 800172c:	d001      	beq.n	8001732 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800172e:	23bb      	movs	r3, #187	; 0xbb
 8001730:	e002      	b.n	8001738 <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <FLASH_OB_GetRDP+0x30>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	b2db      	uxtb	r3, r3
  }
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40022000 	.word	0x40022000

08001748 <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 800174e:	4b07      	ldr	r3, [pc, #28]	; (800176c <FLASH_OB_GetUser+0x24>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800175a:	607b      	str	r3, [r7, #4]

  return user_config;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40022000 	.word	0x40022000

08001770 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <FLASH_OB_GetPCROP+0xfc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d115      	bne.n	80017b4 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 8001788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800178c:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <FLASH_OB_GetPCROP+0x100>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001798:	4293      	cmp	r3, r2
 800179a:	d008      	beq.n	80017ae <FLASH_OB_GetPCROP+0x3e>
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <FLASH_OB_GetPCROP+0x100>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	029b      	lsls	r3, r3, #10
 80017a2:	085a      	lsrs	r2, r3, #1
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <FLASH_OB_GetPCROP+0x104>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017ac:	e000      	b.n	80017b0 <FLASH_OB_GetPCROP+0x40>
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <FLASH_OB_GetPCROP+0x108>)
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	e014      	b.n	80017de <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <FLASH_OB_GetPCROP+0x100>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017be:	4293      	cmp	r3, r2
 80017c0:	d008      	beq.n	80017d4 <FLASH_OB_GetPCROP+0x64>
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <FLASH_OB_GetPCROP+0x100>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	029b      	lsls	r3, r3, #10
 80017c8:	085a      	lsrs	r2, r3, #1
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <FLASH_OB_GetPCROP+0x104>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017d2:	e000      	b.n	80017d6 <FLASH_OB_GetPCROP+0x66>
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <FLASH_OB_GetPCROP+0x108>)
 80017d6:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 80017d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017dc:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d115      	bne.n	8001816 <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <FLASH_OB_GetPCROP+0x10c>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	00da      	lsls	r2, r3, #3
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	441a      	add	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <FLASH_OB_GetPCROP+0x10c>)
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	b29b      	uxth	r3, r3
 8001804:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	00da      	lsls	r2, r3, #3
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	1dda      	adds	r2, r3, #7
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e01a      	b.n	800184c <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d114      	bne.n	800184c <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <FLASH_OB_GetPCROP+0x10c>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	b29b      	uxth	r3, r3
 8001828:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	00da      	lsls	r2, r3, #3
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	441a      	add	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <FLASH_OB_GetPCROP+0x10c>)
 8001838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800183a:	b29b      	uxth	r3, r3
 800183c:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	00da      	lsls	r2, r3, #3
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4413      	add	r3, r2
 8001846:	1dda      	adds	r2, r3, #7
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <FLASH_OB_GetPCROP+0x10c>)
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	431a      	orrs	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40010000 	.word	0x40010000
 8001870:	1fff75e0 	.word	0x1fff75e0
 8001874:	01fffe00 	.word	0x01fffe00
 8001878:	08080000 	.word	0x08080000
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188e:	e17f      	b.n	8001b90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8171 	beq.w	8001b8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d005      	beq.n	80018c0 <HAL_GPIO_Init+0x40>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d130      	bne.n	8001922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018f6:	2201      	movs	r2, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 0201 	and.w	r2, r3, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b03      	cmp	r3, #3
 800192c:	d118      	bne.n	8001960 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	6939      	ldr	r1, [r7, #16]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80ac 	beq.w	8001b8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b5f      	ldr	r3, [pc, #380]	; (8001bb0 <HAL_GPIO_Init+0x330>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	4a5e      	ldr	r2, [pc, #376]	; (8001bb0 <HAL_GPIO_Init+0x330>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a3e:	4b5c      	ldr	r3, [pc, #368]	; (8001bb0 <HAL_GPIO_Init+0x330>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a4a:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <HAL_GPIO_Init+0x334>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	3302      	adds	r3, #2
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a74:	d025      	beq.n	8001ac2 <HAL_GPIO_Init+0x242>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4f      	ldr	r2, [pc, #316]	; (8001bb8 <HAL_GPIO_Init+0x338>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01f      	beq.n	8001abe <HAL_GPIO_Init+0x23e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <HAL_GPIO_Init+0x33c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0x23a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <HAL_GPIO_Init+0x340>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0x236>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4c      	ldr	r2, [pc, #304]	; (8001bc4 <HAL_GPIO_Init+0x344>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <HAL_GPIO_Init+0x232>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4b      	ldr	r2, [pc, #300]	; (8001bc8 <HAL_GPIO_Init+0x348>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x22e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4a      	ldr	r2, [pc, #296]	; (8001bcc <HAL_GPIO_Init+0x34c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d101      	bne.n	8001aaa <HAL_GPIO_Init+0x22a>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	e00c      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001aaa:	2307      	movs	r3, #7
 8001aac:	e00a      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x244>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ad4:	4937      	ldr	r1, [pc, #220]	; (8001bb4 <HAL_GPIO_Init+0x334>)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b06:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b0c:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b30:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b5a:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <HAL_GPIO_Init+0x350>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f47f ae78 	bne.w	8001890 <HAL_GPIO_Init+0x10>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	48000400 	.word	0x48000400
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	48000c00 	.word	0x48000c00
 8001bc4:	48001000 	.word	0x48001000
 8001bc8:	48001400 	.word	0x48001400
 8001bcc:	48001800 	.word	0x48001800
 8001bd0:	40010400 	.word	0x40010400

08001bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bec:	2301      	movs	r3, #1
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e001      	b.n	8001bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	807b      	strh	r3, [r7, #2]
 8001c10:	4613      	mov	r3, r2
 8001c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c14:	787b      	ldrb	r3, [r7, #1]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c1a:	887a      	ldrh	r2, [r7, #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c20:	e002      	b.n	8001c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	041a      	lsls	r2, r3, #16
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43d9      	mvns	r1, r3
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	400b      	ands	r3, r1
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0307 	bic.w	r3, r3, #7
 8001c74:	4a07      	ldr	r2, [pc, #28]	; (8001c94 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001c76:	f043 0303 	orr.w	r3, r3, #3
 8001c7a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001c88:	bf30      	wfi
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40007000 	.word	0x40007000
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc6:	d130      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cd4:	d038      	beq.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2232      	movs	r2, #50	; 0x32
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfc:	e002      	b.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d10:	d102      	bne.n	8001d18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f2      	bne.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d24:	d110      	bne.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e00f      	b.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d007      	beq.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	431bde83 	.word	0x431bde83

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e3ca      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b97      	ldr	r3, [pc, #604]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80e4 	beq.w	8001f60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_RCC_OscConfig+0x4a>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	f040 808b 	bne.w	8001ebc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	f040 8087 	bne.w	8001ebc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dae:	4b89      	ldr	r3, [pc, #548]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x62>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e3a2      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d004      	beq.n	8001de0 <HAL_RCC_OscConfig+0x7c>
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dde:	e005      	b.n	8001dec <HAL_RCC_OscConfig+0x88>
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d223      	bcs.n	8001e38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fd55 	bl	80028a4 <RCC_SetFlashLatencyFromMSIRange>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e383      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a72      	ldr	r2, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	496d      	ldr	r1, [pc, #436]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e22:	4b6c      	ldr	r3, [pc, #432]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4968      	ldr	r1, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
 8001e36:	e025      	b.n	8001e84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a65      	ldr	r2, [pc, #404]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4960      	ldr	r1, [pc, #384]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e56:	4b5f      	ldr	r3, [pc, #380]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	495b      	ldr	r1, [pc, #364]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fd15 	bl	80028a4 <RCC_SetFlashLatencyFromMSIRange>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e343      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e84:	f000 fc4a 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	4950      	ldr	r1, [pc, #320]	; (8001fd8 <HAL_RCC_OscConfig+0x274>)
 8001e96:	5ccb      	ldrb	r3, [r1, r3]
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea0:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <HAL_RCC_OscConfig+0x278>)
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ea4:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe febb 	bl	8000c24 <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d052      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	e327      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d032      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fef8 	bl	8000cc4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed8:	f7fe fef4 	bl	8000cc4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e310      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eea:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a36      	ldr	r2, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4931      	ldr	r1, [pc, #196]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	492c      	ldr	r1, [pc, #176]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	e01a      	b.n	8001f60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fec5 	bl	8000cc4 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f3e:	f7fe fec1 	bl	8000cc4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e2dd      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f50:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x1da>
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d074      	beq.n	8002056 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d005      	beq.n	8001f7e <HAL_RCC_OscConfig+0x21a>
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	d10e      	bne.n	8001f96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d10b      	bne.n	8001f96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d064      	beq.n	8002054 <HAL_RCC_OscConfig+0x2f0>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d160      	bne.n	8002054 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e2ba      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x24a>
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e026      	b.n	8001ffc <HAL_RCC_OscConfig+0x298>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb6:	d115      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x280>
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a02      	ldr	r2, [pc, #8]	; (8001fd4 <HAL_RCC_OscConfig+0x270>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e014      	b.n	8001ffc <HAL_RCC_OscConfig+0x298>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08004cc0 	.word	0x08004cc0
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a9f      	ldr	r2, [pc, #636]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a9c      	ldr	r2, [pc, #624]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fe5e 	bl	8000cc4 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe fe5a 	bl	8000cc4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e276      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800201e:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x2a8>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fe4a 	bl	8000cc4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7fe fe46 	bl	8000cc4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e262      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x2d0>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d060      	beq.n	8002124 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d005      	beq.n	8002074 <HAL_RCC_OscConfig+0x310>
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2b0c      	cmp	r3, #12
 800206c:	d119      	bne.n	80020a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d116      	bne.n	80020a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002074:	4b7c      	ldr	r3, [pc, #496]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x328>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e23f      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	4973      	ldr	r1, [pc, #460]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a0:	e040      	b.n	8002124 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d023      	beq.n	80020f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020aa:	4b6f      	ldr	r3, [pc, #444]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6e      	ldr	r2, [pc, #440]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b6:	f7fe fe05 	bl	8000cc4 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020be:	f7fe fe01 	bl	8000cc4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e21d      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d0:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020dc:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	495f      	ldr	r1, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e018      	b.n	8002124 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f2:	4b5d      	ldr	r3, [pc, #372]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5c      	ldr	r2, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80020f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fde1 	bl	8000cc4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fddd 	bl	8000cc4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1f9      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002118:	4b53      	ldr	r3, [pc, #332]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d03c      	beq.n	80021aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01c      	beq.n	8002172 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002148:	f7fe fdbc 	bl	8000cc4 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fdb8 	bl	8000cc4 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1d4      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ef      	beq.n	8002150 <HAL_RCC_OscConfig+0x3ec>
 8002170:	e01b      	b.n	80021aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe fd9f 	bl	8000cc4 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218a:	f7fe fd9b 	bl	8000cc4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1b7      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800219c:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800219e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ef      	bne.n	800218a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80a6 	beq.w	8002304 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021bc:	4b2a      	ldr	r3, [pc, #168]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x508>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d118      	bne.n	8002222 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_OscConfig+0x508>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_RCC_OscConfig+0x508>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fc:	f7fe fd62 	bl	8000cc4 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002204:	f7fe fd5e 	bl	8000cc4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e17a      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCC_OscConfig+0x508>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x4d8>
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800223a:	e029      	b.n	8002290 <HAL_RCC_OscConfig+0x52c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d115      	bne.n	8002270 <HAL_RCC_OscConfig+0x50c>
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_RCC_OscConfig+0x504>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002264:	e014      	b.n	8002290 <HAL_RCC_OscConfig+0x52c>
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40007000 	.word	0x40007000
 8002270:	4b9c      	ldr	r3, [pc, #624]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	4a9b      	ldr	r2, [pc, #620]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002280:	4b98      	ldr	r3, [pc, #608]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	4a97      	ldr	r2, [pc, #604]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d016      	beq.n	80022c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002298:	f7fe fd14 	bl	8000cc4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a0:	f7fe fd10 	bl	8000cc4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e12a      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b6:	4b8b      	ldr	r3, [pc, #556]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80022b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0ed      	beq.n	80022a0 <HAL_RCC_OscConfig+0x53c>
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe fcfd 	bl	8000cc4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fcf9 	bl	8000cc4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e113      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022e4:	4b7f      	ldr	r3, [pc, #508]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ed      	bne.n	80022ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b7a      	ldr	r3, [pc, #488]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	4a79      	ldr	r2, [pc, #484]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80fe 	beq.w	800250a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 80d0 	bne.w	80024b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002318:	4b72      	ldr	r3, [pc, #456]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	429a      	cmp	r2, r3
 800232a:	d130      	bne.n	800238e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	3b01      	subs	r3, #1
 8002338:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d127      	bne.n	800238e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002348:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11f      	bne.n	800238e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002358:	2a07      	cmp	r2, #7
 800235a:	bf14      	ite	ne
 800235c:	2201      	movne	r2, #1
 800235e:	2200      	moveq	r2, #0
 8002360:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002362:	4293      	cmp	r3, r2
 8002364:	d113      	bne.n	800238e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d109      	bne.n	800238e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d06e      	beq.n	800246c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d069      	beq.n	8002468 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002394:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80023a0:	4b50      	ldr	r3, [pc, #320]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0ad      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4b      	ldr	r2, [pc, #300]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80023b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023bc:	f7fe fc82 	bl	8000cc4 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c4:	f7fe fc7e 	bl	8000cc4 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e09a      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_RCC_OscConfig+0x784>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f2:	3a01      	subs	r2, #1
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023fc:	0212      	lsls	r2, r2, #8
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002404:	0852      	lsrs	r2, r2, #1
 8002406:	3a01      	subs	r2, #1
 8002408:	0552      	lsls	r2, r2, #21
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002410:	0852      	lsrs	r2, r2, #1
 8002412:	3a01      	subs	r2, #1
 8002414:	0652      	lsls	r2, r2, #25
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800241c:	0912      	lsrs	r2, r2, #4
 800241e:	0452      	lsls	r2, r2, #17
 8002420:	430a      	orrs	r2, r1
 8002422:	4930      	ldr	r1, [pc, #192]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002428:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2d      	ldr	r2, [pc, #180]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800242e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002432:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002434:	4b2b      	ldr	r3, [pc, #172]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4a2a      	ldr	r2, [pc, #168]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002440:	f7fe fc40 	bl	8000cc4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fc3c 	bl	8000cc4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e058      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002466:	e050      	b.n	800250a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e04f      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d148      	bne.n	800250a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a16      	ldr	r2, [pc, #88]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002490:	f7fe fc18 	bl	8000cc4 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fc14 	bl	8000cc4 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e030      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x734>
 80024b6:	e028      	b.n	800250a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d023      	beq.n	8002506 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HAL_RCC_OscConfig+0x780>)
 80024c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fbfb 	bl	8000cc4 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	e00c      	b.n	80024ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d2:	f7fe fbf7 	bl	8000cc4 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d905      	bls.n	80024ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e013      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x7b0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ec      	bne.n	80024d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_OscConfig+0x7b0>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4905      	ldr	r1, [pc, #20]	; (8002514 <HAL_RCC_OscConfig+0x7b0>)
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_RCC_OscConfig+0x7b4>)
 8002500:	4013      	ands	r3, r2
 8002502:	60cb      	str	r3, [r1, #12]
 8002504:	e001      	b.n	800250a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	feeefffc 	.word	0xfeeefffc

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0e7      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b75      	ldr	r3, [pc, #468]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b72      	ldr	r3, [pc, #456]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 0207 	bic.w	r2, r3, #7
 8002546:	4970      	ldr	r1, [pc, #448]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0cf      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4b66      	ldr	r3, [pc, #408]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002578:	429a      	cmp	r2, r3
 800257a:	d908      	bls.n	800258e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800257c:	4b63      	ldr	r3, [pc, #396]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4960      	ldr	r1, [pc, #384]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d04c      	beq.n	8002634 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a2:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d121      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0a6      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ba:	4b54      	ldr	r3, [pc, #336]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d115      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e09a      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e08e      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e086      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4b46      	ldr	r3, [pc, #280]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f023 0203 	bic.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4943      	ldr	r1, [pc, #268]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fb5e 	bl	8000cc4 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fb5a 	bl	8000cc4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e06e      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b3a      	ldr	r3, [pc, #232]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d010      	beq.n	8002662 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b31      	ldr	r3, [pc, #196]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800264c:	429a      	cmp	r2, r3
 800264e:	d208      	bcs.n	8002662 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	492b      	ldr	r1, [pc, #172]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002662:	4b29      	ldr	r3, [pc, #164]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d210      	bcs.n	8002692 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002670:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f023 0207 	bic.w	r2, r3, #7
 8002678:	4923      	ldr	r1, [pc, #140]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_RCC_ClockConfig+0x1ec>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e036      	b.n	8002700 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4918      	ldr	r1, [pc, #96]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4910      	ldr	r1, [pc, #64]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026d0:	f000 f824 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	490b      	ldr	r1, [pc, #44]	; (8002710 <HAL_RCC_ClockConfig+0x1f4>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ec:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1f8>)
 80026ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1fc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fa95 	bl	8000c24 <HAL_InitTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80026fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
 8002710:	08004cc0 	.word	0x08004cc0
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x34>
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d121      	bne.n	800278e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d11e      	bne.n	800278e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 800275e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e005      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002778:	4a2b      	ldr	r2, [pc, #172]	; (8002828 <HAL_RCC_GetSysClockFreq+0x10c>)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d102      	bne.n	800279a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_GetSysClockFreq+0x110>)
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e004      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_RCC_GetSysClockFreq+0x114>)
 80027a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d134      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d003      	beq.n	80027c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d003      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0xac>
 80027c0:	e005      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_RCC_GetSysClockFreq+0x110>)
 80027c4:	617b      	str	r3, [r7, #20]
      break;
 80027c6:	e005      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_GetSysClockFreq+0x114>)
 80027ca:	617b      	str	r3, [r7, #20]
      break;
 80027cc:	e002      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	617b      	str	r3, [r7, #20]
      break;
 80027d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	3301      	adds	r3, #1
 80027e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	fb03 f202 	mul.w	r2, r3, r2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	0e5b      	lsrs	r3, r3, #25
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	3301      	adds	r3, #1
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002814:	69bb      	ldr	r3, [r7, #24]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	08004cd8 	.word	0x08004cd8
 800282c:	00f42400 	.word	0x00f42400
 8002830:	007a1200 	.word	0x007a1200

08002834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <HAL_RCC_GetHCLKFreq+0x14>)
 800283a:	681b      	ldr	r3, [r3, #0]
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000

0800284c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002850:	f7ff fff0 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002854:	4602      	mov	r2, r0
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	4904      	ldr	r1, [pc, #16]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002862:	5ccb      	ldrb	r3, [r1, r3]
 8002864:	f003 031f 	and.w	r3, r3, #31
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08004cd0 	.word	0x08004cd0

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800287c:	f7ff ffda 	bl	8002834 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	08004cd0 	.word	0x08004cd0

080028a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028b0:	4b2a      	ldr	r3, [pc, #168]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028bc:	f7ff f9ee 	bl	8001c9c <HAL_PWREx_GetVoltageRange>
 80028c0:	6178      	str	r0, [r7, #20]
 80028c2:	e014      	b.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	4b25      	ldr	r3, [pc, #148]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	4a24      	ldr	r2, [pc, #144]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	6593      	str	r3, [r2, #88]	; 0x58
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028dc:	f7ff f9de 	bl	8001c9c <HAL_PWREx_GetVoltageRange>
 80028e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	4a1d      	ldr	r2, [pc, #116]	; (800295c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f4:	d10b      	bne.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d919      	bls.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002900:	d902      	bls.n	8002908 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002902:	2302      	movs	r3, #2
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e013      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002908:	2301      	movs	r3, #1
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e010      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d902      	bls.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002914:	2303      	movs	r3, #3
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e00a      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d102      	bne.n	8002926 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002920:	2302      	movs	r3, #2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e004      	b.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b70      	cmp	r3, #112	; 0x70
 800292a:	d101      	bne.n	8002930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800292c:	2301      	movs	r3, #1
 800292e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f023 0207 	bic.w	r2, r3, #7
 8002938:	4909      	ldr	r1, [pc, #36]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	429a      	cmp	r2, r3
 800294c:	d001      	beq.n	8002952 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40021000 	.word	0x40021000
 8002960:	40022000 	.word	0x40022000

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800296c:	2300      	movs	r3, #0
 800296e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002970:	2300      	movs	r3, #0
 8002972:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297c:	2b00      	cmp	r3, #0
 800297e:	d041      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002984:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002988:	d02a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800298a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800298e:	d824      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800299a:	d81e      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a4:	d010      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029a6:	e018      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a8:	4b86      	ldr	r3, [pc, #536]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a85      	ldr	r2, [pc, #532]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b4:	e015      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fabb 	bl	8002f38 <RCCEx_PLLSAI1_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c6:	e00c      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3320      	adds	r3, #32
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fba6 	bl	8003120 <RCCEx_PLLSAI2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d8:	e003      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	74fb      	strb	r3, [r7, #19]
      break;
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029e8:	4b76      	ldr	r3, [pc, #472]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f6:	4973      	ldr	r1, [pc, #460]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029fe:	e001      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d041      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a18:	d02a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a1e:	d824      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a2a:	d81e      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d010      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a36:	e018      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a38:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a61      	ldr	r2, [pc, #388]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a44:	e015      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fa73 	bl	8002f38 <RCCEx_PLLSAI1_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a56:	e00c      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3320      	adds	r3, #32
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fb5e 	bl	8003120 <RCCEx_PLLSAI2_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a68:	e003      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a6e:	e000      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a78:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a86:	494f      	ldr	r1, [pc, #316]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a8e:	e001      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a0 	beq.w	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aa6:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abc:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	4a40      	ldr	r2, [pc, #256]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3a      	ldr	r2, [pc, #232]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe f8ee 	bl	8000cc4 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aea:	e009      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe f8ea 	bl	8000cc4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	74fb      	strb	r3, [r7, #19]
        break;
 8002afe:	e005      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ef      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d15c      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01f      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d019      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b30:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4c:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d016      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f8a9 	bl	8000cc4 <HAL_GetTick>
 8002b72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b74:	e00b      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe f8a5 	bl	8000cc4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d902      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b8c:	e006      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ec      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b9c:	7cfb      	ldrb	r3, [r7, #19]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb2:	4904      	ldr	r1, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bba:	e009      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd0:	7c7b      	ldrb	r3, [r7, #17]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b9e      	ldr	r3, [pc, #632]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4a9d      	ldr	r2, [pc, #628]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bee:	4b98      	ldr	r3, [pc, #608]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 0203 	bic.w	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	4994      	ldr	r1, [pc, #592]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c10:	4b8f      	ldr	r3, [pc, #572]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 020c 	bic.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	498c      	ldr	r1, [pc, #560]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c32:	4b87      	ldr	r3, [pc, #540]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	4983      	ldr	r1, [pc, #524]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c54:	4b7e      	ldr	r3, [pc, #504]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	497b      	ldr	r1, [pc, #492]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c76:	4b76      	ldr	r3, [pc, #472]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c84:	4972      	ldr	r1, [pc, #456]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c98:	4b6d      	ldr	r3, [pc, #436]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	496a      	ldr	r1, [pc, #424]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cba:	4b65      	ldr	r3, [pc, #404]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	4961      	ldr	r1, [pc, #388]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cdc:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	4959      	ldr	r1, [pc, #356]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfe:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0c:	4950      	ldr	r1, [pc, #320]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d20:	4b4b      	ldr	r3, [pc, #300]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	4948      	ldr	r1, [pc, #288]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d42:	4b43      	ldr	r3, [pc, #268]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	493f      	ldr	r1, [pc, #252]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d028      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d64:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d72:	4937      	ldr	r1, [pc, #220]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d82:	d106      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d84:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8e:	60d3      	str	r3, [r2, #12]
 8002d90:	e011      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f8c8 	bl	8002f38 <RCCEx_PLLSAI1_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	491f      	ldr	r1, [pc, #124]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002de0:	d106      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dec:	60d3      	str	r3, [r2, #12]
 8002dee:	e011      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f899 	bl	8002f38 <RCCEx_PLLSAI1_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d02b      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a02      	ldr	r2, [pc, #8]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4a:	60d3      	str	r3, [r2, #12]
 8002e4c:	e014      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e4e:	bf00      	nop
 8002e50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f867 	bl	8002f38 <RCCEx_PLLSAI1_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e6e:	7cfb      	ldrb	r3, [r7, #19]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02f      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e92:	4928      	ldr	r1, [pc, #160]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 f844 	bl	8002f38 <RCCEx_PLLSAI1_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002eba:	7cfb      	ldrb	r3, [r7, #19]
 8002ebc:	74bb      	strb	r3, [r7, #18]
 8002ebe:	e011      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3320      	adds	r3, #32
 8002ece:	2102      	movs	r1, #2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f925 	bl	8003120 <RCCEx_PLLSAI2_Config>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f12:	4b08      	ldr	r3, [pc, #32]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000

08002f38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f46:	4b75      	ldr	r3, [pc, #468]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d10d      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
       ||
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f6a:	4b6c      	ldr	r3, [pc, #432]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
       ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d047      	beq.n	800300e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
 8002f82:	e044      	b.n	800300e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d018      	beq.n	8002fbe <RCCEx_PLLSAI1_Config+0x86>
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d825      	bhi.n	8002fdc <RCCEx_PLLSAI1_Config+0xa4>
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d002      	beq.n	8002f9a <RCCEx_PLLSAI1_Config+0x62>
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d009      	beq.n	8002fac <RCCEx_PLLSAI1_Config+0x74>
 8002f98:	e020      	b.n	8002fdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f9a:	4b60      	ldr	r3, [pc, #384]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d11d      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002faa:	e01a      	b.n	8002fe2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fac:	4b5b      	ldr	r3, [pc, #364]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d116      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbc:	e013      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fbe:	4b57      	ldr	r3, [pc, #348]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fca:	4b54      	ldr	r3, [pc, #336]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fda:	e006      	b.n	8002fea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e004      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10d      	bne.n	800300e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	430b      	orrs	r3, r1
 8003008:	4944      	ldr	r1, [pc, #272]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d17d      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003014:	4b41      	ldr	r3, [pc, #260]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a40      	ldr	r2, [pc, #256]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 800301a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800301e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003020:	f7fd fe50 	bl	8000cc4 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003026:	e009      	b.n	800303c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003028:	f7fd fe4c 	bl	8000cc4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	73fb      	strb	r3, [r7, #15]
        break;
 800303a:	e005      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800303c:	4b37      	ldr	r3, [pc, #220]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1ef      	bne.n	8003028 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d160      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003054:	4b31      	ldr	r3, [pc, #196]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	0211      	lsls	r1, r2, #8
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	0912      	lsrs	r2, r2, #4
 800306c:	0452      	lsls	r2, r2, #17
 800306e:	430a      	orrs	r2, r1
 8003070:	492a      	ldr	r1, [pc, #168]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003072:	4313      	orrs	r3, r2
 8003074:	610b      	str	r3, [r1, #16]
 8003076:	e027      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d112      	bne.n	80030a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003086:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	0211      	lsls	r1, r2, #8
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6912      	ldr	r2, [r2, #16]
 8003094:	0852      	lsrs	r2, r2, #1
 8003096:	3a01      	subs	r2, #1
 8003098:	0552      	lsls	r2, r2, #21
 800309a:	430a      	orrs	r2, r1
 800309c:	491f      	ldr	r1, [pc, #124]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
 80030a2:	e011      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6952      	ldr	r2, [r2, #20]
 80030ba:	0852      	lsrs	r2, r2, #1
 80030bc:	3a01      	subs	r2, #1
 80030be:	0652      	lsls	r2, r2, #25
 80030c0:	430a      	orrs	r2, r1
 80030c2:	4916      	ldr	r1, [pc, #88]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fd fdf6 	bl	8000cc4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030da:	e009      	b.n	80030f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030dc:	f7fd fdf2 	bl	8000cc4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	73fb      	strb	r3, [r7, #15]
          break;
 80030ee:	e005      	b.n	80030fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ef      	beq.n	80030dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	4904      	ldr	r1, [pc, #16]	; (800311c <RCCEx_PLLSAI1_Config+0x1e4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000

08003120 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312e:	4b6a      	ldr	r3, [pc, #424]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d018      	beq.n	800316c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800313a:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0203 	and.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10d      	bne.n	8003166 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
       ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003152:	4b61      	ldr	r3, [pc, #388]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
       ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d047      	beq.n	80031f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e044      	b.n	80031f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d018      	beq.n	80031a6 <RCCEx_PLLSAI2_Config+0x86>
 8003174:	2b03      	cmp	r3, #3
 8003176:	d825      	bhi.n	80031c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <RCCEx_PLLSAI2_Config+0x62>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d009      	beq.n	8003194 <RCCEx_PLLSAI2_Config+0x74>
 8003180:	e020      	b.n	80031c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003182:	4b55      	ldr	r3, [pc, #340]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e01a      	b.n	80031ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e013      	b.n	80031ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a6:	4b4c      	ldr	r3, [pc, #304]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031b2:	4b49      	ldr	r3, [pc, #292]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031c2:	e006      	b.n	80031d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e004      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	430b      	orrs	r3, r1
 80031f0:	4939      	ldr	r1, [pc, #228]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d167      	bne.n	80032cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031fc:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a35      	ldr	r2, [pc, #212]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fd fd5c 	bl	8000cc4 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800320e:	e009      	b.n	8003224 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003210:	f7fd fd58 	bl	8000cc4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	73fb      	strb	r3, [r7, #15]
        break;
 8003222:	e005      	b.n	8003230 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003224:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ef      	bne.n	8003210 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d14a      	bne.n	80032cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800323c:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6892      	ldr	r2, [r2, #8]
 800324c:	0211      	lsls	r1, r2, #8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	0912      	lsrs	r2, r2, #4
 8003254:	0452      	lsls	r2, r2, #17
 8003256:	430a      	orrs	r2, r1
 8003258:	491f      	ldr	r1, [pc, #124]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	614b      	str	r3, [r1, #20]
 800325e:	e011      	b.n	8003284 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003268:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	0211      	lsls	r1, r2, #8
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6912      	ldr	r2, [r2, #16]
 8003276:	0852      	lsrs	r2, r2, #1
 8003278:	3a01      	subs	r2, #1
 800327a:	0652      	lsls	r2, r2, #25
 800327c:	430a      	orrs	r2, r1
 800327e:	4916      	ldr	r1, [pc, #88]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	4313      	orrs	r3, r2
 8003282:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fd fd18 	bl	8000cc4 <HAL_GetTick>
 8003294:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003296:	e009      	b.n	80032ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003298:	f7fd fd14 	bl	8000cc4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d902      	bls.n	80032ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	73fb      	strb	r3, [r7, #15]
          break;
 80032aa:	e005      	b.n	80032b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4904      	ldr	r1, [pc, #16]	; (80032d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000

080032dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06c      	beq.n	80033c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd fad6 	bl	80008b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	22ca      	movs	r2, #202	; 0xca
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2253      	movs	r2, #83	; 0x53
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f87c 	bl	800341e <RTC_EnterInitMode>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d14b      	bne.n	80033c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800333e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003342:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	041a      	lsls	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f87f 	bl	8003484 <RTC_ExitInitMode>
 8003386:	4603      	mov	r3, r0
 8003388:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11b      	bne.n	80033c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0203 	bic.w	r2, r2, #3
 800339e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69da      	ldr	r2, [r3, #28]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033e8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80033ea:	f7fd fc6b 	bl	8000cc4 <HAL_GetTick>
 80033ee:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033f0:	e009      	b.n	8003406 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033f2:	f7fd fc67 	bl	8000cc4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003400:	d901      	bls.n	8003406 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e007      	b.n	8003416 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ee      	beq.n	80033f2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d120      	bne.n	800347a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003442:	f7fd fc3f 	bl	8000cc4 <HAL_GetTick>
 8003446:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003448:	e00d      	b.n	8003466 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800344a:	f7fd fc3b 	bl	8000cc4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003458:	d905      	bls.n	8003466 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2203      	movs	r2, #3
 8003462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <RTC_EnterInitMode+0x5c>
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d1e7      	bne.n	800344a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <RTC_ExitInitMode+0x78>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a19      	ldr	r2, [pc, #100]	; (80034fc <RTC_ExitInitMode+0x78>)
 8003496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <RTC_ExitInitMode+0x78>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff92 	bl	80033d2 <HAL_RTC_WaitForSynchro>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01e      	beq.n	80034f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2203      	movs	r2, #3
 80034b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	e017      	b.n	80034f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <RTC_ExitInitMode+0x78>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <RTC_ExitInitMode+0x78>)
 80034c8:	f023 0320 	bic.w	r3, r3, #32
 80034cc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff7f 	bl	80033d2 <HAL_RTC_WaitForSynchro>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <RTC_ExitInitMode+0x78>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a04      	ldr	r2, [pc, #16]	; (80034fc <RTC_ExitInitMode+0x78>)
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40002800 	.word	0x40002800

08003500 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003516:	2302      	movs	r3, #2
 8003518:	e07f      	b.n	800361a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	22ca      	movs	r2, #202	; 0xca
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2253      	movs	r2, #83	; 0x53
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800355a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d120      	bne.n	80035ac <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800356a:	f7fd fbab 	bl	8000cc4 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8003570:	e015      	b.n	800359e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003572:	f7fd fba7 	bl	8000cc4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003580:	d90d      	bls.n	800359e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	22ff      	movs	r2, #255	; 0xff
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2203      	movs	r2, #3
 800358e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e03d      	b.n	800361a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0e2      	beq.n	8003572 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f023 0107 	bic.w	r1, r3, #7
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a15      	ldr	r2, [pc, #84]	; (8003624 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80035ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035d2:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80035d4:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a12      	ldr	r2, [pc, #72]	; (8003624 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035de:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ee:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035fe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	22ff      	movs	r2, #255	; 0xff
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800363a:	2302      	movs	r3, #2
 800363c:	e04d      	b.n	80036da <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	22ca      	movs	r2, #202	; 0xca
 8003654:	625a      	str	r2, [r3, #36]	; 0x24
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2253      	movs	r2, #83	; 0x53
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800367c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800367e:	f7fd fb21 	bl	8000cc4 <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003684:	e015      	b.n	80036b2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003686:	f7fd fb1d 	bl	8000cc4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003694:	d90d      	bls.n	80036b2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	22ff      	movs	r2, #255	; 0xff
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2203      	movs	r2, #3
 80036a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e013      	b.n	80036da <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0e2      	beq.n	8003686 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	22ff      	movs	r2, #255	; 0xff
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e040      	b.n	8003776 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d106      	bne.n	800370a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7fd f907 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2224      	movs	r2, #36	; 0x24
 800370e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f8c1 	bl	80038a8 <UART_SetConfig>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e022      	b.n	8003776 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fb6d 	bl	8003e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800374c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800375c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fbf4 	bl	8003f5c <UART_CheckIdleState>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08a      	sub	sp, #40	; 0x28
 8003782:	af02      	add	r7, sp, #8
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 8082 	bne.w	800389c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Transmit+0x26>
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e07a      	b.n	800389e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_UART_Transmit+0x38>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e073      	b.n	800389e <HAL_UART_Transmit+0x120>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2221      	movs	r2, #33	; 0x21
 80037ca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037cc:	f7fd fa7a 	bl	8000cc4 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	d108      	bne.n	80037fe <HAL_UART_Transmit+0x80>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d104      	bne.n	80037fe <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e003      	b.n	8003806 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800380e:	e02d      	b.n	800386c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2200      	movs	r2, #0
 8003818:	2180      	movs	r1, #128	; 0x80
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fbe7 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e039      	b.n	800389e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10b      	bne.n	8003848 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	881a      	ldrh	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	b292      	uxth	r2, r2
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	3302      	adds	r3, #2
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e008      	b.n	800385a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	b292      	uxth	r2, r2
 8003852:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3301      	adds	r3, #1
 8003858:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1cb      	bne.n	8003810 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fbb3 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e005      	b.n	800389e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ac:	b08a      	sub	sp, #40	; 0x28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4ba4      	ldr	r3, [pc, #656]	; (8003b68 <UART_SetConfig+0x2c0>)
 80038d8:	4013      	ands	r3, r2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a99      	ldr	r2, [pc, #612]	; (8003b6c <UART_SetConfig+0x2c4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	4313      	orrs	r3, r2
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a90      	ldr	r2, [pc, #576]	; (8003b70 <UART_SetConfig+0x2c8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d126      	bne.n	8003980 <UART_SetConfig+0xd8>
 8003932:	4b90      	ldr	r3, [pc, #576]	; (8003b74 <UART_SetConfig+0x2cc>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b03      	cmp	r3, #3
 800393e:	d81b      	bhi.n	8003978 <UART_SetConfig+0xd0>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0xa0>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	08003959 	.word	0x08003959
 800394c:	08003969 	.word	0x08003969
 8003950:	08003961 	.word	0x08003961
 8003954:	08003971 	.word	0x08003971
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800395e:	e116      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003960:	2302      	movs	r3, #2
 8003962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003966:	e112      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003968:	2304      	movs	r3, #4
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e10e      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003970:	2308      	movs	r3, #8
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e10a      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003978:	2310      	movs	r3, #16
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e106      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7c      	ldr	r2, [pc, #496]	; (8003b78 <UART_SetConfig+0x2d0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d138      	bne.n	80039fc <UART_SetConfig+0x154>
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <UART_SetConfig+0x2cc>)
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d82d      	bhi.n	80039f4 <UART_SetConfig+0x14c>
 8003998:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <UART_SetConfig+0xf8>)
 800399a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399e:	bf00      	nop
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	080039f5 	.word	0x080039f5
 80039a8:	080039f5 	.word	0x080039f5
 80039ac:	080039f5 	.word	0x080039f5
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	080039f5 	.word	0x080039f5
 80039b8:	080039f5 	.word	0x080039f5
 80039bc:	080039f5 	.word	0x080039f5
 80039c0:	080039dd 	.word	0x080039dd
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	080039f5 	.word	0x080039f5
 80039d0:	080039ed 	.word	0x080039ed
 80039d4:	2300      	movs	r3, #0
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e0d8      	b.n	8003b8e <UART_SetConfig+0x2e6>
 80039dc:	2302      	movs	r3, #2
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e0d4      	b.n	8003b8e <UART_SetConfig+0x2e6>
 80039e4:	2304      	movs	r3, #4
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e0d0      	b.n	8003b8e <UART_SetConfig+0x2e6>
 80039ec:	2308      	movs	r3, #8
 80039ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f2:	e0cc      	b.n	8003b8e <UART_SetConfig+0x2e6>
 80039f4:	2310      	movs	r3, #16
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fa:	e0c8      	b.n	8003b8e <UART_SetConfig+0x2e6>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a5e      	ldr	r2, [pc, #376]	; (8003b7c <UART_SetConfig+0x2d4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d125      	bne.n	8003a52 <UART_SetConfig+0x1aa>
 8003a06:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <UART_SetConfig+0x2cc>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a10:	2b30      	cmp	r3, #48	; 0x30
 8003a12:	d016      	beq.n	8003a42 <UART_SetConfig+0x19a>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d818      	bhi.n	8003a4a <UART_SetConfig+0x1a2>
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d00a      	beq.n	8003a32 <UART_SetConfig+0x18a>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d814      	bhi.n	8003a4a <UART_SetConfig+0x1a2>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <UART_SetConfig+0x182>
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d008      	beq.n	8003a3a <UART_SetConfig+0x192>
 8003a28:	e00f      	b.n	8003a4a <UART_SetConfig+0x1a2>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a30:	e0ad      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a32:	2302      	movs	r3, #2
 8003a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a38:	e0a9      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a40:	e0a5      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a42:	2308      	movs	r3, #8
 8003a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a48:	e0a1      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a50:	e09d      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a4a      	ldr	r2, [pc, #296]	; (8003b80 <UART_SetConfig+0x2d8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d125      	bne.n	8003aa8 <UART_SetConfig+0x200>
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <UART_SetConfig+0x2cc>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a66:	2bc0      	cmp	r3, #192	; 0xc0
 8003a68:	d016      	beq.n	8003a98 <UART_SetConfig+0x1f0>
 8003a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a6c:	d818      	bhi.n	8003aa0 <UART_SetConfig+0x1f8>
 8003a6e:	2b80      	cmp	r3, #128	; 0x80
 8003a70:	d00a      	beq.n	8003a88 <UART_SetConfig+0x1e0>
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d814      	bhi.n	8003aa0 <UART_SetConfig+0x1f8>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <UART_SetConfig+0x1d8>
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d008      	beq.n	8003a90 <UART_SetConfig+0x1e8>
 8003a7e:	e00f      	b.n	8003aa0 <UART_SetConfig+0x1f8>
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e082      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e07e      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a90:	2304      	movs	r3, #4
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e07a      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e076      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e072      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <UART_SetConfig+0x2dc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d12a      	bne.n	8003b08 <UART_SetConfig+0x260>
 8003ab2:	4b30      	ldr	r3, [pc, #192]	; (8003b74 <UART_SetConfig+0x2cc>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac0:	d01a      	beq.n	8003af8 <UART_SetConfig+0x250>
 8003ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac6:	d81b      	bhi.n	8003b00 <UART_SetConfig+0x258>
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d00c      	beq.n	8003ae8 <UART_SetConfig+0x240>
 8003ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad2:	d815      	bhi.n	8003b00 <UART_SetConfig+0x258>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <UART_SetConfig+0x238>
 8003ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003adc:	d008      	beq.n	8003af0 <UART_SetConfig+0x248>
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x258>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e052      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e04e      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e04a      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e046      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e042      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <UART_SetConfig+0x2c4>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d13a      	bne.n	8003b88 <UART_SetConfig+0x2e0>
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <UART_SetConfig+0x2cc>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b20:	d01a      	beq.n	8003b58 <UART_SetConfig+0x2b0>
 8003b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b26:	d81b      	bhi.n	8003b60 <UART_SetConfig+0x2b8>
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d00c      	beq.n	8003b48 <UART_SetConfig+0x2a0>
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b32:	d815      	bhi.n	8003b60 <UART_SetConfig+0x2b8>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <UART_SetConfig+0x298>
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3c:	d008      	beq.n	8003b50 <UART_SetConfig+0x2a8>
 8003b3e:	e00f      	b.n	8003b60 <UART_SetConfig+0x2b8>
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e022      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e01e      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b50:	2304      	movs	r3, #4
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e01a      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b58:	2308      	movs	r3, #8
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e016      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b60:	2310      	movs	r3, #16
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e012      	b.n	8003b8e <UART_SetConfig+0x2e6>
 8003b68:	efff69f3 	.word	0xefff69f3
 8003b6c:	40008000 	.word	0x40008000
 8003b70:	40013800 	.word	0x40013800
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40004400 	.word	0x40004400
 8003b7c:	40004800 	.word	0x40004800
 8003b80:	40004c00 	.word	0x40004c00
 8003b84:	40005000 	.word	0x40005000
 8003b88:	2310      	movs	r3, #16
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a9f      	ldr	r2, [pc, #636]	; (8003e10 <UART_SetConfig+0x568>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d17a      	bne.n	8003c8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d824      	bhi.n	8003bea <UART_SetConfig+0x342>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <UART_SetConfig+0x300>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bcd 	.word	0x08003bcd
 8003bac:	08003beb 	.word	0x08003beb
 8003bb0:	08003bd5 	.word	0x08003bd5
 8003bb4:	08003beb 	.word	0x08003beb
 8003bb8:	08003bdb 	.word	0x08003bdb
 8003bbc:	08003beb 	.word	0x08003beb
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003beb 	.word	0x08003beb
 8003bc8:	08003be3 	.word	0x08003be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7fe fe3e 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003bd0:	61f8      	str	r0, [r7, #28]
        break;
 8003bd2:	e010      	b.n	8003bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd4:	4b8f      	ldr	r3, [pc, #572]	; (8003e14 <UART_SetConfig+0x56c>)
 8003bd6:	61fb      	str	r3, [r7, #28]
        break;
 8003bd8:	e00d      	b.n	8003bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bda:	f7fe fd9f 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003bde:	61f8      	str	r0, [r7, #28]
        break;
 8003be0:	e009      	b.n	8003bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003be6:	61fb      	str	r3, [r7, #28]
        break;
 8003be8:	e005      	b.n	8003bf6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80fb 	beq.w	8003df4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d305      	bcc.n	8003c1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d903      	bls.n	8003c22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c20:	e0e8      	b.n	8003df4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2200      	movs	r2, #0
 8003c26:	461c      	mov	r4, r3
 8003c28:	4615      	mov	r5, r2
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	022b      	lsls	r3, r5, #8
 8003c34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c38:	0222      	lsls	r2, r4, #8
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	6849      	ldr	r1, [r1, #4]
 8003c3e:	0849      	lsrs	r1, r1, #1
 8003c40:	2000      	movs	r0, #0
 8003c42:	4688      	mov	r8, r1
 8003c44:	4681      	mov	r9, r0
 8003c46:	eb12 0a08 	adds.w	sl, r2, r8
 8003c4a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c5c:	4650      	mov	r0, sl
 8003c5e:	4659      	mov	r1, fp
 8003c60:	f7fc fab2 	bl	80001c8 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c72:	d308      	bcc.n	8003c86 <UART_SetConfig+0x3de>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7a:	d204      	bcs.n	8003c86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	e0b6      	b.n	8003df4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c8c:	e0b2      	b.n	8003df4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c96:	d15e      	bne.n	8003d56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d828      	bhi.n	8003cf2 <UART_SetConfig+0x44a>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x400>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fdbe 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e014      	b.n	8003cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fdd0 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	61f8      	str	r0, [r7, #28]
        break;
 8003cda:	e010      	b.n	8003cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b4d      	ldr	r3, [pc, #308]	; (8003e14 <UART_SetConfig+0x56c>)
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e00d      	b.n	8003cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe fd1b 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003ce6:	61f8      	str	r0, [r7, #28]
        break;
 8003ce8:	e009      	b.n	8003cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	61fb      	str	r3, [r7, #28]
        break;
 8003cf0:	e005      	b.n	8003cfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d077      	beq.n	8003df4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005a      	lsls	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	441a      	add	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b0f      	cmp	r3, #15
 8003d1e:	d916      	bls.n	8003d4e <UART_SetConfig+0x4a6>
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d26:	d212      	bcs.n	8003d4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f023 030f 	bic.w	r3, r3, #15
 8003d30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	8afb      	ldrh	r3, [r7, #22]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	8afa      	ldrh	r2, [r7, #22]
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	e052      	b.n	8003df4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d54:	e04e      	b.n	8003df4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d827      	bhi.n	8003dae <UART_SetConfig+0x506>
 8003d5e:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <UART_SetConfig+0x4bc>)
 8003d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d64:	08003d89 	.word	0x08003d89
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003daf 	.word	0x08003daf
 8003d74:	08003d9f 	.word	0x08003d9f
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
 8003d84:	08003da7 	.word	0x08003da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d88:	f7fe fd60 	bl	800284c <HAL_RCC_GetPCLK1Freq>
 8003d8c:	61f8      	str	r0, [r7, #28]
        break;
 8003d8e:	e014      	b.n	8003dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d90:	f7fe fd72 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003d94:	61f8      	str	r0, [r7, #28]
        break;
 8003d96:	e010      	b.n	8003dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <UART_SetConfig+0x56c>)
 8003d9a:	61fb      	str	r3, [r7, #28]
        break;
 8003d9c:	e00d      	b.n	8003dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d9e:	f7fe fcbd 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8003da2:	61f8      	str	r0, [r7, #28]
        break;
 8003da4:	e009      	b.n	8003dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003daa:	61fb      	str	r3, [r7, #28]
        break;
 8003dac:	e005      	b.n	8003dba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003db8:	bf00      	nop
    }

    if (pclk != 0U)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	085a      	lsrs	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	441a      	add	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b0f      	cmp	r3, #15
 8003dd8:	d909      	bls.n	8003dee <UART_SetConfig+0x546>
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d205      	bcs.n	8003dee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e002      	b.n	8003df4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3728      	adds	r7, #40	; 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0e:	bf00      	nop
 8003e10:	40008000 	.word	0x40008000
 8003e14:	00f42400 	.word	0x00f42400

08003e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f16:	d10a      	bne.n	8003f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f6c:	f7fc feaa 	bl	8000cc4 <HAL_GetTick>
 8003f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d10e      	bne.n	8003f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f82d 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e023      	b.n	8003fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d10e      	bne.n	8003fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f817 	bl	8003fee <UART_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00d      	b.n	8003fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b09c      	sub	sp, #112	; 0x70
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffe:	e0a5      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	f000 80a1 	beq.w	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fc fe5b 	bl	8000cc4 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <UART_WaitOnFlagUntilTimeout+0x32>
 800401a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401c:	2b00      	cmp	r3, #0
 800401e:	d13e      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004034:	667b      	str	r3, [r7, #100]	; 0x64
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004046:	e841 2300 	strex	r3, r2, [r1]
 800404a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1e6      	bne.n	8004020 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3308      	adds	r3, #8
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	663b      	str	r3, [r7, #96]	; 0x60
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3308      	adds	r3, #8
 8004070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004072:	64ba      	str	r2, [r7, #72]	; 0x48
 8004074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e5      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e067      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d04f      	beq.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ba:	d147      	bne.n	800414c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	613b      	str	r3, [r7, #16]
   return(result);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004118:	623a      	str	r2, [r7, #32]
 800411a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	69f9      	ldr	r1, [r7, #28]
 800411e:	6a3a      	ldr	r2, [r7, #32]
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	61bb      	str	r3, [r7, #24]
   return(result);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e010      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	f43f af4a 	beq.w	8004000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3770      	adds	r7, #112	; 0x70
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <__errno>:
 8004178:	4b01      	ldr	r3, [pc, #4]	; (8004180 <__errno+0x8>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	2000002c 	.word	0x2000002c

08004184 <__libc_init_array>:
 8004184:	b570      	push	{r4, r5, r6, lr}
 8004186:	4d0d      	ldr	r5, [pc, #52]	; (80041bc <__libc_init_array+0x38>)
 8004188:	4c0d      	ldr	r4, [pc, #52]	; (80041c0 <__libc_init_array+0x3c>)
 800418a:	1b64      	subs	r4, r4, r5
 800418c:	10a4      	asrs	r4, r4, #2
 800418e:	2600      	movs	r6, #0
 8004190:	42a6      	cmp	r6, r4
 8004192:	d109      	bne.n	80041a8 <__libc_init_array+0x24>
 8004194:	4d0b      	ldr	r5, [pc, #44]	; (80041c4 <__libc_init_array+0x40>)
 8004196:	4c0c      	ldr	r4, [pc, #48]	; (80041c8 <__libc_init_array+0x44>)
 8004198:	f000 fd1e 	bl	8004bd8 <_init>
 800419c:	1b64      	subs	r4, r4, r5
 800419e:	10a4      	asrs	r4, r4, #2
 80041a0:	2600      	movs	r6, #0
 80041a2:	42a6      	cmp	r6, r4
 80041a4:	d105      	bne.n	80041b2 <__libc_init_array+0x2e>
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
 80041a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ac:	4798      	blx	r3
 80041ae:	3601      	adds	r6, #1
 80041b0:	e7ee      	b.n	8004190 <__libc_init_array+0xc>
 80041b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b6:	4798      	blx	r3
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7f2      	b.n	80041a2 <__libc_init_array+0x1e>
 80041bc:	08004d74 	.word	0x08004d74
 80041c0:	08004d74 	.word	0x08004d74
 80041c4:	08004d74 	.word	0x08004d74
 80041c8:	08004d78 	.word	0x08004d78

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <_puts_r>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	460e      	mov	r6, r1
 80041e0:	4605      	mov	r5, r0
 80041e2:	b118      	cbz	r0, 80041ec <_puts_r+0x10>
 80041e4:	6983      	ldr	r3, [r0, #24]
 80041e6:	b90b      	cbnz	r3, 80041ec <_puts_r+0x10>
 80041e8:	f000 fa48 	bl	800467c <__sinit>
 80041ec:	69ab      	ldr	r3, [r5, #24]
 80041ee:	68ac      	ldr	r4, [r5, #8]
 80041f0:	b913      	cbnz	r3, 80041f8 <_puts_r+0x1c>
 80041f2:	4628      	mov	r0, r5
 80041f4:	f000 fa42 	bl	800467c <__sinit>
 80041f8:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <_puts_r+0xd0>)
 80041fa:	429c      	cmp	r4, r3
 80041fc:	d120      	bne.n	8004240 <_puts_r+0x64>
 80041fe:	686c      	ldr	r4, [r5, #4]
 8004200:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004202:	07db      	lsls	r3, r3, #31
 8004204:	d405      	bmi.n	8004212 <_puts_r+0x36>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	0598      	lsls	r0, r3, #22
 800420a:	d402      	bmi.n	8004212 <_puts_r+0x36>
 800420c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800420e:	f000 fad3 	bl	80047b8 <__retarget_lock_acquire_recursive>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	0719      	lsls	r1, r3, #28
 8004216:	d51d      	bpl.n	8004254 <_puts_r+0x78>
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	b1db      	cbz	r3, 8004254 <_puts_r+0x78>
 800421c:	3e01      	subs	r6, #1
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004224:	3b01      	subs	r3, #1
 8004226:	60a3      	str	r3, [r4, #8]
 8004228:	bb39      	cbnz	r1, 800427a <_puts_r+0x9e>
 800422a:	2b00      	cmp	r3, #0
 800422c:	da38      	bge.n	80042a0 <_puts_r+0xc4>
 800422e:	4622      	mov	r2, r4
 8004230:	210a      	movs	r1, #10
 8004232:	4628      	mov	r0, r5
 8004234:	f000 f848 	bl	80042c8 <__swbuf_r>
 8004238:	3001      	adds	r0, #1
 800423a:	d011      	beq.n	8004260 <_puts_r+0x84>
 800423c:	250a      	movs	r5, #10
 800423e:	e011      	b.n	8004264 <_puts_r+0x88>
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <_puts_r+0xd4>)
 8004242:	429c      	cmp	r4, r3
 8004244:	d101      	bne.n	800424a <_puts_r+0x6e>
 8004246:	68ac      	ldr	r4, [r5, #8]
 8004248:	e7da      	b.n	8004200 <_puts_r+0x24>
 800424a:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <_puts_r+0xd8>)
 800424c:	429c      	cmp	r4, r3
 800424e:	bf08      	it	eq
 8004250:	68ec      	ldreq	r4, [r5, #12]
 8004252:	e7d5      	b.n	8004200 <_puts_r+0x24>
 8004254:	4621      	mov	r1, r4
 8004256:	4628      	mov	r0, r5
 8004258:	f000 f888 	bl	800436c <__swsetup_r>
 800425c:	2800      	cmp	r0, #0
 800425e:	d0dd      	beq.n	800421c <_puts_r+0x40>
 8004260:	f04f 35ff 	mov.w	r5, #4294967295
 8004264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004266:	07da      	lsls	r2, r3, #31
 8004268:	d405      	bmi.n	8004276 <_puts_r+0x9a>
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	059b      	lsls	r3, r3, #22
 800426e:	d402      	bmi.n	8004276 <_puts_r+0x9a>
 8004270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004272:	f000 faa2 	bl	80047ba <__retarget_lock_release_recursive>
 8004276:	4628      	mov	r0, r5
 8004278:	bd70      	pop	{r4, r5, r6, pc}
 800427a:	2b00      	cmp	r3, #0
 800427c:	da04      	bge.n	8004288 <_puts_r+0xac>
 800427e:	69a2      	ldr	r2, [r4, #24]
 8004280:	429a      	cmp	r2, r3
 8004282:	dc06      	bgt.n	8004292 <_puts_r+0xb6>
 8004284:	290a      	cmp	r1, #10
 8004286:	d004      	beq.n	8004292 <_puts_r+0xb6>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	6022      	str	r2, [r4, #0]
 800428e:	7019      	strb	r1, [r3, #0]
 8004290:	e7c5      	b.n	800421e <_puts_r+0x42>
 8004292:	4622      	mov	r2, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 f817 	bl	80042c8 <__swbuf_r>
 800429a:	3001      	adds	r0, #1
 800429c:	d1bf      	bne.n	800421e <_puts_r+0x42>
 800429e:	e7df      	b.n	8004260 <_puts_r+0x84>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	250a      	movs	r5, #10
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	6022      	str	r2, [r4, #0]
 80042a8:	701d      	strb	r5, [r3, #0]
 80042aa:	e7db      	b.n	8004264 <_puts_r+0x88>
 80042ac:	08004d2c 	.word	0x08004d2c
 80042b0:	08004d4c 	.word	0x08004d4c
 80042b4:	08004d0c 	.word	0x08004d0c

080042b8 <puts>:
 80042b8:	4b02      	ldr	r3, [pc, #8]	; (80042c4 <puts+0xc>)
 80042ba:	4601      	mov	r1, r0
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	f7ff bf8d 	b.w	80041dc <_puts_r>
 80042c2:	bf00      	nop
 80042c4:	2000002c 	.word	0x2000002c

080042c8 <__swbuf_r>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	460e      	mov	r6, r1
 80042cc:	4614      	mov	r4, r2
 80042ce:	4605      	mov	r5, r0
 80042d0:	b118      	cbz	r0, 80042da <__swbuf_r+0x12>
 80042d2:	6983      	ldr	r3, [r0, #24]
 80042d4:	b90b      	cbnz	r3, 80042da <__swbuf_r+0x12>
 80042d6:	f000 f9d1 	bl	800467c <__sinit>
 80042da:	4b21      	ldr	r3, [pc, #132]	; (8004360 <__swbuf_r+0x98>)
 80042dc:	429c      	cmp	r4, r3
 80042de:	d12b      	bne.n	8004338 <__swbuf_r+0x70>
 80042e0:	686c      	ldr	r4, [r5, #4]
 80042e2:	69a3      	ldr	r3, [r4, #24]
 80042e4:	60a3      	str	r3, [r4, #8]
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	071a      	lsls	r2, r3, #28
 80042ea:	d52f      	bpl.n	800434c <__swbuf_r+0x84>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	b36b      	cbz	r3, 800434c <__swbuf_r+0x84>
 80042f0:	6923      	ldr	r3, [r4, #16]
 80042f2:	6820      	ldr	r0, [r4, #0]
 80042f4:	1ac0      	subs	r0, r0, r3
 80042f6:	6963      	ldr	r3, [r4, #20]
 80042f8:	b2f6      	uxtb	r6, r6
 80042fa:	4283      	cmp	r3, r0
 80042fc:	4637      	mov	r7, r6
 80042fe:	dc04      	bgt.n	800430a <__swbuf_r+0x42>
 8004300:	4621      	mov	r1, r4
 8004302:	4628      	mov	r0, r5
 8004304:	f000 f926 	bl	8004554 <_fflush_r>
 8004308:	bb30      	cbnz	r0, 8004358 <__swbuf_r+0x90>
 800430a:	68a3      	ldr	r3, [r4, #8]
 800430c:	3b01      	subs	r3, #1
 800430e:	60a3      	str	r3, [r4, #8]
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	6022      	str	r2, [r4, #0]
 8004316:	701e      	strb	r6, [r3, #0]
 8004318:	6963      	ldr	r3, [r4, #20]
 800431a:	3001      	adds	r0, #1
 800431c:	4283      	cmp	r3, r0
 800431e:	d004      	beq.n	800432a <__swbuf_r+0x62>
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	07db      	lsls	r3, r3, #31
 8004324:	d506      	bpl.n	8004334 <__swbuf_r+0x6c>
 8004326:	2e0a      	cmp	r6, #10
 8004328:	d104      	bne.n	8004334 <__swbuf_r+0x6c>
 800432a:	4621      	mov	r1, r4
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f911 	bl	8004554 <_fflush_r>
 8004332:	b988      	cbnz	r0, 8004358 <__swbuf_r+0x90>
 8004334:	4638      	mov	r0, r7
 8004336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <__swbuf_r+0x9c>)
 800433a:	429c      	cmp	r4, r3
 800433c:	d101      	bne.n	8004342 <__swbuf_r+0x7a>
 800433e:	68ac      	ldr	r4, [r5, #8]
 8004340:	e7cf      	b.n	80042e2 <__swbuf_r+0x1a>
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <__swbuf_r+0xa0>)
 8004344:	429c      	cmp	r4, r3
 8004346:	bf08      	it	eq
 8004348:	68ec      	ldreq	r4, [r5, #12]
 800434a:	e7ca      	b.n	80042e2 <__swbuf_r+0x1a>
 800434c:	4621      	mov	r1, r4
 800434e:	4628      	mov	r0, r5
 8004350:	f000 f80c 	bl	800436c <__swsetup_r>
 8004354:	2800      	cmp	r0, #0
 8004356:	d0cb      	beq.n	80042f0 <__swbuf_r+0x28>
 8004358:	f04f 37ff 	mov.w	r7, #4294967295
 800435c:	e7ea      	b.n	8004334 <__swbuf_r+0x6c>
 800435e:	bf00      	nop
 8004360:	08004d2c 	.word	0x08004d2c
 8004364:	08004d4c 	.word	0x08004d4c
 8004368:	08004d0c 	.word	0x08004d0c

0800436c <__swsetup_r>:
 800436c:	4b32      	ldr	r3, [pc, #200]	; (8004438 <__swsetup_r+0xcc>)
 800436e:	b570      	push	{r4, r5, r6, lr}
 8004370:	681d      	ldr	r5, [r3, #0]
 8004372:	4606      	mov	r6, r0
 8004374:	460c      	mov	r4, r1
 8004376:	b125      	cbz	r5, 8004382 <__swsetup_r+0x16>
 8004378:	69ab      	ldr	r3, [r5, #24]
 800437a:	b913      	cbnz	r3, 8004382 <__swsetup_r+0x16>
 800437c:	4628      	mov	r0, r5
 800437e:	f000 f97d 	bl	800467c <__sinit>
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <__swsetup_r+0xd0>)
 8004384:	429c      	cmp	r4, r3
 8004386:	d10f      	bne.n	80043a8 <__swsetup_r+0x3c>
 8004388:	686c      	ldr	r4, [r5, #4]
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004390:	0719      	lsls	r1, r3, #28
 8004392:	d42c      	bmi.n	80043ee <__swsetup_r+0x82>
 8004394:	06dd      	lsls	r5, r3, #27
 8004396:	d411      	bmi.n	80043bc <__swsetup_r+0x50>
 8004398:	2309      	movs	r3, #9
 800439a:	6033      	str	r3, [r6, #0]
 800439c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043a0:	81a3      	strh	r3, [r4, #12]
 80043a2:	f04f 30ff 	mov.w	r0, #4294967295
 80043a6:	e03e      	b.n	8004426 <__swsetup_r+0xba>
 80043a8:	4b25      	ldr	r3, [pc, #148]	; (8004440 <__swsetup_r+0xd4>)
 80043aa:	429c      	cmp	r4, r3
 80043ac:	d101      	bne.n	80043b2 <__swsetup_r+0x46>
 80043ae:	68ac      	ldr	r4, [r5, #8]
 80043b0:	e7eb      	b.n	800438a <__swsetup_r+0x1e>
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <__swsetup_r+0xd8>)
 80043b4:	429c      	cmp	r4, r3
 80043b6:	bf08      	it	eq
 80043b8:	68ec      	ldreq	r4, [r5, #12]
 80043ba:	e7e6      	b.n	800438a <__swsetup_r+0x1e>
 80043bc:	0758      	lsls	r0, r3, #29
 80043be:	d512      	bpl.n	80043e6 <__swsetup_r+0x7a>
 80043c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043c2:	b141      	cbz	r1, 80043d6 <__swsetup_r+0x6a>
 80043c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c8:	4299      	cmp	r1, r3
 80043ca:	d002      	beq.n	80043d2 <__swsetup_r+0x66>
 80043cc:	4630      	mov	r0, r6
 80043ce:	f000 fa5b 	bl	8004888 <_free_r>
 80043d2:	2300      	movs	r3, #0
 80043d4:	6363      	str	r3, [r4, #52]	; 0x34
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	2300      	movs	r3, #0
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	f043 0308 	orr.w	r3, r3, #8
 80043ec:	81a3      	strh	r3, [r4, #12]
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	b94b      	cbnz	r3, 8004406 <__swsetup_r+0x9a>
 80043f2:	89a3      	ldrh	r3, [r4, #12]
 80043f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d003      	beq.n	8004406 <__swsetup_r+0x9a>
 80043fe:	4621      	mov	r1, r4
 8004400:	4630      	mov	r0, r6
 8004402:	f000 fa01 	bl	8004808 <__smakebuf_r>
 8004406:	89a0      	ldrh	r0, [r4, #12]
 8004408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800440c:	f010 0301 	ands.w	r3, r0, #1
 8004410:	d00a      	beq.n	8004428 <__swsetup_r+0xbc>
 8004412:	2300      	movs	r3, #0
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	6963      	ldr	r3, [r4, #20]
 8004418:	425b      	negs	r3, r3
 800441a:	61a3      	str	r3, [r4, #24]
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	b943      	cbnz	r3, 8004432 <__swsetup_r+0xc6>
 8004420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004424:	d1ba      	bne.n	800439c <__swsetup_r+0x30>
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	0781      	lsls	r1, r0, #30
 800442a:	bf58      	it	pl
 800442c:	6963      	ldrpl	r3, [r4, #20]
 800442e:	60a3      	str	r3, [r4, #8]
 8004430:	e7f4      	b.n	800441c <__swsetup_r+0xb0>
 8004432:	2000      	movs	r0, #0
 8004434:	e7f7      	b.n	8004426 <__swsetup_r+0xba>
 8004436:	bf00      	nop
 8004438:	2000002c 	.word	0x2000002c
 800443c:	08004d2c 	.word	0x08004d2c
 8004440:	08004d4c 	.word	0x08004d4c
 8004444:	08004d0c 	.word	0x08004d0c

08004448 <__sflush_r>:
 8004448:	898a      	ldrh	r2, [r1, #12]
 800444a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444e:	4605      	mov	r5, r0
 8004450:	0710      	lsls	r0, r2, #28
 8004452:	460c      	mov	r4, r1
 8004454:	d458      	bmi.n	8004508 <__sflush_r+0xc0>
 8004456:	684b      	ldr	r3, [r1, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	dc05      	bgt.n	8004468 <__sflush_r+0x20>
 800445c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	dc02      	bgt.n	8004468 <__sflush_r+0x20>
 8004462:	2000      	movs	r0, #0
 8004464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800446a:	2e00      	cmp	r6, #0
 800446c:	d0f9      	beq.n	8004462 <__sflush_r+0x1a>
 800446e:	2300      	movs	r3, #0
 8004470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004474:	682f      	ldr	r7, [r5, #0]
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	d032      	beq.n	80044e0 <__sflush_r+0x98>
 800447a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800447c:	89a3      	ldrh	r3, [r4, #12]
 800447e:	075a      	lsls	r2, r3, #29
 8004480:	d505      	bpl.n	800448e <__sflush_r+0x46>
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	1ac0      	subs	r0, r0, r3
 8004486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004488:	b10b      	cbz	r3, 800448e <__sflush_r+0x46>
 800448a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800448c:	1ac0      	subs	r0, r0, r3
 800448e:	2300      	movs	r3, #0
 8004490:	4602      	mov	r2, r0
 8004492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004494:	6a21      	ldr	r1, [r4, #32]
 8004496:	4628      	mov	r0, r5
 8004498:	47b0      	blx	r6
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	d106      	bne.n	80044ae <__sflush_r+0x66>
 80044a0:	6829      	ldr	r1, [r5, #0]
 80044a2:	291d      	cmp	r1, #29
 80044a4:	d82c      	bhi.n	8004500 <__sflush_r+0xb8>
 80044a6:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <__sflush_r+0x108>)
 80044a8:	40ca      	lsrs	r2, r1
 80044aa:	07d6      	lsls	r6, r2, #31
 80044ac:	d528      	bpl.n	8004500 <__sflush_r+0xb8>
 80044ae:	2200      	movs	r2, #0
 80044b0:	6062      	str	r2, [r4, #4]
 80044b2:	04d9      	lsls	r1, r3, #19
 80044b4:	6922      	ldr	r2, [r4, #16]
 80044b6:	6022      	str	r2, [r4, #0]
 80044b8:	d504      	bpl.n	80044c4 <__sflush_r+0x7c>
 80044ba:	1c42      	adds	r2, r0, #1
 80044bc:	d101      	bne.n	80044c2 <__sflush_r+0x7a>
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	b903      	cbnz	r3, 80044c4 <__sflush_r+0x7c>
 80044c2:	6560      	str	r0, [r4, #84]	; 0x54
 80044c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044c6:	602f      	str	r7, [r5, #0]
 80044c8:	2900      	cmp	r1, #0
 80044ca:	d0ca      	beq.n	8004462 <__sflush_r+0x1a>
 80044cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044d0:	4299      	cmp	r1, r3
 80044d2:	d002      	beq.n	80044da <__sflush_r+0x92>
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 f9d7 	bl	8004888 <_free_r>
 80044da:	2000      	movs	r0, #0
 80044dc:	6360      	str	r0, [r4, #52]	; 0x34
 80044de:	e7c1      	b.n	8004464 <__sflush_r+0x1c>
 80044e0:	6a21      	ldr	r1, [r4, #32]
 80044e2:	2301      	movs	r3, #1
 80044e4:	4628      	mov	r0, r5
 80044e6:	47b0      	blx	r6
 80044e8:	1c41      	adds	r1, r0, #1
 80044ea:	d1c7      	bne.n	800447c <__sflush_r+0x34>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0c4      	beq.n	800447c <__sflush_r+0x34>
 80044f2:	2b1d      	cmp	r3, #29
 80044f4:	d001      	beq.n	80044fa <__sflush_r+0xb2>
 80044f6:	2b16      	cmp	r3, #22
 80044f8:	d101      	bne.n	80044fe <__sflush_r+0xb6>
 80044fa:	602f      	str	r7, [r5, #0]
 80044fc:	e7b1      	b.n	8004462 <__sflush_r+0x1a>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	e7ad      	b.n	8004464 <__sflush_r+0x1c>
 8004508:	690f      	ldr	r7, [r1, #16]
 800450a:	2f00      	cmp	r7, #0
 800450c:	d0a9      	beq.n	8004462 <__sflush_r+0x1a>
 800450e:	0793      	lsls	r3, r2, #30
 8004510:	680e      	ldr	r6, [r1, #0]
 8004512:	bf08      	it	eq
 8004514:	694b      	ldreq	r3, [r1, #20]
 8004516:	600f      	str	r7, [r1, #0]
 8004518:	bf18      	it	ne
 800451a:	2300      	movne	r3, #0
 800451c:	eba6 0807 	sub.w	r8, r6, r7
 8004520:	608b      	str	r3, [r1, #8]
 8004522:	f1b8 0f00 	cmp.w	r8, #0
 8004526:	dd9c      	ble.n	8004462 <__sflush_r+0x1a>
 8004528:	6a21      	ldr	r1, [r4, #32]
 800452a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800452c:	4643      	mov	r3, r8
 800452e:	463a      	mov	r2, r7
 8004530:	4628      	mov	r0, r5
 8004532:	47b0      	blx	r6
 8004534:	2800      	cmp	r0, #0
 8004536:	dc06      	bgt.n	8004546 <__sflush_r+0xfe>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e78e      	b.n	8004464 <__sflush_r+0x1c>
 8004546:	4407      	add	r7, r0
 8004548:	eba8 0800 	sub.w	r8, r8, r0
 800454c:	e7e9      	b.n	8004522 <__sflush_r+0xda>
 800454e:	bf00      	nop
 8004550:	20400001 	.word	0x20400001

08004554 <_fflush_r>:
 8004554:	b538      	push	{r3, r4, r5, lr}
 8004556:	690b      	ldr	r3, [r1, #16]
 8004558:	4605      	mov	r5, r0
 800455a:	460c      	mov	r4, r1
 800455c:	b913      	cbnz	r3, 8004564 <_fflush_r+0x10>
 800455e:	2500      	movs	r5, #0
 8004560:	4628      	mov	r0, r5
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	b118      	cbz	r0, 800456e <_fflush_r+0x1a>
 8004566:	6983      	ldr	r3, [r0, #24]
 8004568:	b90b      	cbnz	r3, 800456e <_fflush_r+0x1a>
 800456a:	f000 f887 	bl	800467c <__sinit>
 800456e:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <_fflush_r+0x6c>)
 8004570:	429c      	cmp	r4, r3
 8004572:	d11b      	bne.n	80045ac <_fflush_r+0x58>
 8004574:	686c      	ldr	r4, [r5, #4]
 8004576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ef      	beq.n	800455e <_fflush_r+0xa>
 800457e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004580:	07d0      	lsls	r0, r2, #31
 8004582:	d404      	bmi.n	800458e <_fflush_r+0x3a>
 8004584:	0599      	lsls	r1, r3, #22
 8004586:	d402      	bmi.n	800458e <_fflush_r+0x3a>
 8004588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800458a:	f000 f915 	bl	80047b8 <__retarget_lock_acquire_recursive>
 800458e:	4628      	mov	r0, r5
 8004590:	4621      	mov	r1, r4
 8004592:	f7ff ff59 	bl	8004448 <__sflush_r>
 8004596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004598:	07da      	lsls	r2, r3, #31
 800459a:	4605      	mov	r5, r0
 800459c:	d4e0      	bmi.n	8004560 <_fflush_r+0xc>
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	059b      	lsls	r3, r3, #22
 80045a2:	d4dd      	bmi.n	8004560 <_fflush_r+0xc>
 80045a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045a6:	f000 f908 	bl	80047ba <__retarget_lock_release_recursive>
 80045aa:	e7d9      	b.n	8004560 <_fflush_r+0xc>
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <_fflush_r+0x70>)
 80045ae:	429c      	cmp	r4, r3
 80045b0:	d101      	bne.n	80045b6 <_fflush_r+0x62>
 80045b2:	68ac      	ldr	r4, [r5, #8]
 80045b4:	e7df      	b.n	8004576 <_fflush_r+0x22>
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <_fflush_r+0x74>)
 80045b8:	429c      	cmp	r4, r3
 80045ba:	bf08      	it	eq
 80045bc:	68ec      	ldreq	r4, [r5, #12]
 80045be:	e7da      	b.n	8004576 <_fflush_r+0x22>
 80045c0:	08004d2c 	.word	0x08004d2c
 80045c4:	08004d4c 	.word	0x08004d4c
 80045c8:	08004d0c 	.word	0x08004d0c

080045cc <std>:
 80045cc:	2300      	movs	r3, #0
 80045ce:	b510      	push	{r4, lr}
 80045d0:	4604      	mov	r4, r0
 80045d2:	e9c0 3300 	strd	r3, r3, [r0]
 80045d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045da:	6083      	str	r3, [r0, #8]
 80045dc:	8181      	strh	r1, [r0, #12]
 80045de:	6643      	str	r3, [r0, #100]	; 0x64
 80045e0:	81c2      	strh	r2, [r0, #14]
 80045e2:	6183      	str	r3, [r0, #24]
 80045e4:	4619      	mov	r1, r3
 80045e6:	2208      	movs	r2, #8
 80045e8:	305c      	adds	r0, #92	; 0x5c
 80045ea:	f7ff fdef 	bl	80041cc <memset>
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <std+0x38>)
 80045f0:	6263      	str	r3, [r4, #36]	; 0x24
 80045f2:	4b05      	ldr	r3, [pc, #20]	; (8004608 <std+0x3c>)
 80045f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <std+0x40>)
 80045f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <std+0x44>)
 80045fc:	6224      	str	r4, [r4, #32]
 80045fe:	6323      	str	r3, [r4, #48]	; 0x30
 8004600:	bd10      	pop	{r4, pc}
 8004602:	bf00      	nop
 8004604:	08004a69 	.word	0x08004a69
 8004608:	08004a8b 	.word	0x08004a8b
 800460c:	08004ac3 	.word	0x08004ac3
 8004610:	08004ae7 	.word	0x08004ae7

08004614 <_cleanup_r>:
 8004614:	4901      	ldr	r1, [pc, #4]	; (800461c <_cleanup_r+0x8>)
 8004616:	f000 b8af 	b.w	8004778 <_fwalk_reent>
 800461a:	bf00      	nop
 800461c:	08004555 	.word	0x08004555

08004620 <__sfmoreglue>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	2268      	movs	r2, #104	; 0x68
 8004624:	1e4d      	subs	r5, r1, #1
 8004626:	4355      	muls	r5, r2
 8004628:	460e      	mov	r6, r1
 800462a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800462e:	f000 f997 	bl	8004960 <_malloc_r>
 8004632:	4604      	mov	r4, r0
 8004634:	b140      	cbz	r0, 8004648 <__sfmoreglue+0x28>
 8004636:	2100      	movs	r1, #0
 8004638:	e9c0 1600 	strd	r1, r6, [r0]
 800463c:	300c      	adds	r0, #12
 800463e:	60a0      	str	r0, [r4, #8]
 8004640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004644:	f7ff fdc2 	bl	80041cc <memset>
 8004648:	4620      	mov	r0, r4
 800464a:	bd70      	pop	{r4, r5, r6, pc}

0800464c <__sfp_lock_acquire>:
 800464c:	4801      	ldr	r0, [pc, #4]	; (8004654 <__sfp_lock_acquire+0x8>)
 800464e:	f000 b8b3 	b.w	80047b8 <__retarget_lock_acquire_recursive>
 8004652:	bf00      	nop
 8004654:	2000015d 	.word	0x2000015d

08004658 <__sfp_lock_release>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__sfp_lock_release+0x8>)
 800465a:	f000 b8ae 	b.w	80047ba <__retarget_lock_release_recursive>
 800465e:	bf00      	nop
 8004660:	2000015d 	.word	0x2000015d

08004664 <__sinit_lock_acquire>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__sinit_lock_acquire+0x8>)
 8004666:	f000 b8a7 	b.w	80047b8 <__retarget_lock_acquire_recursive>
 800466a:	bf00      	nop
 800466c:	2000015e 	.word	0x2000015e

08004670 <__sinit_lock_release>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__sinit_lock_release+0x8>)
 8004672:	f000 b8a2 	b.w	80047ba <__retarget_lock_release_recursive>
 8004676:	bf00      	nop
 8004678:	2000015e 	.word	0x2000015e

0800467c <__sinit>:
 800467c:	b510      	push	{r4, lr}
 800467e:	4604      	mov	r4, r0
 8004680:	f7ff fff0 	bl	8004664 <__sinit_lock_acquire>
 8004684:	69a3      	ldr	r3, [r4, #24]
 8004686:	b11b      	cbz	r3, 8004690 <__sinit+0x14>
 8004688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468c:	f7ff bff0 	b.w	8004670 <__sinit_lock_release>
 8004690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004694:	6523      	str	r3, [r4, #80]	; 0x50
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <__sinit+0x68>)
 8004698:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <__sinit+0x6c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	62a2      	str	r2, [r4, #40]	; 0x28
 800469e:	42a3      	cmp	r3, r4
 80046a0:	bf04      	itt	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	61a3      	streq	r3, [r4, #24]
 80046a6:	4620      	mov	r0, r4
 80046a8:	f000 f820 	bl	80046ec <__sfp>
 80046ac:	6060      	str	r0, [r4, #4]
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 f81c 	bl	80046ec <__sfp>
 80046b4:	60a0      	str	r0, [r4, #8]
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 f818 	bl	80046ec <__sfp>
 80046bc:	2200      	movs	r2, #0
 80046be:	60e0      	str	r0, [r4, #12]
 80046c0:	2104      	movs	r1, #4
 80046c2:	6860      	ldr	r0, [r4, #4]
 80046c4:	f7ff ff82 	bl	80045cc <std>
 80046c8:	68a0      	ldr	r0, [r4, #8]
 80046ca:	2201      	movs	r2, #1
 80046cc:	2109      	movs	r1, #9
 80046ce:	f7ff ff7d 	bl	80045cc <std>
 80046d2:	68e0      	ldr	r0, [r4, #12]
 80046d4:	2202      	movs	r2, #2
 80046d6:	2112      	movs	r1, #18
 80046d8:	f7ff ff78 	bl	80045cc <std>
 80046dc:	2301      	movs	r3, #1
 80046de:	61a3      	str	r3, [r4, #24]
 80046e0:	e7d2      	b.n	8004688 <__sinit+0xc>
 80046e2:	bf00      	nop
 80046e4:	08004d08 	.word	0x08004d08
 80046e8:	08004615 	.word	0x08004615

080046ec <__sfp>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	4607      	mov	r7, r0
 80046f0:	f7ff ffac 	bl	800464c <__sfp_lock_acquire>
 80046f4:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <__sfp+0x84>)
 80046f6:	681e      	ldr	r6, [r3, #0]
 80046f8:	69b3      	ldr	r3, [r6, #24]
 80046fa:	b913      	cbnz	r3, 8004702 <__sfp+0x16>
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7ff ffbd 	bl	800467c <__sinit>
 8004702:	3648      	adds	r6, #72	; 0x48
 8004704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004708:	3b01      	subs	r3, #1
 800470a:	d503      	bpl.n	8004714 <__sfp+0x28>
 800470c:	6833      	ldr	r3, [r6, #0]
 800470e:	b30b      	cbz	r3, 8004754 <__sfp+0x68>
 8004710:	6836      	ldr	r6, [r6, #0]
 8004712:	e7f7      	b.n	8004704 <__sfp+0x18>
 8004714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004718:	b9d5      	cbnz	r5, 8004750 <__sfp+0x64>
 800471a:	4b16      	ldr	r3, [pc, #88]	; (8004774 <__sfp+0x88>)
 800471c:	60e3      	str	r3, [r4, #12]
 800471e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004722:	6665      	str	r5, [r4, #100]	; 0x64
 8004724:	f000 f847 	bl	80047b6 <__retarget_lock_init_recursive>
 8004728:	f7ff ff96 	bl	8004658 <__sfp_lock_release>
 800472c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004734:	6025      	str	r5, [r4, #0]
 8004736:	61a5      	str	r5, [r4, #24]
 8004738:	2208      	movs	r2, #8
 800473a:	4629      	mov	r1, r5
 800473c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004740:	f7ff fd44 	bl	80041cc <memset>
 8004744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800474c:	4620      	mov	r0, r4
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004750:	3468      	adds	r4, #104	; 0x68
 8004752:	e7d9      	b.n	8004708 <__sfp+0x1c>
 8004754:	2104      	movs	r1, #4
 8004756:	4638      	mov	r0, r7
 8004758:	f7ff ff62 	bl	8004620 <__sfmoreglue>
 800475c:	4604      	mov	r4, r0
 800475e:	6030      	str	r0, [r6, #0]
 8004760:	2800      	cmp	r0, #0
 8004762:	d1d5      	bne.n	8004710 <__sfp+0x24>
 8004764:	f7ff ff78 	bl	8004658 <__sfp_lock_release>
 8004768:	230c      	movs	r3, #12
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	e7ee      	b.n	800474c <__sfp+0x60>
 800476e:	bf00      	nop
 8004770:	08004d08 	.word	0x08004d08
 8004774:	ffff0001 	.word	0xffff0001

08004778 <_fwalk_reent>:
 8004778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800477c:	4606      	mov	r6, r0
 800477e:	4688      	mov	r8, r1
 8004780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004784:	2700      	movs	r7, #0
 8004786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800478a:	f1b9 0901 	subs.w	r9, r9, #1
 800478e:	d505      	bpl.n	800479c <_fwalk_reent+0x24>
 8004790:	6824      	ldr	r4, [r4, #0]
 8004792:	2c00      	cmp	r4, #0
 8004794:	d1f7      	bne.n	8004786 <_fwalk_reent+0xe>
 8004796:	4638      	mov	r0, r7
 8004798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800479c:	89ab      	ldrh	r3, [r5, #12]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d907      	bls.n	80047b2 <_fwalk_reent+0x3a>
 80047a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047a6:	3301      	adds	r3, #1
 80047a8:	d003      	beq.n	80047b2 <_fwalk_reent+0x3a>
 80047aa:	4629      	mov	r1, r5
 80047ac:	4630      	mov	r0, r6
 80047ae:	47c0      	blx	r8
 80047b0:	4307      	orrs	r7, r0
 80047b2:	3568      	adds	r5, #104	; 0x68
 80047b4:	e7e9      	b.n	800478a <_fwalk_reent+0x12>

080047b6 <__retarget_lock_init_recursive>:
 80047b6:	4770      	bx	lr

080047b8 <__retarget_lock_acquire_recursive>:
 80047b8:	4770      	bx	lr

080047ba <__retarget_lock_release_recursive>:
 80047ba:	4770      	bx	lr

080047bc <__swhatbuf_r>:
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	460e      	mov	r6, r1
 80047c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047c4:	2900      	cmp	r1, #0
 80047c6:	b096      	sub	sp, #88	; 0x58
 80047c8:	4614      	mov	r4, r2
 80047ca:	461d      	mov	r5, r3
 80047cc:	da08      	bge.n	80047e0 <__swhatbuf_r+0x24>
 80047ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	602a      	str	r2, [r5, #0]
 80047d6:	061a      	lsls	r2, r3, #24
 80047d8:	d410      	bmi.n	80047fc <__swhatbuf_r+0x40>
 80047da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047de:	e00e      	b.n	80047fe <__swhatbuf_r+0x42>
 80047e0:	466a      	mov	r2, sp
 80047e2:	f000 f9a7 	bl	8004b34 <_fstat_r>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	dbf1      	blt.n	80047ce <__swhatbuf_r+0x12>
 80047ea:	9a01      	ldr	r2, [sp, #4]
 80047ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80047f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80047f4:	425a      	negs	r2, r3
 80047f6:	415a      	adcs	r2, r3
 80047f8:	602a      	str	r2, [r5, #0]
 80047fa:	e7ee      	b.n	80047da <__swhatbuf_r+0x1e>
 80047fc:	2340      	movs	r3, #64	; 0x40
 80047fe:	2000      	movs	r0, #0
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	b016      	add	sp, #88	; 0x58
 8004804:	bd70      	pop	{r4, r5, r6, pc}
	...

08004808 <__smakebuf_r>:
 8004808:	898b      	ldrh	r3, [r1, #12]
 800480a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800480c:	079d      	lsls	r5, r3, #30
 800480e:	4606      	mov	r6, r0
 8004810:	460c      	mov	r4, r1
 8004812:	d507      	bpl.n	8004824 <__smakebuf_r+0x1c>
 8004814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	2301      	movs	r3, #1
 800481e:	6163      	str	r3, [r4, #20]
 8004820:	b002      	add	sp, #8
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	ab01      	add	r3, sp, #4
 8004826:	466a      	mov	r2, sp
 8004828:	f7ff ffc8 	bl	80047bc <__swhatbuf_r>
 800482c:	9900      	ldr	r1, [sp, #0]
 800482e:	4605      	mov	r5, r0
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f895 	bl	8004960 <_malloc_r>
 8004836:	b948      	cbnz	r0, 800484c <__smakebuf_r+0x44>
 8004838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800483c:	059a      	lsls	r2, r3, #22
 800483e:	d4ef      	bmi.n	8004820 <__smakebuf_r+0x18>
 8004840:	f023 0303 	bic.w	r3, r3, #3
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	e7e3      	b.n	8004814 <__smakebuf_r+0xc>
 800484c:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <__smakebuf_r+0x7c>)
 800484e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	6020      	str	r0, [r4, #0]
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	9b00      	ldr	r3, [sp, #0]
 800485c:	6163      	str	r3, [r4, #20]
 800485e:	9b01      	ldr	r3, [sp, #4]
 8004860:	6120      	str	r0, [r4, #16]
 8004862:	b15b      	cbz	r3, 800487c <__smakebuf_r+0x74>
 8004864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004868:	4630      	mov	r0, r6
 800486a:	f000 f975 	bl	8004b58 <_isatty_r>
 800486e:	b128      	cbz	r0, 800487c <__smakebuf_r+0x74>
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	89a0      	ldrh	r0, [r4, #12]
 800487e:	4305      	orrs	r5, r0
 8004880:	81a5      	strh	r5, [r4, #12]
 8004882:	e7cd      	b.n	8004820 <__smakebuf_r+0x18>
 8004884:	08004615 	.word	0x08004615

08004888 <_free_r>:
 8004888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488a:	2900      	cmp	r1, #0
 800488c:	d044      	beq.n	8004918 <_free_r+0x90>
 800488e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004892:	9001      	str	r0, [sp, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f1a1 0404 	sub.w	r4, r1, #4
 800489a:	bfb8      	it	lt
 800489c:	18e4      	addlt	r4, r4, r3
 800489e:	f000 f97d 	bl	8004b9c <__malloc_lock>
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <_free_r+0x94>)
 80048a4:	9801      	ldr	r0, [sp, #4]
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	b933      	cbnz	r3, 80048b8 <_free_r+0x30>
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	6014      	str	r4, [r2, #0]
 80048ae:	b003      	add	sp, #12
 80048b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b4:	f000 b978 	b.w	8004ba8 <__malloc_unlock>
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d908      	bls.n	80048ce <_free_r+0x46>
 80048bc:	6825      	ldr	r5, [r4, #0]
 80048be:	1961      	adds	r1, r4, r5
 80048c0:	428b      	cmp	r3, r1
 80048c2:	bf01      	itttt	eq
 80048c4:	6819      	ldreq	r1, [r3, #0]
 80048c6:	685b      	ldreq	r3, [r3, #4]
 80048c8:	1949      	addeq	r1, r1, r5
 80048ca:	6021      	streq	r1, [r4, #0]
 80048cc:	e7ed      	b.n	80048aa <_free_r+0x22>
 80048ce:	461a      	mov	r2, r3
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b10b      	cbz	r3, 80048d8 <_free_r+0x50>
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d9fa      	bls.n	80048ce <_free_r+0x46>
 80048d8:	6811      	ldr	r1, [r2, #0]
 80048da:	1855      	adds	r5, r2, r1
 80048dc:	42a5      	cmp	r5, r4
 80048de:	d10b      	bne.n	80048f8 <_free_r+0x70>
 80048e0:	6824      	ldr	r4, [r4, #0]
 80048e2:	4421      	add	r1, r4
 80048e4:	1854      	adds	r4, r2, r1
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	6011      	str	r1, [r2, #0]
 80048ea:	d1e0      	bne.n	80048ae <_free_r+0x26>
 80048ec:	681c      	ldr	r4, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	6053      	str	r3, [r2, #4]
 80048f2:	4421      	add	r1, r4
 80048f4:	6011      	str	r1, [r2, #0]
 80048f6:	e7da      	b.n	80048ae <_free_r+0x26>
 80048f8:	d902      	bls.n	8004900 <_free_r+0x78>
 80048fa:	230c      	movs	r3, #12
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	e7d6      	b.n	80048ae <_free_r+0x26>
 8004900:	6825      	ldr	r5, [r4, #0]
 8004902:	1961      	adds	r1, r4, r5
 8004904:	428b      	cmp	r3, r1
 8004906:	bf04      	itt	eq
 8004908:	6819      	ldreq	r1, [r3, #0]
 800490a:	685b      	ldreq	r3, [r3, #4]
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	bf04      	itt	eq
 8004910:	1949      	addeq	r1, r1, r5
 8004912:	6021      	streq	r1, [r4, #0]
 8004914:	6054      	str	r4, [r2, #4]
 8004916:	e7ca      	b.n	80048ae <_free_r+0x26>
 8004918:	b003      	add	sp, #12
 800491a:	bd30      	pop	{r4, r5, pc}
 800491c:	20000160 	.word	0x20000160

08004920 <sbrk_aligned>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4e0e      	ldr	r6, [pc, #56]	; (800495c <sbrk_aligned+0x3c>)
 8004924:	460c      	mov	r4, r1
 8004926:	6831      	ldr	r1, [r6, #0]
 8004928:	4605      	mov	r5, r0
 800492a:	b911      	cbnz	r1, 8004932 <sbrk_aligned+0x12>
 800492c:	f000 f88c 	bl	8004a48 <_sbrk_r>
 8004930:	6030      	str	r0, [r6, #0]
 8004932:	4621      	mov	r1, r4
 8004934:	4628      	mov	r0, r5
 8004936:	f000 f887 	bl	8004a48 <_sbrk_r>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	d00a      	beq.n	8004954 <sbrk_aligned+0x34>
 800493e:	1cc4      	adds	r4, r0, #3
 8004940:	f024 0403 	bic.w	r4, r4, #3
 8004944:	42a0      	cmp	r0, r4
 8004946:	d007      	beq.n	8004958 <sbrk_aligned+0x38>
 8004948:	1a21      	subs	r1, r4, r0
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f87c 	bl	8004a48 <_sbrk_r>
 8004950:	3001      	adds	r0, #1
 8004952:	d101      	bne.n	8004958 <sbrk_aligned+0x38>
 8004954:	f04f 34ff 	mov.w	r4, #4294967295
 8004958:	4620      	mov	r0, r4
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	20000164 	.word	0x20000164

08004960 <_malloc_r>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	1ccd      	adds	r5, r1, #3
 8004966:	f025 0503 	bic.w	r5, r5, #3
 800496a:	3508      	adds	r5, #8
 800496c:	2d0c      	cmp	r5, #12
 800496e:	bf38      	it	cc
 8004970:	250c      	movcc	r5, #12
 8004972:	2d00      	cmp	r5, #0
 8004974:	4607      	mov	r7, r0
 8004976:	db01      	blt.n	800497c <_malloc_r+0x1c>
 8004978:	42a9      	cmp	r1, r5
 800497a:	d905      	bls.n	8004988 <_malloc_r+0x28>
 800497c:	230c      	movs	r3, #12
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	2600      	movs	r6, #0
 8004982:	4630      	mov	r0, r6
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004988:	4e2e      	ldr	r6, [pc, #184]	; (8004a44 <_malloc_r+0xe4>)
 800498a:	f000 f907 	bl	8004b9c <__malloc_lock>
 800498e:	6833      	ldr	r3, [r6, #0]
 8004990:	461c      	mov	r4, r3
 8004992:	bb34      	cbnz	r4, 80049e2 <_malloc_r+0x82>
 8004994:	4629      	mov	r1, r5
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff ffc2 	bl	8004920 <sbrk_aligned>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	4604      	mov	r4, r0
 80049a0:	d14d      	bne.n	8004a3e <_malloc_r+0xde>
 80049a2:	6834      	ldr	r4, [r6, #0]
 80049a4:	4626      	mov	r6, r4
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	d140      	bne.n	8004a2c <_malloc_r+0xcc>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	4631      	mov	r1, r6
 80049ae:	4638      	mov	r0, r7
 80049b0:	eb04 0803 	add.w	r8, r4, r3
 80049b4:	f000 f848 	bl	8004a48 <_sbrk_r>
 80049b8:	4580      	cmp	r8, r0
 80049ba:	d13a      	bne.n	8004a32 <_malloc_r+0xd2>
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	3503      	adds	r5, #3
 80049c0:	1a6d      	subs	r5, r5, r1
 80049c2:	f025 0503 	bic.w	r5, r5, #3
 80049c6:	3508      	adds	r5, #8
 80049c8:	2d0c      	cmp	r5, #12
 80049ca:	bf38      	it	cc
 80049cc:	250c      	movcc	r5, #12
 80049ce:	4629      	mov	r1, r5
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7ff ffa5 	bl	8004920 <sbrk_aligned>
 80049d6:	3001      	adds	r0, #1
 80049d8:	d02b      	beq.n	8004a32 <_malloc_r+0xd2>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	442b      	add	r3, r5
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	e00e      	b.n	8004a00 <_malloc_r+0xa0>
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	1b52      	subs	r2, r2, r5
 80049e6:	d41e      	bmi.n	8004a26 <_malloc_r+0xc6>
 80049e8:	2a0b      	cmp	r2, #11
 80049ea:	d916      	bls.n	8004a1a <_malloc_r+0xba>
 80049ec:	1961      	adds	r1, r4, r5
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	6025      	str	r5, [r4, #0]
 80049f2:	bf18      	it	ne
 80049f4:	6059      	strne	r1, [r3, #4]
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	bf08      	it	eq
 80049fa:	6031      	streq	r1, [r6, #0]
 80049fc:	5162      	str	r2, [r4, r5]
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	4638      	mov	r0, r7
 8004a02:	f104 060b 	add.w	r6, r4, #11
 8004a06:	f000 f8cf 	bl	8004ba8 <__malloc_unlock>
 8004a0a:	f026 0607 	bic.w	r6, r6, #7
 8004a0e:	1d23      	adds	r3, r4, #4
 8004a10:	1af2      	subs	r2, r6, r3
 8004a12:	d0b6      	beq.n	8004982 <_malloc_r+0x22>
 8004a14:	1b9b      	subs	r3, r3, r6
 8004a16:	50a3      	str	r3, [r4, r2]
 8004a18:	e7b3      	b.n	8004982 <_malloc_r+0x22>
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	bf0c      	ite	eq
 8004a20:	6032      	streq	r2, [r6, #0]
 8004a22:	605a      	strne	r2, [r3, #4]
 8004a24:	e7ec      	b.n	8004a00 <_malloc_r+0xa0>
 8004a26:	4623      	mov	r3, r4
 8004a28:	6864      	ldr	r4, [r4, #4]
 8004a2a:	e7b2      	b.n	8004992 <_malloc_r+0x32>
 8004a2c:	4634      	mov	r4, r6
 8004a2e:	6876      	ldr	r6, [r6, #4]
 8004a30:	e7b9      	b.n	80049a6 <_malloc_r+0x46>
 8004a32:	230c      	movs	r3, #12
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	4638      	mov	r0, r7
 8004a38:	f000 f8b6 	bl	8004ba8 <__malloc_unlock>
 8004a3c:	e7a1      	b.n	8004982 <_malloc_r+0x22>
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	e7de      	b.n	8004a00 <_malloc_r+0xa0>
 8004a42:	bf00      	nop
 8004a44:	20000160 	.word	0x20000160

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_sbrk_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc f854 	bl	8000b00 <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20000168 	.word	0x20000168

08004a68 <__sread>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a70:	f000 f8a0 	bl	8004bb4 <_read_r>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	bfab      	itete	ge
 8004a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a7c:	181b      	addge	r3, r3, r0
 8004a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a82:	bfac      	ite	ge
 8004a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a86:	81a3      	strhlt	r3, [r4, #12]
 8004a88:	bd10      	pop	{r4, pc}

08004a8a <__swrite>:
 8004a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8e:	461f      	mov	r7, r3
 8004a90:	898b      	ldrh	r3, [r1, #12]
 8004a92:	05db      	lsls	r3, r3, #23
 8004a94:	4605      	mov	r5, r0
 8004a96:	460c      	mov	r4, r1
 8004a98:	4616      	mov	r6, r2
 8004a9a:	d505      	bpl.n	8004aa8 <__swrite+0x1e>
 8004a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f000 f868 	bl	8004b78 <_lseek_r>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab2:	81a3      	strh	r3, [r4, #12]
 8004ab4:	4632      	mov	r2, r6
 8004ab6:	463b      	mov	r3, r7
 8004ab8:	4628      	mov	r0, r5
 8004aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004abe:	f000 b817 	b.w	8004af0 <_write_r>

08004ac2 <__sseek>:
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aca:	f000 f855 	bl	8004b78 <_lseek_r>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	bf15      	itete	ne
 8004ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ade:	81a3      	strheq	r3, [r4, #12]
 8004ae0:	bf18      	it	ne
 8004ae2:	81a3      	strhne	r3, [r4, #12]
 8004ae4:	bd10      	pop	{r4, pc}

08004ae6 <__sclose>:
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 b813 	b.w	8004b14 <_close_r>
	...

08004af0 <_write_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d07      	ldr	r5, [pc, #28]	; (8004b10 <_write_r+0x20>)
 8004af4:	4604      	mov	r4, r0
 8004af6:	4608      	mov	r0, r1
 8004af8:	4611      	mov	r1, r2
 8004afa:	2200      	movs	r2, #0
 8004afc:	602a      	str	r2, [r5, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f7fb ffad 	bl	8000a5e <_write>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_write_r+0x1e>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_write_r+0x1e>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000168 	.word	0x20000168

08004b14 <_close_r>:
 8004b14:	b538      	push	{r3, r4, r5, lr}
 8004b16:	4d06      	ldr	r5, [pc, #24]	; (8004b30 <_close_r+0x1c>)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	602b      	str	r3, [r5, #0]
 8004b20:	f7fb ffb9 	bl	8000a96 <_close>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_close_r+0x1a>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_close_r+0x1a>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	20000168 	.word	0x20000168

08004b34 <_fstat_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d07      	ldr	r5, [pc, #28]	; (8004b54 <_fstat_r+0x20>)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	f7fb ffb4 	bl	8000aae <_fstat>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d102      	bne.n	8004b50 <_fstat_r+0x1c>
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	b103      	cbz	r3, 8004b50 <_fstat_r+0x1c>
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
 8004b52:	bf00      	nop
 8004b54:	20000168 	.word	0x20000168

08004b58 <_isatty_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d06      	ldr	r5, [pc, #24]	; (8004b74 <_isatty_r+0x1c>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fb ffb3 	bl	8000ace <_isatty>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_isatty_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_isatty_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	20000168 	.word	0x20000168

08004b78 <_lseek_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d07      	ldr	r5, [pc, #28]	; (8004b98 <_lseek_r+0x20>)
 8004b7c:	4604      	mov	r4, r0
 8004b7e:	4608      	mov	r0, r1
 8004b80:	4611      	mov	r1, r2
 8004b82:	2200      	movs	r2, #0
 8004b84:	602a      	str	r2, [r5, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7fb ffac 	bl	8000ae4 <_lseek>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_lseek_r+0x1e>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_lseek_r+0x1e>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	20000168 	.word	0x20000168

08004b9c <__malloc_lock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__malloc_lock+0x8>)
 8004b9e:	f7ff be0b 	b.w	80047b8 <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	2000015c 	.word	0x2000015c

08004ba8 <__malloc_unlock>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	; (8004bb0 <__malloc_unlock+0x8>)
 8004baa:	f7ff be06 	b.w	80047ba <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	2000015c 	.word	0x2000015c

08004bb4 <_read_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d07      	ldr	r5, [pc, #28]	; (8004bd4 <_read_r+0x20>)
 8004bb8:	4604      	mov	r4, r0
 8004bba:	4608      	mov	r0, r1
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	602a      	str	r2, [r5, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f7fb ff2e 	bl	8000a24 <_read>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_read_r+0x1e>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_read_r+0x1e>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000168 	.word	0x20000168

08004bd8 <_init>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr

08004be4 <_fini>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	bf00      	nop
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr
