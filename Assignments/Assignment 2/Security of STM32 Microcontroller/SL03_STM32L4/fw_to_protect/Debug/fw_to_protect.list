
fw_to_protect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .PCROPed      00000000  08008000  08008000  0002000c  2**0
                  CONTENTS
  2 .text         00003530  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003700  08003700  0002000c  2**0
                  CONTENTS
  5 .ARM          00000008  08003700  08003700  00013700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08003708  08003708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  20000000  08003710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000000a4  2000000c  0800371c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  0800371c  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a6ee  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016ac  00000000  00000000  0002a72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0002bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000810  00000000  00000000  0002c670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014ca  00000000  00000000  0002ce80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a31f  00000000  00000000  0002e34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e57c4  00000000  00000000  00038669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011de2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000224c  00000000  00000000  0011de80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036a0 	.word	0x080036a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036a0 	.word	0x080036a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa3d 	bl	800094e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f805 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8a3 	bl	8000622 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f852 	bl	8000584 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x14>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b096      	sub	sp, #88	; 0x58
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2244      	movs	r2, #68	; 0x44
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f003 f8cd 	bl	8003690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000504:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000508:	f000 fd91 	bl	800102e <HAL_PWREx_ControlVoltageScaling>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000512:	f000 f90f 	bl	8000734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800051e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	2310      	movs	r3, #16
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	2302      	movs	r3, #2
 800052a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000530:	230a      	movs	r3, #10
 8000532:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000534:	2307      	movs	r3, #7
 8000536:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000538:	2302      	movs	r3, #2
 800053a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053c:	2302      	movs	r3, #2
 800053e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0314 	add.w	r3, r7, #20
 8000544:	4618      	mov	r0, r3
 8000546:	f000 fddf 	bl	8001108 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000550:	f000 f8f0 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f001 faeb 	bl	8001b48 <HAL_RCC_ClockConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000578:	f000 f8dc 	bl	8000734 <Error_Handler>
  }
}
 800057c:	bf00      	nop
 800057e:	3758      	adds	r7, #88	; 0x58
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	f240 0228 	movw	r2, #40	; 0x28
 800058c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000590:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000594:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000598:	6013      	str	r3, [r2, #0]
  huart2.Init.BaudRate = 115200;
 800059a:	f240 0328 	movw	r3, #40	; 0x28
 800059e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005a2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005a6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a8:	f240 0328 	movw	r3, #40	; 0x28
 80005ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b4:	f240 0328 	movw	r3, #40	; 0x28
 80005b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c0:	f240 0328 	movw	r3, #40	; 0x28
 80005c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	f240 0328 	movw	r3, #40	; 0x28
 80005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d4:	220c      	movs	r2, #12
 80005d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d8:	f240 0328 	movw	r3, #40	; 0x28
 80005dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	f240 0328 	movw	r3, #40	; 0x28
 80005e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f0:	f240 0328 	movw	r3, #40	; 0x28
 80005f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	f240 0328 	movw	r3, #40	; 0x28
 8000600:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000604:	2200      	movs	r2, #0
 8000606:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000608:	f240 0028 	movw	r0, #40	; 0x28
 800060c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000610:	f002 fb43 	bl	8002c9a <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x9a>
  {
    Error_Handler();
 800061a:	f000 f88b 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}

08000622 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b08a      	sub	sp, #40	; 0x28
 8000626:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800064a:	f042 0204 	orr.w	r2, r2, #4
 800064e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800066a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000674:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000678:	64da      	str	r2, [r3, #76]	; 0x4c
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800069e:	f042 0201 	orr.w	r2, r2, #1
 80006a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80006a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006c8:	f042 0202 	orr.w	r2, r2, #2
 80006cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80006d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2120      	movs	r1, #32
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f000 fc7b 	bl	8000fe2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000706:	f6c4 0000 	movt	r0, #18432	; 0x4800
 800070a:	f000 fa9c 	bl	8000c46 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800070e:	2320      	movs	r3, #32
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f000 fa8d 	bl	8000c46 <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3728      	adds	r7, #40	; 0x28
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>

0800073e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800074c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000756:	f042 0201 	orr.w	r2, r2, #1
 800075a:	661a      	str	r2, [r3, #96]	; 0x60
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000776:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000780:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000784:	659a      	str	r2, [r3, #88]	; 0x58
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800078e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0ac      	sub	sp, #176	; 0xb0
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2288      	movs	r2, #136	; 0x88
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 ff63 	bl	8003690 <memset>
  if(huart->Instance==USART2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80007d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d14d      	bne.n	8000876 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007de:	2300      	movs	r3, #0
 80007e0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fc5b 	bl	80020a2 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 80007f2:	f7ff ff9f 	bl	8000734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000808:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800080c:	659a      	str	r2, [r3, #88]	; 0x58
 800080e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000812:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000828:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000832:	f042 0201 	orr.w	r2, r2, #1
 8000836:	64da      	str	r2, [r3, #76]	; 0x4c
 8000838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084a:	230c      	movs	r3, #12
 800084c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000862:	2307      	movs	r3, #7
 8000864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 f9e8 	bl	8000c46 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	37b0      	adds	r7, #176	; 0xb0
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <HardFault_Handler+0x4>

0800088a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <BusFault_Handler+0x4>

08000896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 f8a5 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d6:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008da:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008e2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008ea:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000900:	f7ff ffe7 	bl	80008d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092a:	f002 fe8d 	bl	8003648 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800092e:	f7ff fdcd 	bl	80004cc <main>

08000932 <LoopForever>:

LoopForever:
    b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000934:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000940:	08003710 	.word	0x08003710
  ldr r2, =_sbss
 8000944:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000948:	200000b0 	.word	0x200000b0

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>

0800094e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000954:	2300      	movs	r3, #0
 8000956:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800096a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800096e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f935 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f80d 	bl	8000996 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x3a>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x3e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff fed9 	bl	800073e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a2:	f240 0308 	movw	r3, #8
 80009a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d02c      	beq.n	8000a0a <HAL_InitTick+0x74>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b0:	f240 0300 	movw	r3, #0
 80009b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	f240 0308 	movw	r3, #8
 80009be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f92b 	bl	8000c2e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d112      	bne.n	8000a04 <HAL_InitTick+0x6e>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80c      	bhi.n	80009fe <HAL_InitTick+0x68>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f903 	bl	8000bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f0:	f240 0304 	movw	r3, #4
 80009f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e007      	b.n	8000a0e <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e004      	b.n	8000a0e <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
 8000a08:	e001      	b.n	8000a0e <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a1c:	f240 0308 	movw	r3, #8
 8000a20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	f240 03ac 	movw	r3, #172	; 0xac
 8000a2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	441a      	add	r2, r3
 8000a34:	f240 03ac 	movw	r3, #172	; 0xac
 8000a38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	f240 03ac 	movw	r3, #172	; 0xac
 8000a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a54:	681b      	ldr	r3, [r3, #0]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a70:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000a74:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a82:	4013      	ands	r3, r2
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a96:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a98:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000a9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000ab8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	f003 0307 	and.w	r3, r3, #7
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	6039      	str	r1, [r7, #0]
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0e      	blt.n	8000b00 <__NVIC_SetPriority+0x32>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000aea:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000aee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000af2:	0109      	lsls	r1, r1, #4
 8000af4:	b2c9      	uxtb	r1, r1
 8000af6:	4413      	add	r3, r2
 8000af8:	460a      	mov	r2, r1
 8000afa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afe:	e00e      	b.n	8000b1e <__NVIC_SetPriority+0x50>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2d9      	uxtb	r1, r3
 8000b04:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000b08:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	f002 020f 	and.w	r2, r2, #15
 8000b12:	3a04      	subs	r2, #4
 8000b14:	0109      	lsls	r1, r1, #4
 8000b16:	b2c9      	uxtb	r1, r1
 8000b18:	4413      	add	r3, r2
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	761a      	strb	r2, [r3, #24]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b089      	sub	sp, #36	; 0x24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	f1c3 0307 	rsb	r3, r3, #7
 8000b44:	2b04      	cmp	r3, #4
 8000b46:	bf28      	it	cs
 8000b48:	2304      	movcs	r3, #4
 8000b4a:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	2b06      	cmp	r3, #6
 8000b52:	d902      	bls.n	8000b5a <NVIC_EncodePriority+0x30>
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	3b03      	subs	r3, #3
 8000b58:	e000      	b.n	8000b5c <NVIC_EncodePriority+0x32>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43da      	mvns	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	401a      	ands	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b72:	f04f 31ff 	mov.w	r1, #4294967295
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	43d9      	mvns	r1, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b82:	4313      	orrs	r3, r2
         );
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3724      	adds	r7, #36	; 0x24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e018      	b.n	8000bd8 <SysTick_Config+0x48>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000baa:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bba:	f7ff ff88 	bl	8000ace <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbe:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000bc2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000bce:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000bd2:	2207      	movs	r2, #7
 8000bd4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff39 	bl	8000a60 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff52 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff89 	bl	8000b2a <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff54 	bl	8000ace <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffaa 	bl	8000b90 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b087      	sub	sp, #28
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	e1b6      	b.n	8000fc4 <HAL_GPIO_Init+0x37e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	4013      	ands	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 81a8 	beq.w	8000fbe <HAL_GPIO_Init+0x378>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d005      	beq.n	8000c86 <HAL_GPIO_Init+0x40>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d130      	bne.n	8000ce8 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0201 	and.w	r2, r3, #1
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d118      	bne.n	8000d26 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	f003 0201 	and.w	r2, r3, #1
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d017      	beq.n	8000d62 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d123      	bne.n	8000db6 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f003 0307 	and.w	r3, r3, #7
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	08da      	lsrs	r2, r3, #3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3208      	adds	r2, #8
 8000db0:	6939      	ldr	r1, [r7, #16]
 8000db2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0203 	and.w	r2, r3, #3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 80e3 	beq.w	8000fbe <HAL_GPIO_Init+0x378>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	661a      	str	r2, [r3, #96]	; 0x60
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e22:	2300      	movs	r3, #0
 8000e24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	0892      	lsrs	r2, r2, #2
 8000e2c:	3202      	adds	r2, #2
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e50:	d037      	beq.n	8000ec2 <HAL_GPIO_Init+0x27c>
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e58:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d02e      	beq.n	8000ebe <HAL_GPIO_Init+0x278>
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e66:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d025      	beq.n	8000eba <HAL_GPIO_Init+0x274>
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e74:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d01c      	beq.n	8000eb6 <HAL_GPIO_Init+0x270>
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0x26c>
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e90:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d00a      	beq.n	8000eae <HAL_GPIO_Init+0x268>
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e9e:	f6c4 0300 	movt	r3, #18432	; 0x4800
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x264>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e00c      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000eaa:	2307      	movs	r3, #7
 8000eac:	e00a      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000eae:	2305      	movs	r3, #5
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x27e>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	0892      	lsrs	r2, r2, #2
 8000ede:	3202      	adds	r2, #2
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2ca>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR1;
 8000f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x336>
        {
          temp |= iocurrent;
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f80:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR1;
 8000f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x36c>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa22 f303 	lsr.w	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f47f ae41 	bne.w	8000c56 <HAL_GPIO_Init+0x10>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	460b      	mov	r3, r1
 8000fec:	807b      	strh	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff2:	787b      	ldrb	r3, [r7, #1]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001000:	887a      	ldrh	r2, [r7, #2]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001016:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800101a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800102e:	b480      	push	{r7}
 8001030:	b085      	sub	sp, #20
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800103c:	d145      	bne.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x9c>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800103e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001042:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800104c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001050:	d053      	beq.n	80010fa <HAL_PWREx_ControlVoltageScaling+0xcc>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001052:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001056:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001060:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001064:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106c:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800106e:	f240 0300 	movw	r3, #0
 8001072:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2232      	movs	r2, #50	; 0x32
 800107a:	fb03 f202 	mul.w	r2, r3, r2
 800107e:	f64d 6383 	movw	r3, #56963	; 0xde83
 8001082:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8001086:	fba3 2302 	umull	r2, r3, r3, r2
 800108a:	0c9b      	lsrs	r3, r3, #18
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001090:	e002      	b.n	8001098 <HAL_PWREx_ControlVoltageScaling+0x6a>
      {
        wait_loop_index--;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3b01      	subs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001098:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800109c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010aa:	d102      	bne.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x84>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <HAL_PWREx_ControlVoltageScaling+0x64>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c4:	d119      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0xcc>
      {
        return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e018      	b.n	80010fc <HAL_PWREx_ControlVoltageScaling+0xce>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ca:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010dc:	d00d      	beq.n	80010fa <HAL_PWREx_ControlVoltageScaling+0xcc>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010de:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80010ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80010f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80010f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010f8:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	f000 bd12 	b.w	8001b40 <HAL_RCC_OscConfig+0xa38>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001130:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0310 	and.w	r3, r3, #16
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8149 	beq.w	80013dc <HAL_RCC_OscConfig+0x2d4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d007      	beq.n	8001160 <HAL_RCC_OscConfig+0x58>
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b0c      	cmp	r3, #12
 8001154:	f040 80cb 	bne.w	80012ee <HAL_RCC_OscConfig+0x1e6>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	2b01      	cmp	r3, #1
 800115c:	f040 80c7 	bne.w	80012ee <HAL_RCC_OscConfig+0x1e6>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_RCC_OscConfig+0x78>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <HAL_RCC_OscConfig+0x78>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	f000 bce0 	b.w	8001b40 <HAL_RCC_OscConfig+0xa38>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_RCC_OscConfig+0x9e>
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d236      	bcs.n	800122a <HAL_RCC_OscConfig+0x122>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fef7 	bl	8001fb4 <RCC_SetFlashLatencyFromMSIRange>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <HAL_RCC_OscConfig+0xca>
          {
            return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	f000 bcb7 	b.w	8001b40 <HAL_RCC_OscConfig+0xa38>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011e4:	f042 0208 	orr.w	r2, r2, #8
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1a      	ldr	r2, [r3, #32]
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	021a      	lsls	r2, r3, #8
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	e038      	b.n	800129c <HAL_RCC_OscConfig+0x194>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800123c:	f042 0208 	orr.w	r2, r2, #8
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	021a      	lsls	r2, r3, #8
 8001274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001278:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10a      	bne.n	800129c <HAL_RCC_OscConfig+0x194>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe92 	bl	8001fb4 <RCC_SetFlashLatencyFromMSIRange>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <HAL_RCC_OscConfig+0x194>
            {
              return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	f000 bc52 	b.w	8001b40 <HAL_RCC_OscConfig+0xa38>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800129c:	f000 fda1 	bl	8001de2 <HAL_RCC_GetSysClockFreq>
 80012a0:	4601      	mov	r1, r0
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	f003 020f 	and.w	r2, r3, #15
 80012b2:	f243 63b8 	movw	r3, #14008	; 0x36b8
 80012b6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80012ba:	5c9b      	ldrb	r3, [r3, r2]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa21 f203 	lsr.w	r2, r1, r3
 80012c4:	f240 0300 	movw	r3, #0
 80012c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012cc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012ce:	f240 0304 	movw	r3, #4
 80012d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fb5c 	bl	8000996 <HAL_InitTick>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d078      	beq.n	80013da <HAL_RCC_OscConfig+0x2d2>
        {
          return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	f000 bc29 	b.w	8001b40 <HAL_RCC_OscConfig+0xa38>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d04e      	beq.n	8001394 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800130e:	f7ff fb9b 	bl	8000a48 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001314:	e009      	b.n	800132a <HAL_RCC_OscConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001316:	f7ff fb97 	bl	8000a48 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d902      	bls.n	800132a <HAL_RCC_OscConfig+0x222>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	f000 bc0b 	b.w	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ec      	beq.n	8001316 <HAL_RCC_OscConfig+0x20e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1a      	ldr	r2, [r3, #32]
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	021a      	lsls	r2, r3, #8
 8001386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800138e:	430a      	orrs	r2, r1
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	e023      	b.n	80013dc <HAL_RCC_OscConfig+0x2d4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fb4c 	bl	8000a48 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013b4:	f7ff fb48 	bl	8000a48 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e3bc      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ed      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2ac>
 80013d8:	e000      	b.n	80013dc <HAL_RCC_OscConfig+0x2d4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8093 	beq.w	8001510 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d005      	beq.n	80013fc <HAL_RCC_OscConfig+0x2f4>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d111      	bne.n	800141a <HAL_RCC_OscConfig+0x312>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d10e      	bne.n	800141a <HAL_RCC_OscConfig+0x312>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d07f      	beq.n	800150e <HAL_RCC_OscConfig+0x406>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d17b      	bne.n	800150e <HAL_RCC_OscConfig+0x406>
      {
        return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e392      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x336>
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001436:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	e035      	b.n	80014aa <HAL_RCC_OscConfig+0x3a2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001446:	d118      	bne.n	800147a <HAL_RCC_OscConfig+0x372>
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800145a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001472:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e017      	b.n	80014aa <HAL_RCC_OscConfig+0x3a2>
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800148c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d016      	beq.n	80014e0 <HAL_RCC_OscConfig+0x3d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fac9 	bl	8000a48 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x3c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ba:	f7ff fac5 	bl	8000a48 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e339      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0ed      	beq.n	80014ba <HAL_RCC_OscConfig+0x3b2>
 80014de:	e017      	b.n	8001510 <HAL_RCC_OscConfig+0x408>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fab2 	bl	8000a48 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff faae 	bl	8000a48 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e322      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ed      	bne.n	80014e8 <HAL_RCC_OscConfig+0x3e0>
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x408>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8082 	beq.w	8001622 <HAL_RCC_OscConfig+0x51a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x428>
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d122      	bne.n	8001570 <HAL_RCC_OscConfig+0x468>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d11f      	bne.n	8001570 <HAL_RCC_OscConfig+0x468>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001534:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x446>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x446>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e2f8      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156e:	e058      	b.n	8001622 <HAL_RCC_OscConfig+0x51a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d032      	beq.n	80015de <HAL_RCC_OscConfig+0x4d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001586:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800158a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fa5a 	bl	8000a48 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x4a2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fa56 	bl	8000a48 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x4a2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e2ca      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ed      	beq.n	8001598 <HAL_RCC_OscConfig+0x490>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f023 51f8 	bic.w	r1, r3, #520093696	; 0x1f000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	061a      	lsls	r2, r3, #24
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	e021      	b.n	8001622 <HAL_RCC_OscConfig+0x51a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa27 	bl	8000a48 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x508>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fa23 	bl	8000a48 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x508>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e297      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ed      	bne.n	80015fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d04e      	beq.n	80016cc <HAL_RCC_OscConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d025      	beq.n	8001682 <HAL_RCC_OscConfig+0x57a>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800163e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff f9f9 	bl	8000a48 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff f9f5 	bl	8000a48 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e269      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800166c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ec      	beq.n	800165a <HAL_RCC_OscConfig+0x552>
 8001680:	e024      	b.n	80016cc <HAL_RCC_OscConfig+0x5c4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001686:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800168a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800168e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001692:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff f9d3 	bl	8000a48 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x5b0>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a6:	f7ff f9cf 	bl	8000a48 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x5b0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e243      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1ec      	bne.n	80016a6 <HAL_RCC_OscConfig+0x59e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80e3 	beq.w	80018a0 <HAL_RCC_OscConfig+0x798>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d116      	bne.n	800171e <HAL_RCC_OscConfig+0x616>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001702:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001706:	659a      	str	r2, [r3, #88]	; 0x58
 8001708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001722:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d121      	bne.n	8001774 <HAL_RCC_OscConfig+0x66c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001730:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001734:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800173e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001746:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001748:	f7ff f97e 	bl	8000a48 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x65a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001750:	f7ff f97a 	bl	8000a48 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x65a>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1ee      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001762:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001766:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ed      	beq.n	8001750 <HAL_RCC_OscConfig+0x648>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10e      	bne.n	800179a <HAL_RCC_OscConfig+0x692>
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001784:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001798:	e03c      	b.n	8001814 <HAL_RCC_OscConfig+0x70c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d11c      	bne.n	80017dc <HAL_RCC_OscConfig+0x6d4>
 80017a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017b6:	f042 0204 	orr.w	r2, r2, #4
 80017ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80017be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017c6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80017da:	e01b      	b.n	8001814 <HAL_RCC_OscConfig+0x70c>
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001800:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800180c:	f022 0204 	bic.w	r2, r2, #4
 8001810:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d019      	beq.n	8001850 <HAL_RCC_OscConfig+0x748>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181c:	f7ff f914 	bl	8000a48 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001822:	e00a      	b.n	800183a <HAL_RCC_OscConfig+0x732>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff f910 	bl	8000a48 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x732>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e182      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ea      	beq.n	8001824 <HAL_RCC_OscConfig+0x71c>
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff f8fa 	bl	8000a48 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x766>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff f8f6 	bl	8000a48 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x766>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e168      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001872:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ea      	bne.n	8001858 <HAL_RCC_OscConfig+0x750>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x798>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001890:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800189a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 814a 	beq.w	8001b3e <HAL_RCC_OscConfig+0xa36>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f040 810e 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x9c8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 0203 	and.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d131      	bne.n	8001932 <HAL_RCC_OscConfig+0x82a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	3b01      	subs	r3, #1
 80018da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d128      	bne.n	8001932 <HAL_RCC_OscConfig+0x82a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d120      	bne.n	8001932 <HAL_RCC_OscConfig+0x82a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018fa:	2a07      	cmp	r2, #7
 80018fc:	bf14      	ite	ne
 80018fe:	2201      	movne	r2, #1
 8001900:	2200      	moveq	r2, #0
 8001902:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001904:	4293      	cmp	r3, r2
 8001906:	d114      	bne.n	8001932 <HAL_RCC_OscConfig+0x82a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	3b01      	subs	r3, #1
 8001916:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d10a      	bne.n	8001932 <HAL_RCC_OscConfig+0x82a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	f000 8097 	beq.w	8001a60 <HAL_RCC_OscConfig+0x958>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	f000 8091 	beq.w	8001a5c <HAL_RCC_OscConfig+0x954>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d108      	bne.n	800195e <HAL_RCC_OscConfig+0x856>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x85a>
#endif
            )
          {
            return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0ee      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001974:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001978:	601a      	str	r2, [r3, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800197a:	f7ff f865 	bl	8000a48 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x88c>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff f861 	bl	8000a48 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x88c>
              {
                return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0d5      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ed      	bne.n	8001982 <HAL_RCC_OscConfig+0x87a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	f248 038c 	movw	r3, #32908	; 0x808c
 80019b4:	f6cf 139d 	movt	r3, #63901	; 0xf99d
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019c2:	3a01      	subs	r2, #1
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	4311      	orrs	r1, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019cc:	0212      	lsls	r2, r2, #8
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019d4:	0852      	lsrs	r2, r2, #1
 80019d6:	3a01      	subs	r2, #1
 80019d8:	0552      	lsls	r2, r2, #21
 80019da:	4311      	orrs	r1, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019e0:	0852      	lsrs	r2, r2, #1
 80019e2:	3a01      	subs	r2, #1
 80019e4:	0652      	lsls	r2, r2, #25
 80019e6:	4311      	orrs	r1, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019ec:	0912      	lsrs	r2, r2, #4
 80019ee:	0452      	lsls	r2, r2, #17
 80019f0:	4311      	orrs	r1, r2
 80019f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019fa:	430b      	orrs	r3, r1
 80019fc:	60d3      	str	r3, [r2, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a10:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a14:	601a      	str	r2, [r3, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a2c:	60da      	str	r2, [r3, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a2e:	f7ff f80b 	bl	8000a48 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x940>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f807 	bl	8000a48 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x940>
              {
                return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e07b      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0ed      	beq.n	8001a36 <HAL_RCC_OscConfig+0x92e>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5a:	e070      	b.n	8001b3e <HAL_RCC_OscConfig+0xa36>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e06f      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d165      	bne.n	8001b3e <HAL_RCC_OscConfig+0xa36>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a84:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a88:	601a      	str	r2, [r3, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a9c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001aa0:	60da      	str	r2, [r3, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa2:	f7fe ffd1 	bl	8000a48 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x9b4>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7fe ffcd 	bl	8000a48 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x9b4>
            {
              return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e041      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0ed      	beq.n	8001aaa <HAL_RCC_OscConfig+0x9a2>
 8001ace:	e036      	b.n	8001b3e <HAL_RCC_OscConfig+0xa36>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d031      	beq.n	8001b3a <HAL_RCC_OscConfig+0xa32>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ae8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aee:	f7fe ffab 	bl	8000a48 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0xa00>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7fe ffa7 	bl	8000a48 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0xa00>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e01b      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <HAL_RCC_OscConfig+0x9ee>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b2c:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001b30:	f6cf 63ee 	movt	r3, #65262	; 0xfeee
 8001b34:	400b      	ands	r3, r1
 8001b36:	60d3      	str	r3, [r2, #12]
 8001b38:	e001      	b.n	8001b3e <HAL_RCC_OscConfig+0xa36>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0xa38>
      }
    }
  }
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3720      	adds	r7, #32
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e13e      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d919      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0x5c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0107 	bic.w	r1, r3, #7
 8001b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x5c>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e11a      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d019      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d90e      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001be0:	430a      	orrs	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d061      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d10a      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12a      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0e5      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d10a      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d11b      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x118>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0d6      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10a      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x102>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x118>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0c7      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x118>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0bc      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f023 0103 	bic.w	r1, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7e:	f7fe fee3 	bl	8000a48 <HAL_GetTick>
 8001c82:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_ClockConfig+0x154>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f7fe fedf 	bl	8000a48 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x154>
      {
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e09e      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1e8      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x13e>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d019      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x1ac>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20e      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x1ac>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	609a      	str	r2, [r3, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d219      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x1f4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0107 	bic.w	r1, r3, #7
 8001d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x1f4>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04e      	b.n	8001dda <HAL_RCC_ClockConfig+0x292>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00f      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x24a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 5160 	bic.w	r1, r3, #14336	; 0x3800
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00da      	lsls	r2, r3, #3
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d92:	f000 f826 	bl	8001de2 <HAL_RCC_GetSysClockFreq>
 8001d96:	4601      	mov	r1, r0
 8001d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	f243 63b8 	movw	r3, #14008	; 0x36b8
 8001dac:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001db0:	5c9b      	ldrb	r3, [r3, r2]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	fa21 f203 	lsr.w	r2, r1, r3
 8001dba:	f240 0300 	movw	r3, #0
 8001dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc4:	f240 0304 	movw	r3, #4
 8001dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fde1 	bl	8000996 <HAL_InitTick>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b089      	sub	sp, #36	; 0x24
 8001de6:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	2300      	movs	r3, #0
 8001dee:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x40>
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b0c      	cmp	r3, #12
 8001e1a:	d12d      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x96>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d12a      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x96>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10a      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x68>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	61fb      	str	r3, [r7, #28]
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x7a>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e5c:	f243 63d0 	movw	r3, #14032	; 0x36d0
 8001e60:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e6a:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d113      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0xb8>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e76:	e010      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xb8>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e7e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001e82:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	e007      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0xb8>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d104      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0xb8>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e90:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001e94:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001e98:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	d146      	bne.n	8001f2e <HAL_RCC_GetSysClockFreq+0x14c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0xdc>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d006      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0xe8>
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xf4>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ebe:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001ec2:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001ec6:	617b      	str	r3, [r7, #20]
      break;
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xfa>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001eca:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001ece:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001ed2:	617b      	str	r3, [r7, #20]
      break;
 8001ed4:	e002      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0xfa>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	617b      	str	r3, [r7, #20]
      break;
 8001eda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	3301      	adds	r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	fb03 f202 	mul.w	r2, r3, r2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0e5b      	lsrs	r3, r3, #25
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3724      	adds	r7, #36	; 0x24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f40:	f240 0300 	movw	r3, #0
 8001f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f48:	681b      	ldr	r3, [r3, #0]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0207 	and.w	r2, r3, #7
 8001f6e:	f243 63c8 	movw	r3, #14024	; 0x36c8
 8001f72:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001f76:	5c9b      	ldrb	r3, [r3, r2]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f88:	f7ff ffd8 	bl	8001f3c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4601      	mov	r1, r0
 8001f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	0adb      	lsrs	r3, r3, #11
 8001f9a:	f003 0207 	and.w	r2, r3, #7
 8001f9e:	f243 63c8 	movw	r3, #14024	; 0x36c8
 8001fa2:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x26>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fd2:	f7ff f81e 	bl	8001012 <HAL_PWREx_GetVoltageRange>
 8001fd6:	6178      	str	r0, [r7, #20]
 8001fd8:	e023      	b.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0x6e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002004:	f7ff f805 	bl	8001012 <HAL_PWREx_GetVoltageRange>
 8002008:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800200e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002012:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800201c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002020:	659a      	str	r2, [r3, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002028:	d10b      	bne.n	8002042 <RCC_SetFlashLatencyFromMSIRange+0x8e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b80      	cmp	r3, #128	; 0x80
 800202e:	d919      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2ba0      	cmp	r3, #160	; 0xa0
 8002034:	d902      	bls.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002036:	2302      	movs	r3, #2
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e013      	b.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800203c:	2301      	movs	r3, #1
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	e010      	b.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b80      	cmp	r3, #128	; 0x80
 8002046:	d902      	bls.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x9a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002048:	2303      	movs	r3, #3
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e00a      	b.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d102      	bne.n	800205a <RCC_SetFlashLatencyFromMSIRange+0xa6>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002054:	2302      	movs	r3, #2
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e004      	b.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b70      	cmp	r3, #112	; 0x70
 800205e:	d101      	bne.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0107 	bic.w	r1, r3, #7
 8002072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002076:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0xe4>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <RCC_SetFlashLatencyFromMSIRange+0xe6>
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020aa:	2300      	movs	r3, #0
 80020ac:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020ae:	2300      	movs	r3, #0
 80020b0:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d04d      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020c6:	d030      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x88>
 80020c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020cc:	d82a      	bhi.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80020ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020d2:	d008      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020d8:	d824      	bhi.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x82>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80020de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e2:	d016      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80020e4:	e01e      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020fc:	60da      	str	r2, [r3, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020fe:	e015      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x8a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fb74 	bl	80027f4 <RCCEx_PLLSAI1_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002110:	e00c      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x8a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3320      	adds	r3, #32
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fca3 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002122:	e003      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x8a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	74fb      	strb	r3, [r7, #19]
      break;
 8002128:	e000      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x8a>
      break;
 800212a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800214e:	430a      	orrs	r2, r1
 8002150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8002154:	e001      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xb8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d04d      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800216a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800216e:	d030      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002170:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002174:	d82a      	bhi.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800217a:	d008      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xec>
 800217c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002180:	d824      	bhi.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002182:	2b00      	cmp	r3, #0
 8002184:	d010      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002186:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800218a:	d016      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x118>
 800218c:	e01e      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x12a>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800218e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002192:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800219c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a4:	60da      	str	r2, [r3, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a6:	e015      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x132>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3304      	adds	r3, #4
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fb20 	bl	80027f4 <RCCEx_PLLSAI1_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021b8:	e00c      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x132>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3320      	adds	r3, #32
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fc4f 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ca:	e003      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x132>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	74fb      	strb	r3, [r7, #19]
      break;
 80021d0:	e000      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x132>
      break;
 80021d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d111      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021f6:	430a      	orrs	r2, r1
 80021f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80021fc:	e001      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x160>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80d4 	beq.w	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800222a:	2300      	movs	r3, #0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d016      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002234:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002246:	659a      	str	r2, [r3, #88]	; 0x58
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	2301      	movs	r3, #1
 800225c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800225e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002262:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800226c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002274:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002276:	f7fe fbe7 	bl	8000a48 <HAL_GetTick>
 800227a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800227c:	e009      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe fbe3 	bl	8000a48 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d902      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      {
        ret = HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	74fb      	strb	r3, [r7, #19]
        break;
 8002290:	e008      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x202>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002292:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002296:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ec      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      }
    }

    if(ret == HAL_OK)
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d175      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d031      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d02b      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x284>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002304:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002310:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d019      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe fb8a 	bl	8000a48 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002336:	e00b      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002338:	f7fe fb86 	bl	8000a48 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	f241 3288 	movw	r2, #5000	; 0x1388
 8002346:	4293      	cmp	r3, r2
 8002348:	d902      	bls.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
          {
            ret = HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	74fb      	strb	r3, [r7, #19]
            break;
 800234e:	e009      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0e9      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x296>
          }
        }
      }

      if(ret == HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d112      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800236a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002384:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002388:	430a      	orrs	r2, r1
 800238a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800238e:	e004      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	74bb      	strb	r3, [r7, #18]
 8002394:	e001      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239a:	7c7b      	ldrb	r3, [r7, #17]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80023b6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f023 0103 	bic.w	r1, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023e0:	430a      	orrs	r2, r1
 80023e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 010c 	bic.w	r1, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800240a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800240e:	430a      	orrs	r2, r1
 8002410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002438:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800243c:	430a      	orrs	r2, r1
 800243e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d010      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800244e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002452:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002466:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800246a:	430a      	orrs	r2, r1
 800246c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800247c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002498:	430a      	orrs	r2, r1
 800249a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024c6:	430a      	orrs	r2, r1
 80024c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024f4:	430a      	orrs	r2, r1
 80024f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800250a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002522:	430a      	orrs	r2, r1
 8002524:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800254c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002550:	430a      	orrs	r2, r1
 8002552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800257e:	430a      	orrs	r2, r1
 8002580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x510>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025ac:	430a      	orrs	r2, r1
 80025ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d034      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x586>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025da:	430a      	orrs	r2, r1
 80025dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x586>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x586>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2101      	movs	r1, #1
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f8ed 	bl	80027f4 <RCCEx_PLLSAI1_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x586>
        {
          /* set overall return value */
          status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d034      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002638:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002650:	430a      	orrs	r2, r1
 8002652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800265e:	d10c      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x5d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002664:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002672:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	e011      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002682:	d10c      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f8b2 	bl	80027f4 <RCCEx_PLLSAI1_Config>
 8002690:	4603      	mov	r3, r0
 8002692:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      {
        /* set overall return value */
        status = ret;
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d034      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x672>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80026be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026c6:	430a      	orrs	r2, r1
 80026c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	e011      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x672>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2101      	movs	r1, #1
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f877 	bl	80027f4 <RCCEx_PLLSAI1_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270a:	7cfb      	ldrb	r3, [r7, #19]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x672>
      {
        /* set overall return value */
        status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d035      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002724:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002738:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800273c:	430a      	orrs	r2, r1
 800273e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800274a:	d10d      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	2102      	movs	r1, #2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f84e 	bl	80027f4 <RCCEx_PLLSAI1_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d014      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* set overall return value */
        status = ret;
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	74bb      	strb	r3, [r7, #18]
 8002766:	e011      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800276c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002770:	d10c      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3320      	adds	r3, #32
 8002776:	2102      	movs	r1, #2
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f973 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* set overall return value */
        status = ret;
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d010      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 4180 	bic.w	r1, r3, #1073741824	; 0x40000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027b4:	430a      	orrs	r2, r1
 80027b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d011      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80027dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80027e4:	430a      	orrs	r2, r1
 80027e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002806:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01e      	beq.n	8002852 <RCCEx_PLLSAI1_Config+0x5e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002818:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0203 	and.w	r2, r3, #3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d110      	bne.n	800284c <RCCEx_PLLSAI1_Config+0x58>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
       ||
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <RCCEx_PLLSAI1_Config+0x58>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002836:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
       ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d059      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x10c>
#endif
      )
    {
      status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e056      	b.n	8002900 <RCCEx_PLLSAI1_Config+0x10c>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d01e      	beq.n	8002898 <RCCEx_PLLSAI1_Config+0xa4>
 800285a:	2b03      	cmp	r3, #3
 800285c:	d831      	bhi.n	80028c2 <RCCEx_PLLSAI1_Config+0xce>
 800285e:	2b01      	cmp	r3, #1
 8002860:	d002      	beq.n	8002868 <RCCEx_PLLSAI1_Config+0x74>
 8002862:	2b02      	cmp	r3, #2
 8002864:	d00c      	beq.n	8002880 <RCCEx_PLLSAI1_Config+0x8c>
 8002866:	e02c      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xce>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800286c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d126      	bne.n	80028c8 <RCCEx_PLLSAI1_Config+0xd4>
      {
        status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287e:	e023      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xd4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002884:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11c      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xd8>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e019      	b.n	80028cc <RCCEx_PLLSAI1_Config+0xd8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d112      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xdc>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0xdc>
        {
          status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028c0:	e006      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xdc>
    default:
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      break;
 80028c6:	e004      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xde>
      break;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xde>
      break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <RCCEx_PLLSAI1_Config+0xde>
      break;
 80028d0:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d113      	bne.n	8002900 <RCCEx_PLLSAI1_Config+0x10c>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	431a      	orrs	r2, r3
 80028f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 80a9 	bne.w	8002a5a <RCCEx_PLLSAI1_Config+0x266>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800290c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002916:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800291a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800291e:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002920:	f7fe f892 	bl	8000a48 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002926:	e009      	b.n	800293c <RCCEx_PLLSAI1_Config+0x148>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002928:	f7fe f88e 	bl	8000a48 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <RCCEx_PLLSAI1_Config+0x148>
      {
        status = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	73fb      	strb	r3, [r7, #15]
        break;
 800293a:	e008      	b.n	800294e <RCCEx_PLLSAI1_Config+0x15a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ec      	bne.n	8002928 <RCCEx_PLLSAI1_Config+0x134>
      }
    }

    if(status == HAL_OK)
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 8082 	bne.w	8002a5a <RCCEx_PLLSAI1_Config+0x266>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d117      	bne.n	800298c <RCCEx_PLLSAI1_Config+0x198>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002960:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	0211      	lsls	r1, r2, #8
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68d2      	ldr	r2, [r2, #12]
 8002978:	0912      	lsrs	r2, r2, #4
 800297a:	0452      	lsls	r2, r2, #17
 800297c:	4311      	orrs	r1, r2
 800297e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002982:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002986:	430b      	orrs	r3, r1
 8002988:	6113      	str	r3, [r2, #16]
 800298a:	e033      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x200>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d118      	bne.n	80029c4 <RCCEx_PLLSAI1_Config+0x1d0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002996:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6912      	ldr	r2, [r2, #16]
 80029ae:	0852      	lsrs	r2, r2, #1
 80029b0:	3a01      	subs	r2, #1
 80029b2:	0552      	lsls	r2, r2, #21
 80029b4:	4311      	orrs	r1, r2
 80029b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029be:	430b      	orrs	r3, r1
 80029c0:	6113      	str	r3, [r2, #16]
 80029c2:	e017      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0x200>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6892      	ldr	r2, [r2, #8]
 80029da:	0211      	lsls	r1, r2, #8
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6952      	ldr	r2, [r2, #20]
 80029e0:	0852      	lsrs	r2, r2, #1
 80029e2:	3a01      	subs	r2, #1
 80029e4:	0652      	lsls	r2, r2, #25
 80029e6:	4311      	orrs	r1, r2
 80029e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80029f0:	430b      	orrs	r3, r1
 80029f2:	6113      	str	r3, [r2, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe f81c 	bl	8000a48 <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a12:	e009      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0x234>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a14:	f7fe f818 	bl	8000a48 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d902      	bls.n	8002a28 <RCCEx_PLLSAI1_Config+0x234>
        {
          status = HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	73fb      	strb	r3, [r7, #15]
          break;
 8002a26:	e008      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0x246>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0ec      	beq.n	8002a14 <RCCEx_PLLSAI1_Config+0x220>
        }
      }

      if(status == HAL_OK)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10c      	bne.n	8002a5a <RCCEx_PLLSAI1_Config+0x266>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a56:	430a      	orrs	r2, r1
 8002a58:	611a      	str	r2, [r3, #16]
      }
    }
  }

  return status;
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01e      	beq.n	8002ac2 <RCCEx_PLLSAI2_Config+0x5e>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0203 	and.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d110      	bne.n	8002abc <RCCEx_PLLSAI2_Config+0x58>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <RCCEx_PLLSAI2_Config+0x58>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
       ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d059      	beq.n	8002b70 <RCCEx_PLLSAI2_Config+0x10c>
#endif
      )
    {
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e056      	b.n	8002b70 <RCCEx_PLLSAI2_Config+0x10c>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d01e      	beq.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d831      	bhi.n	8002b32 <RCCEx_PLLSAI2_Config+0xce>
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d002      	beq.n	8002ad8 <RCCEx_PLLSAI2_Config+0x74>
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d00c      	beq.n	8002af0 <RCCEx_PLLSAI2_Config+0x8c>
 8002ad6:	e02c      	b.n	8002b32 <RCCEx_PLLSAI2_Config+0xce>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d126      	bne.n	8002b38 <RCCEx_PLLSAI2_Config+0xd4>
      {
        status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aee:	e023      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0xd4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11c      	bne.n	8002b3c <RCCEx_PLLSAI2_Config+0xd8>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b06:	e019      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0xd8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d112      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0xdc>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <RCCEx_PLLSAI2_Config+0xdc>
        {
          status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b30:	e006      	b.n	8002b40 <RCCEx_PLLSAI2_Config+0xdc>
    default:
      status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	73fb      	strb	r3, [r7, #15]
      break;
 8002b36:	e004      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0xde>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e002      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0xde>
      break;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <RCCEx_PLLSAI2_Config+0xde>
      break;
 8002b40:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d113      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0x10c>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f023 0173 	bic.w	r1, r3, #115	; 0x73
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	431a      	orrs	r2, r3
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 808c 	bne.w	8002c90 <RCCEx_PLLSAI2_Config+0x22c>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002b8a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b90:	f7fd ff5a 	bl	8000a48 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b96:	e009      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x148>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b98:	f7fd ff56 	bl	8000a48 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d902      	bls.n	8002bac <RCCEx_PLLSAI2_Config+0x148>
      {
        status = HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	73fb      	strb	r3, [r7, #15]
        break;
 8002baa:	e008      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0x15a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ec      	bne.n	8002b98 <RCCEx_PLLSAI2_Config+0x134>
      }
    }

    if(status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d165      	bne.n	8002c90 <RCCEx_PLLSAI2_Config+0x22c>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d117      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0x196>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68d2      	ldr	r2, [r2, #12]
 8002be6:	0912      	lsrs	r2, r2, #4
 8002be8:	0452      	lsls	r2, r2, #17
 8002bea:	4311      	orrs	r1, r2
 8002bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bf0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6153      	str	r3, [r2, #20]
 8002bf8:	e017      	b.n	8002c2a <RCCEx_PLLSAI2_Config+0x1c6>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6892      	ldr	r2, [r2, #8]
 8002c10:	0211      	lsls	r1, r2, #8
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6912      	ldr	r2, [r2, #16]
 8002c16:	0852      	lsrs	r2, r2, #1
 8002c18:	3a01      	subs	r2, #1
 8002c1a:	0652      	lsls	r2, r2, #25
 8002c1c:	4311      	orrs	r1, r2
 8002c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c22:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002c26:	430b      	orrs	r3, r1
 8002c28:	6153      	str	r3, [r2, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fd ff01 	bl	8000a48 <HAL_GetTick>
 8002c46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c48:	e009      	b.n	8002c5e <RCCEx_PLLSAI2_Config+0x1fa>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c4a:	f7fd fefd 	bl	8000a48 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d902      	bls.n	8002c5e <RCCEx_PLLSAI2_Config+0x1fa>
        {
          status = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	73fb      	strb	r3, [r7, #15]
          break;
 8002c5c:	e008      	b.n	8002c70 <RCCEx_PLLSAI2_Config+0x20c>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ec      	beq.n	8002c4a <RCCEx_PLLSAI2_Config+0x1e6>
        }
      }

      if(status == HAL_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <RCCEx_PLLSAI2_Config+0x22c>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c7e:	6959      	ldr	r1, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e040      	b.n	8002d2e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fd fd71 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2224      	movs	r2, #36	; 0x24
 8002cc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f82d 	bl	8002d38 <UART_SetConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e022      	b.n	8002d2e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 faf9 	bl	80032e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0201 	orr.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb80 	bl	800342c <UART_CheckIdleState>
 8002d2c:	4603      	mov	r3, r0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b08a      	sub	sp, #40	; 0x28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f646 13f3 	movw	r3, #27123	; 0x69f3
 8002d6a:	f6ce 73ff 	movt	r3, #61439	; 0xefff
 8002d6e:	4013      	ands	r3, r2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	6812      	ldr	r2, [r2, #0]
 8002d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d004      	beq.n	8002db0 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	4313      	orrs	r3, r2
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d129      	bne.n	8002e28 <UART_SetConfig+0xf0>
 8002dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d81b      	bhi.n	8002e20 <UART_SetConfig+0xe8>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <UART_SetConfig+0xb8>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e11 	.word	0x08002e11
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e19 	.word	0x08002e19
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e06:	e124      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0e:	e120      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e10:	2304      	movs	r3, #4
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e16:	e11c      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1e:	e118      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e20:	2310      	movs	r3, #16
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e26:	e114      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002e30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d13b      	bne.n	8002eb0 <UART_SetConfig+0x178>
 8002e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	d82d      	bhi.n	8002ea8 <UART_SetConfig+0x170>
 8002e4c:	a201      	add	r2, pc, #4	; (adr r2, 8002e54 <UART_SetConfig+0x11c>)
 8002e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e52:	bf00      	nop
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002ea9 	.word	0x08002ea9
 8002e5c:	08002ea9 	.word	0x08002ea9
 8002e60:	08002ea9 	.word	0x08002ea9
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002ea9 	.word	0x08002ea9
 8002e6c:	08002ea9 	.word	0x08002ea9
 8002e70:	08002ea9 	.word	0x08002ea9
 8002e74:	08002e91 	.word	0x08002e91
 8002e78:	08002ea9 	.word	0x08002ea9
 8002e7c:	08002ea9 	.word	0x08002ea9
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002ea1 	.word	0x08002ea1
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8e:	e0e0      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e90:	2302      	movs	r3, #2
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e0dc      	b.n	8003052 <UART_SetConfig+0x31a>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9e:	e0d8      	b.n	8003052 <UART_SetConfig+0x31a>
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	e0d4      	b.n	8003052 <UART_SetConfig+0x31a>
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eae:	e0d0      	b.n	8003052 <UART_SetConfig+0x31a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002eb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d128      	bne.n	8002f12 <UART_SetConfig+0x1da>
 8002ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ed0:	2b30      	cmp	r3, #48	; 0x30
 8002ed2:	d016      	beq.n	8002f02 <UART_SetConfig+0x1ca>
 8002ed4:	2b30      	cmp	r3, #48	; 0x30
 8002ed6:	d818      	bhi.n	8002f0a <UART_SetConfig+0x1d2>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d00a      	beq.n	8002ef2 <UART_SetConfig+0x1ba>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d814      	bhi.n	8002f0a <UART_SetConfig+0x1d2>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <UART_SetConfig+0x1b2>
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d008      	beq.n	8002efa <UART_SetConfig+0x1c2>
 8002ee8:	e00f      	b.n	8002f0a <UART_SetConfig+0x1d2>
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef0:	e0af      	b.n	8003052 <UART_SetConfig+0x31a>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef8:	e0ab      	b.n	8003052 <UART_SetConfig+0x31a>
 8002efa:	2304      	movs	r3, #4
 8002efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f00:	e0a7      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f02:	2308      	movs	r3, #8
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f08:	e0a3      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f10:	e09f      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8002f1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d128      	bne.n	8002f74 <UART_SetConfig+0x23c>
 8002f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f26:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f32:	2bc0      	cmp	r3, #192	; 0xc0
 8002f34:	d016      	beq.n	8002f64 <UART_SetConfig+0x22c>
 8002f36:	2bc0      	cmp	r3, #192	; 0xc0
 8002f38:	d818      	bhi.n	8002f6c <UART_SetConfig+0x234>
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d00a      	beq.n	8002f54 <UART_SetConfig+0x21c>
 8002f3e:	2b80      	cmp	r3, #128	; 0x80
 8002f40:	d814      	bhi.n	8002f6c <UART_SetConfig+0x234>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <UART_SetConfig+0x214>
 8002f46:	2b40      	cmp	r3, #64	; 0x40
 8002f48:	d008      	beq.n	8002f5c <UART_SetConfig+0x224>
 8002f4a:	e00f      	b.n	8002f6c <UART_SetConfig+0x234>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e07e      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f54:	2302      	movs	r3, #2
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e07a      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f62:	e076      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f64:	2308      	movs	r3, #8
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6a:	e072      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f72:	e06e      	b.n	8003052 <UART_SetConfig+0x31a>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002f7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d12d      	bne.n	8002fe0 <UART_SetConfig+0x2a8>
 8002f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f98:	d01a      	beq.n	8002fd0 <UART_SetConfig+0x298>
 8002f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9e:	d81b      	bhi.n	8002fd8 <UART_SetConfig+0x2a0>
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa4:	d00c      	beq.n	8002fc0 <UART_SetConfig+0x288>
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002faa:	d815      	bhi.n	8002fd8 <UART_SetConfig+0x2a0>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <UART_SetConfig+0x280>
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d008      	beq.n	8002fc8 <UART_SetConfig+0x290>
 8002fb6:	e00f      	b.n	8002fd8 <UART_SetConfig+0x2a0>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e048      	b.n	8003052 <UART_SetConfig+0x31a>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e044      	b.n	8003052 <UART_SetConfig+0x31a>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e040      	b.n	8003052 <UART_SetConfig+0x31a>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e03c      	b.n	8003052 <UART_SetConfig+0x31a>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fde:	e038      	b.n	8003052 <UART_SetConfig+0x31a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d12d      	bne.n	800304c <UART_SetConfig+0x314>
 8002ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003000:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003004:	d01a      	beq.n	800303c <UART_SetConfig+0x304>
 8003006:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800300a:	d81b      	bhi.n	8003044 <UART_SetConfig+0x30c>
 800300c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003010:	d00c      	beq.n	800302c <UART_SetConfig+0x2f4>
 8003012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003016:	d815      	bhi.n	8003044 <UART_SetConfig+0x30c>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <UART_SetConfig+0x2ec>
 800301c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003020:	d008      	beq.n	8003034 <UART_SetConfig+0x2fc>
 8003022:	e00f      	b.n	8003044 <UART_SetConfig+0x30c>
 8003024:	2300      	movs	r3, #0
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302a:	e012      	b.n	8003052 <UART_SetConfig+0x31a>
 800302c:	2302      	movs	r3, #2
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003032:	e00e      	b.n	8003052 <UART_SetConfig+0x31a>
 8003034:	2304      	movs	r3, #4
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303a:	e00a      	b.n	8003052 <UART_SetConfig+0x31a>
 800303c:	2308      	movs	r3, #8
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003042:	e006      	b.n	8003052 <UART_SetConfig+0x31a>
 8003044:	2310      	movs	r3, #16
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304a:	e002      	b.n	8003052 <UART_SetConfig+0x31a>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800305e:	429a      	cmp	r2, r3
 8003060:	d17c      	bne.n	800315c <UART_SetConfig+0x424>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003066:	2b08      	cmp	r3, #8
 8003068:	d826      	bhi.n	80030b8 <UART_SetConfig+0x380>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <UART_SetConfig+0x338>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003095 	.word	0x08003095
 8003074:	080030b9 	.word	0x080030b9
 8003078:	0800309d 	.word	0x0800309d
 800307c:	080030b9 	.word	0x080030b9
 8003080:	080030a9 	.word	0x080030a9
 8003084:	080030b9 	.word	0x080030b9
 8003088:	080030b9 	.word	0x080030b9
 800308c:	080030b9 	.word	0x080030b9
 8003090:	080030b1 	.word	0x080030b1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003094:	f7fe ff5e 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8003098:	61f8      	str	r0, [r7, #28]
        break;
 800309a:	e013      	b.n	80030c4 <UART_SetConfig+0x38c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80030a0:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80030a4:	61fb      	str	r3, [r7, #28]
        break;
 80030a6:	e00d      	b.n	80030c4 <UART_SetConfig+0x38c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a8:	f7fe fe9b 	bl	8001de2 <HAL_RCC_GetSysClockFreq>
 80030ac:	61f8      	str	r0, [r7, #28]
        break;
 80030ae:	e009      	b.n	80030c4 <UART_SetConfig+0x38c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b4:	61fb      	str	r3, [r7, #28]
        break;
 80030b6:	e005      	b.n	80030c4 <UART_SetConfig+0x38c>
      default:
        pclk = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8101 	beq.w	80032ce <UART_SetConfig+0x596>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d305      	bcc.n	80030e8 <UART_SetConfig+0x3b0>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d903      	bls.n	80030f0 <UART_SetConfig+0x3b8>
      {
        ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030ee:	e0ee      	b.n	80032ce <UART_SetConfig+0x596>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2200      	movs	r2, #0
 80030f4:	461c      	mov	r4, r3
 80030f6:	4615      	mov	r5, r2
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	022b      	lsls	r3, r5, #8
 8003102:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003106:	0222      	lsls	r2, r4, #8
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	6849      	ldr	r1, [r1, #4]
 800310c:	0849      	lsrs	r1, r1, #1
 800310e:	2000      	movs	r0, #0
 8003110:	4688      	mov	r8, r1
 8003112:	4681      	mov	r9, r0
 8003114:	eb12 0a08 	adds.w	sl, r2, r8
 8003118:	eb43 0b09 	adc.w	fp, r3, r9
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800312a:	4650      	mov	r0, sl
 800312c:	4659      	mov	r1, fp
 800312e:	f7fd f84b 	bl	80001c8 <__aeabi_uldivmod>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4613      	mov	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003140:	d308      	bcc.n	8003154 <UART_SetConfig+0x41c>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003148:	d204      	bcs.n	8003154 <UART_SetConfig+0x41c>
        {
          huart->Instance->BRR = usartdiv;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	e0bc      	b.n	80032ce <UART_SetConfig+0x596>
        }
        else
        {
          ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800315a:	e0b8      	b.n	80032ce <UART_SetConfig+0x596>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003164:	d160      	bne.n	8003228 <UART_SetConfig+0x4f0>
  {
    switch (clocksource)
 8003166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800316a:	2b08      	cmp	r3, #8
 800316c:	d82a      	bhi.n	80031c4 <UART_SetConfig+0x48c>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <UART_SetConfig+0x43c>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	08003199 	.word	0x08003199
 8003178:	080031a1 	.word	0x080031a1
 800317c:	080031a9 	.word	0x080031a9
 8003180:	080031c5 	.word	0x080031c5
 8003184:	080031b5 	.word	0x080031b5
 8003188:	080031c5 	.word	0x080031c5
 800318c:	080031c5 	.word	0x080031c5
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080031bd 	.word	0x080031bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003198:	f7fe fedc 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 800319c:	61f8      	str	r0, [r7, #28]
        break;
 800319e:	e017      	b.n	80031d0 <UART_SetConfig+0x498>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a0:	f7fe fef0 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 80031a4:	61f8      	str	r0, [r7, #28]
        break;
 80031a6:	e013      	b.n	80031d0 <UART_SetConfig+0x498>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031a8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80031ac:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80031b0:	61fb      	str	r3, [r7, #28]
        break;
 80031b2:	e00d      	b.n	80031d0 <UART_SetConfig+0x498>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b4:	f7fe fe15 	bl	8001de2 <HAL_RCC_GetSysClockFreq>
 80031b8:	61f8      	str	r0, [r7, #28]
        break;
 80031ba:	e009      	b.n	80031d0 <UART_SetConfig+0x498>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c0:	61fb      	str	r3, [r7, #28]
        break;
 80031c2:	e005      	b.n	80031d0 <UART_SetConfig+0x498>
      default:
        pclk = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d07b      	beq.n	80032ce <UART_SetConfig+0x596>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	005a      	lsls	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	085b      	lsrs	r3, r3, #1
 80031e0:	441a      	add	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	d916      	bls.n	8003220 <UART_SetConfig+0x4e8>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d212      	bcs.n	8003220 <UART_SetConfig+0x4e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f023 030f 	bic.w	r3, r3, #15
 8003202:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	b29a      	uxth	r2, r3
 8003210:	8afb      	ldrh	r3, [r7, #22]
 8003212:	4313      	orrs	r3, r2
 8003214:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	8afa      	ldrh	r2, [r7, #22]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e056      	b.n	80032ce <UART_SetConfig+0x596>
      }
      else
      {
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003226:	e052      	b.n	80032ce <UART_SetConfig+0x596>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322c:	2b08      	cmp	r3, #8
 800322e:	d82b      	bhi.n	8003288 <UART_SetConfig+0x550>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <UART_SetConfig+0x500>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003265 	.word	0x08003265
 8003240:	0800326d 	.word	0x0800326d
 8003244:	08003289 	.word	0x08003289
 8003248:	08003279 	.word	0x08003279
 800324c:	08003289 	.word	0x08003289
 8003250:	08003289 	.word	0x08003289
 8003254:	08003289 	.word	0x08003289
 8003258:	08003281 	.word	0x08003281
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7fe fe7a 	bl	8001f54 <HAL_RCC_GetPCLK1Freq>
 8003260:	61f8      	str	r0, [r7, #28]
        break;
 8003262:	e017      	b.n	8003294 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7fe fe8e 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8003268:	61f8      	str	r0, [r7, #28]
        break;
 800326a:	e013      	b.n	8003294 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003270:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003274:	61fb      	str	r3, [r7, #28]
        break;
 8003276:	e00d      	b.n	8003294 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003278:	f7fe fdb3 	bl	8001de2 <HAL_RCC_GetSysClockFreq>
 800327c:	61f8      	str	r0, [r7, #28]
        break;
 800327e:	e009      	b.n	8003294 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003284:	61fb      	str	r3, [r7, #28]
        break;
 8003286:	e005      	b.n	8003294 <UART_SetConfig+0x55c>
      default:
        pclk = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003292:	bf00      	nop
    }

    if (pclk != 0U)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d019      	beq.n	80032ce <UART_SetConfig+0x596>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	085a      	lsrs	r2, r3, #1
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	441a      	add	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b0f      	cmp	r3, #15
 80032b2:	d909      	bls.n	80032c8 <UART_SetConfig+0x590>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ba:	d205      	bcs.n	80032c8 <UART_SetConfig+0x590>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60da      	str	r2, [r3, #12]
 80032c6:	e002      	b.n	80032ce <UART_SetConfig+0x596>
      }
      else
      {
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01a      	beq.n	80033fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e6:	d10a      	bne.n	80033fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800343c:	f7fd fb04 	bl	8000a48 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b08      	cmp	r3, #8
 800344e:	d10e      	bne.n	800346e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f82d 	bl	80034be <UART_WaitOnFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e023      	b.n	80034b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d10e      	bne.n	800349a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800347c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f817 	bl	80034be <UART_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e00d      	b.n	80034b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b09c      	sub	sp, #112	; 0x70
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	603b      	str	r3, [r7, #0]
 80034ca:	4613      	mov	r3, r2
 80034cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ce:	e0a5      	b.n	800361c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d6:	f000 80a1 	beq.w	800361c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fd fab5 	bl	8000a48 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80034ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13e      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003500:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003504:	667b      	str	r3, [r7, #100]	; 0x64
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003510:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003514:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800351c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e6      	bne.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3308      	adds	r3, #8
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	663b      	str	r3, [r7, #96]	; 0x60
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3308      	adds	r3, #8
 8003540:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003542:	64ba      	str	r2, [r7, #72]	; 0x48
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e5      	bne.n	8003522 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e067      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d04f      	beq.n	800361c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d147      	bne.n	800361c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
 80035b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e6      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3308      	adds	r3, #8
 80035ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	613b      	str	r3, [r7, #16]
   return(result);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	66bb      	str	r3, [r7, #104]	; 0x68
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3308      	adds	r3, #8
 80035e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035e8:	623a      	str	r2, [r7, #32]
 80035ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	69f9      	ldr	r1, [r7, #28]
 80035ee:	6a3a      	ldr	r2, [r7, #32]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e010      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	429a      	cmp	r2, r3
 8003638:	f43f af4a 	beq.w	80034d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3770      	adds	r7, #112	; 0x70
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <__libc_init_array>:
 8003648:	b570      	push	{r4, r5, r6, lr}
 800364a:	4d0d      	ldr	r5, [pc, #52]	; (8003680 <__libc_init_array+0x38>)
 800364c:	4c0d      	ldr	r4, [pc, #52]	; (8003684 <__libc_init_array+0x3c>)
 800364e:	1b64      	subs	r4, r4, r5
 8003650:	10a4      	asrs	r4, r4, #2
 8003652:	2600      	movs	r6, #0
 8003654:	42a6      	cmp	r6, r4
 8003656:	d109      	bne.n	800366c <__libc_init_array+0x24>
 8003658:	4d0b      	ldr	r5, [pc, #44]	; (8003688 <__libc_init_array+0x40>)
 800365a:	4c0c      	ldr	r4, [pc, #48]	; (800368c <__libc_init_array+0x44>)
 800365c:	f000 f820 	bl	80036a0 <_init>
 8003660:	1b64      	subs	r4, r4, r5
 8003662:	10a4      	asrs	r4, r4, #2
 8003664:	2600      	movs	r6, #0
 8003666:	42a6      	cmp	r6, r4
 8003668:	d105      	bne.n	8003676 <__libc_init_array+0x2e>
 800366a:	bd70      	pop	{r4, r5, r6, pc}
 800366c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003670:	4798      	blx	r3
 8003672:	3601      	adds	r6, #1
 8003674:	e7ee      	b.n	8003654 <__libc_init_array+0xc>
 8003676:	f855 3b04 	ldr.w	r3, [r5], #4
 800367a:	4798      	blx	r3
 800367c:	3601      	adds	r6, #1
 800367e:	e7f2      	b.n	8003666 <__libc_init_array+0x1e>
 8003680:	08003708 	.word	0x08003708
 8003684:	08003708 	.word	0x08003708
 8003688:	08003708 	.word	0x08003708
 800368c:	0800370c 	.word	0x0800370c

08003690 <memset>:
 8003690:	4402      	add	r2, r0
 8003692:	4603      	mov	r3, r0
 8003694:	4293      	cmp	r3, r2
 8003696:	d100      	bne.n	800369a <memset+0xa>
 8003698:	4770      	bx	lr
 800369a:	f803 1b01 	strb.w	r1, [r3], #1
 800369e:	e7f9      	b.n	8003694 <memset+0x4>

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
